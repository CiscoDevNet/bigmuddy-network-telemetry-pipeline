// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry.proto

/*
Package telemetry is a generated protocol buffer package.

Package with obsolete definition of Model Driven Telemetry GPB format message.

It is generated from these files:
	telemetry.proto

It has these top-level messages:
	TelemetryHeader
	TelemetryTable
*/
package telemetry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TelemetryHeader struct {
	Encoding   uint32            `protobuf:"varint,1,opt,name=encoding" json:"encoding,omitempty"`
	PolicyName string            `protobuf:"bytes,2,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
	Version    string            `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Identifier string            `protobuf:"bytes,4,opt,name=identifier" json:"identifier,omitempty"`
	StartTime  uint64            `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime    uint64            `protobuf:"varint,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Tables     []*TelemetryTable `protobuf:"bytes,7,rep,name=tables" json:"tables,omitempty"`
}

func (m *TelemetryHeader) Reset()                    { *m = TelemetryHeader{} }
func (m *TelemetryHeader) String() string            { return proto.CompactTextString(m) }
func (*TelemetryHeader) ProtoMessage()               {}
func (*TelemetryHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TelemetryHeader) GetEncoding() uint32 {
	if m != nil {
		return m.Encoding
	}
	return 0
}

func (m *TelemetryHeader) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *TelemetryHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TelemetryHeader) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *TelemetryHeader) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TelemetryHeader) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *TelemetryHeader) GetTables() []*TelemetryTable {
	if m != nil {
		return m.Tables
	}
	return nil
}

type TelemetryTable struct {
	PolicyPath string   `protobuf:"bytes,1,opt,name=policy_path,json=policyPath" json:"policy_path,omitempty"`
	Row        [][]byte `protobuf:"bytes,2,rep,name=row,proto3" json:"row,omitempty"`
}

func (m *TelemetryTable) Reset()                    { *m = TelemetryTable{} }
func (m *TelemetryTable) String() string            { return proto.CompactTextString(m) }
func (*TelemetryTable) ProtoMessage()               {}
func (*TelemetryTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TelemetryTable) GetPolicyPath() string {
	if m != nil {
		return m.PolicyPath
	}
	return ""
}

func (m *TelemetryTable) GetRow() [][]byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func init() {
	proto.RegisterType((*TelemetryHeader)(nil), "telemetry.TelemetryHeader")
	proto.RegisterType((*TelemetryTable)(nil), "telemetry.TelemetryTable")
}

func init() { proto.RegisterFile("telemetry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xc9, 0x3a, 0x57, 0xfb, 0x4d, 0x9d, 0xe4, 0x94, 0x09, 0x6a, 0xd8, 0x29, 0xa7, 0x81,
	0xfa, 0x13, 0xbc, 0x78, 0x12, 0x09, 0xbd, 0x8f, 0x6c, 0xf9, 0x74, 0x81, 0x26, 0x29, 0xe9, 0x87,
	0xb2, 0x1f, 0xee, 0x5d, 0x9a, 0xba, 0x4e, 0x6f, 0x79, 0xdf, 0xe7, 0x0d, 0xe4, 0x09, 0x2c, 0x08,
	0x1b, 0xf4, 0x48, 0xe9, 0xb0, 0x6e, 0x53, 0xa4, 0xc8, 0xab, 0xb1, 0x58, 0x7d, 0x33, 0x58, 0xd4,
	0xc7, 0xf4, 0x82, 0xc6, 0x62, 0xe2, 0x37, 0x70, 0x8e, 0x61, 0x17, 0xad, 0x0b, 0x1f, 0x82, 0x49,
	0xa6, 0x2e, 0xf5, 0x98, 0xf9, 0x3d, 0xcc, 0xdb, 0xd8, 0xb8, 0xdd, 0x61, 0x13, 0x8c, 0x47, 0x31,
	0x91, 0x4c, 0x55, 0x1a, 0x86, 0xea, 0xd5, 0x78, 0xe4, 0x02, 0xca, 0x4f, 0x4c, 0x9d, 0x8b, 0x41,
	0x14, 0x19, 0x1e, 0x23, 0xbf, 0x03, 0x70, 0x16, 0x03, 0xb9, 0x77, 0x87, 0x49, 0x4c, 0x87, 0x9b,
	0xa7, 0x86, 0xdf, 0x02, 0x74, 0x64, 0x12, 0x6d, 0xc8, 0x79, 0x14, 0x67, 0x92, 0xa9, 0xa9, 0xae,
	0x72, 0x53, 0x3b, 0x8f, 0x7c, 0xd9, 0xbf, 0xca, 0x0e, 0x70, 0x96, 0x61, 0x89, 0xc1, 0x66, 0xf4,
	0x00, 0x33, 0x32, 0xdb, 0x06, 0x3b, 0x51, 0xca, 0x42, 0xcd, 0x1f, 0x97, 0xeb, 0x93, 0xf1, 0x28,
	0x57, 0xf7, 0x0b, 0xfd, 0x3b, 0x5c, 0x3d, 0xc3, 0xd5, 0x7f, 0xf2, 0xc7, 0xac, 0x35, 0xb4, 0xcf,
	0xe2, 0xa3, 0xd9, 0x9b, 0xa1, 0x3d, 0xbf, 0x86, 0x22, 0xc5, 0x2f, 0x31, 0x91, 0x85, 0xba, 0xd0,
	0xfd, 0x71, 0x3b, 0xcb, 0xdf, 0xf9, 0xf4, 0x13, 0x00, 0x00, 0xff, 0xff, 0x57, 0xbd, 0xf1, 0xc1,
	0x61, 0x01, 0x00, 0x00,
}
