// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mdt_sensor_group.proto

/*
Package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_sensor_groups_sensor_group is a generated protocol buffer package.

It is generated from these files:
	mdt_sensor_group.proto

It has these top-level messages:
	MdtSensorGroup_KEYS
	MdtSensorGroup
	MdtSensorPaths
*/
package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_sensor_groups_sensor_group

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Per sensor group information
type MdtSensorGroup_KEYS struct {
	SensorGroupId string `protobuf:"bytes,1,opt,name=sensor_group_id,json=sensorGroupId" json:"sensor_group_id,omitempty"`
}

func (m *MdtSensorGroup_KEYS) Reset()                    { *m = MdtSensorGroup_KEYS{} }
func (m *MdtSensorGroup_KEYS) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorGroup_KEYS) ProtoMessage()               {}
func (*MdtSensorGroup_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MdtSensorGroup_KEYS) GetSensorGroupId() string {
	if m != nil {
		return m.SensorGroupId
	}
	return ""
}

type MdtSensorGroup struct {
	// Sensor Group name
	Id string `protobuf:"bytes,50,opt,name=id" json:"id,omitempty"`
	// Set if this is configured sensor group
	Configured uint32 `protobuf:"varint,51,opt,name=configured" json:"configured,omitempty"`
	// Array of information for sensor paths within sensor group
	SensorPaths []*MdtSensorPaths `protobuf:"bytes,52,rep,name=sensor_paths,json=sensorPaths" json:"sensor_paths,omitempty"`
}

func (m *MdtSensorGroup) Reset()                    { *m = MdtSensorGroup{} }
func (m *MdtSensorGroup) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorGroup) ProtoMessage()               {}
func (*MdtSensorGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MdtSensorGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtSensorGroup) GetConfigured() uint32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *MdtSensorGroup) GetSensorPaths() []*MdtSensorPaths {
	if m != nil {
		return m.SensorPaths
	}
	return nil
}

// Sensor Path information
type MdtSensorPaths struct {
	// Sensor Path
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// State, if sensor path is resolved or not
	State uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	// Error str, if there are any errors resolving the sensor path
	StatusStr string `protobuf:"bytes,3,opt,name=status_str,json=statusStr" json:"status_str,omitempty"`
}

func (m *MdtSensorPaths) Reset()                    { *m = MdtSensorPaths{} }
func (m *MdtSensorPaths) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorPaths) ProtoMessage()               {}
func (*MdtSensorPaths) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MdtSensorPaths) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MdtSensorPaths) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MdtSensorPaths) GetStatusStr() string {
	if m != nil {
		return m.StatusStr
	}
	return ""
}

func init() {
	proto.RegisterType((*MdtSensorGroup_KEYS)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_group_KEYS")
	proto.RegisterType((*MdtSensorGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_group")
	proto.RegisterType((*MdtSensorPaths)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_paths")
}

func init() { proto.RegisterFile("mdt_sensor_group.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0x14, 0x90, 0x7a, 0xa5, 0x80, 0x2c, 0x40, 0x5e, 0x40, 0x51, 0x06, 0x94, 0xc9,
	0x43, 0xcb, 0xce, 0x84, 0x10, 0x62, 0x41, 0xe9, 0x04, 0x0c, 0xa7, 0x12, 0x9b, 0x62, 0x29, 0x89,
	0xa3, 0xf3, 0x05, 0xc1, 0xaf, 0xe0, 0xcf, 0xf1, 0x83, 0x50, 0x9c, 0x0e, 0x49, 0xc5, 0xca, 0x76,
	0xef, 0xf3, 0xd3, 0x3b, 0x3f, 0x1b, 0xce, 0x2b, 0xcd, 0xe8, 0x4d, 0xed, 0x1d, 0xe1, 0x86, 0x5c,
	0xdb, 0xa8, 0x86, 0x1c, 0x3b, 0xf1, 0x5c, 0x58, 0x5f, 0x38, 0xb4, 0xce, 0xe3, 0x27, 0x21, 0x9b,
	0xd2, 0x54, 0x86, 0xe9, 0x0b, 0x2b, 0xa7, 0x4d, 0x89, 0x9a, 0xec, 0x87, 0xa9, 0xd1, 0x35, 0x86,
	0xd4, 0xdf, 0x67, 0x6a, 0x98, 0xe9, 0x47, 0x2a, 0xbd, 0x81, 0xb3, 0xdd, 0xad, 0xf8, 0x70, 0xfb,
	0xb4, 0x12, 0x57, 0x70, 0x3c, 0x82, 0x56, 0xcb, 0x28, 0x89, 0xb2, 0x69, 0x3e, 0xef, 0xf1, 0x5d,
	0x47, 0xef, 0x75, 0xfa, 0x13, 0xc1, 0xc9, 0x6e, 0x82, 0x38, 0x82, 0xd8, 0x6a, 0xb9, 0x08, 0xfe,
	0xd8, 0x6a, 0x71, 0x09, 0x50, 0xb8, 0xfa, 0xcd, 0x6e, 0x5a, 0x32, 0x5a, 0x2e, 0x93, 0x28, 0x9b,
	0xe7, 0x03, 0x22, 0xbe, 0x23, 0x38, 0xdc, 0x06, 0x34, 0x6b, 0x7e, 0xf7, 0xf2, 0x3a, 0x99, 0x64,
	0xb3, 0x45, 0xa9, 0xfe, 0xaf, 0xb9, 0x1a, 0x5c, 0x3a, 0xec, 0xcc, 0x67, 0xbd, 0x7a, 0xec, 0x44,
	0xfa, 0x32, 0x6a, 0x15, 0x0c, 0x42, 0xc0, 0x5e, 0x37, 0x6c, 0xdf, 0x21, 0xcc, 0xe2, 0x14, 0xf6,
	0x3d, 0xaf, 0xd9, 0xc8, 0x38, 0x94, 0xea, 0x85, 0xb8, 0x00, 0xe8, 0x86, 0xd6, 0xa3, 0x67, 0x92,
	0x93, 0xe0, 0x9f, 0xf6, 0x64, 0xc5, 0xf4, 0x7a, 0x10, 0xfe, 0x75, 0xf9, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x75, 0x76, 0x03, 0xf1, 0x01, 0x00, 0x00,
}
