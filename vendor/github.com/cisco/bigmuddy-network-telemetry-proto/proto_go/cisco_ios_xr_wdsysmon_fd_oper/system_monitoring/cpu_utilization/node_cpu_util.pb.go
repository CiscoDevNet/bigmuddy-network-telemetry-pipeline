// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node_cpu_util.proto

/*
Package cisco_ios_xr_wdsysmon_fd_oper_system_monitoring_cpu_utilization is a generated protocol buffer package.

It is generated from these files:
	node_cpu_util.proto

It has these top-level messages:
	NodeCpuUtil_KEYS
	NodeCpuUtil
	ProcessCpuUtil
*/
package cisco_ios_xr_wdsysmon_fd_oper_system_monitoring_cpu_utilization

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Node CPU utilization information
type NodeCpuUtil_KEYS struct {
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
}

func (m *NodeCpuUtil_KEYS) Reset()                    { *m = NodeCpuUtil_KEYS{} }
func (m *NodeCpuUtil_KEYS) String() string            { return proto.CompactTextString(m) }
func (*NodeCpuUtil_KEYS) ProtoMessage()               {}
func (*NodeCpuUtil_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeCpuUtil_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type NodeCpuUtil struct {
	// Total CPU utilization in past 1 minute
	TotalCpuOneMinute uint32 `protobuf:"varint,50,opt,name=total_cpu_one_minute,json=totalCpuOneMinute" json:"total_cpu_one_minute,omitempty"`
	// Total CPU utilization in past 5 minute
	TotalCpuFiveMinute uint32 `protobuf:"varint,51,opt,name=total_cpu_five_minute,json=totalCpuFiveMinute" json:"total_cpu_five_minute,omitempty"`
	// Total CPU utilization in past 15 minute
	TotalCpuFifteenMinute uint32 `protobuf:"varint,52,opt,name=total_cpu_fifteen_minute,json=totalCpuFifteenMinute" json:"total_cpu_fifteen_minute,omitempty"`
	// Per process CPU utilization
	ProcessCpu []*ProcessCpuUtil `protobuf:"bytes,53,rep,name=process_cpu,json=processCpu" json:"process_cpu,omitempty"`
}

func (m *NodeCpuUtil) Reset()                    { *m = NodeCpuUtil{} }
func (m *NodeCpuUtil) String() string            { return proto.CompactTextString(m) }
func (*NodeCpuUtil) ProtoMessage()               {}
func (*NodeCpuUtil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeCpuUtil) GetTotalCpuOneMinute() uint32 {
	if m != nil {
		return m.TotalCpuOneMinute
	}
	return 0
}

func (m *NodeCpuUtil) GetTotalCpuFiveMinute() uint32 {
	if m != nil {
		return m.TotalCpuFiveMinute
	}
	return 0
}

func (m *NodeCpuUtil) GetTotalCpuFifteenMinute() uint32 {
	if m != nil {
		return m.TotalCpuFifteenMinute
	}
	return 0
}

func (m *NodeCpuUtil) GetProcessCpu() []*ProcessCpuUtil {
	if m != nil {
		return m.ProcessCpu
	}
	return nil
}

// Process CPU utilization information
type ProcessCpuUtil struct {
	// Process name
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	// Process ID
	ProcessId uint32 `protobuf:"varint,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	// Process CPU utilization in percent for past 1 minute
	ProcessCpuOneMinute uint32 `protobuf:"varint,3,opt,name=process_cpu_one_minute,json=processCpuOneMinute" json:"process_cpu_one_minute,omitempty"`
	// Process CPU utilization in percent for past 5 minute
	ProcessCpuFiveMinute uint32 `protobuf:"varint,4,opt,name=process_cpu_five_minute,json=processCpuFiveMinute" json:"process_cpu_five_minute,omitempty"`
	// Process CPU utilization in percent for past 15 minute
	ProcessCpuFifteenMinute uint32 `protobuf:"varint,5,opt,name=process_cpu_fifteen_minute,json=processCpuFifteenMinute" json:"process_cpu_fifteen_minute,omitempty"`
}

func (m *ProcessCpuUtil) Reset()                    { *m = ProcessCpuUtil{} }
func (m *ProcessCpuUtil) String() string            { return proto.CompactTextString(m) }
func (*ProcessCpuUtil) ProtoMessage()               {}
func (*ProcessCpuUtil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProcessCpuUtil) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *ProcessCpuUtil) GetProcessId() uint32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *ProcessCpuUtil) GetProcessCpuOneMinute() uint32 {
	if m != nil {
		return m.ProcessCpuOneMinute
	}
	return 0
}

func (m *ProcessCpuUtil) GetProcessCpuFiveMinute() uint32 {
	if m != nil {
		return m.ProcessCpuFiveMinute
	}
	return 0
}

func (m *ProcessCpuUtil) GetProcessCpuFifteenMinute() uint32 {
	if m != nil {
		return m.ProcessCpuFifteenMinute
	}
	return 0
}

func init() {
	proto.RegisterType((*NodeCpuUtil_KEYS)(nil), "cisco_ios_xr_wdsysmon_fd_oper.system_monitoring.cpu_utilization.node_cpu_util_KEYS")
	proto.RegisterType((*NodeCpuUtil)(nil), "cisco_ios_xr_wdsysmon_fd_oper.system_monitoring.cpu_utilization.node_cpu_util")
	proto.RegisterType((*ProcessCpuUtil)(nil), "cisco_ios_xr_wdsysmon_fd_oper.system_monitoring.cpu_utilization.process_cpu_util")
}

func init() { proto.RegisterFile("node_cpu_util.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0xd2, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0x60, 0xd2, 0xaa, 0xd8, 0xa9, 0x05, 0xdd, 0xb6, 0x36, 0x28, 0x42, 0xed, 0xa9, 0xa7,
	0x48, 0x5b, 0x8b, 0x07, 0x0f, 0x1e, 0x8a, 0x82, 0x88, 0x8a, 0xf5, 0xe4, 0x69, 0x89, 0xc9, 0x56,
	0x16, 0x9a, 0x9d, 0x90, 0xdd, 0x54, 0xeb, 0xd3, 0xf8, 0xa2, 0x82, 0x74, 0xc8, 0x9a, 0x8d, 0x57,
	0xaf, 0xff, 0xec, 0x37, 0x4c, 0x7e, 0x02, 0x6d, 0x85, 0xb1, 0xe0, 0x51, 0x9a, 0xf3, 0xdc, 0xc8,
	0x65, 0x90, 0x66, 0x68, 0x90, 0x5d, 0x45, 0x52, 0x47, 0xc8, 0x25, 0x6a, 0xfe, 0x91, 0xf1, 0xf7,
	0x58, 0xaf, 0x75, 0x82, 0x8a, 0x2f, 0x62, 0x8e, 0xa9, 0xc8, 0x02, 0xbd, 0xd6, 0x46, 0x24, 0x3c,
	0x41, 0x25, 0x0d, 0x66, 0x52, 0xbd, 0x05, 0xd6, 0xcb, 0xcf, 0xd0, 0x48, 0x54, 0x83, 0x11, 0xb0,
	0xca, 0x5e, 0x7e, 0x77, 0xfd, 0xf2, 0xcc, 0x8e, 0xa1, 0x41, 0xa9, 0x0a, 0x13, 0xe1, 0x7b, 0x7d,
	0x6f, 0xd8, 0x98, 0xef, 0x6e, 0x82, 0x87, 0x30, 0x11, 0x83, 0xaf, 0x1a, 0xb4, 0x2a, 0x86, 0x9d,
	0x41, 0xc7, 0xa0, 0x09, 0x97, 0x94, 0xa0, 0x12, 0x3c, 0x91, 0x2a, 0x37, 0xc2, 0x1f, 0xf7, 0xbd,
	0x61, 0x6b, 0x7e, 0x40, 0xb3, 0x59, 0x9a, 0x3f, 0x2a, 0x71, 0x4f, 0x03, 0x36, 0x82, 0x6e, 0x09,
	0x16, 0x72, 0xf5, 0x2b, 0x26, 0x24, 0x98, 0x15, 0x37, 0x72, 0x65, 0xc9, 0x05, 0xf8, 0x2e, 0x59,
	0x18, 0x21, 0x94, 0x55, 0xe7, 0xa4, 0xba, 0xa5, 0xa2, 0x69, 0x01, 0x33, 0x68, 0xa6, 0x19, 0x46,
	0x42, 0xeb, 0x0d, 0xf5, 0xa7, 0xfd, 0xfa, 0xb0, 0x39, 0x7e, 0x0a, 0xfe, 0x59, 0x5c, 0xe0, 0xec,
	0xa4, 0x7c, 0x0e, 0x45, 0x32, 0x4b, 0xf3, 0xc1, 0xb7, 0x07, 0xfb, 0x7f, 0x1f, 0xb0, 0x53, 0xd8,
	0xb3, 0x99, 0xd3, 0xab, 0x3d, 0x6e, 0x53, 0x2d, 0x3b, 0x01, 0xbb, 0x85, 0xcb, 0xd8, 0xaf, 0xd1,
	0x67, 0x35, 0x8a, 0xe4, 0x36, 0x66, 0x13, 0x38, 0x74, 0xb7, 0x3a, 0x4d, 0xd7, 0xe9, 0x69, 0xbb,
	0x3c, 0xa1, 0xec, 0x7a, 0x0a, 0x3d, 0x17, 0xb9, 0x6d, 0x6f, 0x91, 0xea, 0x94, 0xca, 0xe9, 0xfb,
	0x12, 0x8e, 0xaa, 0xac, 0xd2, 0xf8, 0x36, 0xc9, 0x9e, 0x2b, 0x9d, 0xce, 0x5f, 0x77, 0xe8, 0xef,
	0x9c, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x54, 0x0e, 0xba, 0xb4, 0x02, 0x00, 0x00,
}
