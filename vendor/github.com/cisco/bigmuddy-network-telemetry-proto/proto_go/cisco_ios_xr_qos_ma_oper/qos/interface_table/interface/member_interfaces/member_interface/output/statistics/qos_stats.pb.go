// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qos_stats.proto

/*
Package cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_member_interfaces_member_interface_output_statistics is a generated protocol buffer package.

It is generated from these files:
	qos_stats.proto

It has these top-level messages:
	QosStats_KEYS
	QosStats
	PolicyParamUint32St_
	GenStatsSt
	PlcColorClassStatsSt
	PlcStatsSt
	CacStatsSt
	IphcStatsSt
	QStatsSt
	WredTypeValue
	RedProfileStats
	ClassStats
*/
package cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_member_interfaces_member_interface_output_statistics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// policy map statistics
type QosStats_KEYS struct {
	InterfaceName   string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	InterfaceName_1 string `protobuf:"bytes,2,opt,name=interface_name_1,json=interfaceName1" json:"interface_name_1,omitempty"`
}

func (m *QosStats_KEYS) Reset()                    { *m = QosStats_KEYS{} }
func (m *QosStats_KEYS) String() string            { return proto.CompactTextString(m) }
func (*QosStats_KEYS) ProtoMessage()               {}
func (*QosStats_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QosStats_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *QosStats_KEYS) GetInterfaceName_1() string {
	if m != nil {
		return m.InterfaceName_1
	}
	return ""
}

type QosStats struct {
	PolicyName       string `protobuf:"bytes,50,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
	State            string `protobuf:"bytes,51,opt,name=state" json:"state,omitempty"`
	StateDescription string `protobuf:"bytes,52,opt,name=state_description,json=stateDescription" json:"state_description,omitempty"`
	// array of classes contained in policy
	ClassStats []*ClassStats `protobuf:"bytes,53,rep,name=class_stats,json=classStats" json:"class_stats,omitempty"`
	// to maintain satellite id
	Satid uint32 `protobuf:"varint,54,opt,name=satid" json:"satid,omitempty"`
}

func (m *QosStats) Reset()                    { *m = QosStats{} }
func (m *QosStats) String() string            { return proto.CompactTextString(m) }
func (*QosStats) ProtoMessage()               {}
func (*QosStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QosStats) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *QosStats) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QosStats) GetStateDescription() string {
	if m != nil {
		return m.StateDescription
	}
	return ""
}

func (m *QosStats) GetClassStats() []*ClassStats {
	if m != nil {
		return m.ClassStats
	}
	return nil
}

func (m *QosStats) GetSatid() uint32 {
	if m != nil {
		return m.Satid
	}
	return 0
}

type PolicyParamUint32St_ struct {
	Value uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Unit  string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
}

func (m *PolicyParamUint32St_) Reset()                    { *m = PolicyParamUint32St_{} }
func (m *PolicyParamUint32St_) String() string            { return proto.CompactTextString(m) }
func (*PolicyParamUint32St_) ProtoMessage()               {}
func (*PolicyParamUint32St_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PolicyParamUint32St_) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PolicyParamUint32St_) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

// Counters common to all features
type GenStatsSt struct {
	// Transmitted packets (packets/bytes)
	TransmitPackets uint64 `protobuf:"varint,1,opt,name=transmit_packets,json=transmitPackets" json:"transmit_packets,omitempty"`
	// Transmitted bytes (packets/bytes)
	TransmitBytes uint64 `protobuf:"varint,2,opt,name=transmit_bytes,json=transmitBytes" json:"transmit_bytes,omitempty"`
	// Dropped packets (packets/bytes)
	TotalDropPackets uint64 `protobuf:"varint,3,opt,name=total_drop_packets,json=totalDropPackets" json:"total_drop_packets,omitempty"`
	// Dropped bytes (packets/bytes)
	TotalDropBytes uint64 `protobuf:"varint,4,opt,name=total_drop_bytes,json=totalDropBytes" json:"total_drop_bytes,omitempty"`
	// Total drop rate (packets/bytes)
	TotalDropRate uint32 `protobuf:"varint,5,opt,name=total_drop_rate,json=totalDropRate" json:"total_drop_rate,omitempty"`
	// Incoming matched data rate in kbps
	MatchDataRate uint32 `protobuf:"varint,6,opt,name=match_data_rate,json=matchDataRate" json:"match_data_rate,omitempty"`
	// Total transmit rate in kbps
	TotalTransmitRate uint32 `protobuf:"varint,7,opt,name=total_transmit_rate,json=totalTransmitRate" json:"total_transmit_rate,omitempty"`
	// Matched pkts before applying policy
	PrePolicyMatchedPackets uint64 `protobuf:"varint,8,opt,name=pre_policy_matched_packets,json=prePolicyMatchedPackets" json:"pre_policy_matched_packets,omitempty"`
	// Matched bytes before applying policy
	PrePolicyMatchedBytes uint64 `protobuf:"varint,9,opt,name=pre_policy_matched_bytes,json=prePolicyMatchedBytes" json:"pre_policy_matched_bytes,omitempty"`
}

func (m *GenStatsSt) Reset()                    { *m = GenStatsSt{} }
func (m *GenStatsSt) String() string            { return proto.CompactTextString(m) }
func (*GenStatsSt) ProtoMessage()               {}
func (*GenStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenStatsSt) GetTransmitPackets() uint64 {
	if m != nil {
		return m.TransmitPackets
	}
	return 0
}

func (m *GenStatsSt) GetTransmitBytes() uint64 {
	if m != nil {
		return m.TransmitBytes
	}
	return 0
}

func (m *GenStatsSt) GetTotalDropPackets() uint64 {
	if m != nil {
		return m.TotalDropPackets
	}
	return 0
}

func (m *GenStatsSt) GetTotalDropBytes() uint64 {
	if m != nil {
		return m.TotalDropBytes
	}
	return 0
}

func (m *GenStatsSt) GetTotalDropRate() uint32 {
	if m != nil {
		return m.TotalDropRate
	}
	return 0
}

func (m *GenStatsSt) GetMatchDataRate() uint32 {
	if m != nil {
		return m.MatchDataRate
	}
	return 0
}

func (m *GenStatsSt) GetTotalTransmitRate() uint32 {
	if m != nil {
		return m.TotalTransmitRate
	}
	return 0
}

func (m *GenStatsSt) GetPrePolicyMatchedPackets() uint64 {
	if m != nil {
		return m.PrePolicyMatchedPackets
	}
	return 0
}

func (m *GenStatsSt) GetPrePolicyMatchedBytes() uint64 {
	if m != nil {
		return m.PrePolicyMatchedBytes
	}
	return 0
}

// Color Aware Policer statistics
type PlcColorClassStatsSt struct {
	// Packets with classification result conform and policer result conform
	ConformClassConformPackets uint64 `protobuf:"varint,1,opt,name=conform_class_conform_packets,json=conformClassConformPackets" json:"conform_class_conform_packets,omitempty"`
	// Bytes with classification result conform and policer result conform
	ConformClassConformBytes uint64 `protobuf:"varint,2,opt,name=conform_class_conform_bytes,json=conformClassConformBytes" json:"conform_class_conform_bytes,omitempty"`
	// Conform Class Conform rate in kbps
	ConformClassConformRate uint32 `protobuf:"varint,3,opt,name=conform_class_conform_rate,json=conformClassConformRate" json:"conform_class_conform_rate,omitempty"`
	// Packets with classification result conform and policer result exceed
	ConformClassExceedPackets uint64 `protobuf:"varint,4,opt,name=conform_class_exceed_packets,json=conformClassExceedPackets" json:"conform_class_exceed_packets,omitempty"`
	// Bytes with classification result conform and policer result exceed
	ConformClassExceedBytes uint64 `protobuf:"varint,5,opt,name=conform_class_exceed_bytes,json=conformClassExceedBytes" json:"conform_class_exceed_bytes,omitempty"`
	// Conform Class Exceed rate in kbps
	ConformClassExceedRate uint32 `protobuf:"varint,6,opt,name=conform_class_exceed_rate,json=conformClassExceedRate" json:"conform_class_exceed_rate,omitempty"`
	// Packets with classification result conform and policer result violate
	ConformClassViolatePackets uint64 `protobuf:"varint,7,opt,name=conform_class_violate_packets,json=conformClassViolatePackets" json:"conform_class_violate_packets,omitempty"`
	// Bytes with classification result conform and policer result violate
	ConformClassViolateBytes uint64 `protobuf:"varint,8,opt,name=conform_class_violate_bytes,json=conformClassViolateBytes" json:"conform_class_violate_bytes,omitempty"`
	// Conform Class Violate rate in kbps
	ConformClassViolateRate uint32 `protobuf:"varint,9,opt,name=conform_class_violate_rate,json=conformClassViolateRate" json:"conform_class_violate_rate,omitempty"`
	// Packets with classification result exceed and policer result exceed
	ExceedClassExceedPackets uint64 `protobuf:"varint,10,opt,name=exceed_class_exceed_packets,json=exceedClassExceedPackets" json:"exceed_class_exceed_packets,omitempty"`
	// Bytes with classification result exceed and policer result exceed
	ExceedClassExceedBytes uint64 `protobuf:"varint,11,opt,name=exceed_class_exceed_bytes,json=exceedClassExceedBytes" json:"exceed_class_exceed_bytes,omitempty"`
	// Exceed Class Exceed rate in kbps
	ExceedClassExceedRate uint32 `protobuf:"varint,12,opt,name=exceed_class_exceed_rate,json=exceedClassExceedRate" json:"exceed_class_exceed_rate,omitempty"`
	// Packets with classification result exceed and policer result violate
	ExceedClassViolatePackets uint64 `protobuf:"varint,13,opt,name=exceed_class_violate_packets,json=exceedClassViolatePackets" json:"exceed_class_violate_packets,omitempty"`
	// Bytes with classification result exceed and policer result violate
	ExceedClassViolateBytes uint64 `protobuf:"varint,14,opt,name=exceed_class_violate_bytes,json=exceedClassViolateBytes" json:"exceed_class_violate_bytes,omitempty"`
	// Exceed Class Violate rate in kbps
	ExceedClassViolateRate uint32 `protobuf:"varint,15,opt,name=exceed_class_violate_rate,json=exceedClassViolateRate" json:"exceed_class_violate_rate,omitempty"`
	// Packets with classification result violate and policer result violate
	ViolateClassViolatePackets uint64 `protobuf:"varint,16,opt,name=violate_class_violate_packets,json=violateClassViolatePackets" json:"violate_class_violate_packets,omitempty"`
	// Bytes with classification result violate and policer result violate
	ViolateClassViolateBytes uint64 `protobuf:"varint,17,opt,name=violate_class_violate_bytes,json=violateClassViolateBytes" json:"violate_class_violate_bytes,omitempty"`
	// Violate Class Violate rate in kbps
	ViolateClassViolateRate uint32 `protobuf:"varint,18,opt,name=violate_class_violate_rate,json=violateClassViolateRate" json:"violate_class_violate_rate,omitempty"`
}

func (m *PlcColorClassStatsSt) Reset()                    { *m = PlcColorClassStatsSt{} }
func (m *PlcColorClassStatsSt) String() string            { return proto.CompactTextString(m) }
func (*PlcColorClassStatsSt) ProtoMessage()               {}
func (*PlcColorClassStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlcColorClassStatsSt) GetConformClassConformPackets() uint64 {
	if m != nil {
		return m.ConformClassConformPackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassConformBytes() uint64 {
	if m != nil {
		return m.ConformClassConformBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassConformRate() uint32 {
	if m != nil {
		return m.ConformClassConformRate
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassExceedPackets() uint64 {
	if m != nil {
		return m.ConformClassExceedPackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassExceedBytes() uint64 {
	if m != nil {
		return m.ConformClassExceedBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassExceedRate() uint32 {
	if m != nil {
		return m.ConformClassExceedRate
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassViolatePackets() uint64 {
	if m != nil {
		return m.ConformClassViolatePackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassViolateBytes() uint64 {
	if m != nil {
		return m.ConformClassViolateBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetConformClassViolateRate() uint32 {
	if m != nil {
		return m.ConformClassViolateRate
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassExceedPackets() uint64 {
	if m != nil {
		return m.ExceedClassExceedPackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassExceedBytes() uint64 {
	if m != nil {
		return m.ExceedClassExceedBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassExceedRate() uint32 {
	if m != nil {
		return m.ExceedClassExceedRate
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassViolatePackets() uint64 {
	if m != nil {
		return m.ExceedClassViolatePackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassViolateBytes() uint64 {
	if m != nil {
		return m.ExceedClassViolateBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetExceedClassViolateRate() uint32 {
	if m != nil {
		return m.ExceedClassViolateRate
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetViolateClassViolatePackets() uint64 {
	if m != nil {
		return m.ViolateClassViolatePackets
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetViolateClassViolateBytes() uint64 {
	if m != nil {
		return m.ViolateClassViolateBytes
	}
	return 0
}

func (m *PlcColorClassStatsSt) GetViolateClassViolateRate() uint32 {
	if m != nil {
		return m.ViolateClassViolateRate
	}
	return 0
}

// Policer statistics
type PlcStatsSt struct {
	// Police dropped packets
	DropPackets uint64 `protobuf:"varint,1,opt,name=drop_packets,json=dropPackets" json:"drop_packets,omitempty"`
	// Police dropped bytes
	DropBytes uint64 `protobuf:"varint,2,opt,name=drop_bytes,json=dropBytes" json:"drop_bytes,omitempty"`
	// Packets that conform  to the policed rate
	ConformPackets uint64 `protobuf:"varint,3,opt,name=conform_packets,json=conformPackets" json:"conform_packets,omitempty"`
	// Bytes that conform to the policed rate
	ConformBytes uint64 `protobuf:"varint,4,opt,name=conform_bytes,json=conformBytes" json:"conform_bytes,omitempty"`
	// Packets that exceed the policed rate
	ExceedPackets uint64 `protobuf:"varint,5,opt,name=exceed_packets,json=exceedPackets" json:"exceed_packets,omitempty"`
	// Bytes that exceed  the policed rate
	ExceedBytes uint64 `protobuf:"varint,6,opt,name=exceed_bytes,json=exceedBytes" json:"exceed_bytes,omitempty"`
	// Packets violating the policed rate
	ViolatePackets uint64 `protobuf:"varint,7,opt,name=violate_packets,json=violatePackets" json:"violate_packets,omitempty"`
	// Bytes that violate the policed rate
	ViolateBytes uint64 `protobuf:"varint,8,opt,name=violate_bytes,json=violateBytes" json:"violate_bytes,omitempty"`
	// Dropped pkts by the parent policer
	ParentDropPackets uint64 `protobuf:"varint,9,opt,name=parent_drop_packets,json=parentDropPackets" json:"parent_drop_packets,omitempty"`
	// Dropped bytes by the parent policer
	ParentDropBytes uint64 `protobuf:"varint,10,opt,name=parent_drop_bytes,json=parentDropBytes" json:"parent_drop_bytes,omitempty"`
	// Conform rate in kbps
	ConformRate uint32 `protobuf:"varint,11,opt,name=conform_rate,json=conformRate" json:"conform_rate,omitempty"`
	// Exceed rate in kbps
	ExceedRate uint32 `protobuf:"varint,12,opt,name=exceed_rate,json=exceedRate" json:"exceed_rate,omitempty"`
	// Violate rate in kbps
	ViolateRate     uint32                `protobuf:"varint,13,opt,name=violate_rate,json=violateRate" json:"violate_rate,omitempty"`
	ColorClassStats *PlcColorClassStatsSt `protobuf:"bytes,14,opt,name=color_class_stats,json=colorClassStats" json:"color_class_stats,omitempty"`
}

func (m *PlcStatsSt) Reset()                    { *m = PlcStatsSt{} }
func (m *PlcStatsSt) String() string            { return proto.CompactTextString(m) }
func (*PlcStatsSt) ProtoMessage()               {}
func (*PlcStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlcStatsSt) GetDropPackets() uint64 {
	if m != nil {
		return m.DropPackets
	}
	return 0
}

func (m *PlcStatsSt) GetDropBytes() uint64 {
	if m != nil {
		return m.DropBytes
	}
	return 0
}

func (m *PlcStatsSt) GetConformPackets() uint64 {
	if m != nil {
		return m.ConformPackets
	}
	return 0
}

func (m *PlcStatsSt) GetConformBytes() uint64 {
	if m != nil {
		return m.ConformBytes
	}
	return 0
}

func (m *PlcStatsSt) GetExceedPackets() uint64 {
	if m != nil {
		return m.ExceedPackets
	}
	return 0
}

func (m *PlcStatsSt) GetExceedBytes() uint64 {
	if m != nil {
		return m.ExceedBytes
	}
	return 0
}

func (m *PlcStatsSt) GetViolatePackets() uint64 {
	if m != nil {
		return m.ViolatePackets
	}
	return 0
}

func (m *PlcStatsSt) GetViolateBytes() uint64 {
	if m != nil {
		return m.ViolateBytes
	}
	return 0
}

func (m *PlcStatsSt) GetParentDropPackets() uint64 {
	if m != nil {
		return m.ParentDropPackets
	}
	return 0
}

func (m *PlcStatsSt) GetParentDropBytes() uint64 {
	if m != nil {
		return m.ParentDropBytes
	}
	return 0
}

func (m *PlcStatsSt) GetConformRate() uint32 {
	if m != nil {
		return m.ConformRate
	}
	return 0
}

func (m *PlcStatsSt) GetExceedRate() uint32 {
	if m != nil {
		return m.ExceedRate
	}
	return 0
}

func (m *PlcStatsSt) GetViolateRate() uint32 {
	if m != nil {
		return m.ViolateRate
	}
	return 0
}

func (m *PlcStatsSt) GetColorClassStats() *PlcColorClassStatsSt {
	if m != nil {
		return m.ColorClassStats
	}
	return nil
}

// CAC statistics
type CacStatsSt struct {
	// CAC dropped packets
	DropPackets uint64 `protobuf:"varint,1,opt,name=drop_packets,json=dropPackets" json:"drop_packets,omitempty"`
	// CAC dropped bytes
	DropBytes uint64 `protobuf:"varint,2,opt,name=drop_bytes,json=dropBytes" json:"drop_bytes,omitempty"`
	// CAC dropped rate
	DropRates uint32 `protobuf:"varint,3,opt,name=drop_rates,json=dropRates" json:"drop_rates,omitempty"`
	// Admitted packets (pkts/bytes)
	Admitpackets uint64 `protobuf:"varint,4,opt,name=admitpackets" json:"admitpackets,omitempty"`
	// Admitted bytes (pkts/bytes)
	AdmitBytes uint64 `protobuf:"varint,5,opt,name=admit_bytes,json=admitBytes" json:"admit_bytes,omitempty"`
	// CAC admit rate
	AdmitRates uint32 `protobuf:"varint,6,opt,name=admit_rates,json=admitRates" json:"admit_rates,omitempty"`
}

func (m *CacStatsSt) Reset()                    { *m = CacStatsSt{} }
func (m *CacStatsSt) String() string            { return proto.CompactTextString(m) }
func (*CacStatsSt) ProtoMessage()               {}
func (*CacStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CacStatsSt) GetDropPackets() uint64 {
	if m != nil {
		return m.DropPackets
	}
	return 0
}

func (m *CacStatsSt) GetDropBytes() uint64 {
	if m != nil {
		return m.DropBytes
	}
	return 0
}

func (m *CacStatsSt) GetDropRates() uint32 {
	if m != nil {
		return m.DropRates
	}
	return 0
}

func (m *CacStatsSt) GetAdmitpackets() uint64 {
	if m != nil {
		return m.Admitpackets
	}
	return 0
}

func (m *CacStatsSt) GetAdmitBytes() uint64 {
	if m != nil {
		return m.AdmitBytes
	}
	return 0
}

func (m *CacStatsSt) GetAdmitRates() uint32 {
	if m != nil {
		return m.AdmitRates
	}
	return 0
}

// IPHC Stats
type IphcStatsSt struct {
	// TotalNum of Non tcp pkts sent
	NonTcpTotalOutPackets uint64 `protobuf:"varint,1,opt,name=non_tcp_total_out_packets,json=nonTcpTotalOutPackets" json:"non_tcp_total_out_packets,omitempty"`
	// TotalNum of Non Tcp Bytes sent
	NonTcpTotalOutBytes uint64 `protobuf:"varint,2,opt,name=non_tcp_total_out_bytes,json=nonTcpTotalOutBytes" json:"non_tcp_total_out_bytes,omitempty"`
	// Non Tcp Bytes saved due to compression
	NonTcpBytesSaved uint64 `protobuf:"varint,3,opt,name=non_tcp_bytes_saved,json=nonTcpBytesSaved" json:"non_tcp_bytes_saved,omitempty"`
	// Num of non tcp compressed pkts sent
	NonTcpCompressedPacketsOut uint64 `protobuf:"varint,4,opt,name=non_tcp_compressed_packets_out,json=nonTcpCompressedPacketsOut" json:"non_tcp_compressed_packets_out,omitempty"`
	// Compressed Non Tcp Bytes sent rate
	NonTcpBytesSentRate uint32 `protobuf:"varint,5,opt,name=non_tcp_bytes_sent_rate,json=nonTcpBytesSentRate" json:"non_tcp_bytes_sent_rate,omitempty"`
	// Num of non tcp fullheader pkts sent
	NonTcpFullHeaderPacketsOut uint64 `protobuf:"varint,6,opt,name=non_tcp_full_header_packets_out,json=nonTcpFullHeaderPacketsOut" json:"non_tcp_full_header_packets_out,omitempty"`
	// Total Num of tcp pkts sent
	TcpTotalOutPackets uint64 `protobuf:"varint,7,opt,name=tcp_total_out_packets,json=tcpTotalOutPackets" json:"tcp_total_out_packets,omitempty"`
	// TotalNum of Tcp Bytes sent
	TcpTotalOutBytes uint64 `protobuf:"varint,8,opt,name=tcp_total_out_bytes,json=tcpTotalOutBytes" json:"tcp_total_out_bytes,omitempty"`
	// Tcp Bytes saved due to compression
	TcpBytesSaved uint64 `protobuf:"varint,9,opt,name=tcp_bytes_saved,json=tcpBytesSaved" json:"tcp_bytes_saved,omitempty"`
	// Num of tcp compressed pkts sent
	TcpCompressedPacketsOut uint64 `protobuf:"varint,10,opt,name=tcp_compressed_packets_out,json=tcpCompressedPacketsOut" json:"tcp_compressed_packets_out,omitempty"`
	// Compressed Tcp Bytes sent rate
	TcpBytesSentRate uint32 `protobuf:"varint,11,opt,name=tcp_bytes_sent_rate,json=tcpBytesSentRate" json:"tcp_bytes_sent_rate,omitempty"`
	// Num of tcp fullheader pkts sent
	TcpFullHeaderPacketsOut uint64 `protobuf:"varint,12,opt,name=tcp_full_header_packets_out,json=tcpFullHeaderPacketsOut" json:"tcp_full_header_packets_out,omitempty"`
}

func (m *IphcStatsSt) Reset()                    { *m = IphcStatsSt{} }
func (m *IphcStatsSt) String() string            { return proto.CompactTextString(m) }
func (*IphcStatsSt) ProtoMessage()               {}
func (*IphcStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IphcStatsSt) GetNonTcpTotalOutPackets() uint64 {
	if m != nil {
		return m.NonTcpTotalOutPackets
	}
	return 0
}

func (m *IphcStatsSt) GetNonTcpTotalOutBytes() uint64 {
	if m != nil {
		return m.NonTcpTotalOutBytes
	}
	return 0
}

func (m *IphcStatsSt) GetNonTcpBytesSaved() uint64 {
	if m != nil {
		return m.NonTcpBytesSaved
	}
	return 0
}

func (m *IphcStatsSt) GetNonTcpCompressedPacketsOut() uint64 {
	if m != nil {
		return m.NonTcpCompressedPacketsOut
	}
	return 0
}

func (m *IphcStatsSt) GetNonTcpBytesSentRate() uint32 {
	if m != nil {
		return m.NonTcpBytesSentRate
	}
	return 0
}

func (m *IphcStatsSt) GetNonTcpFullHeaderPacketsOut() uint64 {
	if m != nil {
		return m.NonTcpFullHeaderPacketsOut
	}
	return 0
}

func (m *IphcStatsSt) GetTcpTotalOutPackets() uint64 {
	if m != nil {
		return m.TcpTotalOutPackets
	}
	return 0
}

func (m *IphcStatsSt) GetTcpTotalOutBytes() uint64 {
	if m != nil {
		return m.TcpTotalOutBytes
	}
	return 0
}

func (m *IphcStatsSt) GetTcpBytesSaved() uint64 {
	if m != nil {
		return m.TcpBytesSaved
	}
	return 0
}

func (m *IphcStatsSt) GetTcpCompressedPacketsOut() uint64 {
	if m != nil {
		return m.TcpCompressedPacketsOut
	}
	return 0
}

func (m *IphcStatsSt) GetTcpBytesSentRate() uint32 {
	if m != nil {
		return m.TcpBytesSentRate
	}
	return 0
}

func (m *IphcStatsSt) GetTcpFullHeaderPacketsOut() uint64 {
	if m != nil {
		return m.TcpFullHeaderPacketsOut
	}
	return 0
}

// Queue limit statistics
type QStatsSt struct {
	// Queue Id used for Fabric Stats
	QueueId uint32 `protobuf:"varint,1,opt,name=queue_id,json=queueId" json:"queue_id,omitempty"`
	// Packets tail dropped
	TailDropPackets uint64 `protobuf:"varint,2,opt,name=tail_drop_packets,json=tailDropPackets" json:"tail_drop_packets,omitempty"`
	// Bytes tail dropped
	TailDropBytes uint64 `protobuf:"varint,3,opt,name=tail_drop_bytes,json=tailDropBytes" json:"tail_drop_bytes,omitempty"`
	// ATP CLP 0 matched packets dropped
	AtmClp0DropPackets uint64 `protobuf:"varint,4,opt,name=atm_clp0_drop_packets,json=atmClp0DropPackets" json:"atm_clp0_drop_packets,omitempty"`
	// ATP CLP 0 matched bytes dropped
	AtmClp0DropBytes uint64 `protobuf:"varint,5,opt,name=atm_clp0_drop_bytes,json=atmClp0DropBytes" json:"atm_clp0_drop_bytes,omitempty"`
	// ATP CLP 0 matched packets dropped
	AtmClp1DropPackets uint64 `protobuf:"varint,6,opt,name=atm_clp1_drop_packets,json=atmClp1DropPackets" json:"atm_clp1_drop_packets,omitempty"`
	// ATP CLP 0 matched bytes dropped
	AtmClp1DropBytes uint64 `protobuf:"varint,7,opt,name=atm_clp1_drop_bytes,json=atmClp1DropBytes" json:"atm_clp1_drop_bytes,omitempty"`
	// Queue instance length
	QueueInstanceLength []*PolicyParamUint32St_ `protobuf:"bytes,8,rep,name=queue_instance_length,json=queueInstanceLength" json:"queue_instance_length,omitempty"`
	// Queue average length
	QueueAverageLength []*PolicyParamUint32St_ `protobuf:"bytes,9,rep,name=queue_average_length,json=queueAverageLength" json:"queue_average_length,omitempty"`
	// Queue maximum length
	QueueMaxLength []*PolicyParamUint32St_ `protobuf:"bytes,10,rep,name=queue_max_length,json=queueMaxLength" json:"queue_max_length,omitempty"`
	// tail drop threshold of the queue in bytes
	QueueDropThreshold uint32 `protobuf:"varint,11,opt,name=queue_drop_threshold,json=queueDropThreshold" json:"queue_drop_threshold,omitempty"`
	// flag to forcedisplay of WRED even when per WredWRED profile stats is not available
	ForcedWredStatsDisplay bool `protobuf:"varint,12,opt,name=forced_wred_stats_display,json=forcedWredStatsDisplay" json:"forced_wred_stats_display,omitempty"`
	// Packets probabilistically dropped
	RandomDropPackets uint64 `protobuf:"varint,13,opt,name=random_drop_packets,json=randomDropPackets" json:"random_drop_packets,omitempty"`
	// Bytes probabilistically dropped
	RandomDropBytes uint64 `protobuf:"varint,14,opt,name=random_drop_bytes,json=randomDropBytes" json:"random_drop_bytes,omitempty"`
	// Dropped packets with the average queue size at the max-threshold
	MaxThresholdPackets uint64 `protobuf:"varint,15,opt,name=max_threshold_packets,json=maxThresholdPackets" json:"max_threshold_packets,omitempty"`
	// Dropped bytes with the average queue size at the max-threshold
	MaxThresholdBytes uint64 `protobuf:"varint,16,opt,name=max_threshold_bytes,json=maxThresholdBytes" json:"max_threshold_bytes,omitempty"`
	// Packets that conform  to the queue rate
	ConformPackets uint64 `protobuf:"varint,17,opt,name=conform_packets,json=conformPackets" json:"conform_packets,omitempty"`
	// Bytes that conform to the queue rate
	ConformBytes uint64 `protobuf:"varint,18,opt,name=conform_bytes,json=conformBytes" json:"conform_bytes,omitempty"`
	// Packets that exceed the queue rate
	ExceedPackets uint64 `protobuf:"varint,19,opt,name=exceed_packets,json=exceedPackets" json:"exceed_packets,omitempty"`
	// Bytes that exceed  the queue rate
	ExceedBytes uint64 `protobuf:"varint,20,opt,name=exceed_bytes,json=exceedBytes" json:"exceed_bytes,omitempty"`
	// Conform rate
	ConformRate uint32 `protobuf:"varint,21,opt,name=conform_rate,json=conformRate" json:"conform_rate,omitempty"`
	// Exceed rate
	ExceedRate uint32 `protobuf:"varint,22,opt,name=exceed_rate,json=exceedRate" json:"exceed_rate,omitempty"`
}

func (m *QStatsSt) Reset()                    { *m = QStatsSt{} }
func (m *QStatsSt) String() string            { return proto.CompactTextString(m) }
func (*QStatsSt) ProtoMessage()               {}
func (*QStatsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QStatsSt) GetQueueId() uint32 {
	if m != nil {
		return m.QueueId
	}
	return 0
}

func (m *QStatsSt) GetTailDropPackets() uint64 {
	if m != nil {
		return m.TailDropPackets
	}
	return 0
}

func (m *QStatsSt) GetTailDropBytes() uint64 {
	if m != nil {
		return m.TailDropBytes
	}
	return 0
}

func (m *QStatsSt) GetAtmClp0DropPackets() uint64 {
	if m != nil {
		return m.AtmClp0DropPackets
	}
	return 0
}

func (m *QStatsSt) GetAtmClp0DropBytes() uint64 {
	if m != nil {
		return m.AtmClp0DropBytes
	}
	return 0
}

func (m *QStatsSt) GetAtmClp1DropPackets() uint64 {
	if m != nil {
		return m.AtmClp1DropPackets
	}
	return 0
}

func (m *QStatsSt) GetAtmClp1DropBytes() uint64 {
	if m != nil {
		return m.AtmClp1DropBytes
	}
	return 0
}

func (m *QStatsSt) GetQueueInstanceLength() []*PolicyParamUint32St_ {
	if m != nil {
		return m.QueueInstanceLength
	}
	return nil
}

func (m *QStatsSt) GetQueueAverageLength() []*PolicyParamUint32St_ {
	if m != nil {
		return m.QueueAverageLength
	}
	return nil
}

func (m *QStatsSt) GetQueueMaxLength() []*PolicyParamUint32St_ {
	if m != nil {
		return m.QueueMaxLength
	}
	return nil
}

func (m *QStatsSt) GetQueueDropThreshold() uint32 {
	if m != nil {
		return m.QueueDropThreshold
	}
	return 0
}

func (m *QStatsSt) GetForcedWredStatsDisplay() bool {
	if m != nil {
		return m.ForcedWredStatsDisplay
	}
	return false
}

func (m *QStatsSt) GetRandomDropPackets() uint64 {
	if m != nil {
		return m.RandomDropPackets
	}
	return 0
}

func (m *QStatsSt) GetRandomDropBytes() uint64 {
	if m != nil {
		return m.RandomDropBytes
	}
	return 0
}

func (m *QStatsSt) GetMaxThresholdPackets() uint64 {
	if m != nil {
		return m.MaxThresholdPackets
	}
	return 0
}

func (m *QStatsSt) GetMaxThresholdBytes() uint64 {
	if m != nil {
		return m.MaxThresholdBytes
	}
	return 0
}

func (m *QStatsSt) GetConformPackets() uint64 {
	if m != nil {
		return m.ConformPackets
	}
	return 0
}

func (m *QStatsSt) GetConformBytes() uint64 {
	if m != nil {
		return m.ConformBytes
	}
	return 0
}

func (m *QStatsSt) GetExceedPackets() uint64 {
	if m != nil {
		return m.ExceedPackets
	}
	return 0
}

func (m *QStatsSt) GetExceedBytes() uint64 {
	if m != nil {
		return m.ExceedBytes
	}
	return 0
}

func (m *QStatsSt) GetConformRate() uint32 {
	if m != nil {
		return m.ConformRate
	}
	return 0
}

func (m *QStatsSt) GetExceedRate() uint32 {
	if m != nil {
		return m.ExceedRate
	}
	return 0
}

// WRED Type Value pairs
type WredTypeValue struct {
	// WRED type DSCP, EXP, PREC etc.
	WredType string `protobuf:"bytes,1,opt,name=wred_type,json=wredType" json:"wred_type,omitempty"`
	// WRED value for this type.
	Value uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *WredTypeValue) Reset()                    { *m = WredTypeValue{} }
func (m *WredTypeValue) String() string            { return proto.CompactTextString(m) }
func (*WredTypeValue) ProtoMessage()               {}
func (*WredTypeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WredTypeValue) GetWredType() string {
	if m != nil {
		return m.WredType
	}
	return ""
}

func (m *WredTypeValue) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Per RED profile stats
type RedProfileStats struct {
	ProfileTitle string `protobuf:"bytes,1,opt,name=profile_title,json=profileTitle" json:"profile_title,omitempty"`
	// Array of WRED Typevalues as in PRP stats is available per threshold
	RedLabel []*WredTypeValue `protobuf:"bytes,2,rep,name=red_label,json=redLabel" json:"red_label,omitempty"`
	// Transmitted packets
	RedTransmitPackets uint64 `protobuf:"varint,3,opt,name=red_transmit_packets,json=redTransmitPackets" json:"red_transmit_packets,omitempty"`
	// Transmitted bytes
	RedTransmitBytes uint64 `protobuf:"varint,4,opt,name=red_transmit_bytes,json=redTransmitBytes" json:"red_transmit_bytes,omitempty"`
	// Probabilistically dropped  packets
	RandomDropPackets uint64 `protobuf:"varint,5,opt,name=random_drop_packets,json=randomDropPackets" json:"random_drop_packets,omitempty"`
	// Probabilisticallydropped bytes
	RandomDropBytes uint64 `protobuf:"varint,6,opt,name=random_drop_bytes,json=randomDropBytes" json:"random_drop_bytes,omitempty"`
	// Dropped packets with  the average queue size at the max-threshold
	MaxThresholdPackets uint64 `protobuf:"varint,7,opt,name=max_threshold_packets,json=maxThresholdPackets" json:"max_threshold_packets,omitempty"`
	// Dropped bytes with  the average queue size at the max-threshold
	MaxThresholdBytes uint64 `protobuf:"varint,8,opt,name=max_threshold_bytes,json=maxThresholdBytes" json:"max_threshold_bytes,omitempty"`
	// ECN marked packets
	RedEcnMarkedPackets uint64 `protobuf:"varint,9,opt,name=red_ecn_marked_packets,json=redEcnMarkedPackets" json:"red_ecn_marked_packets,omitempty"`
	// ECN marked bytes
	RedEcnMarkedBytes uint64 `protobuf:"varint,10,opt,name=red_ecn_marked_bytes,json=redEcnMarkedBytes" json:"red_ecn_marked_bytes,omitempty"`
}

func (m *RedProfileStats) Reset()                    { *m = RedProfileStats{} }
func (m *RedProfileStats) String() string            { return proto.CompactTextString(m) }
func (*RedProfileStats) ProtoMessage()               {}
func (*RedProfileStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RedProfileStats) GetProfileTitle() string {
	if m != nil {
		return m.ProfileTitle
	}
	return ""
}

func (m *RedProfileStats) GetRedLabel() []*WredTypeValue {
	if m != nil {
		return m.RedLabel
	}
	return nil
}

func (m *RedProfileStats) GetRedTransmitPackets() uint64 {
	if m != nil {
		return m.RedTransmitPackets
	}
	return 0
}

func (m *RedProfileStats) GetRedTransmitBytes() uint64 {
	if m != nil {
		return m.RedTransmitBytes
	}
	return 0
}

func (m *RedProfileStats) GetRandomDropPackets() uint64 {
	if m != nil {
		return m.RandomDropPackets
	}
	return 0
}

func (m *RedProfileStats) GetRandomDropBytes() uint64 {
	if m != nil {
		return m.RandomDropBytes
	}
	return 0
}

func (m *RedProfileStats) GetMaxThresholdPackets() uint64 {
	if m != nil {
		return m.MaxThresholdPackets
	}
	return 0
}

func (m *RedProfileStats) GetMaxThresholdBytes() uint64 {
	if m != nil {
		return m.MaxThresholdBytes
	}
	return 0
}

func (m *RedProfileStats) GetRedEcnMarkedPackets() uint64 {
	if m != nil {
		return m.RedEcnMarkedPackets
	}
	return 0
}

func (m *RedProfileStats) GetRedEcnMarkedBytes() uint64 {
	if m != nil {
		return m.RedEcnMarkedBytes
	}
	return 0
}

type ClassStats struct {
	//  Bitmask to indicate which counter or counters are undetermined. Counters will be marked undetermined when one or more classes share queues with class-default because in such cases the value of counters for each class is invalid. Based on the flag(s) set, the following counters will be marked undetermined. For example, if value of this object returned is 0x00000101, counters TransmitPackets/TransmitBytes/TotalTransmitRate and DropPackets/DropBytes are undetermined.0x00000001 - Transmit (TransmitPackets/TransmitBytes/TotalTransmitRate), 0x00000002 - Total drop (TotalDropPackets/TotalDropBytes/TotalDropRate), 0x00000004 - Match (MatchDataRate/PrepolicyMatchedPackets/PrepolicyMatchedBytes), 0x00000100 - Police drop (DropPackets/DropBytes), 0x00000200 - Police conform (ConformPackets/ConformBytes/ConformRate), 0x00000400 - Police exceed (ExceedPackets/ExceedBytes/ExceedRate), 0x00000800 - Police violate (ViolatePackets/ViolateBytes/ViolateRate), 0x00001000 - Parent policer drop (ParentDropPackets/ParentDropBytes), 0x00010000 - Queueing drop (TailDropPackets/TailDropBytes), 0x00020000 - Red queue drop (RandomDropPackets/RandomDropBytes), 0x00040000 - Queue maximum threshold drop (MaxThresholdPackets/MaxThresholdBytes), 0x00080000 - Queue conform (ConformPackets/ConformBytes/ConformRate), 0x00100000 - Queue exceed (ExceedPackets/ExceedBytes/ExceedRate), 0x00200000 - CLP limit drop (ATM_CLP0DropPackets/ATM_CLP0DropBytes/ATM_CLP1DropPackets/ATM_CLP1DropBytes), 0x01000000 - RED transmit (RedTransmitPackets/RedTransmitBytes), 0x02000000 - RED drop (RandomDropPackets/RandomDropBytes), 0x04000000 - RED maximum threshold drop (MaxThresholdPackets/MaxThresholdBytes)
	CounterValidityBitmask uint64 `protobuf:"varint,1,opt,name=counter_validity_bitmask,json=counterValidityBitmask" json:"counter_validity_bitmask,omitempty"`
	ClassName              string `protobuf:"bytes,2,opt,name=class_name,json=className" json:"class_name,omitempty"`
	// q-id of the  shared queue for this class
	SharedQueueId uint32 `protobuf:"varint,3,opt,name=shared_queue_id,json=sharedQueueId" json:"shared_queue_id,omitempty"`
	// Description of queue for the class
	QueueDescr   string      `protobuf:"bytes,4,opt,name=queue_descr,json=queueDescr" json:"queue_descr,omitempty"`
	CacState     string      `protobuf:"bytes,5,opt,name=cac_state,json=cacState" json:"cac_state,omitempty"`
	GeneralStats *GenStatsSt `protobuf:"bytes,6,opt,name=general_stats,json=generalStats" json:"general_stats,omitempty"`
	// array of queue stats
	QueueStatsArray []*QStatsSt `protobuf:"bytes,7,rep,name=queue_stats_array,json=queueStatsArray" json:"queue_stats_array,omitempty"`
	// array of police stats
	PoliceStatsArray []*PlcStatsSt `protobuf:"bytes,8,rep,name=police_stats_array,json=policeStatsArray" json:"police_stats_array,omitempty"`
	// array of red stats
	WredStatsArray []*RedProfileStats `protobuf:"bytes,9,rep,name=wred_stats_array,json=wredStatsArray" json:"wred_stats_array,omitempty"`
	// IPHC stats
	IphcStats   *IphcStatsSt `protobuf:"bytes,10,opt,name=iphc_stats,json=iphcStats" json:"iphc_stats,omitempty"`
	ChildPolicy *QosStats    `protobuf:"bytes,11,opt,name=child_policy,json=childPolicy" json:"child_policy,omitempty"`
	// bag for cac stats
	CacStats *CacStatsSt `protobuf:"bytes,12,opt,name=cac_stats,json=cacStats" json:"cac_stats,omitempty"`
}

func (m *ClassStats) Reset()                    { *m = ClassStats{} }
func (m *ClassStats) String() string            { return proto.CompactTextString(m) }
func (*ClassStats) ProtoMessage()               {}
func (*ClassStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ClassStats) GetCounterValidityBitmask() uint64 {
	if m != nil {
		return m.CounterValidityBitmask
	}
	return 0
}

func (m *ClassStats) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *ClassStats) GetSharedQueueId() uint32 {
	if m != nil {
		return m.SharedQueueId
	}
	return 0
}

func (m *ClassStats) GetQueueDescr() string {
	if m != nil {
		return m.QueueDescr
	}
	return ""
}

func (m *ClassStats) GetCacState() string {
	if m != nil {
		return m.CacState
	}
	return ""
}

func (m *ClassStats) GetGeneralStats() *GenStatsSt {
	if m != nil {
		return m.GeneralStats
	}
	return nil
}

func (m *ClassStats) GetQueueStatsArray() []*QStatsSt {
	if m != nil {
		return m.QueueStatsArray
	}
	return nil
}

func (m *ClassStats) GetPoliceStatsArray() []*PlcStatsSt {
	if m != nil {
		return m.PoliceStatsArray
	}
	return nil
}

func (m *ClassStats) GetWredStatsArray() []*RedProfileStats {
	if m != nil {
		return m.WredStatsArray
	}
	return nil
}

func (m *ClassStats) GetIphcStats() *IphcStatsSt {
	if m != nil {
		return m.IphcStats
	}
	return nil
}

func (m *ClassStats) GetChildPolicy() *QosStats {
	if m != nil {
		return m.ChildPolicy
	}
	return nil
}

func (m *ClassStats) GetCacStats() *CacStatsSt {
	if m != nil {
		return m.CacStats
	}
	return nil
}

func init() {
	proto.RegisterType((*QosStats_KEYS)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.qos_stats_KEYS")
	proto.RegisterType((*QosStats)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.qos_stats")
	proto.RegisterType((*PolicyParamUint32St_)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.policy_param_uint32_st_")
	proto.RegisterType((*GenStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.gen_stats_st")
	proto.RegisterType((*PlcColorClassStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.plc_color_class_stats_st")
	proto.RegisterType((*PlcStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.plc_stats_st")
	proto.RegisterType((*CacStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.cac_stats_st")
	proto.RegisterType((*IphcStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.iphc_stats_st")
	proto.RegisterType((*QStatsSt)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.q_stats_st")
	proto.RegisterType((*WredTypeValue)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.wred_type_value")
	proto.RegisterType((*RedProfileStats)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.red_profile_stats")
	proto.RegisterType((*ClassStats)(nil), "cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.member_interfaces.member_interface.output.statistics.class_stats")
}

func init() { proto.RegisterFile("qos_stats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5b, 0x6f, 0x1c, 0x49,
	0x15, 0x56, 0xfb, 0x3a, 0x73, 0xe6, 0xde, 0x13, 0xdb, 0x63, 0x87, 0x25, 0xc9, 0x44, 0x9b, 0x35,
	0xb0, 0x19, 0x62, 0x67, 0x61, 0x77, 0x15, 0x56, 0x28, 0xb1, 0x83, 0x40, 0x6c, 0xd8, 0xa5, 0x63,
	0x2d, 0xe2, 0xa9, 0x55, 0xee, 0x2e, 0xc7, 0xad, 0xf4, 0xcd, 0xdd, 0x35, 0x13, 0x0f, 0x42, 0x3c,
	0xc1, 0x5f, 0x40, 0xf2, 0x0b, 0xd2, 0x8a, 0x07, 0x78, 0x5a, 0x24, 0x5e, 0xd0, 0xfe, 0x10, 0x5e,
	0xf8, 0x15, 0xfc, 0x00, 0x1e, 0x50, 0x9d, 0x53, 0xdd, 0x53, 0x7d, 0xf1, 0x92, 0x48, 0x68, 0x94,
	0xb7, 0xe9, 0x73, 0xfd, 0xea, 0xd4, 0x39, 0xa7, 0x4e, 0xd5, 0x40, 0xef, 0x22, 0x4a, 0xed, 0x54,
	0x30, 0x91, 0x4e, 0xe2, 0x24, 0x12, 0x91, 0xf9, 0xd2, 0xf1, 0x52, 0x27, 0xb2, 0xbd, 0x28, 0xb5,
	0x2f, 0x13, 0x5b, 0x72, 0x03, 0x66, 0x47, 0x31, 0x4f, 0x26, 0x17, 0x51, 0x3a, 0xf1, 0x42, 0xc1,
	0x93, 0x33, 0xe6, 0x70, 0x5b, 0xb0, 0x53, 0x9f, 0x2f, 0xbe, 0x27, 0x01, 0x0f, 0x4e, 0x79, 0x62,
	0xe7, 0x84, 0xb4, 0x42, 0x99, 0x44, 0x53, 0x11, 0x4f, 0xc5, 0x44, 0x7a, 0xf3, 0x52, 0xe1, 0x39,
	0xe9, 0x98, 0x41, 0x37, 0xf7, 0x6f, 0xff, 0xfc, 0xe9, 0xaf, 0x9f, 0x9b, 0xef, 0x42, 0x77, 0xe1,
	0x23, 0x64, 0x01, 0x1f, 0x19, 0xb7, 0x8d, 0xfd, 0xa6, 0xd5, 0xc9, 0xa9, 0xbf, 0x60, 0x01, 0x37,
	0xf7, 0xa1, 0x5f, 0x14, 0xb3, 0x0f, 0x46, 0x2b, 0x28, 0xd8, 0x2d, 0x08, 0x1e, 0x8c, 0xbf, 0x5c,
	0x81, 0x66, 0xee, 0xc3, 0xbc, 0x05, 0xad, 0x38, 0xf2, 0x3d, 0x67, 0x4e, 0xb6, 0x0f, 0x51, 0x05,
	0x88, 0x84, 0x86, 0x6f, 0xc0, 0xba, 0x94, 0xe4, 0xa3, 0x87, 0xc8, 0xa2, 0x0f, 0xf3, 0x7b, 0x30,
	0xc0, 0x1f, 0xb6, 0xcb, 0x53, 0x27, 0xf1, 0x62, 0xe1, 0x45, 0xe1, 0xe8, 0x03, 0x94, 0xe8, 0x23,
	0xe3, 0x78, 0x41, 0x37, 0xaf, 0x0c, 0x68, 0x39, 0x3e, 0x4b, 0x95, 0xcf, 0xd1, 0x0f, 0x6e, 0xaf,
	0xee, 0xb7, 0x0e, 0x2f, 0x27, 0x4b, 0x0c, 0xec, 0x44, 0xf3, 0x6f, 0x01, 0x7e, 0x3c, 0xc7, 0xf5,
	0xcb, 0xe5, 0x31, 0xe1, 0xb9, 0xa3, 0x1f, 0xde, 0x36, 0xf6, 0x3b, 0x16, 0x7d, 0x8c, 0x8f, 0x60,
	0x47, 0x45, 0x25, 0x66, 0x09, 0x0b, 0xec, 0xa9, 0x17, 0x8a, 0x87, 0x87, 0x76, 0x2a, 0x6c, 0xa9,
	0x30, 0x63, 0xfe, 0x94, 0xb6, 0xa1, 0x63, 0xd1, 0x87, 0x69, 0xc2, 0xda, 0x34, 0xf4, 0x84, 0x0a,
	0x39, 0xfe, 0x1e, 0x7f, 0xb5, 0x0a, 0xed, 0x17, 0x3c, 0x54, 0x9b, 0x99, 0x0a, 0xf3, 0x3b, 0xd0,
	0x17, 0x09, 0x0b, 0xd3, 0xc0, 0x13, 0x76, 0xcc, 0x9c, 0x97, 0x5c, 0xa4, 0x68, 0x65, 0xcd, 0xea,
	0x65, 0xf4, 0xcf, 0x89, 0x2c, 0x77, 0x3d, 0x17, 0x3d, 0x9d, 0x0b, 0x9e, 0xa2, 0xe5, 0x35, 0xab,
	0x93, 0x51, 0x9f, 0x48, 0xa2, 0xf9, 0x3e, 0x98, 0x22, 0x12, 0xcc, 0xb7, 0xdd, 0x24, 0x8a, 0x73,
	0x9b, 0xab, 0x28, 0xda, 0x47, 0xce, 0x71, 0x12, 0xc5, 0x99, 0xd1, 0x7d, 0xe8, 0x6b, 0xd2, 0x64,
	0x76, 0x0d, 0x65, 0xbb, 0xb9, 0x2c, 0xd9, 0xbd, 0x07, 0x3d, 0x4d, 0x32, 0x91, 0xdb, 0xbf, 0x8e,
	0xcb, 0xed, 0xe4, 0x82, 0x96, 0x4c, 0x83, 0x7b, 0xd0, 0x0b, 0x98, 0x70, 0xce, 0x6d, 0x97, 0x09,
	0x46, 0x72, 0x1b, 0x24, 0x87, 0xe4, 0x63, 0x26, 0x18, 0xca, 0x4d, 0x60, 0x48, 0xf6, 0xf2, 0x45,
	0xa1, 0xec, 0x26, 0xca, 0x0e, 0x90, 0x75, 0xa2, 0x38, 0x28, 0xff, 0x08, 0xf6, 0xe2, 0x84, 0xdb,
	0x6a, 0x0f, 0xd0, 0x16, 0x77, 0xf3, 0xf5, 0x35, 0x10, 0xf3, 0x4e, 0x9c, 0xf0, 0xcf, 0x51, 0xe0,
	0x19, 0xf1, 0xb3, 0x65, 0x7e, 0x08, 0xa3, 0x1a, 0x65, 0x5a, 0x6e, 0x13, 0x55, 0xb7, 0xca, 0xaa,
	0xb8, 0xea, 0xf1, 0x7f, 0x1a, 0x30, 0x8a, 0x7d, 0xc7, 0x76, 0x22, 0x3f, 0x4a, 0x6c, 0x2d, 0x63,
	0xe4, 0xe6, 0x3d, 0x86, 0x77, 0x9c, 0x28, 0x3c, 0x8b, 0x92, 0x40, 0x71, 0xb2, 0xaf, 0xe2, 0x4e,
	0xee, 0x29, 0xf2, 0x91, 0x94, 0x39, 0xa2, 0xdf, 0x19, 0xb0, 0x4f, 0xe0, 0x66, 0xbd, 0x09, 0x7d,
	0x87, 0x47, 0x35, 0x06, 0x68, 0x53, 0x1e, 0xc1, 0x5e, 0xbd, 0x3a, 0xc6, 0x72, 0x15, 0x63, 0xb9,
	0x53, 0xa3, 0x8d, 0x11, 0xfd, 0x31, 0x7c, 0xab, 0xa8, 0xcc, 0x2f, 0x1d, 0xae, 0xc5, 0x94, 0xf2,
	0x60, 0x57, 0x57, 0x7f, 0x8a, 0x12, 0x19, 0xf8, 0x8a, 0x77, 0x65, 0x80, 0xb0, 0xaf, 0xd3, 0x96,
	0x54, 0xd5, 0x09, 0xfa, 0xc7, 0xb0, 0x5b, 0xab, 0xac, 0x65, 0xcc, 0x76, 0x55, 0x17, 0x81, 0x57,
	0xe2, 0x3e, 0xf3, 0x22, 0x5f, 0x76, 0x9e, 0x0c, 0xf9, 0x66, 0x35, 0xee, 0x5f, 0x90, 0xc8, 0xb5,
	0x71, 0xcf, 0x4c, 0x10, 0xf6, 0x46, 0x35, 0xee, 0xca, 0xc0, 0x35, 0x71, 0xcf, 0xd4, 0x11, 0x7d,
	0xb3, 0x1a, 0x77, 0xa5, 0x8d, 0xf0, 0x3f, 0x81, 0x9b, 0x6a, 0xad, 0xb5, 0x61, 0x07, 0xf2, 0x4d,
	0xd4, 0x9a, 0xa8, 0x7f, 0x0c, 0xbb, 0x75, 0xea, 0x04, 0xbc, 0x85, 0xca, 0xdb, 0x15, 0x65, 0x82,
	0xfd, 0x21, 0x8c, 0xea, 0x54, 0x11, 0x74, 0x1b, 0x41, 0x6f, 0x55, 0x34, 0xb3, 0x54, 0x29, 0x28,
	0x96, 0x03, 0xde, 0xa1, 0x54, 0xd1, 0x94, 0x4b, 0xf1, 0x7e, 0x04, 0x7b, 0xb5, 0x06, 0x08, 0x75,
	0x97, 0x52, 0xa5, 0xaa, 0x9e, 0xa7, 0x4a, 0xad, 0x32, 0xe2, 0xee, 0x51, 0xaa, 0x54, 0x75, 0xb3,
	0x54, 0xc9, 0xa4, 0xeb, 0x91, 0xf7, 0x29, 0x55, 0x14, 0xf9, 0x9a, 0x54, 0xa9, 0x37, 0x41, 0xd8,
	0x07, 0xb4, 0x5d, 0x35, 0x06, 0xf2, 0x54, 0xa9, 0x57, 0x47, 0xf4, 0x26, 0xa5, 0x4a, 0x8d, 0xb6,
	0x84, 0x3f, 0xfe, 0x6a, 0x1d, 0xda, 0xb2, 0xfd, 0xe4, 0x2d, 0xe7, 0x0e, 0xb4, 0x0b, 0x7d, 0x9d,
	0x3a, 0x4c, 0xcb, 0xd5, 0x5a, 0xfa, 0x3b, 0x00, 0x5a, 0x33, 0xa7, 0x0e, 0xd2, 0x74, 0xf3, 0x3e,
	0xfe, 0x1e, 0xf4, 0xca, 0x6d, 0x8a, 0x0e, 0x87, 0xae, 0x53, 0x6c, 0x4d, 0x77, 0xa1, 0x53, 0x6c,
	0x46, 0xd4, 0x0f, 0xda, 0x8e, 0xde, 0x80, 0xde, 0x85, 0x6e, 0x29, 0x7d, 0xa9, 0xec, 0x3b, 0xbc,
	0x90, 0xb3, 0x77, 0xa0, 0x5d, 0x48, 0xd3, 0x0d, 0x82, 0xcd, 0xb5, 0xdc, 0x7c, 0x0f, 0x7a, 0xf5,
	0x65, 0xdc, 0x9d, 0x15, 0xf7, 0xe3, 0x2e, 0x74, 0xea, 0x8a, 0xb5, 0x3d, 0xd3, 0xa3, 0x3e, 0x81,
	0x61, 0xcc, 0x12, 0x1e, 0x8a, 0xe2, 0x31, 0x48, 0xbd, 0x7e, 0x40, 0x2c, 0xfd, 0x1c, 0xfc, 0x2e,
	0x0c, 0x74, 0x79, 0x32, 0x4c, 0x95, 0xd8, 0x5b, 0x48, 0x93, 0xed, 0x3b, 0xd0, 0x2e, 0xb4, 0xd9,
	0x16, 0xee, 0x61, 0xcb, 0xd1, 0x5a, 0xeb, 0x2d, 0x68, 0x55, 0x6b, 0x0b, 0xf8, 0xa2, 0xa0, 0xee,
	0x40, 0xbb, 0x90, 0x07, 0x1d, 0xb2, 0x31, 0xd3, 0x52, 0xf7, 0xef, 0x06, 0x0c, 0x2a, 0xc7, 0x0e,
	0x96, 0x4a, 0xeb, 0xf0, 0x0f, 0xc6, 0x52, 0x27, 0xa5, 0xeb, 0x4e, 0x40, 0xab, 0x87, 0xd4, 0xa3,
	0x7c, 0x76, 0x1a, 0xff, 0xd3, 0x80, 0xb6, 0xc3, 0xfe, 0xaf, 0x09, 0x9b, 0xb1, 0x65, 0x9c, 0x52,
	0x75, 0xa6, 0x21, 0x5b, 0x46, 0x29, 0x35, 0xc7, 0xd0, 0x66, 0x6e, 0xe0, 0x89, 0xe2, 0xa9, 0x55,
	0xa0, 0xc9, 0xed, 0xc0, 0xef, 0xc2, 0xc9, 0x04, 0x48, 0x22, 0x1f, 0xb9, 0x00, 0x39, 0xa1, 0xe3,
	0x87, 0x04, 0xd0, 0xcb, 0xf8, 0xcb, 0x75, 0xe8, 0x78, 0xf1, 0xb9, 0xb6, 0xb0, 0x8f, 0x60, 0x37,
	0x8c, 0x42, 0x5b, 0x38, 0xb1, 0x4d, 0x73, 0x4c, 0x34, 0x2d, 0x8f, 0x70, 0x5b, 0x61, 0x14, 0x9e,
	0x38, 0xf1, 0x89, 0x64, 0x7f, 0x36, 0xcd, 0x07, 0xb9, 0x0f, 0x60, 0xa7, 0xaa, 0xa9, 0x2f, 0x7e,
	0x58, 0xd4, 0x23, 0x88, 0xf7, 0x61, 0x98, 0x69, 0xa1, 0xac, 0x9d, 0xb2, 0x19, 0x77, 0xb3, 0xc1,
	0x8e, 0x34, 0x50, 0xf2, 0xb9, 0xa4, 0x9b, 0x4f, 0xe0, 0xdb, 0x99, 0xb8, 0x13, 0x05, 0x71, 0xc2,
	0xd3, 0x74, 0x51, 0xa4, 0xd2, 0xa3, 0x0a, 0xd4, 0x1e, 0x69, 0x1e, 0xe5, 0x32, 0x0a, 0xe5, 0x67,
	0x53, 0xa1, 0x03, 0x55, 0x2e, 0x65, 0x81, 0x68, 0xa3, 0xdf, 0x50, 0x77, 0xcb, 0x43, 0x1a, 0xd4,
	0x8e, 0xe0, 0x56, 0xa6, 0x75, 0x36, 0xf5, 0x7d, 0xfb, 0x9c, 0x33, 0x97, 0x27, 0x05, 0xd7, 0x1b,
	0xba, 0xeb, 0x9f, 0x4c, 0x7d, 0xff, 0xa7, 0x28, 0xa3, 0xb9, 0x3e, 0x80, 0xad, 0xfa, 0xc8, 0x52,
	0x4f, 0x30, 0x45, 0x35, 0xac, 0xf7, 0x61, 0x58, 0x17, 0xd2, 0x86, 0x9a, 0x7c, 0xcb, 0xf1, 0x94,
	0xf3, 0x6c, 0x29, 0x96, 0x4d, 0x35, 0x4f, 0x17, 0x02, 0xf9, 0x08, 0xf6, 0xbe, 0x21, 0x88, 0xd4,
	0x22, 0x76, 0xc4, 0x35, 0x11, 0x54, 0x98, 0xca, 0xd1, 0xa3, 0x8e, 0xd1, 0x17, 0xe5, 0xd0, 0xfd,
	0x08, 0x6e, 0x7e, 0x53, 0xd8, 0xda, 0xb9, 0xb3, 0xba, 0x98, 0x8d, 0xff, 0x0d, 0x00, 0x17, 0x8b,
	0x04, 0xdd, 0x85, 0xc6, 0xc5, 0x94, 0x4f, 0xb9, 0xed, 0xb9, 0xea, 0x62, 0xb2, 0x89, 0xdf, 0x3f,
	0x73, 0x65, 0xb7, 0x13, 0xcc, 0x2b, 0x5d, 0x11, 0x56, 0xd4, 0xb5, 0x83, 0x79, 0x85, 0x1b, 0x82,
	0x8c, 0x53, 0x2e, 0x4b, 0x21, 0x5d, 0x55, 0x71, 0x52, 0x92, 0x14, 0xcf, 0x03, 0xd8, 0x62, 0x42,
	0x8e, 0x43, 0xf1, 0x83, 0xa2, 0x5d, 0xca, 0x33, 0x93, 0x89, 0xe0, 0xc8, 0x8f, 0x1f, 0xe8, 0xa6,
	0xef, 0xc3, 0xb0, 0xa8, 0xa2, 0x97, 0x67, 0x5f, 0x53, 0x28, 0x7b, 0x38, 0x28, 0x7a, 0xd8, 0xd0,
	0x3d, 0x1c, 0xd4, 0x7b, 0x38, 0xd0, 0x3d, 0x6c, 0xea, 0x1e, 0x0e, 0x16, 0x1e, 0xbe, 0x36, 0x60,
	0x4b, 0xc5, 0x2c, 0x4c, 0x05, 0x0b, 0x1d, 0x6e, 0xfb, 0x3c, 0x7c, 0x21, 0xce, 0x47, 0x0d, 0xbc,
	0x9f, 0xfe, 0x7e, 0xc9, 0x6d, 0xb7, 0xfe, 0xbe, 0x69, 0x0d, 0x69, 0x1f, 0x15, 0xc4, 0x4f, 0x11,
	0xa1, 0xf9, 0x0f, 0x03, 0x6e, 0x10, 0x76, 0x36, 0xe3, 0x09, 0x7b, 0x91, 0x43, 0x6f, 0xbe, 0x4d,
	0xd0, 0x4d, 0x84, 0xf8, 0x98, 0x10, 0x2a, 0xe4, 0x7f, 0x33, 0xa0, 0x4f, 0xc8, 0x03, 0x76, 0x99,
	0xa1, 0x86, 0xb7, 0x09, 0x75, 0x17, 0xe1, 0x3d, 0x63, 0x97, 0x0a, 0xf1, 0x83, 0x2c, 0xd4, 0x98,
	0x53, 0xe2, 0x3c, 0xe1, 0xe9, 0x79, 0xe4, 0xbb, 0xaa, 0xae, 0x69, 0x8d, 0x32, 0xab, 0x4e, 0x32,
	0x8e, 0x1c, 0x61, 0xcf, 0xa2, 0xc4, 0xe1, 0xae, 0xfd, 0x2a, 0xe1, 0xae, 0x2a, 0x52, 0xd7, 0x4b,
	0x63, 0x9f, 0xcd, 0xb1, 0xae, 0x1b, 0xd6, 0x36, 0x09, 0xfc, 0x2a, 0xe1, 0x2e, 0x9e, 0xa5, 0xc7,
	0xc4, 0x95, 0xa3, 0x4c, 0xc2, 0x42, 0x37, 0x0a, 0x8a, 0x49, 0x4f, 0x23, 0xf7, 0x80, 0x58, 0xa5,
	0x51, 0x46, 0x97, 0xd7, 0x27, 0xec, 0xde, 0x42, 0x9a, 0x12, 0xfe, 0x10, 0xb6, 0x64, 0xcc, 0xf3,
	0x15, 0xe4, 0xd6, 0x7b, 0x74, 0x10, 0x05, 0xec, 0x32, 0x5f, 0x43, 0x66, 0x7f, 0x02, 0xc3, 0xa2,
	0x0e, 0x79, 0xa0, 0x41, 0x7a, 0xa0, 0x6b, 0x5c, 0x3b, 0x70, 0x0e, 0x5e, 0x6f, 0xe0, 0x34, 0x5f,
	0x6b, 0xe0, 0x1c, 0xbe, 0xce, 0xc0, 0x79, 0xa3, 0x3a, 0x70, 0x96, 0xc7, 0xb8, 0xad, 0xff, 0x39,
	0xc6, 0x6d, 0x97, 0xc7, 0xb8, 0xf1, 0x31, 0xf4, 0x70, 0x3f, 0xc5, 0x3c, 0xe6, 0x36, 0x3d, 0xfb,
	0xdc, 0x84, 0x66, 0x4e, 0x52, 0xef, 0x72, 0x0d, 0x49, 0x38, 0x99, 0xc7, 0x7c, 0xf1, 0x52, 0xb4,
	0xa2, 0xbd, 0x14, 0x8d, 0xff, 0xb5, 0x06, 0x03, 0xa9, 0x12, 0x27, 0xd1, 0x99, 0xe7, 0x73, 0xf5,
	0x0c, 0x77, 0x17, 0x3a, 0x19, 0x41, 0x78, 0xc2, 0xcf, 0x8c, 0xb5, 0x15, 0xf1, 0x44, 0xd2, 0xcc,
	0x2b, 0x03, 0x9a, 0x52, 0xd5, 0x67, 0xa7, 0xdc, 0x1f, 0xad, 0x60, 0xd1, 0xfc, 0x76, 0xa9, 0x35,
	0x53, 0x5a, 0xbf, 0xd5, 0x48, 0xb8, 0xfb, 0xa9, 0x44, 0x23, 0xab, 0x04, 0x79, 0xe5, 0xf7, 0x2d,
	0x3a, 0x3e, 0x4c, 0x19, 0x93, 0xd2, 0x13, 0xd7, 0xfb, 0x60, 0x16, 0x34, 0xf4, 0x7b, 0x47, 0x5f,
	0x93, 0xcf, 0x67, 0xfc, 0xba, 0xc2, 0x58, 0x7f, 0xa3, 0xc2, 0xd8, 0x78, 0xc3, 0xc2, 0xd8, 0x7c,
	0xe3, 0xc2, 0x68, 0x5c, 0x57, 0x18, 0x0f, 0x61, 0x5b, 0xae, 0x96, 0x3b, 0xa1, 0x1d, 0xb0, 0xe4,
	0xa5, 0x96, 0xd2, 0x34, 0x88, 0x0c, 0x13, 0xee, 0x3e, 0x75, 0xc2, 0x67, 0xc8, 0xcb, 0x9c, 0x7c,
	0x9f, 0x82, 0xaa, 0x29, 0xe9, 0x77, 0x95, 0x81, 0xae, 0x42, 0x2f, 0x58, 0x5f, 0x43, 0xe1, 0xa5,
	0xd5, 0xfc, 0x08, 0x46, 0x4e, 0x34, 0x95, 0x1b, 0x2a, 0x37, 0xcc, 0x73, 0x3d, 0x31, 0xb7, 0x4f,
	0x3d, 0x11, 0xb0, 0xf4, 0xa5, 0x1a, 0x5b, 0xb7, 0x15, 0xff, 0x0b, 0xc5, 0x7e, 0x42, 0x5c, 0x39,
	0x88, 0x93, 0x21, 0x7c, 0x16, 0xa6, 0x67, 0xcd, 0x26, 0x52, 0xf0, 0x55, 0xf8, 0x1e, 0xf4, 0xd2,
	0x73, 0x26, 0xc1, 0xe5, 0x63, 0x07, 0x0d, 0xeb, 0x1d, 0x22, 0xff, 0x52, 0x0d, 0x1f, 0xb7, 0xa0,
	0xa5, 0x9a, 0x27, 0x4f, 0x9d, 0x04, 0x77, 0xb7, 0x69, 0x01, 0xf5, 0x4c, 0x49, 0x91, 0x15, 0x94,
	0x5d, 0x21, 0x68, 0xd0, 0x6c, 0x5a, 0x0d, 0x87, 0x39, 0xcf, 0xf1, 0x95, 0xf9, 0x4f, 0x06, 0x74,
	0x5e, 0xf0, 0x90, 0x27, 0xcc, 0x57, 0x37, 0xa2, 0x0d, 0xbc, 0x11, 0xcd, 0x97, 0x9a, 0xf4, 0xfa,
	0x1b, 0xae, 0xd5, 0x56, 0x78, 0xe8, 0xf5, 0xf8, 0xcf, 0x06, 0x0c, 0x68, 0x7d, 0x24, 0xc0, 0x92,
	0x84, 0xcd, 0x47, 0x9b, 0x58, 0x99, 0xaf, 0x96, 0x0a, 0xf2, 0x42, 0xbb, 0xa7, 0x21, 0x22, 0x04,
	0xf8, 0x58, 0xe2, 0x31, 0xff, 0x62, 0x80, 0x89, 0xa7, 0x5d, 0x11, 0x26, 0x8d, 0x39, 0xf3, 0xa5,
	0x5f, 0x2e, 0x73, 0xa0, 0x7d, 0x02, 0xa5, 0x21, 0xfd, 0xab, 0x01, 0x7d, 0xed, 0xcc, 0x24, 0x9c,
	0x34, 0xd3, 0xfc, 0x6e, 0xa9, 0x38, 0x2b, 0x1d, 0xda, 0xea, 0xbe, 0xca, 0xce, 0x6a, 0x82, 0x7a,
	0x65, 0x00, 0x2c, 0x2e, 0x89, 0x58, 0x92, 0xad, 0xc3, 0xdf, 0x2c, 0x15, 0x64, 0xe1, 0x8e, 0x6a,
	0x35, 0xe5, 0x27, 0xa5, 0xe5, 0x95, 0xbc, 0x98, 0x9f, 0x7b, 0xb2, 0x93, 0xe1, 0x90, 0x83, 0xb3,
	0x4a, 0xeb, 0x70, 0xb6, 0xdc, 0x8c, 0xcc, 0xfe, 0x63, 0xb2, 0x5a, 0x88, 0x85, 0x1e, 0xdc, 0xcd,
	0x3f, 0x1a, 0x8b, 0x8a, 0x4f, 0x71, 0x1a, 0x5a, 0x76, 0x0e, 0xea, 0x4f, 0x16, 0x79, 0xb3, 0x49,
	0x4f, 0x37, 0xf0, 0xef, 0xbe, 0x87, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x0a, 0x15, 0xa8,
	0x01, 0x1c, 0x00, 0x00,
}
