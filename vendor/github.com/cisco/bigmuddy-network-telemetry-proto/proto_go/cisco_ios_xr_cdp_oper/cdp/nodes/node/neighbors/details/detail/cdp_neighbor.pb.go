// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdp_neighbor.proto

/*
Package cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_details_detail is a generated protocol buffer package.

It is generated from these files:
	cdp_neighbor.proto

It has these top-level messages:
	CdpNeighbor_KEYS
	CdpNeighbor
	CdpNeighborItem
	In6AddrTd
	CdpL3Addr
	CdpAddrEntry
	CdpAddrEntryItem
	CdpProtHelloEntry
	CdpProtHelloEntryItem
	CdpNeighborDetail
*/
package cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_details_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CDP neighbor info
type CdpNeighbor_KEYS struct {
	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *CdpNeighbor_KEYS) Reset()                    { *m = CdpNeighbor_KEYS{} }
func (m *CdpNeighbor_KEYS) String() string            { return proto.CompactTextString(m) }
func (*CdpNeighbor_KEYS) ProtoMessage()               {}
func (*CdpNeighbor_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CdpNeighbor_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *CdpNeighbor_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *CdpNeighbor_KEYS) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type CdpNeighbor struct {
	// Next neighbor in the list
	CdpNeighbor []*CdpNeighborItem `protobuf:"bytes,50,rep,name=cdp_neighbor,json=cdpNeighbor" json:"cdp_neighbor,omitempty"`
}

func (m *CdpNeighbor) Reset()                    { *m = CdpNeighbor{} }
func (m *CdpNeighbor) String() string            { return proto.CompactTextString(m) }
func (*CdpNeighbor) ProtoMessage()               {}
func (*CdpNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CdpNeighbor) GetCdpNeighbor() []*CdpNeighborItem {
	if m != nil {
		return m.CdpNeighbor
	}
	return nil
}

type CdpNeighborItem struct {
	// Interface the neighbor entry was received on
	ReceivingInterfaceName string `protobuf:"bytes,1,opt,name=receiving_interface_name,json=receivingInterfaceName" json:"receiving_interface_name,omitempty"`
	// Device identifier
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// Outgoing port identifier
	PortId string `protobuf:"bytes,3,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	// Version number
	HeaderVersion uint32 `protobuf:"varint,4,opt,name=header_version,json=headerVersion" json:"header_version,omitempty"`
	// Remaining hold time
	HoldTime uint32 `protobuf:"varint,5,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	// Capabilities
	Capabilities string `protobuf:"bytes,6,opt,name=capabilities" json:"capabilities,omitempty"`
	// Platform type
	Platform string `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	// Detailed neighbor info
	Detail *CdpNeighborDetail `protobuf:"bytes,8,opt,name=detail" json:"detail,omitempty"`
}

func (m *CdpNeighborItem) Reset()                    { *m = CdpNeighborItem{} }
func (m *CdpNeighborItem) String() string            { return proto.CompactTextString(m) }
func (*CdpNeighborItem) ProtoMessage()               {}
func (*CdpNeighborItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CdpNeighborItem) GetReceivingInterfaceName() string {
	if m != nil {
		return m.ReceivingInterfaceName
	}
	return ""
}

func (m *CdpNeighborItem) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CdpNeighborItem) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *CdpNeighborItem) GetHeaderVersion() uint32 {
	if m != nil {
		return m.HeaderVersion
	}
	return 0
}

func (m *CdpNeighborItem) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *CdpNeighborItem) GetCapabilities() string {
	if m != nil {
		return m.Capabilities
	}
	return ""
}

func (m *CdpNeighborItem) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CdpNeighborItem) GetDetail() *CdpNeighborDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type In6AddrTd struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *In6AddrTd) Reset()                    { *m = In6AddrTd{} }
func (m *In6AddrTd) String() string            { return proto.CompactTextString(m) }
func (*In6AddrTd) ProtoMessage()               {}
func (*In6AddrTd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *In6AddrTd) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CdpL3Addr struct {
	AddressType string `protobuf:"bytes,1,opt,name=address_type,json=addressType" json:"address_type,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 address
	Ipv6Address *In6AddrTd `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *CdpL3Addr) Reset()                    { *m = CdpL3Addr{} }
func (m *CdpL3Addr) String() string            { return proto.CompactTextString(m) }
func (*CdpL3Addr) ProtoMessage()               {}
func (*CdpL3Addr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CdpL3Addr) GetAddressType() string {
	if m != nil {
		return m.AddressType
	}
	return ""
}

func (m *CdpL3Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *CdpL3Addr) GetIpv6Address() *In6AddrTd {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type CdpAddrEntry struct {
	// Next address entry in list
	CdpAddrEntry []*CdpAddrEntryItem `protobuf:"bytes,1,rep,name=cdp_addr_entry,json=cdpAddrEntry" json:"cdp_addr_entry,omitempty"`
}

func (m *CdpAddrEntry) Reset()                    { *m = CdpAddrEntry{} }
func (m *CdpAddrEntry) String() string            { return proto.CompactTextString(m) }
func (*CdpAddrEntry) ProtoMessage()               {}
func (*CdpAddrEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CdpAddrEntry) GetCdpAddrEntry() []*CdpAddrEntryItem {
	if m != nil {
		return m.CdpAddrEntry
	}
	return nil
}

type CdpAddrEntryItem struct {
	// Network layer address
	Address *CdpL3Addr `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *CdpAddrEntryItem) Reset()                    { *m = CdpAddrEntryItem{} }
func (m *CdpAddrEntryItem) String() string            { return proto.CompactTextString(m) }
func (*CdpAddrEntryItem) ProtoMessage()               {}
func (*CdpAddrEntryItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CdpAddrEntryItem) GetAddress() *CdpL3Addr {
	if m != nil {
		return m.Address
	}
	return nil
}

type CdpProtHelloEntry struct {
	// Next protocol hello entry in list
	CdpProtHelloEntry []*CdpProtHelloEntryItem `protobuf:"bytes,1,rep,name=cdp_prot_hello_entry,json=cdpProtHelloEntry" json:"cdp_prot_hello_entry,omitempty"`
}

func (m *CdpProtHelloEntry) Reset()                    { *m = CdpProtHelloEntry{} }
func (m *CdpProtHelloEntry) String() string            { return proto.CompactTextString(m) }
func (*CdpProtHelloEntry) ProtoMessage()               {}
func (*CdpProtHelloEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CdpProtHelloEntry) GetCdpProtHelloEntry() []*CdpProtHelloEntryItem {
	if m != nil {
		return m.CdpProtHelloEntry
	}
	return nil
}

type CdpProtHelloEntryItem struct {
	// Protocol Hello msg
	HelloMessage []byte `protobuf:"bytes,1,opt,name=hello_message,json=helloMessage,proto3" json:"hello_message,omitempty"`
}

func (m *CdpProtHelloEntryItem) Reset()                    { *m = CdpProtHelloEntryItem{} }
func (m *CdpProtHelloEntryItem) String() string            { return proto.CompactTextString(m) }
func (*CdpProtHelloEntryItem) ProtoMessage()               {}
func (*CdpProtHelloEntryItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CdpProtHelloEntryItem) GetHelloMessage() []byte {
	if m != nil {
		return m.HelloMessage
	}
	return nil
}

type CdpNeighborDetail struct {
	// List of network addresses
	NetworkAddresses *CdpAddrEntry `protobuf:"bytes,1,opt,name=network_addresses,json=networkAddresses" json:"network_addresses,omitempty"`
	// Version TLV
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// List of protocol hello entries
	ProtocolHelloList *CdpProtHelloEntry `protobuf:"bytes,3,opt,name=protocol_hello_list,json=protocolHelloList" json:"protocol_hello_list,omitempty"`
	// VTP domain
	VtpDomain string `protobuf:"bytes,4,opt,name=vtp_domain,json=vtpDomain" json:"vtp_domain,omitempty"`
	// Native VLAN
	NativeVlan uint32 `protobuf:"varint,5,opt,name=native_vlan,json=nativeVlan" json:"native_vlan,omitempty"`
	// Duplex setting
	Duplex string `protobuf:"bytes,6,opt,name=duplex" json:"duplex,omitempty"`
	// SysName
	SystemName string `protobuf:"bytes,7,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
}

func (m *CdpNeighborDetail) Reset()                    { *m = CdpNeighborDetail{} }
func (m *CdpNeighborDetail) String() string            { return proto.CompactTextString(m) }
func (*CdpNeighborDetail) ProtoMessage()               {}
func (*CdpNeighborDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CdpNeighborDetail) GetNetworkAddresses() *CdpAddrEntry {
	if m != nil {
		return m.NetworkAddresses
	}
	return nil
}

func (m *CdpNeighborDetail) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CdpNeighborDetail) GetProtocolHelloList() *CdpProtHelloEntry {
	if m != nil {
		return m.ProtocolHelloList
	}
	return nil
}

func (m *CdpNeighborDetail) GetVtpDomain() string {
	if m != nil {
		return m.VtpDomain
	}
	return ""
}

func (m *CdpNeighborDetail) GetNativeVlan() uint32 {
	if m != nil {
		return m.NativeVlan
	}
	return 0
}

func (m *CdpNeighborDetail) GetDuplex() string {
	if m != nil {
		return m.Duplex
	}
	return ""
}

func (m *CdpNeighborDetail) GetSystemName() string {
	if m != nil {
		return m.SystemName
	}
	return ""
}

func init() {
	proto.RegisterType((*CdpNeighbor_KEYS)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_neighbor_KEYS")
	proto.RegisterType((*CdpNeighbor)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_neighbor")
	proto.RegisterType((*CdpNeighborItem)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_neighbor_item")
	proto.RegisterType((*In6AddrTd)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.in6_addr_td")
	proto.RegisterType((*CdpL3Addr)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_l3_addr")
	proto.RegisterType((*CdpAddrEntry)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_addr_entry")
	proto.RegisterType((*CdpAddrEntryItem)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_addr_entry_item")
	proto.RegisterType((*CdpProtHelloEntry)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_prot_hello_entry")
	proto.RegisterType((*CdpProtHelloEntryItem)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_prot_hello_entry_item")
	proto.RegisterType((*CdpNeighborDetail)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.details.detail.cdp_neighbor_detail")
}

func init() { proto.RegisterFile("cdp_neighbor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4d, 0x4f, 0x14, 0x31,
	0x18, 0xc7, 0x33, 0xac, 0xec, 0xcb, 0xb3, 0xbb, 0x44, 0x0a, 0xc1, 0x51, 0x62, 0x5c, 0x87, 0x98,
	0xec, 0x69, 0x0e, 0x60, 0x88, 0x17, 0x13, 0x49, 0x24, 0x11, 0x15, 0x42, 0x06, 0x42, 0xf4, 0xd4,
	0x94, 0x69, 0x61, 0xab, 0x33, 0xd3, 0x49, 0x5b, 0x46, 0x56, 0x8f, 0x9c, 0xf4, 0x63, 0x78, 0xf4,
	0x63, 0xf8, 0x95, 0xfc, 0x02, 0xa6, 0x2f, 0x03, 0xbb, 0x1b, 0x39, 0xb1, 0x5e, 0x76, 0xd2, 0x5f,
	0xff, 0x7d, 0x9e, 0x3e, 0xff, 0xb6, 0xcf, 0x02, 0x4a, 0x69, 0x89, 0x0b, 0xc6, 0xcf, 0x47, 0xa7,
	0x42, 0xc6, 0xa5, 0x14, 0x5a, 0xa0, 0x97, 0x29, 0x57, 0xa9, 0xc0, 0x5c, 0x28, 0x7c, 0x29, 0xb1,
	0x11, 0x88, 0x92, 0xc9, 0x38, 0xa5, 0x65, 0x5c, 0x08, 0xca, 0x94, 0xfd, 0x8d, 0xeb, 0x45, 0x2a,
	0xa6, 0x4c, 0x13, 0x9e, 0xd5, 0xdf, 0x48, 0xc3, 0xf2, 0x64, 0x50, 0xfc, 0x6e, 0xf7, 0xe3, 0x11,
	0x5a, 0x87, 0x8e, 0x59, 0x85, 0x0b, 0x92, 0xb3, 0x30, 0x18, 0x04, 0xc3, 0x4e, 0xd2, 0x36, 0xe0,
	0x80, 0xe4, 0x0c, 0x3d, 0x83, 0x25, 0x5e, 0x68, 0x26, 0xcf, 0x48, 0xea, 0x15, 0x0b, 0x56, 0xd1,
	0xbf, 0xa6, 0x56, 0xb6, 0x0e, 0x1d, 0xca, 0x2a, 0x9e, 0x32, 0xcc, 0x69, 0xd8, 0x70, 0x31, 0x1c,
	0xd8, 0xa3, 0xd1, 0x55, 0x00, 0xbd, 0xc9, 0xb4, 0x48, 0x4d, 0x8f, 0xc3, 0xcd, 0x41, 0x63, 0xd8,
	0xdd, 0x3c, 0x8c, 0xef, 0x54, 0x5c, 0x3c, 0x55, 0x19, 0xd7, 0x2c, 0x4f, 0xba, 0x29, 0x2d, 0x0f,
	0x3c, 0x89, 0xfe, 0x2c, 0xcc, 0x14, 0x6f, 0x24, 0xe8, 0x05, 0x84, 0x92, 0xa5, 0x8c, 0x57, 0xbc,
	0x38, 0xc7, 0x33, 0x95, 0x3a, 0x2f, 0xd6, 0xae, 0xe7, 0xf7, 0x6e, 0x2f, 0x79, 0x61, 0xba, 0x64,
	0xf4, 0x00, 0x5a, 0xa5, 0x90, 0xfa, 0xc6, 0x8d, 0xa6, 0x19, 0xee, 0x51, 0xe3, 0xe7, 0x88, 0x11,
	0xca, 0x24, 0xae, 0x98, 0x54, 0x5c, 0x14, 0xe1, 0xbd, 0x41, 0x30, 0xec, 0x27, 0x7d, 0x47, 0x4f,
	0x1c, 0x34, 0xc1, 0x47, 0x22, 0xa3, 0x58, 0xf3, 0x9c, 0x85, 0x8b, 0x56, 0xd1, 0x36, 0xe0, 0x98,
	0xe7, 0x0c, 0x45, 0xd0, 0x4b, 0x49, 0x49, 0x4e, 0x79, 0xc6, 0x35, 0x67, 0x2a, 0x6c, 0xda, 0x0c,
	0x53, 0x0c, 0x3d, 0x82, 0x76, 0x99, 0x11, 0x7d, 0x26, 0x64, 0x1e, 0xb6, 0xdc, 0xe6, 0xea, 0x31,
	0xfa, 0x04, 0x4d, 0x67, 0x59, 0xd8, 0x1e, 0x04, 0xc3, 0xee, 0x66, 0x32, 0x4f, 0xe3, 0x1d, 0x4b,
	0x7c, 0x86, 0x68, 0x03, 0xba, 0xbc, 0xd8, 0xc6, 0x84, 0x52, 0x89, 0x35, 0x45, 0xab, 0xb0, 0x58,
	0x91, 0xec, 0xa2, 0xf6, 0xd6, 0x0d, 0xa2, 0xdf, 0x01, 0x98, 0xa3, 0xc2, 0xd9, 0x96, 0x15, 0xa2,
	0xa7, 0xd0, 0x33, 0x5f, 0xa6, 0x14, 0xd6, 0xe3, 0xb2, 0x16, 0x77, 0x3d, 0x3b, 0x1e, 0x97, 0xcc,
	0x48, 0x78, 0x59, 0x3d, 0xc7, 0x9e, 0xf9, 0x03, 0xe8, 0x1a, 0xb6, 0xe3, 0x10, 0xca, 0xad, 0x64,
	0xfb, 0x5a, 0xd2, 0xb0, 0xc5, 0xbe, 0xbd, 0x63, 0xb1, 0x13, 0xd5, 0xd8, 0x74, 0xdb, 0x3e, 0x5d,
	0xf4, 0x23, 0x80, 0x25, 0x13, 0xcd, 0x4e, 0xb2, 0x42, 0xcb, 0x31, 0xba, 0x9c, 0x25, 0x61, 0x60,
	0x6f, 0xfa, 0x3c, 0x0c, 0xbf, 0x09, 0xea, 0xee, 0xba, 0x79, 0x51, 0x66, 0x2b, 0xbb, 0x06, 0x45,
	0xdf, 0x60, 0xe5, 0x1f, 0x22, 0x44, 0xa1, 0x55, 0xbb, 0x11, 0xcc, 0xc5, 0x8d, 0x89, 0x53, 0x4b,
	0xea, 0xd0, 0xd1, 0xcf, 0x00, 0x56, 0xcd, 0x84, 0x69, 0x59, 0x78, 0xc4, 0xb2, 0x4c, 0x78, 0x3f,
	0xbe, 0xdf, 0x32, 0xe1, 0x6d, 0xf9, 0x30, 0x87, 0xcd, 0xcc, 0x86, 0x76, 0xe6, 0x98, 0x87, 0x7f,
	0x28, 0x85, 0x7e, 0x63, 0x26, 0x9c, 0x43, 0xaf, 0xe0, 0xe1, 0xad, 0x7a, 0xb4, 0x01, 0x7d, 0xc7,
	0x72, 0xa6, 0x14, 0x39, 0x77, 0x37, 0xb0, 0x97, 0xf4, 0x2c, 0xdc, 0x77, 0x2c, 0xfa, 0xd5, 0x70,
	0x26, 0xcf, 0x5c, 0x7d, 0xf4, 0x15, 0x96, 0x0b, 0xa6, 0xbf, 0x08, 0xf9, 0xb9, 0xbe, 0x7a, 0xac,
	0xb6, 0x7b, 0x7f, 0xae, 0x07, 0x9f, 0xdc, 0xf7, 0x79, 0x76, 0xea, 0x34, 0x28, 0x84, 0x56, 0xdd,
	0x57, 0xdc, 0x8b, 0xa8, 0x87, 0xe8, 0x2a, 0x80, 0x15, 0xfb, 0x1f, 0x92, 0x8a, 0xcc, 0x17, 0x9c,
	0x71, 0xa5, 0xfd, 0xab, 0x38, 0xfa, 0x0f, 0xd6, 0x27, 0xcb, 0x75, 0x3e, 0x6b, 0xfb, 0x7b, 0xae,
	0x34, 0x7a, 0x0c, 0x50, 0xe9, 0x12, 0x53, 0x91, 0x13, 0xee, 0x5a, 0x5f, 0x27, 0xe9, 0x54, 0xba,
	0x7c, 0x6d, 0x01, 0x7a, 0x02, 0xdd, 0x82, 0x68, 0x5e, 0x31, 0x5c, 0x65, 0xa4, 0xf0, 0x8d, 0x0f,
	0x1c, 0x3a, 0xc9, 0x48, 0x81, 0xd6, 0xa0, 0x49, 0x2f, 0xca, 0x8c, 0x5d, 0xfa, 0xa6, 0xe7, 0x47,
	0x66, 0xa1, 0x1a, 0x2b, 0xcd, 0x72, 0xd7, 0xb9, 0x5d, 0xc7, 0x03, 0x87, 0x4c, 0xb7, 0x3e, 0x6d,
	0xda, 0xbd, 0x6c, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x3a, 0xe9, 0x70, 0x55, 0x07, 0x00,
	0x00,
}
