// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdp_interface.proto

/*
Package cisco_ios_xr_cdp_oper_cdp_nodes_node_interfaces_interface is a generated protocol buffer package.

It is generated from these files:
	cdp_interface.proto

It has these top-level messages:
	CdpInterface_KEYS
	CdpInterface
*/
package cisco_ios_xr_cdp_oper_cdp_nodes_node_interfaces_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Information about an interface that CDP is running on
type CdpInterface_KEYS struct {
	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *CdpInterface_KEYS) Reset()                    { *m = CdpInterface_KEYS{} }
func (m *CdpInterface_KEYS) String() string            { return proto.CompactTextString(m) }
func (*CdpInterface_KEYS) ProtoMessage()               {}
func (*CdpInterface_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CdpInterface_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *CdpInterface_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type CdpInterface struct {
	// Interface
	InterfaceHandle string `protobuf:"bytes,50,opt,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// Interface basecaps state
	BasecapsState uint32 `protobuf:"varint,51,opt,name=basecaps_state,json=basecapsState" json:"basecaps_state,omitempty"`
	// CDP protocol state
	CdpProtocolState uint32 `protobuf:"varint,52,opt,name=cdp_protocol_state,json=cdpProtocolState" json:"cdp_protocol_state,omitempty"`
	// Interface encapsulation
	InterfaceEncaps string `protobuf:"bytes,53,opt,name=interface_encaps,json=interfaceEncaps" json:"interface_encaps,omitempty"`
}

func (m *CdpInterface) Reset()                    { *m = CdpInterface{} }
func (m *CdpInterface) String() string            { return proto.CompactTextString(m) }
func (*CdpInterface) ProtoMessage()               {}
func (*CdpInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CdpInterface) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *CdpInterface) GetBasecapsState() uint32 {
	if m != nil {
		return m.BasecapsState
	}
	return 0
}

func (m *CdpInterface) GetCdpProtocolState() uint32 {
	if m != nil {
		return m.CdpProtocolState
	}
	return 0
}

func (m *CdpInterface) GetInterfaceEncaps() string {
	if m != nil {
		return m.InterfaceEncaps
	}
	return ""
}

func init() {
	proto.RegisterType((*CdpInterface_KEYS)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.interfaces.interface.cdp_interface_KEYS")
	proto.RegisterType((*CdpInterface)(nil), "cisco_ios_xr_cdp_oper.cdp.nodes.node.interfaces.interface.cdp_interface")
}

func init() { proto.RegisterFile("cdp_interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x14, 0x45, 0x89, 0x0b, 0xb1, 0x81, 0x68, 0x89, 0x9b, 0x80, 0x9b, 0x52, 0x10, 0x2a, 0x48, 0x16,
	0x56, 0x17, 0x7e, 0x40, 0x41, 0x10, 0x44, 0xda, 0x8d, 0xae, 0x42, 0xfa, 0xf2, 0xc4, 0x81, 0x99,
	0x24, 0x24, 0x59, 0xf8, 0x6d, 0x7e, 0x9d, 0xe4, 0xcd, 0x38, 0xc3, 0x74, 0x33, 0x0c, 0x27, 0xe7,
	0xde, 0x1b, 0xc2, 0xaf, 0xc1, 0x45, 0xd3, 0xf8, 0x82, 0xe9, 0xcb, 0x02, 0xea, 0x98, 0x42, 0x09,
	0xf2, 0x19, 0x9a, 0x0c, 0xc1, 0x34, 0x21, 0x9b, 0x9f, 0x64, 0xaa, 0x11, 0x22, 0x26, 0x0d, 0x2e,
	0x6a, 0x1f, 0x1c, 0x66, 0xfa, 0xea, 0x31, 0x95, 0xa7, 0xdf, 0xf5, 0x07, 0x97, 0xb3, 0x46, 0xf3,
	0xba, 0xfb, 0x3c, 0xc8, 0x1b, 0xbe, 0xa8, 0x11, 0xe3, 0x6d, 0x87, 0x8a, 0xad, 0xd8, 0x66, 0xb1,
	0xbf, 0xa8, 0xe0, 0xcd, 0x76, 0x28, 0x6f, 0xf9, 0xe5, 0xa4, 0x93, 0x71, 0x46, 0x86, 0x18, 0x69,
	0xd5, 0xd6, 0xbf, 0x8c, 0x8b, 0x59, 0xb5, 0xbc, 0xe3, 0xcb, 0x29, 0xf8, 0x6d, 0xbd, 0x6b, 0x51,
	0x3d, 0x50, 0xf4, 0x6a, 0xe4, 0x2f, 0x84, 0xeb, 0xc6, 0xd1, 0x66, 0x04, 0x1b, 0xb3, 0xc9, 0xc5,
	0x16, 0x54, 0xdb, 0x15, 0xdb, 0x88, 0xbd, 0xf8, 0xa7, 0x87, 0x0a, 0xe5, 0x7d, 0x7f, 0x7b, 0x7a,
	0x05, 0x08, 0xed, 0xa0, 0x3e, 0x92, 0xba, 0x04, 0x17, 0xdf, 0x87, 0x83, 0xde, 0x9e, 0xed, 0xa3,
	0xaf, 0x35, 0xea, 0xe9, 0x64, 0x7f, 0x47, 0xf8, 0x78, 0x4e, 0x95, 0xdb, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd9, 0xee, 0xe3, 0xf0, 0x6f, 0x01, 0x00, 0x00,
}
