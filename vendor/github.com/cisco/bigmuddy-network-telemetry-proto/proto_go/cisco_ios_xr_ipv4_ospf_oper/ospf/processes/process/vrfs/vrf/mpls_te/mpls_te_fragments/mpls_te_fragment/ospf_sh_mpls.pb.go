// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_mpls.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_mpls.proto

It has these top-level messages:
	OspfShMpls_KEYS
	OspfShMpls
	OspfShMplsIxcdCap
	OspfShMplsLinkProtoprio
	OspfShMplsBw
	OspfShMplsEag
	MplsTelOptBcVal
	MplsTelOptSrlgVal
	BwSubTlvValueCommon
	BwFixedSubtlvValue
	BwFlexSubtlvValue
	IxcdBwSubTlvValueUnion
	IxcdBwSubTlv
	IxcdLePscInfo
	IxcdBwSubTlvArr
	IxcdTlvSwitchingcapValueUnion
	MplsTelOptIxcdVal
	MplsTelOptUnidVal
	MplstelTlvValueUnion
	OspfShMplsTelOptTlv
	OspfShMplsLink
	OspfShMplsFragment
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF MPLS-TE Information
type OspfShMpls_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AreaId      uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
}

func (m *OspfShMpls_KEYS) Reset()                    { *m = OspfShMpls_KEYS{} }
func (m *OspfShMpls_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShMpls_KEYS) ProtoMessage()               {}
func (*OspfShMpls_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShMpls_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShMpls_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *OspfShMpls_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type OspfShMpls struct {
	// OSPF MPLS-TE router ID
	MplsTeRouterId string `protobuf:"bytes,50,opt,name=mpls_te_router_id,json=mplsTeRouterId" json:"mpls_te_router_id,omitempty"`
	// If true, MPLS-TE enabled in area
	MplsTeEnabled bool `protobuf:"varint,51,opt,name=mpls_te_enabled,json=mplsTeEnabled" json:"mpls_te_enabled,omitempty"`
	// If true, MPLS-TE initialized in the area
	MplsTeInitialized bool `protobuf:"varint,52,opt,name=mpls_te_initialized,json=mplsTeInitialized" json:"mpls_te_initialized,omitempty"`
	// Area ID string in decimal or dotted decimal format
	MplsTeAreaId string `protobuf:"bytes,53,opt,name=mpls_te_area_id,json=mplsTeAreaId" json:"mpls_te_area_id,omitempty"`
	// Area information instance
	MplsTeAreaInstance uint32 `protobuf:"varint,54,opt,name=mpls_te_area_instance,json=mplsTeAreaInstance" json:"mpls_te_area_instance,omitempty"`
	// MPLS-TE router address
	MplsTeRouterAddress string `protobuf:"bytes,55,opt,name=mpls_te_router_address,json=mplsTeRouterAddress" json:"mpls_te_router_address,omitempty"`
	// MPLS-TE links in the area
	MplsTeLinks []*OspfShMplsLink `protobuf:"bytes,56,rep,name=mpls_te_links,json=mplsTeLinks" json:"mpls_te_links,omitempty"`
	// Next MPLS-TE fragment ID
	MplsTeNextFragmentId uint32 `protobuf:"varint,57,opt,name=mpls_te_next_fragment_id,json=mplsTeNextFragmentId" json:"mpls_te_next_fragment_id,omitempty"`
	// If true, fragment has space for next link
	SpaciousFragment bool `protobuf:"varint,58,opt,name=spacious_fragment,json=spaciousFragment" json:"spacious_fragment,omitempty"`
	// MPLS TE fragments in the area
	MplsTeFragment []*OspfShMplsFragment `protobuf:"bytes,59,rep,name=mpls_te_fragment,json=mplsTeFragment" json:"mpls_te_fragment,omitempty"`
}

func (m *OspfShMpls) Reset()                    { *m = OspfShMpls{} }
func (m *OspfShMpls) String() string            { return proto.CompactTextString(m) }
func (*OspfShMpls) ProtoMessage()               {}
func (*OspfShMpls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShMpls) GetMplsTeRouterId() string {
	if m != nil {
		return m.MplsTeRouterId
	}
	return ""
}

func (m *OspfShMpls) GetMplsTeEnabled() bool {
	if m != nil {
		return m.MplsTeEnabled
	}
	return false
}

func (m *OspfShMpls) GetMplsTeInitialized() bool {
	if m != nil {
		return m.MplsTeInitialized
	}
	return false
}

func (m *OspfShMpls) GetMplsTeAreaId() string {
	if m != nil {
		return m.MplsTeAreaId
	}
	return ""
}

func (m *OspfShMpls) GetMplsTeAreaInstance() uint32 {
	if m != nil {
		return m.MplsTeAreaInstance
	}
	return 0
}

func (m *OspfShMpls) GetMplsTeRouterAddress() string {
	if m != nil {
		return m.MplsTeRouterAddress
	}
	return ""
}

func (m *OspfShMpls) GetMplsTeLinks() []*OspfShMplsLink {
	if m != nil {
		return m.MplsTeLinks
	}
	return nil
}

func (m *OspfShMpls) GetMplsTeNextFragmentId() uint32 {
	if m != nil {
		return m.MplsTeNextFragmentId
	}
	return 0
}

func (m *OspfShMpls) GetSpaciousFragment() bool {
	if m != nil {
		return m.SpaciousFragment
	}
	return false
}

func (m *OspfShMpls) GetMplsTeFragment() []*OspfShMplsFragment {
	if m != nil {
		return m.MplsTeFragment
	}
	return nil
}

// Link switching capability
type OspfShMplsIxcdCap struct {
	// Link Switching Capability
	LinkSwitchingCapability uint32 `protobuf:"varint,1,opt,name=link_switching_capability,json=linkSwitchingCapability" json:"link_switching_capability,omitempty"`
	// Link Encoding
	LinkEncoding uint32 `protobuf:"varint,2,opt,name=link_encoding,json=linkEncoding" json:"link_encoding,omitempty"`
	// Maximum LSP bandwidth for each priority (bytes/s)
	MaximumLspBwPerPriority []uint64 `protobuf:"varint,3,rep,packed,name=maximum_lsp_bw_per_priority,json=maximumLspBwPerPriority" json:"maximum_lsp_bw_per_priority,omitempty"`
	// Minimum LSP bandwidth (bytes/s)
	MinimumLspBw uint64 `protobuf:"varint,4,opt,name=minimum_lsp_bw,json=minimumLspBw" json:"minimum_lsp_bw,omitempty"`
	// Link MTU size (bytes)
	LinkMtu uint32 `protobuf:"varint,5,opt,name=link_mtu,json=linkMtu" json:"link_mtu,omitempty"`
}

func (m *OspfShMplsIxcdCap) Reset()                    { *m = OspfShMplsIxcdCap{} }
func (m *OspfShMplsIxcdCap) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsIxcdCap) ProtoMessage()               {}
func (*OspfShMplsIxcdCap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShMplsIxcdCap) GetLinkSwitchingCapability() uint32 {
	if m != nil {
		return m.LinkSwitchingCapability
	}
	return 0
}

func (m *OspfShMplsIxcdCap) GetLinkEncoding() uint32 {
	if m != nil {
		return m.LinkEncoding
	}
	return 0
}

func (m *OspfShMplsIxcdCap) GetMaximumLspBwPerPriority() []uint64 {
	if m != nil {
		return m.MaximumLspBwPerPriority
	}
	return nil
}

func (m *OspfShMplsIxcdCap) GetMinimumLspBw() uint64 {
	if m != nil {
		return m.MinimumLspBw
	}
	return 0
}

func (m *OspfShMplsIxcdCap) GetLinkMtu() uint32 {
	if m != nil {
		return m.LinkMtu
	}
	return 0
}

// Link protocol and priority capability
type OspfShMplsLinkProtoprio struct {
	// Link protocol capability
	LinkProtocolCapability uint32 `protobuf:"varint,1,opt,name=link_protocol_capability,json=linkProtocolCapability" json:"link_protocol_capability,omitempty"`
	// Link protocol priority
	LinkProtocolPriority uint32 `protobuf:"varint,2,opt,name=link_protocol_priority,json=linkProtocolPriority" json:"link_protocol_priority,omitempty"`
}

func (m *OspfShMplsLinkProtoprio) Reset()                    { *m = OspfShMplsLinkProtoprio{} }
func (m *OspfShMplsLinkProtoprio) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsLinkProtoprio) ProtoMessage()               {}
func (*OspfShMplsLinkProtoprio) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OspfShMplsLinkProtoprio) GetLinkProtocolCapability() uint32 {
	if m != nil {
		return m.LinkProtocolCapability
	}
	return 0
}

func (m *OspfShMplsLinkProtoprio) GetLinkProtocolPriority() uint32 {
	if m != nil {
		return m.LinkProtocolPriority
	}
	return 0
}

// Available bandwidth for each priority level
type OspfShMplsBw struct {
	// Unreserved bandwidth for each priority (bytes/s)
	BwPerPriority []uint64 `protobuf:"varint,1,rep,packed,name=bw_per_priority,json=bwPerPriority" json:"bw_per_priority,omitempty"`
}

func (m *OspfShMplsBw) Reset()                    { *m = OspfShMplsBw{} }
func (m *OspfShMplsBw) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsBw) ProtoMessage()               {}
func (*OspfShMplsBw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OspfShMplsBw) GetBwPerPriority() []uint64 {
	if m != nil {
		return m.BwPerPriority
	}
	return nil
}

// EXTENDED administrative group TLVs
type OspfShMplsEag struct {
	// Size of the extended admin group
	ExtendedAdminSize uint32 `protobuf:"varint,1,opt,name=extended_admin_size,json=extendedAdminSize" json:"extended_admin_size,omitempty"`
	// Value of Extended Admin Group
	ExtAdminData []uint32 `protobuf:"varint,2,rep,packed,name=ext_admin_data,json=extAdminData" json:"ext_admin_data,omitempty"`
}

func (m *OspfShMplsEag) Reset()                    { *m = OspfShMplsEag{} }
func (m *OspfShMplsEag) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsEag) ProtoMessage()               {}
func (*OspfShMplsEag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OspfShMplsEag) GetExtendedAdminSize() uint32 {
	if m != nil {
		return m.ExtendedAdminSize
	}
	return 0
}

func (m *OspfShMplsEag) GetExtAdminData() []uint32 {
	if m != nil {
		return m.ExtAdminData
	}
	return nil
}

// MPLS TE Link Optional TLV BC Data
type MplsTelOptBcVal struct {
	// Allocation Model ID
	ModelId uint32 `protobuf:"varint,1,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	// Value of BC TLV
	MplsteLinkBcBandwidth []uint64 `protobuf:"varint,2,rep,packed,name=mplste_link_bc_bandwidth,json=mplsteLinkBcBandwidth" json:"mplste_link_bc_bandwidth,omitempty"`
	// Number of BC TLVs
	NumBCs uint32 `protobuf:"varint,3,opt,name=num_b_cs,json=numBCs" json:"num_b_cs,omitempty"`
}

func (m *MplsTelOptBcVal) Reset()                    { *m = MplsTelOptBcVal{} }
func (m *MplsTelOptBcVal) String() string            { return proto.CompactTextString(m) }
func (*MplsTelOptBcVal) ProtoMessage()               {}
func (*MplsTelOptBcVal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MplsTelOptBcVal) GetModelId() uint32 {
	if m != nil {
		return m.ModelId
	}
	return 0
}

func (m *MplsTelOptBcVal) GetMplsteLinkBcBandwidth() []uint64 {
	if m != nil {
		return m.MplsteLinkBcBandwidth
	}
	return nil
}

func (m *MplsTelOptBcVal) GetNumBCs() uint32 {
	if m != nil {
		return m.NumBCs
	}
	return 0
}

// MPLS TE Link Optional TLV SRLG Data
type MplsTelOptSrlgVal struct {
	// Length of SRLG TLV
	SrlgLen uint32 `protobuf:"varint,1,opt,name=srlg_len,json=srlgLen" json:"srlg_len,omitempty"`
	// Number of SRLG TLVs
	NumSrlGs uint32 `protobuf:"varint,2,opt,name=num_srl_gs,json=numSrlGs" json:"num_srl_gs,omitempty"`
	// Value of SRLG TLV
	MplsteLinkSrlgData []uint32 `protobuf:"varint,3,rep,packed,name=mplste_link_srlg_data,json=mplsteLinkSrlgData" json:"mplste_link_srlg_data,omitempty"`
}

func (m *MplsTelOptSrlgVal) Reset()                    { *m = MplsTelOptSrlgVal{} }
func (m *MplsTelOptSrlgVal) String() string            { return proto.CompactTextString(m) }
func (*MplsTelOptSrlgVal) ProtoMessage()               {}
func (*MplsTelOptSrlgVal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MplsTelOptSrlgVal) GetSrlgLen() uint32 {
	if m != nil {
		return m.SrlgLen
	}
	return 0
}

func (m *MplsTelOptSrlgVal) GetNumSrlGs() uint32 {
	if m != nil {
		return m.NumSrlGs
	}
	return 0
}

func (m *MplsTelOptSrlgVal) GetMplsteLinkSrlgData() []uint32 {
	if m != nil {
		return m.MplsteLinkSrlgData
	}
	return nil
}

// Common values in both Fixed and Flex Sub TLV
type BwSubTlvValueCommon struct {
	// Signal Type
	SignalType uint32 `protobuf:"varint,1,opt,name=signal_type,json=signalType" json:"signal_type,omitempty"`
	// Number of stages
	NumStages uint32 `protobuf:"varint,2,opt,name=num_stages,json=numStages" json:"num_stages,omitempty"`
	// T Bit
	TBit uint32 `protobuf:"varint,3,opt,name=t_bit,json=tBit" json:"t_bit,omitempty"`
	// S Bit
	SBit uint32 `protobuf:"varint,4,opt,name=s_bit,json=sBit" json:"s_bit,omitempty"`
	// TSG
	Tsg uint32 `protobuf:"varint,5,opt,name=tsg" json:"tsg,omitempty"`
	// Res
	Res uint32 `protobuf:"varint,6,opt,name=res" json:"res,omitempty"`
	// Priority 0
	PriorityBit0 uint32 `protobuf:"varint,7,opt,name=priority_bit0,json=priorityBit0" json:"priority_bit0,omitempty"`
	// Priority 1
	PriorityBit1 uint32 `protobuf:"varint,8,opt,name=priority_bit1,json=priorityBit1" json:"priority_bit1,omitempty"`
	// Priority 2
	PriorityBit2 uint32 `protobuf:"varint,9,opt,name=priority_bit2,json=priorityBit2" json:"priority_bit2,omitempty"`
	// Priority 3
	PriorityBit3 uint32 `protobuf:"varint,10,opt,name=priority_bit3,json=priorityBit3" json:"priority_bit3,omitempty"`
	// Priority 4
	PriorityBit4 uint32 `protobuf:"varint,11,opt,name=priority_bit4,json=priorityBit4" json:"priority_bit4,omitempty"`
	// Priority 5
	PriorityBit5 uint32 `protobuf:"varint,12,opt,name=priority_bit5,json=priorityBit5" json:"priority_bit5,omitempty"`
	// Priority 6
	PriorityBit6 uint32 `protobuf:"varint,13,opt,name=priority_bit6,json=priorityBit6" json:"priority_bit6,omitempty"`
	// Priority 7
	PriorityBit7 uint32 `protobuf:"varint,14,opt,name=priority_bit7,json=priorityBit7" json:"priority_bit7,omitempty"`
	// Array of Stages
	Stage []byte `protobuf:"bytes,15,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *BwSubTlvValueCommon) Reset()                    { *m = BwSubTlvValueCommon{} }
func (m *BwSubTlvValueCommon) String() string            { return proto.CompactTextString(m) }
func (*BwSubTlvValueCommon) ProtoMessage()               {}
func (*BwSubTlvValueCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BwSubTlvValueCommon) GetSignalType() uint32 {
	if m != nil {
		return m.SignalType
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetNumStages() uint32 {
	if m != nil {
		return m.NumStages
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetTBit() uint32 {
	if m != nil {
		return m.TBit
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetSBit() uint32 {
	if m != nil {
		return m.SBit
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetTsg() uint32 {
	if m != nil {
		return m.Tsg
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetRes() uint32 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit0() uint32 {
	if m != nil {
		return m.PriorityBit0
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit1() uint32 {
	if m != nil {
		return m.PriorityBit1
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit2() uint32 {
	if m != nil {
		return m.PriorityBit2
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit3() uint32 {
	if m != nil {
		return m.PriorityBit3
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit4() uint32 {
	if m != nil {
		return m.PriorityBit4
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit5() uint32 {
	if m != nil {
		return m.PriorityBit5
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit6() uint32 {
	if m != nil {
		return m.PriorityBit6
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetPriorityBit7() uint32 {
	if m != nil {
		return m.PriorityBit7
	}
	return 0
}

func (m *BwSubTlvValueCommon) GetStage() []byte {
	if m != nil {
		return m.Stage
	}
	return nil
}

// Value of Fixed Sub TLV
type BwFixedSubtlvValue struct {
	// Value of Fixed Sub TLV
	FixedSubTlvValue *BwSubTlvValueCommon `protobuf:"bytes,1,opt,name=fixed_sub_tlv_value,json=fixedSubTlvValue" json:"fixed_sub_tlv_value,omitempty"`
	// Array of Unres Oduj Prio
	UnresOdujPrio []uint32 `protobuf:"varint,2,rep,packed,name=unres_oduj_prio,json=unresOdujPrio" json:"unres_oduj_prio,omitempty"`
}

func (m *BwFixedSubtlvValue) Reset()                    { *m = BwFixedSubtlvValue{} }
func (m *BwFixedSubtlvValue) String() string            { return proto.CompactTextString(m) }
func (*BwFixedSubtlvValue) ProtoMessage()               {}
func (*BwFixedSubtlvValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BwFixedSubtlvValue) GetFixedSubTlvValue() *BwSubTlvValueCommon {
	if m != nil {
		return m.FixedSubTlvValue
	}
	return nil
}

func (m *BwFixedSubtlvValue) GetUnresOdujPrio() []uint32 {
	if m != nil {
		return m.UnresOdujPrio
	}
	return nil
}

// Value of Flex Sub TLV
type BwFlexSubtlvValue struct {
	// Flex Sub TLV Value
	FlexSubTlvValueCommon *BwSubTlvValueCommon `protobuf:"bytes,1,opt,name=flex_sub_tlv_value_common,json=flexSubTlvValueCommon" json:"flex_sub_tlv_value_common,omitempty"`
	// Array of Unres LSP BW
	UnresLspbw []uint64 `protobuf:"varint,2,rep,packed,name=unres_lspbw,json=unresLspbw" json:"unres_lspbw,omitempty"`
	// Max LSP BW Array
	MaxLspbw []uint64 `protobuf:"varint,3,rep,packed,name=max_lspbw,json=maxLspbw" json:"max_lspbw,omitempty"`
}

func (m *BwFlexSubtlvValue) Reset()                    { *m = BwFlexSubtlvValue{} }
func (m *BwFlexSubtlvValue) String() string            { return proto.CompactTextString(m) }
func (*BwFlexSubtlvValue) ProtoMessage()               {}
func (*BwFlexSubtlvValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BwFlexSubtlvValue) GetFlexSubTlvValueCommon() *BwSubTlvValueCommon {
	if m != nil {
		return m.FlexSubTlvValueCommon
	}
	return nil
}

func (m *BwFlexSubtlvValue) GetUnresLspbw() []uint64 {
	if m != nil {
		return m.UnresLspbw
	}
	return nil
}

func (m *BwFlexSubtlvValue) GetMaxLspbw() []uint64 {
	if m != nil {
		return m.MaxLspbw
	}
	return nil
}

// Sub Tlv values for IXCD Bandwidth
type IxcdBwSubTlvValueUnion struct {
	IxcdbwSubTlvType uint32 `protobuf:"varint,1,opt,name=ixcdbw_sub_tlv_type,json=ixcdbwSubTlvType" json:"ixcdbw_sub_tlv_type,omitempty"`
	// Value of Fixed Sub TLV
	FixedBwSubTlvValue *BwFixedSubtlvValue `protobuf:"bytes,2,opt,name=fixed_bw_sub_tlv_value,json=fixedBwSubTlvValue" json:"fixed_bw_sub_tlv_value,omitempty"`
	// Value of Flex Sub TLV
	FlexBwSubTlvValue *BwFlexSubtlvValue `protobuf:"bytes,3,opt,name=flex_bw_sub_tlv_value,json=flexBwSubTlvValue" json:"flex_bw_sub_tlv_value,omitempty"`
}

func (m *IxcdBwSubTlvValueUnion) Reset()                    { *m = IxcdBwSubTlvValueUnion{} }
func (m *IxcdBwSubTlvValueUnion) String() string            { return proto.CompactTextString(m) }
func (*IxcdBwSubTlvValueUnion) ProtoMessage()               {}
func (*IxcdBwSubTlvValueUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IxcdBwSubTlvValueUnion) GetIxcdbwSubTlvType() uint32 {
	if m != nil {
		return m.IxcdbwSubTlvType
	}
	return 0
}

func (m *IxcdBwSubTlvValueUnion) GetFixedBwSubTlvValue() *BwFixedSubtlvValue {
	if m != nil {
		return m.FixedBwSubTlvValue
	}
	return nil
}

func (m *IxcdBwSubTlvValueUnion) GetFlexBwSubTlvValue() *BwFlexSubtlvValue {
	if m != nil {
		return m.FlexBwSubTlvValue
	}
	return nil
}

// IXCD BW sub tlv
type IxcdBwSubTlv struct {
	// Type of Sub TLV
	BwSubTlvType uint32 `protobuf:"varint,1,opt,name=bw_sub_tlv_type,json=bwSubTlvType" json:"bw_sub_tlv_type,omitempty"`
	// Length of BW Sub TLV
	BwSubTlvLength uint32 `protobuf:"varint,2,opt,name=bw_sub_tlv_length,json=bwSubTlvLength" json:"bw_sub_tlv_length,omitempty"`
	// Value of BW Sub TLV
	BwSubTlvValue *IxcdBwSubTlvValueUnion `protobuf:"bytes,3,opt,name=bw_sub_tlv_value,json=bwSubTlvValue" json:"bw_sub_tlv_value,omitempty"`
}

func (m *IxcdBwSubTlv) Reset()                    { *m = IxcdBwSubTlv{} }
func (m *IxcdBwSubTlv) String() string            { return proto.CompactTextString(m) }
func (*IxcdBwSubTlv) ProtoMessage()               {}
func (*IxcdBwSubTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IxcdBwSubTlv) GetBwSubTlvType() uint32 {
	if m != nil {
		return m.BwSubTlvType
	}
	return 0
}

func (m *IxcdBwSubTlv) GetBwSubTlvLength() uint32 {
	if m != nil {
		return m.BwSubTlvLength
	}
	return 0
}

func (m *IxcdBwSubTlv) GetBwSubTlvValue() *IxcdBwSubTlvValueUnion {
	if m != nil {
		return m.BwSubTlvValue
	}
	return nil
}

// IXCD LE PSC information
type IxcdLePscInfo struct {
	// Min LSP bandwidth
	MinLspBandwidth uint64 `protobuf:"varint,1,opt,name=min_lsp_bandwidth,json=minLspBandwidth" json:"min_lsp_bandwidth,omitempty"`
	//  Interface MTU
	PscInterfaceMtu uint32 `protobuf:"varint,2,opt,name=psc_interface_mtu,json=pscInterfaceMtu" json:"psc_interface_mtu,omitempty"`
}

func (m *IxcdLePscInfo) Reset()                    { *m = IxcdLePscInfo{} }
func (m *IxcdLePscInfo) String() string            { return proto.CompactTextString(m) }
func (*IxcdLePscInfo) ProtoMessage()               {}
func (*IxcdLePscInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IxcdLePscInfo) GetMinLspBandwidth() uint64 {
	if m != nil {
		return m.MinLspBandwidth
	}
	return 0
}

func (m *IxcdLePscInfo) GetPscInterfaceMtu() uint32 {
	if m != nil {
		return m.PscInterfaceMtu
	}
	return 0
}

// Array of BW Sub TLVs
type IxcdBwSubTlvArr struct {
	// Array of sub tlvs
	ArrBwSubTlVs []*IxcdBwSubTlv `protobuf:"bytes,1,rep,name=arr_bw_sub_tl_vs,json=arrBwSubTlVs" json:"arr_bw_sub_tl_vs,omitempty"`
}

func (m *IxcdBwSubTlvArr) Reset()                    { *m = IxcdBwSubTlvArr{} }
func (m *IxcdBwSubTlvArr) String() string            { return proto.CompactTextString(m) }
func (*IxcdBwSubTlvArr) ProtoMessage()               {}
func (*IxcdBwSubTlvArr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IxcdBwSubTlvArr) GetArrBwSubTlVs() []*IxcdBwSubTlv {
	if m != nil {
		return m.ArrBwSubTlVs
	}
	return nil
}

// Switching Cap values
type IxcdTlvSwitchingcapValueUnion struct {
	SwitchingCapType uint32 `protobuf:"varint,1,opt,name=switching_cap_type,json=switchingCapType" json:"switching_cap_type,omitempty"`
	// IXCD PSC information
	IxcdpscInfo *IxcdLePscInfo `protobuf:"bytes,2,opt,name=ixcdpsc_info,json=ixcdpscInfo" json:"ixcdpsc_info,omitempty"`
	// Sub-TLVs
	IxcdbwSubTlv *IxcdBwSubTlvArr `protobuf:"bytes,3,opt,name=ixcdbw_sub_tlv,json=ixcdbwSubTlv" json:"ixcdbw_sub_tlv,omitempty"`
}

func (m *IxcdTlvSwitchingcapValueUnion) Reset()                    { *m = IxcdTlvSwitchingcapValueUnion{} }
func (m *IxcdTlvSwitchingcapValueUnion) String() string            { return proto.CompactTextString(m) }
func (*IxcdTlvSwitchingcapValueUnion) ProtoMessage()               {}
func (*IxcdTlvSwitchingcapValueUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IxcdTlvSwitchingcapValueUnion) GetSwitchingCapType() uint32 {
	if m != nil {
		return m.SwitchingCapType
	}
	return 0
}

func (m *IxcdTlvSwitchingcapValueUnion) GetIxcdpscInfo() *IxcdLePscInfo {
	if m != nil {
		return m.IxcdpscInfo
	}
	return nil
}

func (m *IxcdTlvSwitchingcapValueUnion) GetIxcdbwSubTlv() *IxcdBwSubTlvArr {
	if m != nil {
		return m.IxcdbwSubTlv
	}
	return nil
}

// MPLS TE Link Optional TLV IXCD Data
type MplsTelOptIxcdVal struct {
	// SCap
	SwitchingCap uint32 `protobuf:"varint,1,opt,name=switching_cap,json=switchingCap" json:"switching_cap,omitempty"`
	// Rile LenCode
	RileLenCode uint32 `protobuf:"varint,2,opt,name=rile_len_code,json=rileLenCode" json:"rile_len_code,omitempty"`
	// Max LSP bandwidth array
	MaxLspbw []int64 `protobuf:"zigzag64,3,rep,packed,name=max_lspbw,json=maxLspbw" json:"max_lspbw,omitempty"`
	// Fixed SCSI count
	FixedScsiCount uint32 `protobuf:"varint,4,opt,name=fixed_scsi_count,json=fixedScsiCount" json:"fixed_scsi_count,omitempty"`
	// Flexible SCSI count
	FlexScsiCount uint32 `protobuf:"varint,5,opt,name=flex_scsi_count,json=flexScsiCount" json:"flex_scsi_count,omitempty"`
	// Switching Cap type
	IxcdSwitchingCapType *IxcdTlvSwitchingcapValueUnion `protobuf:"bytes,6,opt,name=ixcd_switching_cap_type,json=ixcdSwitchingCapType" json:"ixcd_switching_cap_type,omitempty"`
}

func (m *MplsTelOptIxcdVal) Reset()                    { *m = MplsTelOptIxcdVal{} }
func (m *MplsTelOptIxcdVal) String() string            { return proto.CompactTextString(m) }
func (*MplsTelOptIxcdVal) ProtoMessage()               {}
func (*MplsTelOptIxcdVal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MplsTelOptIxcdVal) GetSwitchingCap() uint32 {
	if m != nil {
		return m.SwitchingCap
	}
	return 0
}

func (m *MplsTelOptIxcdVal) GetRileLenCode() uint32 {
	if m != nil {
		return m.RileLenCode
	}
	return 0
}

func (m *MplsTelOptIxcdVal) GetMaxLspbw() []int64 {
	if m != nil {
		return m.MaxLspbw
	}
	return nil
}

func (m *MplsTelOptIxcdVal) GetFixedScsiCount() uint32 {
	if m != nil {
		return m.FixedScsiCount
	}
	return 0
}

func (m *MplsTelOptIxcdVal) GetFlexScsiCount() uint32 {
	if m != nil {
		return m.FlexScsiCount
	}
	return 0
}

func (m *MplsTelOptIxcdVal) GetIxcdSwitchingCapType() *IxcdTlvSwitchingcapValueUnion {
	if m != nil {
		return m.IxcdSwitchingCapType
	}
	return nil
}

// MPLS TE Link Optional TLV IXCD Data
type MplsTelOptUnidVal struct {
	// Uni Dir Delay
	UniDirDelay uint32 `protobuf:"varint,1,opt,name=uni_dir_delay,json=uniDirDelay" json:"uni_dir_delay,omitempty"`
}

func (m *MplsTelOptUnidVal) Reset()                    { *m = MplsTelOptUnidVal{} }
func (m *MplsTelOptUnidVal) String() string            { return proto.CompactTextString(m) }
func (*MplsTelOptUnidVal) ProtoMessage()               {}
func (*MplsTelOptUnidVal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MplsTelOptUnidVal) GetUniDirDelay() uint32 {
	if m != nil {
		return m.UniDirDelay
	}
	return 0
}

// Value of TLVs
type MplstelTlvValueUnion struct {
	OpaqueTlvType string `protobuf:"bytes,1,opt,name=opaque_tlv_type,json=opaqueTlvType" json:"opaque_tlv_type,omitempty"`
	// Value of Bandwidth Constraints TLV
	BctlvValue *MplsTelOptBcVal `protobuf:"bytes,2,opt,name=bctlv_value,json=bctlvValue" json:"bctlv_value,omitempty"`
	// Value of SRLG TLV
	SrlgtlvValue *MplsTelOptSrlgVal `protobuf:"bytes,3,opt,name=srlgtlv_value,json=srlgtlvValue" json:"srlgtlv_value,omitempty"`
	// Value of IXCD TLV
	IxcdtlvValue *MplsTelOptIxcdVal `protobuf:"bytes,4,opt,name=ixcdtlv_value,json=ixcdtlvValue" json:"ixcdtlv_value,omitempty"`
	// Value of Uni Delay TLV
	UnidtlvValue *MplsTelOptUnidVal `protobuf:"bytes,5,opt,name=unidtlv_value,json=unidtlvValue" json:"unidtlv_value,omitempty"`
}

func (m *MplstelTlvValueUnion) Reset()                    { *m = MplstelTlvValueUnion{} }
func (m *MplstelTlvValueUnion) String() string            { return proto.CompactTextString(m) }
func (*MplstelTlvValueUnion) ProtoMessage()               {}
func (*MplstelTlvValueUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MplstelTlvValueUnion) GetOpaqueTlvType() string {
	if m != nil {
		return m.OpaqueTlvType
	}
	return ""
}

func (m *MplstelTlvValueUnion) GetBctlvValue() *MplsTelOptBcVal {
	if m != nil {
		return m.BctlvValue
	}
	return nil
}

func (m *MplstelTlvValueUnion) GetSrlgtlvValue() *MplsTelOptSrlgVal {
	if m != nil {
		return m.SrlgtlvValue
	}
	return nil
}

func (m *MplstelTlvValueUnion) GetIxcdtlvValue() *MplsTelOptIxcdVal {
	if m != nil {
		return m.IxcdtlvValue
	}
	return nil
}

func (m *MplstelTlvValueUnion) GetUnidtlvValue() *MplsTelOptUnidVal {
	if m != nil {
		return m.UnidtlvValue
	}
	return nil
}

// MPLS TE Link Optional TLVs
type OspfShMplsTelOptTlv struct {
	// Type of Opt TLV
	MplsteLinkOptTlvType string `protobuf:"bytes,1,opt,name=mplste_link_opt_tlv_type,json=mplsteLinkOptTlvType" json:"mplste_link_opt_tlv_type,omitempty"`
	// Length of Opt TLV
	MplsteLinkOptTlvLen uint32 `protobuf:"varint,2,opt,name=mplste_link_opt_tlv_len,json=mplsteLinkOptTlvLen" json:"mplste_link_opt_tlv_len,omitempty"`
	// Value of Opt TLV
	MplsteLinkOptTlvValue []*MplstelTlvValueUnion `protobuf:"bytes,3,rep,name=mplste_link_opt_tlv_value,json=mplsteLinkOptTlvValue" json:"mplste_link_opt_tlv_value,omitempty"`
}

func (m *OspfShMplsTelOptTlv) Reset()                    { *m = OspfShMplsTelOptTlv{} }
func (m *OspfShMplsTelOptTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsTelOptTlv) ProtoMessage()               {}
func (*OspfShMplsTelOptTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvType() string {
	if m != nil {
		return m.MplsteLinkOptTlvType
	}
	return ""
}

func (m *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvLen() uint32 {
	if m != nil {
		return m.MplsteLinkOptTlvLen
	}
	return 0
}

func (m *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvValue() []*MplstelTlvValueUnion {
	if m != nil {
		return m.MplsteLinkOptTlvValue
	}
	return nil
}

// OSPF MPLS-TE link Information
type OspfShMplsLink struct {
	// If true, Link is new
	NewLink bool `protobuf:"varint,1,opt,name=new_link,json=newLink" json:"new_link,omitempty"`
	// Fragment ID for this link
	FragmentId uint32 `protobuf:"varint,2,opt,name=fragment_id,json=fragmentId" json:"fragment_id,omitempty"`
	// Link instance
	MplsLinkInstance uint32 `protobuf:"varint,3,opt,name=mpls_link_instance,json=mplsLinkInstance" json:"mpls_link_instance,omitempty"`
	// Type of link
	MplsLinkType string `protobuf:"bytes,4,opt,name=mpls_link_type,json=mplsLinkType" json:"mpls_link_type,omitempty"`
	// Neighbor system ID
	NeighborSystemId string `protobuf:"bytes,5,opt,name=neighbor_system_id,json=neighborSystemId" json:"neighbor_system_id,omitempty"`
	// The local interface address
	LinkAddress string `protobuf:"bytes,6,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	// Neighbor IP address.
	NeighborIpAddress string `protobuf:"bytes,7,opt,name=neighbor_ip_address,json=neighborIpAddress" json:"neighbor_ip_address,omitempty"`
	// Link IGP metric
	IgpMetric uint32 `protobuf:"varint,8,opt,name=igp_metric,json=igpMetric" json:"igp_metric,omitempty"`
	// Link TE metric
	TeMetric uint32 `protobuf:"varint,9,opt,name=te_metric,json=teMetric" json:"te_metric,omitempty"`
	// Maximum link bandwidth (bytes/s)
	MaximumLinkBw uint32 `protobuf:"varint,10,opt,name=maximum_link_bw,json=maximumLinkBw" json:"maximum_link_bw,omitempty"`
	// Maximum link global pool reservable bandwidth (bytes/s)
	MaximumLinkReservableBw uint32 `protobuf:"varint,11,opt,name=maximum_link_reservable_bw,json=maximumLinkReservableBw" json:"maximum_link_reservable_bw,omitempty"`
	// Maximum link subpool reservable bandwidth (bytes/s)
	MaximumLinkSubReservableBw uint32 `protobuf:"varint,12,opt,name=maximum_link_sub_reservable_bw,json=maximumLinkSubReservableBw" json:"maximum_link_sub_reservable_bw,omitempty"`
	// Number of priorities.
	PriorityCount int32 `protobuf:"zigzag32,13,opt,name=priority_count,json=priorityCount" json:"priority_count,omitempty"`
	// Global pool unreserved bandwidth for each priority (bytes/s)
	GlobalUnreserveBwPerPriority *OspfShMplsBw `protobuf:"bytes,14,opt,name=global_unreserve_bw_per_priority,json=globalUnreserveBwPerPriority" json:"global_unreserve_bw_per_priority,omitempty"`
	// Sub pool unreserved bandwidth for each priority (bytes/s)
	SubPoolUnreserveBwPerPriority *OspfShMplsBw `protobuf:"bytes,15,opt,name=sub_pool_unreserve_bw_per_priority,json=subPoolUnreserveBwPerPriority" json:"sub_pool_unreserve_bw_per_priority,omitempty"`
	// Affinity
	Affinity uint32 `protobuf:"varint,16,opt,name=affinity" json:"affinity,omitempty"`
	// Output interface ID
	OutputInterfaceId uint32 `protobuf:"varint,17,opt,name=output_interface_id,json=outputInterfaceId" json:"output_interface_id,omitempty"`
	// Input interface ID
	InputInterfaceId uint32 `protobuf:"varint,18,opt,name=input_interface_id,json=inputInterfaceId" json:"input_interface_id,omitempty"`
	// Link protocol and protocol priority capability
	LinkProtocolPriorityCapability *OspfShMplsLinkProtoprio `protobuf:"bytes,19,opt,name=link_protocol_priority_capability,json=linkProtocolPriorityCapability" json:"link_protocol_priority_capability,omitempty"`
	// Link switching capability
	LinkSwCapability *OspfShMplsIxcdCap `protobuf:"bytes,20,opt,name=link_sw_capability,json=linkSwCapability" json:"link_sw_capability,omitempty"`
	// A DS-TE Allocation Model in use
	DsteInUse bool `protobuf:"varint,21,opt,name=dste_in_use,json=dsteInUse" json:"dste_in_use,omitempty"`
	// DS-TE Allocation Model ID
	DsteAllocationModelId string `protobuf:"bytes,22,opt,name=dste_allocation_model_id,json=dsteAllocationModelId" json:"dste_allocation_model_id,omitempty"`
	// Number of Optional TLVs
	NumberOfOptionalTlVs uint32 `protobuf:"varint,23,opt,name=number_of_optional_tl_vs,json=numberOfOptionalTlVs" json:"number_of_optional_tl_vs,omitempty"`
	// List of Optional TLVs
	MplsteLinkOptTlv []*OspfShMplsTelOptTlv `protobuf:"bytes,24,rep,name=mplste_link_opt_tlv,json=mplsteLinkOptTlv" json:"mplste_link_opt_tlv,omitempty"`
	// Extended Admin Group
	ExtendedAdminGroupList *OspfShMplsEag `protobuf:"bytes,25,opt,name=extended_admin_group_list,json=extendedAdminGroupList" json:"extended_admin_group_list,omitempty"`
}

func (m *OspfShMplsLink) Reset()                    { *m = OspfShMplsLink{} }
func (m *OspfShMplsLink) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsLink) ProtoMessage()               {}
func (*OspfShMplsLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *OspfShMplsLink) GetNewLink() bool {
	if m != nil {
		return m.NewLink
	}
	return false
}

func (m *OspfShMplsLink) GetFragmentId() uint32 {
	if m != nil {
		return m.FragmentId
	}
	return 0
}

func (m *OspfShMplsLink) GetMplsLinkInstance() uint32 {
	if m != nil {
		return m.MplsLinkInstance
	}
	return 0
}

func (m *OspfShMplsLink) GetMplsLinkType() string {
	if m != nil {
		return m.MplsLinkType
	}
	return ""
}

func (m *OspfShMplsLink) GetNeighborSystemId() string {
	if m != nil {
		return m.NeighborSystemId
	}
	return ""
}

func (m *OspfShMplsLink) GetLinkAddress() string {
	if m != nil {
		return m.LinkAddress
	}
	return ""
}

func (m *OspfShMplsLink) GetNeighborIpAddress() string {
	if m != nil {
		return m.NeighborIpAddress
	}
	return ""
}

func (m *OspfShMplsLink) GetIgpMetric() uint32 {
	if m != nil {
		return m.IgpMetric
	}
	return 0
}

func (m *OspfShMplsLink) GetTeMetric() uint32 {
	if m != nil {
		return m.TeMetric
	}
	return 0
}

func (m *OspfShMplsLink) GetMaximumLinkBw() uint32 {
	if m != nil {
		return m.MaximumLinkBw
	}
	return 0
}

func (m *OspfShMplsLink) GetMaximumLinkReservableBw() uint32 {
	if m != nil {
		return m.MaximumLinkReservableBw
	}
	return 0
}

func (m *OspfShMplsLink) GetMaximumLinkSubReservableBw() uint32 {
	if m != nil {
		return m.MaximumLinkSubReservableBw
	}
	return 0
}

func (m *OspfShMplsLink) GetPriorityCount() int32 {
	if m != nil {
		return m.PriorityCount
	}
	return 0
}

func (m *OspfShMplsLink) GetGlobalUnreserveBwPerPriority() *OspfShMplsBw {
	if m != nil {
		return m.GlobalUnreserveBwPerPriority
	}
	return nil
}

func (m *OspfShMplsLink) GetSubPoolUnreserveBwPerPriority() *OspfShMplsBw {
	if m != nil {
		return m.SubPoolUnreserveBwPerPriority
	}
	return nil
}

func (m *OspfShMplsLink) GetAffinity() uint32 {
	if m != nil {
		return m.Affinity
	}
	return 0
}

func (m *OspfShMplsLink) GetOutputInterfaceId() uint32 {
	if m != nil {
		return m.OutputInterfaceId
	}
	return 0
}

func (m *OspfShMplsLink) GetInputInterfaceId() uint32 {
	if m != nil {
		return m.InputInterfaceId
	}
	return 0
}

func (m *OspfShMplsLink) GetLinkProtocolPriorityCapability() *OspfShMplsLinkProtoprio {
	if m != nil {
		return m.LinkProtocolPriorityCapability
	}
	return nil
}

func (m *OspfShMplsLink) GetLinkSwCapability() *OspfShMplsIxcdCap {
	if m != nil {
		return m.LinkSwCapability
	}
	return nil
}

func (m *OspfShMplsLink) GetDsteInUse() bool {
	if m != nil {
		return m.DsteInUse
	}
	return false
}

func (m *OspfShMplsLink) GetDsteAllocationModelId() string {
	if m != nil {
		return m.DsteAllocationModelId
	}
	return ""
}

func (m *OspfShMplsLink) GetNumberOfOptionalTlVs() uint32 {
	if m != nil {
		return m.NumberOfOptionalTlVs
	}
	return 0
}

func (m *OspfShMplsLink) GetMplsteLinkOptTlv() []*OspfShMplsTelOptTlv {
	if m != nil {
		return m.MplsteLinkOptTlv
	}
	return nil
}

func (m *OspfShMplsLink) GetExtendedAdminGroupList() *OspfShMplsEag {
	if m != nil {
		return m.ExtendedAdminGroupList
	}
	return nil
}

// OSPF MPLS-TE Fragment Information
type OspfShMplsFragment struct {
	// Fragment instance
	FragmentInstance uint32 `protobuf:"varint,1,opt,name=fragment_instance,json=fragmentInstance" json:"fragment_instance,omitempty"`
	// Fragment ID
	FragmentId uint32 `protobuf:"varint,2,opt,name=fragment_id,json=fragmentId" json:"fragment_id,omitempty"`
	// DS-TE Allocation Model ID
	DsteModelId uint32 `protobuf:"varint,3,opt,name=dste_model_id,json=dsteModelId" json:"dste_model_id,omitempty"`
	// Number of fragment links which haven't changed since the last update
	SameFragmentCount uint32 `protobuf:"varint,4,opt,name=same_fragment_count,json=sameFragmentCount" json:"same_fragment_count,omitempty"`
	// List of fragment links
	MplsTeLinks []*OspfShMplsLink `protobuf:"bytes,5,rep,name=mpls_te_links,json=mplsTeLinks" json:"mpls_te_links,omitempty"`
}

func (m *OspfShMplsFragment) Reset()                    { *m = OspfShMplsFragment{} }
func (m *OspfShMplsFragment) String() string            { return proto.CompactTextString(m) }
func (*OspfShMplsFragment) ProtoMessage()               {}
func (*OspfShMplsFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *OspfShMplsFragment) GetFragmentInstance() uint32 {
	if m != nil {
		return m.FragmentInstance
	}
	return 0
}

func (m *OspfShMplsFragment) GetFragmentId() uint32 {
	if m != nil {
		return m.FragmentId
	}
	return 0
}

func (m *OspfShMplsFragment) GetDsteModelId() uint32 {
	if m != nil {
		return m.DsteModelId
	}
	return 0
}

func (m *OspfShMplsFragment) GetSameFragmentCount() uint32 {
	if m != nil {
		return m.SameFragmentCount
	}
	return 0
}

func (m *OspfShMplsFragment) GetMplsTeLinks() []*OspfShMplsLink {
	if m != nil {
		return m.MplsTeLinks
	}
	return nil
}

func init() {
	proto.RegisterType((*OspfShMpls_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_KEYS")
	proto.RegisterType((*OspfShMpls)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls")
	proto.RegisterType((*OspfShMplsIxcdCap)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_ixcd_cap")
	proto.RegisterType((*OspfShMplsLinkProtoprio)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link_protoprio")
	proto.RegisterType((*OspfShMplsBw)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_bw")
	proto.RegisterType((*OspfShMplsEag)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_eag")
	proto.RegisterType((*MplsTelOptBcVal)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_bc_val")
	proto.RegisterType((*MplsTelOptSrlgVal)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_srlg_val")
	proto.RegisterType((*BwSubTlvValueCommon)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_sub_tlv_value_common")
	proto.RegisterType((*BwFixedSubtlvValue)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_fixed_subtlv_value")
	proto.RegisterType((*BwFlexSubtlvValue)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_flex_subtlv_value")
	proto.RegisterType((*IxcdBwSubTlvValueUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_value_union")
	proto.RegisterType((*IxcdBwSubTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv")
	proto.RegisterType((*IxcdLePscInfo)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_le_psc_info")
	proto.RegisterType((*IxcdBwSubTlvArr)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_arr")
	proto.RegisterType((*IxcdTlvSwitchingcapValueUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_tlv_switchingcap_value_union")
	proto.RegisterType((*MplsTelOptIxcdVal)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_ixcd_val")
	proto.RegisterType((*MplsTelOptUnidVal)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_unid_val")
	proto.RegisterType((*MplstelTlvValueUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union")
	proto.RegisterType((*OspfShMplsTelOptTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_tel_opt_tlv")
	proto.RegisterType((*OspfShMplsLink)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link")
	proto.RegisterType((*OspfShMplsFragment)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_fragment")
}

func init() { proto.RegisterFile("ospf_sh_mpls.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xbd, 0x6f, 0x1c, 0xc7,
	0x15, 0xc7, 0xf2, 0x48, 0x91, 0x7c, 0x77, 0xc7, 0xbb, 0x1b, 0x7e, 0xad, 0x2c, 0x4b, 0xa1, 0xce,
	0xb6, 0x40, 0xdb, 0x0a, 0x61, 0x51, 0x14, 0x65, 0x5b, 0x69, 0x44, 0x49, 0x31, 0x88, 0x50, 0x96,
	0xb0, 0x94, 0x0d, 0xa4, 0x1a, 0xec, 0xc7, 0xdc, 0x69, 0xe4, 0xfd, 0xca, 0xce, 0x2e, 0xef, 0xa8,
	0xc4, 0x48, 0x00, 0x57, 0x29, 0x02, 0x04, 0x70, 0x99, 0x04, 0x41, 0xd2, 0xa4, 0x30, 0x62, 0xc4,
	0x48, 0x11, 0xa4, 0x0a, 0x12, 0xa4, 0x57, 0x9d, 0x3f, 0x20, 0x7d, 0xba, 0xb4, 0xc1, 0x9b, 0xd9,
	0xd9, 0xdb, 0xdd, 0xa3, 0x94, 0xee, 0xe8, 0x86, 0xbc, 0x7d, 0xef, 0x37, 0xb3, 0xbf, 0x79, 0xf3,
	0xe6, 0xbd, 0x79, 0x6f, 0x81, 0x44, 0x22, 0x1e, 0x50, 0xf1, 0x94, 0x06, 0xb1, 0x2f, 0x76, 0xe2,
	0x24, 0x4a, 0x23, 0x32, 0x70, 0xb9, 0x70, 0x23, 0xca, 0x23, 0x41, 0xc7, 0x09, 0xe5, 0xf1, 0xc9,
	0x1e, 0x95, 0xa8, 0x28, 0x66, 0xc9, 0x0e, 0xfe, 0x42, 0x9c, 0xcb, 0x84, 0x60, 0x42, 0xff, 0xda,
	0x39, 0x49, 0x06, 0xf2, 0xcf, 0x0e, 0xce, 0x43, 0x53, 0xa6, 0xff, 0xd3, 0x41, 0x62, 0x0f, 0x03,
	0x16, 0xa6, 0x62, 0x4a, 0xd2, 0x7f, 0x06, 0xbd, 0xf2, 0xdb, 0xe9, 0x0f, 0x1e, 0xfc, 0xf0, 0x98,
	0x5c, 0x85, 0x56, 0x3e, 0x27, 0x0d, 0xed, 0x80, 0x99, 0xc6, 0x96, 0xb1, 0xbd, 0x6c, 0x35, 0x73,
	0xd9, 0xc7, 0x76, 0xc0, 0xc8, 0x45, 0x58, 0x3a, 0x49, 0x06, 0x4a, 0x3d, 0x27, 0xd5, 0x8b, 0x27,
	0xc9, 0x40, 0xaa, 0x36, 0x61, 0xd1, 0x4e, 0x98, 0x4d, 0xb9, 0x67, 0x36, 0xb6, 0x8c, 0xed, 0xb6,
	0x75, 0x01, 0x1f, 0x0f, 0xbd, 0xfe, 0x8b, 0x05, 0x68, 0x95, 0x5f, 0x46, 0xde, 0x86, 0x9e, 0x26,
	0x94, 0x44, 0x59, 0xca, 0x12, 0x1c, 0xb3, 0x2b, 0x67, 0x5b, 0x41, 0xc5, 0x13, 0x66, 0x49, 0xf1,
	0xa1, 0x47, 0xae, 0x41, 0x47, 0x43, 0x59, 0x68, 0x3b, 0x3e, 0xf3, 0xcc, 0x9b, 0x5b, 0xc6, 0xf6,
	0x92, 0xd5, 0x56, 0xc0, 0x07, 0x4a, 0x48, 0x76, 0x60, 0x55, 0xe3, 0x78, 0xc8, 0x53, 0x6e, 0xfb,
	0xfc, 0x39, 0xf3, 0xcc, 0x3d, 0x89, 0xed, 0x29, 0xec, 0xe1, 0x44, 0x41, 0xde, 0x9a, 0xcc, 0xab,
	0x49, 0xdf, 0x92, 0x04, 0x5a, 0x0a, 0x7b, 0x57, 0x52, 0x27, 0x37, 0x60, 0xbd, 0x0a, 0x0b, 0x45,
	0x6a, 0x87, 0x2e, 0x33, 0xf7, 0xe5, 0x0a, 0x49, 0x09, 0x9c, 0x6b, 0xc8, 0x4d, 0xd8, 0xa8, 0x2d,
	0xce, 0xf6, 0xbc, 0x84, 0x09, 0x61, 0xde, 0x96, 0x2f, 0x58, 0x2d, 0xaf, 0xf0, 0xae, 0x52, 0x91,
	0xdf, 0x18, 0xd0, 0xd6, 0xa3, 0x7c, 0x1e, 0x7e, 0x26, 0xcc, 0xf7, 0xb7, 0x1a, 0xdb, 0xcd, 0xdd,
	0xd3, 0x9d, 0xd9, 0xf8, 0xc3, 0x4e, 0xc5, 0x19, 0x90, 0x81, 0xd5, 0x54, 0x3c, 0x8f, 0x90, 0x0d,
	0xd9, 0x07, 0x53, 0x0f, 0x09, 0xd9, 0x38, 0x2d, 0xc6, 0xa1, 0xdd, 0x3e, 0x90, 0xa6, 0x58, 0x53,
	0xf0, 0x8f, 0xd9, 0x38, 0xfd, 0x7e, 0xae, 0x3c, 0xf4, 0xc8, 0xbb, 0xd0, 0x13, 0xb1, 0xed, 0xf2,
	0x28, 0x13, 0xc5, 0x18, 0xf3, 0x43, 0xb9, 0x29, 0x5d, 0xad, 0xd0, 0x70, 0xf2, 0x07, 0x03, 0xba,
	0x75, 0x62, 0xe6, 0x1d, 0x69, 0x87, 0xcf, 0xcf, 0xc5, 0x0e, 0x5a, 0xaa, 0xbd, 0x52, 0x33, 0xed,
	0xff, 0xd7, 0x80, 0xf5, 0x0a, 0x92, 0x8f, 0x5d, 0x8f, 0xba, 0x76, 0x4c, 0x3e, 0x84, 0x8b, 0x68,
	0x3d, 0x2a, 0x46, 0x3c, 0x75, 0x9f, 0xf2, 0x70, 0x88, 0x52, 0xdb, 0xe1, 0x3e, 0x4f, 0x4f, 0xe5,
	0x79, 0x6a, 0x5b, 0x9b, 0x08, 0x38, 0xd6, 0xfa, 0x7b, 0x85, 0x9a, 0xbc, 0x01, 0x6d, 0x39, 0x96,
	0x85, 0x6e, 0xe4, 0xf1, 0x70, 0x28, 0x0f, 0x58, 0xdb, 0x6a, 0xa1, 0xf0, 0x41, 0x2e, 0x23, 0xdf,
	0x83, 0x4b, 0x81, 0x3d, 0xe6, 0x41, 0x16, 0x50, 0x5f, 0xc4, 0xd4, 0x19, 0xd1, 0x98, 0x25, 0x34,
	0x4e, 0x78, 0x94, 0xe0, 0x2b, 0x1a, 0x5b, 0x8d, 0xed, 0x79, 0x6b, 0x33, 0x87, 0x1c, 0x89, 0xf8,
	0x60, 0xf4, 0x98, 0x25, 0x8f, 0x73, 0x35, 0x79, 0x13, 0x56, 0x02, 0x1e, 0x96, 0x46, 0x9b, 0xf3,
	0x5b, 0xc6, 0xf6, 0xbc, 0xd5, 0xca, 0xa5, 0x72, 0x00, 0x1e, 0x72, 0x49, 0x24, 0x48, 0x33, 0x73,
	0x41, 0x72, 0x58, 0xc4, 0xe7, 0x87, 0x69, 0xd6, 0xff, 0x85, 0x01, 0x97, 0xa6, 0x7c, 0x85, 0xca,
	0xd8, 0x85, 0x1c, 0xc8, 0xfb, 0x60, 0x4e, 0x24, 0x6e, 0xe4, 0x4f, 0x2f, 0x7f, 0x03, 0xf5, 0x8f,
	0x73, 0x75, 0x69, 0xf5, 0x7b, 0xb0, 0x51, 0x1d, 0x59, 0xac, 0x49, 0x99, 0x61, 0xad, 0x3c, 0x4e,
	0x2f, 0xa8, 0xff, 0x01, 0x74, 0x2a, 0x74, 0x9c, 0x11, 0x86, 0x8c, 0xba, 0x55, 0x0c, 0x69, 0x95,
	0xb6, 0x53, 0xb6, 0x45, 0xff, 0x29, 0x74, 0x2b, 0x43, 0x99, 0x3d, 0xc4, 0x30, 0xc2, 0xc6, 0x29,
	0x0b, 0x3d, 0xe6, 0x51, 0xdb, 0x0b, 0x78, 0x48, 0x05, 0x7f, 0xce, 0x72, 0xe6, 0x3d, 0xad, 0xba,
	0x8b, 0x9a, 0x63, 0xfe, 0x9c, 0xa1, 0x3d, 0xf1, 0x38, 0x28, 0xa8, 0x67, 0xa7, 0xb6, 0x39, 0xb7,
	0xd5, 0xc0, 0x3d, 0x63, 0xe3, 0x54, 0xa2, 0xee, 0xdb, 0xa9, 0xdd, 0xff, 0xc2, 0x28, 0xa2, 0x93,
	0x4f, 0xa3, 0x38, 0xa5, 0x8e, 0x4b, 0x4f, 0x6c, 0x1f, 0xed, 0x1c, 0x44, 0x1e, 0xf3, 0xf1, 0x14,
	0xa9, 0x57, 0x2c, 0xca, 0xe7, 0x43, 0x8f, 0xdc, 0x56, 0x07, 0x2e, 0x0f, 0x07, 0x38, 0xc0, 0xb1,
	0x43, 0x6f, 0xc4, 0xbd, 0xf4, 0xa9, 0x7c, 0xc5, 0xbc, 0xb5, 0xae, 0xf4, 0x78, 0x3e, 0x0f, 0xdc,
	0x03, 0xad, 0x24, 0x26, 0x2c, 0x85, 0x59, 0x40, 0x1d, 0xea, 0x0a, 0x1d, 0x86, 0xc3, 0x2c, 0x38,
	0xb8, 0x27, 0x90, 0xc5, 0x7a, 0x85, 0x85, 0x48, 0xfc, 0xa1, 0xe6, 0x21, 0x7f, 0xfb, 0x2c, 0xd4,
	0x3c, 0xf0, 0xf9, 0x88, 0x85, 0xe4, 0x75, 0x00, 0x9c, 0x4e, 0x24, 0x3e, 0x1d, 0x8a, 0x7c, 0x27,
	0xf0, 0x05, 0xc7, 0x89, 0xff, 0x91, 0xd0, 0xe1, 0x51, 0xb3, 0x94, 0x93, 0x48, 0x2b, 0x34, 0xa4,
	0x15, 0xc8, 0x84, 0xe2, 0x71, 0xe2, 0x0f, 0xa5, 0x2d, 0xfe, 0xdd, 0x80, 0x4d, 0x67, 0x44, 0x45,
	0xe6, 0xd0, 0xd4, 0x3f, 0xc1, 0xd7, 0x67, 0x8c, 0xba, 0x51, 0x10, 0x44, 0x21, 0xf9, 0x0e, 0x34,
	0x05, 0x1f, 0x86, 0xb6, 0x4f, 0xd3, 0xd3, 0x58, 0x5b, 0x1d, 0x94, 0xe8, 0xc9, 0x69, 0xcc, 0xc8,
	0xe5, 0x9c, 0x4d, 0x6a, 0x0f, 0x99, 0x66, 0xb3, 0x8c, 0x6c, 0xa4, 0x80, 0xac, 0xc2, 0x42, 0x4a,
	0x1d, 0x9e, 0xe6, 0x0b, 0x9f, 0x4f, 0x0f, 0x78, 0x8a, 0x42, 0x21, 0x85, 0xf3, 0x4a, 0x28, 0x50,
	0xd8, 0x85, 0x46, 0x2a, 0x86, 0xb9, 0x73, 0xe3, 0x4f, 0x94, 0x24, 0x4c, 0x98, 0x17, 0x94, 0x24,
	0x61, 0x02, 0x8f, 0xa3, 0x76, 0x20, 0x1c, 0xff, 0x9e, 0xb9, 0xa8, 0x8e, 0xa3, 0x16, 0x1e, 0xf0,
	0xf4, 0xbd, 0x3a, 0xe8, 0x86, 0xb9, 0x34, 0x05, 0xba, 0x51, 0x07, 0xed, 0x9a, 0xcb, 0x53, 0xa0,
	0xdd, 0x3a, 0xe8, 0xa6, 0x09, 0x53, 0xa0, 0x9b, 0x75, 0xd0, 0x9e, 0xd9, 0x9c, 0x02, 0xed, 0xd5,
	0x41, 0xb7, 0xcc, 0xd6, 0x14, 0xe8, 0x56, 0x1d, 0xb4, 0x6f, 0xb6, 0xa7, 0x40, 0xfb, 0x75, 0xd0,
	0x6d, 0x73, 0x65, 0x0a, 0x74, 0x9b, 0xac, 0xc1, 0x82, 0xdc, 0x10, 0xb3, 0xb3, 0x65, 0x6c, 0xb7,
	0x2c, 0xf5, 0xd0, 0xff, 0x8f, 0x01, 0xeb, 0xce, 0x88, 0x0e, 0xf8, 0x98, 0x79, 0xb8, 0xdb, 0xc5,
	0x66, 0x93, 0xaf, 0x0d, 0x58, 0x2d, 0xc4, 0x13, 0x27, 0x90, 0xdb, 0xdd, 0xdc, 0xfd, 0xe9, 0xac,
	0x22, 0xfd, 0x4b, 0x9c, 0xd0, 0xea, 0x4a, 0x6e, 0xc7, 0x99, 0xf3, 0xc4, 0x3f, 0xf9, 0x54, 0x12,
	0xbe, 0x06, 0x9d, 0x2c, 0x4c, 0x98, 0xa0, 0x91, 0x97, 0x3d, 0x93, 0x41, 0x25, 0x3f, 0xe5, 0x6d,
	0x29, 0x7e, 0xe4, 0x65, 0xcf, 0x30, 0xa8, 0xf4, 0x7f, 0x39, 0x07, 0x6b, 0xb8, 0x64, 0x9f, 0x8d,
	0xab, 0x2b, 0xfe, 0xab, 0x01, 0x17, 0xb5, 0x74, 0xea, 0x85, 0xdf, 0x96, 0x75, 0xaf, 0x23, 0xc3,
	0xd2, 0xb2, 0xef, 0x15, 0x67, 0x52, 0x2d, 0xde, 0x17, 0xb1, 0x33, 0xca, 0x63, 0x0f, 0x48, 0xd1,
	0x11, 0x4a, 0xc8, 0x25, 0x58, 0x0e, 0xec, 0x71, 0xae, 0x56, 0xe9, 0x67, 0x29, 0xb0, 0xc7, 0x52,
	0xd9, 0xff, 0xa6, 0x01, 0x97, 0x64, 0x6e, 0x9c, 0x7a, 0x6b, 0x16, 0xf2, 0x28, 0x24, 0xdf, 0x85,
	0x55, 0x54, 0x97, 0xb4, 0xa5, 0x93, 0xdf, 0x55, 0x2a, 0xc5, 0x49, 0x9e, 0xff, 0x6f, 0x0c, 0xd8,
	0x50, 0xae, 0x53, 0x9f, 0x4f, 0x06, 0x83, 0x19, 0xde, 0x13, 0xce, 0x74, 0x6d, 0x8b, 0x48, 0xd9,
	0xc1, 0xa8, 0xec, 0x3d, 0x5f, 0x1b, 0x20, 0x4d, 0x3b, 0x4d, 0xb9, 0x21, 0x29, 0xff, 0x64, 0x96,
	0x94, 0xeb, 0xae, 0x69, 0xf5, 0x50, 0x54, 0x21, 0xdc, 0xff, 0x72, 0x0e, 0x3a, 0xb5, 0x3d, 0xc3,
	0xeb, 0xf2, 0xd9, 0x7b, 0xd4, 0xaa, 0xec, 0xcf, 0xdb, 0xd0, 0x2b, 0xc1, 0x7c, 0x16, 0x0e, 0x65,
	0xba, 0x42, 0xe0, 0x8a, 0x06, 0x1e, 0x49, 0x29, 0xf9, 0xa3, 0x01, 0xdd, 0x97, 0x58, 0xe4, 0x0b,
	0x63, 0x56, 0x26, 0x79, 0x85, 0x6b, 0xe2, 0x6d, 0xa1, 0x6c, 0x95, 0x67, 0x20, 0xdd, 0x91, 0xfa,
	0x8c, 0xc6, 0xc2, 0xa5, 0x3c, 0x1c, 0x44, 0xe4, 0x1d, 0xe8, 0x61, 0xde, 0x97, 0x37, 0xa9, 0x22,
	0x3b, 0x1b, 0xf2, 0x42, 0xd5, 0x09, 0x78, 0x88, 0x97, 0xa9, 0x22, 0x2f, 0xbf, 0x03, 0x3d, 0x35,
	0x2e, 0x65, 0xc9, 0xc0, 0x76, 0x99, 0xbc, 0x5c, 0x29, 0xd3, 0x74, 0x62, 0xe1, 0x1e, 0x6a, 0x39,
	0x5e, 0xb2, 0xfe, 0x62, 0xa8, 0x63, 0x51, 0xa6, 0x66, 0x27, 0x09, 0xf9, 0xad, 0x01, 0x5d, 0x3b,
	0x49, 0x26, 0x62, 0x7a, 0x22, 0xe4, 0xdd, 0xa6, 0xb9, 0x3b, 0x3a, 0x27, 0x93, 0x59, 0x2d, 0x3b,
	0x49, 0x72, 0xff, 0xf9, 0x54, 0xf4, 0xbf, 0x6c, 0xc0, 0x55, 0x89, 0x40, 0xca, 0xc5, 0x1d, 0xd8,
	0xb5, 0xe3, 0xca, 0xa9, 0xbf, 0x0e, 0xa4, 0x72, 0x3f, 0xae, 0x1c, 0x7a, 0x51, 0xba, 0x19, 0x4b,
	0xa7, 0xfa, 0x95, 0x01, 0x2d, 0x9c, 0x53, 0x9b, 0x3d, 0x3f, 0xea, 0xe3, 0x99, 0xae, 0xb8, 0xb4,
	0xed, 0x56, 0x33, 0x67, 0x73, 0x88, 0x3e, 0xf0, 0x3b, 0x03, 0x56, 0xaa, 0x21, 0x2c, 0xf7, 0xe2,
	0x1f, 0x9f, 0x97, 0x13, 0xdb, 0x49, 0x62, 0xb5, 0xca, 0xa1, 0x13, 0x77, 0xa5, 0x7a, 0xf3, 0x93,
	0x43, 0xf0, 0xe6, 0xf7, 0x06, 0xb4, 0x2b, 0x3b, 0xa1, 0x4f, 0x75, 0x79, 0x13, 0x48, 0x1f, 0xda,
	0x09, 0xf7, 0x19, 0x9e, 0x67, 0xea, 0x46, 0x1e, 0xcb, 0xdd, 0xb6, 0x89, 0xc2, 0x23, 0x16, 0xde,
	0x8b, 0x3c, 0x36, 0x9d, 0x05, 0xc8, 0x24, 0x0b, 0x90, 0x6d, 0xe8, 0xe6, 0xc1, 0xd2, 0x15, 0x9c,
	0xba, 0x51, 0x16, 0xea, 0xdb, 0xd8, 0x8a, 0x4a, 0xb6, 0xae, 0xe0, 0xf7, 0x50, 0x8a, 0xa9, 0x56,
	0xc5, 0xa8, 0x09, 0x50, 0xdd, 0xd1, 0xda, 0x32, 0x3b, 0x15, 0xb8, 0xbf, 0x1b, 0xb0, 0x29, 0x17,
	0x71, 0x86, 0x1f, 0x5d, 0x90, 0xe6, 0xff, 0xf9, 0x6c, 0x83, 0xc8, 0xab, 0xfc, 0xdd, 0x5a, 0x43,
	0xc8, 0x71, 0xcd, 0xaf, 0xfb, 0x77, 0x6a, 0x9b, 0x92, 0x85, 0x5c, 0x6d, 0x4a, 0x1f, 0xda, 0x59,
	0xc8, 0xa9, 0xc7, 0x13, 0xea, 0x31, 0xdf, 0xd6, 0x85, 0x53, 0x33, 0x0b, 0xf9, 0x7d, 0x9e, 0xdc,
	0x47, 0x51, 0xff, 0xc5, 0x02, 0x6c, 0xaa, 0xdb, 0xb5, 0x3f, 0x95, 0x54, 0xaf, 0x41, 0x27, 0x8a,
	0xed, 0x1f, 0x65, 0xac, 0x1a, 0xac, 0x97, 0xad, 0xb6, 0x12, 0xeb, 0x68, 0xfd, 0x6b, 0x03, 0x9a,
	0x8e, 0x5b, 0x4f, 0xa1, 0x33, 0xf3, 0xdb, 0x33, 0x2a, 0x22, 0x0b, 0x24, 0x1f, 0x95, 0x38, 0x7f,
	0x6f, 0x40, 0x1b, 0x2b, 0x8a, 0x7a, 0x7a, 0xf8, 0xfc, 0x5c, 0x08, 0xea, 0x62, 0xc9, 0x6a, 0xe5,
	0x9c, 0x26, 0x24, 0x71, 0x77, 0x27, 0x24, 0xe7, 0xcf, 0x91, 0xa4, 0x3e, 0xd7, 0xea, 0xfc, 0x57,
	0x48, 0xa2, 0x77, 0x4d, 0x48, 0x2e, 0x9c, 0x23, 0x49, 0xed, 0xe7, 0x56, 0x2b, 0xe7, 0xa4, 0x12,
	0xec, 0x3f, 0xe7, 0xc0, 0xac, 0xd4, 0xe3, 0x1a, 0x8f, 0xf7, 0x8f, 0xfd, 0x6a, 0x39, 0x9c, 0x8b,
	0xcb, 0xbe, 0xbd, 0x36, 0xa9, 0x35, 0x1f, 0xc5, 0xa9, 0x76, 0xf1, 0x3d, 0x7d, 0x4a, 0xaa, 0xe3,
	0xb0, 0xd0, 0x55, 0x41, 0x6c, 0xb5, 0x3e, 0x0c, 0x8b, 0x5e, 0xbc, 0xaf, 0x9f, 0x35, 0x4c, 0x7b,
	0x61, 0x63, 0x96, 0xf7, 0xf5, 0x97, 0x9c, 0xf2, 0x72, 0xfd, 0xaf, 0x98, 0x2b, 0x33, 0x7e, 0xd5,
	0xa9, 0x75, 0x76, 0x71, 0x05, 0x58, 0xe1, 0x87, 0x6c, 0x24, 0x7f, 0x4b, 0x7b, 0x2d, 0x59, 0x8b,
	0x21, 0x1b, 0xe1, 0x58, 0xbc, 0xe0, 0x97, 0xbb, 0x79, 0xca, 0x2c, 0x30, 0x98, 0xf4, 0xf0, 0xae,
	0x03, 0x99, 0x74, 0x7a, 0x8a, 0x06, 0xa8, 0x2a, 0xb1, 0x65, 0xbf, 0x0e, 0xa7, 0x29, 0xda, 0x9f,
	0x6f, 0xc2, 0xca, 0x04, 0x2d, 0xf7, 0x67, 0x7e, 0xd2, 0x57, 0x45, 0xa4, 0xdc, 0x97, 0xeb, 0x40,
	0x42, 0xc6, 0x87, 0x4f, 0x9d, 0x28, 0xa1, 0xe2, 0x54, 0xa4, 0x2c, 0xc0, 0x77, 0x2f, 0x48, 0x64,
	0x57, 0x6b, 0x8e, 0xa5, 0xe2, 0xd0, 0x23, 0x57, 0x41, 0xf6, 0xc0, 0x8a, 0x46, 0xea, 0x05, 0xd5,
	0x97, 0x46, 0x99, 0x6e, 0xa0, 0xee, 0xc0, 0x6a, 0x31, 0x21, 0x8f, 0x0b, 0xe4, 0xa2, 0x44, 0xf6,
	0xb4, 0xea, 0x30, 0xd6, 0xf8, 0xcb, 0x00, 0x7c, 0x18, 0xd3, 0x80, 0xa5, 0x09, 0x77, 0xf3, 0xa2,
	0x7d, 0x99, 0x0f, 0xe3, 0x87, 0x52, 0x80, 0xe9, 0x2c, 0x65, 0x5a, 0xab, 0xaa, 0xf5, 0xa5, 0x94,
	0xe5, 0xca, 0x6b, 0xd0, 0x29, 0x5a, 0x70, 0xb2, 0x39, 0x33, 0xca, 0x6b, 0xf5, 0xb6, 0x6e, 0xbb,
	0xf1, 0xf0, 0xb3, 0x83, 0x11, 0xb9, 0x03, 0xaf, 0x55, 0x70, 0x09, 0x13, 0x2c, 0x39, 0xb1, 0x1d,
	0x9f, 0xe1, 0x10, 0x55, 0xb9, 0x6f, 0x96, 0x86, 0x58, 0x85, 0xfe, 0x60, 0x44, 0x0e, 0xe0, 0x4a,
	0x65, 0x30, 0x66, 0xf7, 0xea, 0x04, 0xaa, 0xaa, 0x7f, 0xad, 0x34, 0xc1, 0x71, 0xe6, 0x54, 0xe6,
	0x78, 0x0b, 0x56, 0x8a, 0xf2, 0x5d, 0x25, 0x53, 0x2c, 0xf2, 0x7b, 0x56, 0x51, 0xd4, 0xab, 0x64,
	0xfa, 0x37, 0x03, 0xb6, 0x86, 0x7e, 0xe4, 0xd8, 0x3e, 0x95, 0x75, 0x1d, 0x4b, 0x4e, 0xd8, 0x54,
	0x63, 0x71, 0x45, 0x46, 0x8c, 0xd1, 0xb9, 0xf4, 0x61, 0x9d, 0x91, 0xf5, 0xba, 0x22, 0xf8, 0x89,
	0xe6, 0x57, 0x6d, 0x6b, 0xfe, 0xc3, 0x80, 0x3e, 0x1a, 0x28, 0x8e, 0xa2, 0x57, 0xad, 0xa1, 0x73,
	0xbe, 0x6b, 0xb8, 0x2c, 0x32, 0xe7, 0x71, 0x14, 0xbd, 0x6c, 0x11, 0xaf, 0xc1, 0x92, 0x3d, 0x18,
	0xf0, 0x10, 0x99, 0x76, 0x95, 0xcb, 0xe9, 0x67, 0x74, 0xef, 0x28, 0x4b, 0xe3, 0x2c, 0x2d, 0x15,
	0x10, 0xdc, 0x33, 0x7b, 0xaa, 0x2f, 0xa9, 0x54, 0x45, 0x09, 0xa1, 0xce, 0x2c, 0x0f, 0xa7, 0xe0,
	0x24, 0x2f, 0xab, 0xc3, 0x1a, 0xfa, 0x85, 0x01, 0x57, 0xcf, 0xee, 0xbd, 0x96, 0xdb, 0xb7, 0xab,
	0x33, 0x2e, 0xce, 0x5e, 0xd1, 0x66, 0xb6, 0xae, 0x9c, 0xd5, 0x0c, 0x2e, 0x35, 0x93, 0xbf, 0x32,
	0x80, 0xe4, 0x7d, 0xf8, 0xf2, 0x12, 0xd6, 0x66, 0x9b, 0xf6, 0xce, 0xfc, 0x44, 0x60, 0x75, 0x55,
	0xff, 0xbf, 0xc4, 0xf6, 0x0a, 0x34, 0x3d, 0x21, 0xbf, 0x5c, 0xd1, 0x4c, 0x30, 0x73, 0x5d, 0x06,
	0xe8, 0x65, 0x14, 0x1d, 0x86, 0x9f, 0x08, 0x46, 0x6e, 0x83, 0x29, 0xf5, 0xb6, 0xef, 0x47, 0xae,
	0x9d, 0xf2, 0x28, 0xa4, 0x45, 0xdf, 0x78, 0x43, 0x46, 0xb8, 0x75, 0xd4, 0xdf, 0x2d, 0xd4, 0x0f,
	0xf3, 0x2e, 0xf2, 0x3e, 0x98, 0x61, 0x16, 0x38, 0x2c, 0xa1, 0x11, 0xae, 0x0e, 0x55, 0xb6, 0x9f,
	0xd7, 0x8d, 0x9b, 0xaa, 0xab, 0xae, 0xf4, 0x8f, 0x06, 0x8f, 0x72, 0x2d, 0x96, 0x71, 0xe4, 0x4f,
	0x79, 0xc3, 0xba, 0x96, 0x00, 0x4d, 0x53, 0xa6, 0xbe, 0x9f, 0x9d, 0x8f, 0x0b, 0x94, 0xee, 0x03,
	0x2a, 0xef, 0x94, 0x93, 0x1f, 0xf9, 0xb3, 0x01, 0x17, 0x6b, 0xad, 0xfb, 0x61, 0x12, 0x65, 0x31,
	0xf5, 0xb9, 0x48, 0xcd, 0x8b, 0xb3, 0x2d, 0x19, 0xeb, 0xdf, 0x15, 0xac, 0x8d, 0xca, 0xa7, 0x83,
	0x8f, 0x90, 0xd8, 0x11, 0x17, 0x69, 0xff, 0x5f, 0x73, 0xb5, 0x0f, 0x49, 0x7a, 0x0a, 0xf2, 0x2e,
	0xf4, 0x26, 0x69, 0x59, 0x27, 0xdd, 0xbc, 0x44, 0x2e, 0x92, 0xb3, 0x4e, 0xba, 0xff, 0x37, 0x87,
	0xf7, 0xa1, 0x2d, 0x3d, 0xa8, 0x70, 0x1b, 0x95, 0xbe, 0xa5, 0xdb, 0x69, 0x67, 0xd9, 0x81, 0x55,
	0x61, 0x07, 0x93, 0x55, 0x54, 0x0a, 0xb5, 0x1e, 0xaa, 0xf4, 0xf7, 0x2f, 0x95, 0x36, 0xa6, 0xbf,
	0x59, 0x2e, 0x7c, 0x9b, 0xbe, 0x59, 0x3a, 0x17, 0x64, 0xb8, 0xb8, 0xf9, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8c, 0x79, 0x9f, 0x90, 0x67, 0x1f, 0x00, 0x00,
}
