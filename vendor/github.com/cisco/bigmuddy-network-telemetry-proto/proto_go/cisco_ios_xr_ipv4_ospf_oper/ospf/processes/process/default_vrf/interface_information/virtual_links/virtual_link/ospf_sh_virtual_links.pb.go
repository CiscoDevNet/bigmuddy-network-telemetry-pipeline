// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_virtual_links.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_interface_information_virtual_links_virtual_link is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_virtual_links.proto

It has these top-level messages:
	OspfShVirtualLinks_KEYS
	OspfShVirtualLinks
	OspfShNeighborRetrans
	OspfShVlinkNeighbor
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_interface_information_virtual_links_virtual_link

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Virtual Link
type OspfShVirtualLinks_KEYS struct {
	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VirtualLinkName string `protobuf:"bytes,2,opt,name=virtual_link_name,json=virtualLinkName" json:"virtual_link_name,omitempty"`
}

func (m *OspfShVirtualLinks_KEYS) Reset()                    { *m = OspfShVirtualLinks_KEYS{} }
func (m *OspfShVirtualLinks_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShVirtualLinks_KEYS) ProtoMessage()               {}
func (*OspfShVirtualLinks_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShVirtualLinks_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShVirtualLinks_KEYS) GetVirtualLinkName() string {
	if m != nil {
		return m.VirtualLinkName
	}
	return ""
}

type OspfShVirtualLinks struct {
	// Virtual link name
	VirtualLinkName string `protobuf:"bytes,50,opt,name=virtual_link_name,json=virtualLinkName" json:"virtual_link_name,omitempty"`
	// Neighbor on other end of this virtual link
	VirtualLinkNeighborId string `protobuf:"bytes,51,opt,name=virtual_link_neighbor_id,json=virtualLinkNeighborId" json:"virtual_link_neighbor_id,omitempty"`
	// OSPF interface state for the virtual link
	VirtualLinkState string `protobuf:"bytes,52,opt,name=virtual_link_state,json=virtualLinkState" json:"virtual_link_state,omitempty"`
	// If true, the link runs as demand circuit
	VirtualLinkDemandCircuit bool `protobuf:"varint,53,opt,name=virtual_link_demand_circuit,json=virtualLinkDemandCircuit" json:"virtual_link_demand_circuit,omitempty"`
	// Number of LSA's with demand circuit bit not set
	VirtualLinkDcBitlessLsa uint32 `protobuf:"varint,54,opt,name=virtual_link_dc_bitless_lsa,json=virtualLinkDcBitlessLsa" json:"virtual_link_dc_bitless_lsa,omitempty"`
	// Transit area id
	TransitArea string `protobuf:"bytes,55,opt,name=transit_area,json=transitArea" json:"transit_area,omitempty"`
	// Interface on which this virtual link is formed
	VirtualLinkInterfaceName string `protobuf:"bytes,56,opt,name=virtual_link_interface_name,json=virtualLinkInterfaceName" json:"virtual_link_interface_name,omitempty"`
	// Cost of the virtual link
	VirtualLinkCost uint32 `protobuf:"varint,57,opt,name=virtual_link_cost,json=virtualLinkCost" json:"virtual_link_cost,omitempty"`
	// Transmission delay in seconds
	VirualLinkTransmissionDelay uint32 `protobuf:"varint,58,opt,name=virual_link_transmission_delay,json=virualLinkTransmissionDelay" json:"virual_link_transmission_delay,omitempty"`
	// Hello interval (s)
	VirtualLinkHelloInterval uint32 `protobuf:"varint,59,opt,name=virtual_link_hello_interval,json=virtualLinkHelloInterval" json:"virtual_link_hello_interval,omitempty"`
	// Hello interval (ms)
	VirtualLinkHelloIntervalMs uint32 `protobuf:"varint,60,opt,name=virtual_link_hello_interval_ms,json=virtualLinkHelloIntervalMs" json:"virtual_link_hello_interval_ms,omitempty"`
	// Dead interval (s)
	VirtualLinkDeadInterval uint32 `protobuf:"varint,61,opt,name=virtual_link_dead_interval,json=virtualLinkDeadInterval" json:"virtual_link_dead_interval,omitempty"`
	// Wait interval (s)
	VirtualLinkWaitInterval uint32 `protobuf:"varint,62,opt,name=virtual_link_wait_interval,json=virtualLinkWaitInterval" json:"virtual_link_wait_interval,omitempty"`
	// Retransmission interval (s)
	VirtaulLinkRetransmissionInterval uint32 `protobuf:"varint,63,opt,name=virtaul_link_retransmission_interval,json=virtaulLinkRetransmissionInterval" json:"virtaul_link_retransmission_interval,omitempty"`
	// Time until next hello (s)
	VirtualLinkNextHello uint32 `protobuf:"varint,64,opt,name=virtual_link_next_hello,json=virtualLinkNextHello" json:"virtual_link_next_hello,omitempty"`
	// Time until next hello (ms)
	VirtualLinkNextHelloMs uint32 `protobuf:"varint,65,opt,name=virtual_link_next_hello_ms,json=virtualLinkNextHelloMs" json:"virtual_link_next_hello_ms,omitempty"`
	// If true, interface is passive
	VirtualLinkPassive bool `protobuf:"varint,66,opt,name=virtual_link_passive,json=virtualLinkPassive" json:"virtual_link_passive,omitempty"`
	// Authentication type
	VirtualLinkAuthenticationType string `protobuf:"bytes,67,opt,name=virtual_link_authentication_type,json=virtualLinkAuthenticationType" json:"virtual_link_authentication_type,omitempty"`
	// If true, MD key configured
	VirtualLinkYoungestMdKey bool `protobuf:"varint,68,opt,name=virtual_link_youngest_md_key,json=virtualLinkYoungestMdKey" json:"virtual_link_youngest_md_key,omitempty"`
	// Youngest MD key ID
	VirtualLinkYoungestMdKeyId uint32 `protobuf:"varint,69,opt,name=virtual_link_youngest_md_key_id,json=virtualLinkYoungestMdKeyId" json:"virtual_link_youngest_md_key_id,omitempty"`
	// Number of neighbors still using the old key (rollover in progress)
	VirtualLinkOldMdKeyCount uint32 `protobuf:"varint,70,opt,name=virtual_link_old_md_key_count,json=virtualLinkOldMdKeyCount" json:"virtual_link_old_md_key_count,omitempty"`
	// List of old MD keys (if any)
	VirtualLinkMdKeyList []uint32 `protobuf:"varint,71,rep,packed,name=virtual_link_md_key_list,json=virtualLinkMdKeyList" json:"virtual_link_md_key_list,omitempty"`
	// Virtual Link Keychain ID
	VirtualLinkKeychainId uint64 `protobuf:"varint,72,opt,name=virtual_link_keychain_id,json=virtualLinkKeychainId" json:"virtual_link_keychain_id,omitempty"`
	// If true, NSF enabled
	VirtualLinkNsfEnabled bool `protobuf:"varint,73,opt,name=virtual_link_nsf_enabled,json=virtualLinkNsfEnabled" json:"virtual_link_nsf_enabled,omitempty"`
	// If true, NSF restart in progress on the virtual link
	VirtualLinkNsf bool `protobuf:"varint,74,opt,name=virtual_link_nsf,json=virtualLinkNsf" json:"virtual_link_nsf,omitempty"`
	// Time in seconds since last NSF
	VirtualLinkLastNsf uint32 `protobuf:"varint,75,opt,name=virtual_link_last_nsf,json=virtualLinkLastNsf" json:"virtual_link_last_nsf,omitempty"`
	// Neighbor information
	VirtualLinkNeighbor *OspfShVlinkNeighbor `protobuf:"bytes,76,opt,name=virtual_link_neighbor,json=virtualLinkNeighbor" json:"virtual_link_neighbor,omitempty"`
}

func (m *OspfShVirtualLinks) Reset()                    { *m = OspfShVirtualLinks{} }
func (m *OspfShVirtualLinks) String() string            { return proto.CompactTextString(m) }
func (*OspfShVirtualLinks) ProtoMessage()               {}
func (*OspfShVirtualLinks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShVirtualLinks) GetVirtualLinkName() string {
	if m != nil {
		return m.VirtualLinkName
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkNeighborId() string {
	if m != nil {
		return m.VirtualLinkNeighborId
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkState() string {
	if m != nil {
		return m.VirtualLinkState
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkDemandCircuit() bool {
	if m != nil {
		return m.VirtualLinkDemandCircuit
	}
	return false
}

func (m *OspfShVirtualLinks) GetVirtualLinkDcBitlessLsa() uint32 {
	if m != nil {
		return m.VirtualLinkDcBitlessLsa
	}
	return 0
}

func (m *OspfShVirtualLinks) GetTransitArea() string {
	if m != nil {
		return m.TransitArea
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkInterfaceName() string {
	if m != nil {
		return m.VirtualLinkInterfaceName
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkCost() uint32 {
	if m != nil {
		return m.VirtualLinkCost
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirualLinkTransmissionDelay() uint32 {
	if m != nil {
		return m.VirualLinkTransmissionDelay
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkHelloInterval() uint32 {
	if m != nil {
		return m.VirtualLinkHelloInterval
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkHelloIntervalMs() uint32 {
	if m != nil {
		return m.VirtualLinkHelloIntervalMs
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkDeadInterval() uint32 {
	if m != nil {
		return m.VirtualLinkDeadInterval
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkWaitInterval() uint32 {
	if m != nil {
		return m.VirtualLinkWaitInterval
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtaulLinkRetransmissionInterval() uint32 {
	if m != nil {
		return m.VirtaulLinkRetransmissionInterval
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkNextHello() uint32 {
	if m != nil {
		return m.VirtualLinkNextHello
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkNextHelloMs() uint32 {
	if m != nil {
		return m.VirtualLinkNextHelloMs
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkPassive() bool {
	if m != nil {
		return m.VirtualLinkPassive
	}
	return false
}

func (m *OspfShVirtualLinks) GetVirtualLinkAuthenticationType() string {
	if m != nil {
		return m.VirtualLinkAuthenticationType
	}
	return ""
}

func (m *OspfShVirtualLinks) GetVirtualLinkYoungestMdKey() bool {
	if m != nil {
		return m.VirtualLinkYoungestMdKey
	}
	return false
}

func (m *OspfShVirtualLinks) GetVirtualLinkYoungestMdKeyId() uint32 {
	if m != nil {
		return m.VirtualLinkYoungestMdKeyId
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkOldMdKeyCount() uint32 {
	if m != nil {
		return m.VirtualLinkOldMdKeyCount
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkMdKeyList() []uint32 {
	if m != nil {
		return m.VirtualLinkMdKeyList
	}
	return nil
}

func (m *OspfShVirtualLinks) GetVirtualLinkKeychainId() uint64 {
	if m != nil {
		return m.VirtualLinkKeychainId
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkNsfEnabled() bool {
	if m != nil {
		return m.VirtualLinkNsfEnabled
	}
	return false
}

func (m *OspfShVirtualLinks) GetVirtualLinkNsf() bool {
	if m != nil {
		return m.VirtualLinkNsf
	}
	return false
}

func (m *OspfShVirtualLinks) GetVirtualLinkLastNsf() uint32 {
	if m != nil {
		return m.VirtualLinkLastNsf
	}
	return 0
}

func (m *OspfShVirtualLinks) GetVirtualLinkNeighbor() *OspfShVlinkNeighbor {
	if m != nil {
		return m.VirtualLinkNeighbor
	}
	return nil
}

// OSPF Neighbor Retransmission Information
type OspfShNeighborRetrans struct {
	// Number of DBD retransmissions during last exchange
	DbdRetransmissionCount uint32 `protobuf:"varint,1,opt,name=dbd_retransmission_count,json=dbdRetransmissionCount" json:"dbd_retransmission_count,omitempty"`
	// Total number of DBD retransmissions for this neighbor
	DbdRetransmissionTotalCount uint32 `protobuf:"varint,2,opt,name=dbd_retransmission_total_count,json=dbdRetransmissionTotalCount" json:"dbd_retransmission_total_count,omitempty"`
	// Area scope LSA's flood index
	AreaFloodingIndex uint32 `protobuf:"varint,3,opt,name=area_flooding_index,json=areaFloodingIndex" json:"area_flooding_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,4,opt,name=as_flood_index,json=asFloodIndex" json:"as_flood_index,omitempty"`
	// Retransmission queue length
	NeighborRetransmissionCount uint32 `protobuf:"varint,5,opt,name=neighbor_retransmission_count,json=neighborRetransmissionCount" json:"neighbor_retransmission_count,omitempty"`
	// Number of retransmissions for this neighbor
	NumberOfRetransmissions uint32 `protobuf:"varint,6,opt,name=number_of_retransmissions,json=numberOfRetransmissions" json:"number_of_retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFloodInformation uint32 `protobuf:"varint,7,opt,name=area_first_flood_information,json=areaFirstFloodInformation" json:"area_first_flood_information,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodInformationIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_information_index,json=areaFirstFloodInformationIndex" json:"area_first_flood_information_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFloodInformation uint32 `protobuf:"varint,9,opt,name=as_first_flood_information,json=asFirstFloodInformation" json:"as_first_flood_information,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodInformationIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_information_index,json=asFirstFloodInformationIndex" json:"as_first_flood_information_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFloodInformation uint32 `protobuf:"varint,11,opt,name=area_next_flood_information,json=areaNextFloodInformation" json:"area_next_flood_information,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodInformationIndex uint32 `protobuf:"varint,12,opt,name=area_next_flood_information_index,json=areaNextFloodInformationIndex" json:"area_next_flood_information_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFloodInformation uint32 `protobuf:"varint,13,opt,name=as_next_flood_information,json=asNextFloodInformation" json:"as_next_flood_information,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodInformationIndex uint32 `protobuf:"varint,14,opt,name=as_next_flood_information_index,json=asNextFloodInformationIndex" json:"as_next_flood_information_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,15,opt,name=last_retransmission_length,json=lastRetransmissionLength" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,16,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,17,opt,name=last_retransmission_time,json=lastRetransmissionTime" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,18,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,19,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer" json:"lsa_retransmission_timer,omitempty"`
}

func (m *OspfShNeighborRetrans) Reset()                    { *m = OspfShNeighborRetrans{} }
func (m *OspfShNeighborRetrans) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighborRetrans) ProtoMessage()               {}
func (*OspfShNeighborRetrans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShNeighborRetrans) GetDbdRetransmissionCount() uint32 {
	if m != nil {
		return m.DbdRetransmissionCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetDbdRetransmissionTotalCount() uint32 {
	if m != nil {
		return m.DbdRetransmissionTotalCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFloodingIndex() uint32 {
	if m != nil {
		return m.AreaFloodingIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFloodIndex() uint32 {
	if m != nil {
		return m.AsFloodIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetNeighborRetransmissionCount() uint32 {
	if m != nil {
		return m.NeighborRetransmissionCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetNumberOfRetransmissions() uint32 {
	if m != nil {
		return m.NumberOfRetransmissions
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFirstFloodInformation() uint32 {
	if m != nil {
		return m.AreaFirstFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFirstFloodInformationIndex() uint32 {
	if m != nil {
		return m.AreaFirstFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFirstFloodInformation() uint32 {
	if m != nil {
		return m.AsFirstFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFirstFloodInformationIndex() uint32 {
	if m != nil {
		return m.AsFirstFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaNextFloodInformation() uint32 {
	if m != nil {
		return m.AreaNextFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaNextFloodInformationIndex() uint32 {
	if m != nil {
		return m.AreaNextFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsNextFloodInformation() uint32 {
	if m != nil {
		return m.AsNextFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsNextFloodInformationIndex() uint32 {
	if m != nil {
		return m.AsNextFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if m != nil {
		return m.LastRetransmissionLength
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if m != nil {
		return m.MaximumRetransmissionLength
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if m != nil {
		return m.LastRetransmissionTime
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if m != nil {
		return m.LsaRetransmissionTimer
	}
	return 0
}

// Virtual Link Neighbor Information
type OspfShVlinkNeighbor struct {
	// If true Hellos suppressed
	VirtualLinkSuppressHello bool `protobuf:"varint,1,opt,name=virtual_link_suppress_hello,json=virtualLinkSuppressHello" json:"virtual_link_suppress_hello,omitempty"`
	// Adjacency state
	VirtualLinkState string `protobuf:"bytes,2,opt,name=virtual_link_state,json=virtualLinkState" json:"virtual_link_state,omitempty"`
	// Neighbor retransmission info
	VirtualLinkRetransmissoin *OspfShNeighborRetrans `protobuf:"bytes,3,opt,name=virtual_link_retransmissoin,json=virtualLinkRetransmissoin" json:"virtual_link_retransmissoin,omitempty"`
}

func (m *OspfShVlinkNeighbor) Reset()                    { *m = OspfShVlinkNeighbor{} }
func (m *OspfShVlinkNeighbor) String() string            { return proto.CompactTextString(m) }
func (*OspfShVlinkNeighbor) ProtoMessage()               {}
func (*OspfShVlinkNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OspfShVlinkNeighbor) GetVirtualLinkSuppressHello() bool {
	if m != nil {
		return m.VirtualLinkSuppressHello
	}
	return false
}

func (m *OspfShVlinkNeighbor) GetVirtualLinkState() string {
	if m != nil {
		return m.VirtualLinkState
	}
	return ""
}

func (m *OspfShVlinkNeighbor) GetVirtualLinkRetransmissoin() *OspfShNeighborRetrans {
	if m != nil {
		return m.VirtualLinkRetransmissoin
	}
	return nil
}

func init() {
	proto.RegisterType((*OspfShVirtualLinks_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.virtual_links.virtual_link.ospf_sh_virtual_links_KEYS")
	proto.RegisterType((*OspfShVirtualLinks)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.virtual_links.virtual_link.ospf_sh_virtual_links")
	proto.RegisterType((*OspfShNeighborRetrans)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.virtual_links.virtual_link.ospf_sh_neighbor_retrans")
	proto.RegisterType((*OspfShVlinkNeighbor)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.virtual_links.virtual_link.ospf_sh_vlink_neighbor")
}

func init() { proto.RegisterFile("ospf_sh_virtual_links.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x97, 0xdb, 0x53, 0x1b, 0xb7,
	0x17, 0xc7, 0x67, 0x49, 0x7e, 0xf9, 0x25, 0x22, 0x10, 0x10, 0x21, 0x11, 0xd7, 0x18, 0x26, 0x0f,
	0x9e, 0x4e, 0xc7, 0xd3, 0x92, 0x1b, 0xe1, 0x12, 0x0a, 0x06, 0x82, 0x83, 0x29, 0x1d, 0xc3, 0x4c,
	0x27, 0x4f, 0x1a, 0x79, 0x57, 0xc6, 0x1a, 0x76, 0x57, 0x9e, 0x95, 0xec, 0xe2, 0xbf, 0xa0, 0xd3,
	0xff, 0xa9, 0x2f, 0xed, 0x63, 0x1f, 0xfb, 0x17, 0x75, 0x74, 0x61, 0x59, 0xed, 0x85, 0xc7, 0xf6,
	0xcd, 0xec, 0xf9, 0x7e, 0x8e, 0xbe, 0x3a, 0x7b, 0x74, 0xb4, 0x80, 0x25, 0x2e, 0x06, 0x3d, 0x2c,
	0xfa, 0x78, 0xc4, 0x12, 0x39, 0x24, 0x21, 0x0e, 0x59, 0x7c, 0x2d, 0x1a, 0x83, 0x84, 0x4b, 0x0e,
	0xb9, 0xcf, 0x84, 0xcf, 0x31, 0xe3, 0x02, 0xdf, 0x24, 0x98, 0x0d, 0x46, 0x6f, 0xb1, 0x96, 0xf3,
	0x01, 0x4d, 0x1a, 0xea, 0x97, 0xd2, 0xf9, 0x54, 0x08, 0x2a, 0x6e, 0x7f, 0x35, 0x02, 0xda, 0x23,
	0xc3, 0x50, 0xe2, 0x51, 0xd2, 0x6b, 0xb0, 0x58, 0xd2, 0xa4, 0x47, 0x7c, 0x8a, 0x59, 0xdc, 0xe3,
	0x49, 0x44, 0x24, 0xe3, 0x71, 0xc3, 0x5d, 0x29, 0xfb, 0xd7, 0xfa, 0x35, 0x58, 0x2c, 0xf5, 0x83,
	0x4f, 0x8f, 0xbe, 0x5e, 0xc0, 0x35, 0xf0, 0xd4, 0xae, 0x82, 0x63, 0x12, 0x51, 0xe4, 0xd5, 0xbc,
	0xfa, 0x93, 0xce, 0xa4, 0x7d, 0xf6, 0x23, 0x89, 0x28, 0xfc, 0x06, 0xcc, 0x66, 0x41, 0xa3, 0x9b,
	0xd0, 0xba, 0x67, 0x36, 0xd0, 0x66, 0xf1, 0xb5, 0xd2, 0xae, 0xff, 0x39, 0x05, 0xe6, 0x4b, 0x57,
	0x2b, 0xcf, 0xb2, 0x51, 0x9a, 0x05, 0x7e, 0x00, 0xc8, 0xd5, 0x52, 0x76, 0xd5, 0xef, 0xf2, 0x04,
	0xb3, 0x00, 0xbd, 0xd1, 0xc8, 0x7c, 0x16, 0xb1, 0xd1, 0x56, 0x00, 0xbf, 0x05, 0xd0, 0x01, 0x85,
	0x24, 0x92, 0xa2, 0xb7, 0x1a, 0x99, 0xc9, 0x20, 0x17, 0xea, 0x39, 0xdc, 0x05, 0x4b, 0x8e, 0x3a,
	0xa0, 0x11, 0x89, 0x03, 0xec, 0xb3, 0xc4, 0x1f, 0x32, 0x89, 0xde, 0xd5, 0xbc, 0xfa, 0xe3, 0x0e,
	0xca, 0x60, 0x87, 0x5a, 0xd0, 0x34, 0x71, 0xb8, 0x93, 0xc7, 0x7d, 0xdc, 0x65, 0x32, 0x54, 0xa5,
	0x0c, 0x05, 0x41, 0xef, 0x6b, 0x5e, 0x7d, 0xaa, 0xf3, 0x32, 0x8b, 0xfb, 0x07, 0x26, 0xde, 0x16,
	0x44, 0x15, 0x5e, 0x26, 0x24, 0x16, 0x4c, 0x62, 0x92, 0x50, 0x82, 0x3e, 0x98, 0xc2, 0xdb, 0x67,
	0xfb, 0x09, 0x25, 0x05, 0x7f, 0x77, 0xaf, 0x5e, 0x17, 0x6f, 0x53, 0x13, 0x59, 0x7f, 0xad, 0x5b,
	0x41, 0xe9, 0x7b, 0xf3, 0xb9, 0x90, 0xe8, 0xa3, 0x76, 0x95, 0xad, 0x78, 0x93, 0x0b, 0x09, 0x9b,
	0x60, 0x75, 0xc4, 0x92, 0x54, 0xaa, 0x5d, 0x44, 0x4c, 0x08, 0xc6, 0x63, 0x1c, 0xd0, 0x90, 0x8c,
	0xd1, 0x96, 0x06, 0x97, 0x8c, 0x4a, 0x71, 0x97, 0x19, 0xcd, 0xa1, 0x92, 0x14, 0xfc, 0xf6, 0x69,
	0x18, 0x72, 0xe3, 0x7a, 0x44, 0x42, 0xb4, 0xad, 0x33, 0x64, 0xfd, 0x9e, 0x28, 0x41, 0xcb, 0xc6,
	0xe1, 0x81, 0xf6, 0x50, 0x85, 0xe3, 0x48, 0xa0, 0x1d, 0x9d, 0x61, 0xb1, 0x2a, 0xc3, 0x99, 0x80,
	0xdb, 0x60, 0x31, 0xf7, 0x4a, 0x49, 0x70, 0xe7, 0x60, 0xb7, 0xf8, 0x4a, 0x28, 0x09, 0x52, 0x03,
	0x79, 0xf8, 0x17, 0xc2, 0xe4, 0x1d, 0xfc, 0xa9, 0x00, 0xff, 0x4c, 0x98, 0x4c, 0xe1, 0x73, 0xf0,
	0x5a, 0x85, 0xc8, 0xd0, 0xc2, 0x09, 0x75, 0x8a, 0x98, 0xa6, 0xd9, 0xd3, 0x69, 0xd6, 0xac, 0x56,
	0xa5, 0xe9, 0x38, 0xca, 0x34, 0xe1, 0x3b, 0xf0, 0x32, 0x77, 0x08, 0x6e, 0xa4, 0xa9, 0x09, 0xfa,
	0x41, 0xe7, 0x78, 0xee, 0x9c, 0x81, 0x1b, 0xa9, 0x6b, 0x01, 0xb7, 0x72, 0x9b, 0xb8, 0xc3, 0x54,
	0x05, 0xf7, 0x35, 0xf9, 0xa2, 0x8c, 0x3c, 0x13, 0xf0, 0x3b, 0xf0, 0xdc, 0x61, 0x07, 0x44, 0x08,
	0x36, 0xa2, 0xe8, 0x40, 0x9f, 0x04, 0x98, 0xa1, 0x7e, 0x32, 0x11, 0xf8, 0x19, 0xd4, 0x1c, 0x82,
	0x0c, 0x65, 0x9f, 0xc6, 0x92, 0xf9, 0x7a, 0x2c, 0x61, 0x39, 0x1e, 0x50, 0xd4, 0xd4, 0x7d, 0xba,
	0x92, 0xa1, 0xf7, 0x1d, 0xd5, 0xe5, 0x78, 0x40, 0xe1, 0x27, 0xb0, 0xec, 0x24, 0x1a, 0xf3, 0x61,
	0x7c, 0x45, 0x85, 0xc4, 0x51, 0x80, 0xaf, 0xe9, 0x18, 0x1d, 0x16, 0x0e, 0xe3, 0x57, 0xab, 0x38,
	0x0b, 0x4e, 0xe9, 0x18, 0x36, 0xc1, 0xab, 0xfb, 0x78, 0x35, 0x39, 0x8e, 0x0a, 0xdd, 0xe3, 0xa4,
	0x68, 0x05, 0x70, 0x0f, 0xac, 0x38, 0x49, 0x78, 0x18, 0xdc, 0xf2, 0x3e, 0x1f, 0xc6, 0x12, 0x1d,
	0x17, 0x5a, 0xf8, 0x3c, 0x0c, 0x34, 0xdd, 0x54, 0x71, 0xf8, 0x3e, 0x37, 0xb8, 0x2c, 0x1c, 0x32,
	0x21, 0xd1, 0xe7, 0xda, 0x83, 0xdc, 0x4b, 0xd3, 0x60, 0x9b, 0x09, 0x59, 0x18, 0x78, 0xd7, 0x74,
	0xec, 0xf7, 0x09, 0x8b, 0x95, 0xed, 0x93, 0x9a, 0x57, 0x7f, 0xe8, 0x0c, 0xbc, 0x53, 0x1b, 0x6d,
	0x05, 0xc5, 0x49, 0x29, 0x7a, 0x98, 0xc6, 0xa4, 0x1b, 0xd2, 0x00, 0xb5, 0x74, 0xc9, 0x9c, 0x49,
	0x29, 0x7a, 0x47, 0x26, 0x08, 0xeb, 0x60, 0x26, 0x0f, 0xa2, 0x2f, 0x1a, 0x98, 0x76, 0x01, 0xf8,
	0x3d, 0x98, 0x77, 0x94, 0x21, 0x11, 0x52, 0xcb, 0x4f, 0x75, 0x31, 0xb2, 0x5d, 0xd1, 0x26, 0x42,
	0x2a, 0xe4, 0x77, 0x2f, 0xc7, 0xdc, 0x0e, 0x70, 0xd4, 0xae, 0x79, 0xf5, 0xc9, 0x8d, 0x5f, 0xbd,
	0xc6, 0xbf, 0x7c, 0x0b, 0x36, 0xd2, 0x4b, 0xc9, 0xf1, 0xd3, 0x99, 0x2b, 0xb9, 0x47, 0xd6, 0xff,
	0x78, 0x02, 0xd0, 0xad, 0x3e, 0xbd, 0x7a, 0xec, 0x79, 0x86, 0x9b, 0x00, 0x05, 0xdd, 0x20, 0x7f,
	0xbc, 0x4d, 0x7b, 0x78, 0xe6, 0x74, 0x05, 0xdd, 0xc0, 0x3d, 0xd3, 0xa6, 0x39, 0x9a, 0x60, 0xb5,
	0x84, 0x94, 0x5c, 0x92, 0xd0, 0xf2, 0x13, 0x66, 0xc6, 0x16, 0xf8, 0x4b, 0xa5, 0x31, 0x49, 0x1a,
	0x60, 0x4e, 0x5d, 0x17, 0xb8, 0x17, 0x72, 0x1e, 0xb0, 0xf8, 0x0a, 0xb3, 0x38, 0xa0, 0x37, 0xe8,
	0x81, 0x26, 0x67, 0x55, 0xe8, 0xd8, 0x46, 0x5a, 0x2a, 0x00, 0x5f, 0x83, 0x69, 0x22, 0x8c, 0xda,
	0x4a, 0x1f, 0x6a, 0xe9, 0x53, 0x22, 0xb4, 0xd0, 0xa8, 0x0e, 0xc0, 0x4a, 0x7e, 0xa3, 0xee, 0xce,
	0xfe, 0x67, 0x9c, 0xa5, 0x75, 0x2b, 0xd9, 0xde, 0x16, 0x58, 0x88, 0x87, 0x51, 0x97, 0x26, 0x98,
	0xf7, 0x72, 0x49, 0x04, 0x7a, 0x64, 0x86, 0xa7, 0x11, 0x9c, 0xf7, 0x5c, 0x5e, 0xc0, 0x3d, 0xb0,
	0x6c, 0x76, 0xc5, 0x12, 0x21, 0x53, 0xb7, 0xe9, 0x8b, 0x45, 0xff, 0xd7, 0xf8, 0x82, 0xde, 0x9e,
	0x92, 0x58, 0xeb, 0xa9, 0x00, 0x7e, 0x01, 0xeb, 0xf7, 0x25, 0xb0, 0x5b, 0x7f, 0xac, 0xd3, 0xac,
	0x56, 0xa6, 0x31, 0xc5, 0xd8, 0x06, 0x8b, 0xaa, 0x64, 0x15, 0x56, 0x9e, 0x98, 0x9d, 0x10, 0x51,
	0x6e, 0xe4, 0x18, 0xd4, 0xaa, 0x61, 0x6b, 0x03, 0xe8, 0x14, 0xcb, 0x15, 0x29, 0x8c, 0x89, 0x5d,
	0xb0, 0xa4, 0x37, 0xa4, 0xc7, 0x77, 0xd1, 0xc5, 0xa4, 0x19, 0x44, 0x4a, 0xa2, 0x06, 0x78, 0xc1,
	0xc6, 0x09, 0x58, 0xbb, 0x07, 0xb7, 0x3e, 0x9e, 0xea, 0x24, 0x2b, 0x55, 0x49, 0x8c, 0x91, 0x8f,
	0x60, 0x81, 0x88, 0x2a, 0x1b, 0x53, 0xa6, 0xe1, 0x89, 0x28, 0x35, 0x71, 0x08, 0x5e, 0x55, 0xa2,
	0xd6, 0xc2, 0xb4, 0xe9, 0xab, 0xf2, 0x04, 0xc6, 0xc0, 0x0e, 0x58, 0xd4, 0x23, 0x27, 0xd7, 0x97,
	0x21, 0x8d, 0xaf, 0x64, 0x1f, 0x3d, 0x33, 0x85, 0x50, 0x0a, 0xb7, 0xa9, 0xda, 0x3a, 0xae, 0x3a,
	0x3b, 0x22, 0x37, 0x2c, 0x1a, 0x46, 0x15, 0x09, 0x66, 0x8c, 0x03, 0x2b, 0x2a, 0xcd, 0xb1, 0x09,
	0x50, 0x99, 0x03, 0xc9, 0x22, 0x8a, 0x66, 0x4d, 0x05, 0x8a, 0xeb, 0x5f, 0xb2, 0x48, 0xdd, 0x6a,
	0x4b, 0x15, 0xab, 0x6b, 0x18, 0x9a, 0xb6, 0x2e, 0x5d, 0x5b, 0xf3, 0x6a, 0x65, 0x41, 0xca, 0xd8,
	0x04, 0xcd, 0xd9, 0x95, 0x05, 0x29, 0x82, 0xc9, 0xfa, 0xdf, 0x13, 0xe0, 0x45, 0xf9, 0xcc, 0x2b,
	0x7c, 0xa6, 0x89, 0xe1, 0x60, 0x90, 0xa8, 0xaf, 0x56, 0xf3, 0x71, 0xe1, 0x15, 0x6e, 0xda, 0x0b,
	0x2b, 0x30, 0x1f, 0x18, 0xe5, 0xdf, 0xd8, 0x13, 0x15, 0xdf, 0xd8, 0x7f, 0x79, 0xb9, 0xd5, 0x32,
	0x7b, 0xe1, 0x2c, 0xd6, 0x83, 0x6b, 0x72, 0xe3, 0xb7, 0xff, 0xee, 0x42, 0xc8, 0xcf, 0xbd, 0xce,
	0x42, 0x66, 0x0f, 0x1d, 0xc7, 0x6c, 0xf7, 0x91, 0xfe, 0x17, 0xee, 0xcd, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xea, 0xcd, 0x1b, 0x56, 0xe1, 0x0d, 0x00, 0x00,
}
