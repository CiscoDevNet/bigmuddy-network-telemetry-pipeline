// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_interface.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_interface.proto

It has these top-level messages:
	OspfShInterface_KEYS
	OspfShInterface
	OspfShIpfrrTb
	OspfShInterfaceBfd
	OspfShInterfaceNbr
	OspfShInterfaceMadj
	OspfShInterfaceUp
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Interface Information
type OspfShInterface_KEYS struct {
	ProcessName   string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	AreaId        uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *OspfShInterface_KEYS) Reset()                    { *m = OspfShInterface_KEYS{} }
func (m *OspfShInterface_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterface_KEYS) ProtoMessage()               {}
func (*OspfShInterface_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShInterface_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShInterface_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *OspfShInterface_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type OspfShInterface struct {
	// Interface
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Interface state
	InterfaceState string `protobuf:"bytes,51,opt,name=interface_state,json=interfaceState" json:"interface_state,omitempty"`
	// If true, line protocol is up
	InterfaceLineState bool `protobuf:"varint,52,opt,name=interface_line_state,json=interfaceLineState" json:"interface_line_state,omitempty"`
	// Interface IP Address
	InterfaceAddress string `protobuf:"bytes,53,opt,name=interface_address,json=interfaceAddress" json:"interface_address,omitempty"`
	// Interface IP Mask
	InterfaceMask uint32 `protobuf:"varint,54,opt,name=interface_mask,json=interfaceMask" json:"interface_mask,omitempty"`
	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,55,opt,name=interface_area,json=interfaceArea" json:"interface_area,omitempty"`
	// Interface SID
	InterfaceSid uint32 `protobuf:"varint,56,opt,name=interface_sid,json=interfaceSid" json:"interface_sid,omitempty"`
	// SID PHP Off
	InterfaceSidPhpOff bool `protobuf:"varint,57,opt,name=interface_sid_php_off,json=interfaceSidPhpOff" json:"interface_sid_php_off,omitempty"`
	// SID N-Flag Clear
	InterfaceSidNFlagClear bool `protobuf:"varint,58,opt,name=interface_sid_n_flag_clear,json=interfaceSidNFlagClear" json:"interface_sid_n_flag_clear,omitempty"`
	// Interface Strict-SPF SID
	InterfaceStrictSpfSid uint32 `protobuf:"varint,59,opt,name=interface_strict_spf_sid,json=interfaceStrictSpfSid" json:"interface_strict_spf_sid,omitempty"`
	// Strict-SPF SID PHP Off
	InterfaceStrictSpfSidPhpOff bool `protobuf:"varint,60,opt,name=interface_strict_spf_sid_php_off,json=interfaceStrictSpfSidPhpOff" json:"interface_strict_spf_sid_php_off,omitempty"`
	// Strict-SPF SID N-Flag Clear
	InterfaceStrictSpfSidNFlagClear bool `protobuf:"varint,61,opt,name=interface_strict_spf_sid_n_flag_clear,json=interfaceStrictSpfSidNFlagClear" json:"interface_strict_spf_sid_n_flag_clear,omitempty"`
	// Interface Router ID
	InterfaceRouterId string `protobuf:"bytes,62,opt,name=interface_router_id,json=interfaceRouterId" json:"interface_router_id,omitempty"`
	// Network type
	NetworkType string `protobuf:"bytes,63,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	// IP MTU
	IpMtu uint32 `protobuf:"varint,64,opt,name=ip_mtu,json=ipMtu" json:"ip_mtu,omitempty"`
	// Maximum Packet Size
	MaximumPacketSize uint32 `protobuf:"varint,65,opt,name=maximum_packet_size,json=maximumPacketSize" json:"maximum_packet_size,omitempty"`
	// Interface tunnel flags
	InterfaceTunnelFlags uint32 `protobuf:"varint,66,opt,name=interface_tunnel_flags,json=interfaceTunnelFlags" json:"interface_tunnel_flags,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,67,opt,name=interface_link_cost,json=interfaceLinkCost" json:"interface_link_cost,omitempty"`
	// Interface bandwidth
	InterfaceBandwidth uint32 `protobuf:"varint,68,opt,name=interface_bandwidth,json=interfaceBandwidth" json:"interface_bandwidth,omitempty"`
	// If true, cost fallback is configured
	CfgCostFallback bool `protobuf:"varint,69,opt,name=cfg_cost_fallback,json=cfgCostFallback" json:"cfg_cost_fallback,omitempty"`
	// Interface fallback cost
	InterfaceCostFallback uint32 `protobuf:"varint,70,opt,name=interface_cost_fallback,json=interfaceCostFallback" json:"interface_cost_fallback,omitempty"`
	// If true, cost fallback is active
	CostFallbackActive bool `protobuf:"varint,71,opt,name=cost_fallback_active,json=costFallbackActive" json:"cost_fallback_active,omitempty"`
	// If true, configured as LDP sync
	ConfiguredLdpSync bool `protobuf:"varint,72,opt,name=configured_ldp_sync,json=configuredLdpSync" json:"configured_ldp_sync,omitempty"`
	// If true, sync igp shortcuts
	ConfiguredLdpSyncIgpShortcuts bool `protobuf:"varint,73,opt,name=configured_ldp_sync_igp_shortcuts,json=configuredLdpSyncIgpShortcuts" json:"configured_ldp_sync_igp_shortcuts,omitempty"`
	// If true, interface LDP sync is achieved
	InterfaceLdpSync bool `protobuf:"varint,74,opt,name=interface_ldp_sync,json=interfaceLdpSync" json:"interface_ldp_sync,omitempty"`
	// If true, configured as demand circuit
	ConfiguredDemandCircuit bool `protobuf:"varint,75,opt,name=configured_demand_circuit,json=configuredDemandCircuit" json:"configured_demand_circuit,omitempty"`
	// If true, interface running as demand circuit
	InterfaceDemandCircuit bool `protobuf:"varint,76,opt,name=interface_demand_circuit,json=interfaceDemandCircuit" json:"interface_demand_circuit,omitempty"`
	// Number of LSAs with demand circuit bit not set for the area in which the interface is running
	InterfaceDcBitlessLsaCount uint32 `protobuf:"varint,77,opt,name=interface_dc_bitless_lsa_count,json=interfaceDcBitlessLsaCount" json:"interface_dc_bitless_lsa_count,omitempty"`
	// Interface Transmission delay
	TransmissionDelay uint32 `protobuf:"varint,78,opt,name=transmission_delay,json=transmissionDelay" json:"transmission_delay,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,79,opt,name=ospf_interface_state,json=ospfInterfaceState" json:"ospf_interface_state,omitempty"`
	// Interface priority
	InterfacePriority uint32 `protobuf:"varint,80,opt,name=interface_priority,json=interfacePriority" json:"interface_priority,omitempty"`
	// If true, designated router
	DesignatedRouter bool `protobuf:"varint,81,opt,name=designated_router,json=designatedRouter" json:"designated_router,omitempty"`
	// Designated router ID
	DesignatedRouterId string `protobuf:"bytes,82,opt,name=designated_router_id,json=designatedRouterId" json:"designated_router_id,omitempty"`
	// Designated router interface address
	DesignatedRouterAddress string `protobuf:"bytes,83,opt,name=designated_router_address,json=designatedRouterAddress" json:"designated_router_address,omitempty"`
	// If true, backup designated router
	BackupDesignatedRouter bool `protobuf:"varint,84,opt,name=backup_designated_router,json=backupDesignatedRouter" json:"backup_designated_router,omitempty"`
	// Backup designated router ID
	BackupDesignatedRouterId string `protobuf:"bytes,85,opt,name=backup_designated_router_id,json=backupDesignatedRouterId" json:"backup_designated_router_id,omitempty"`
	// Backup designated router interface address
	BackupDesignatedRouterAddress string `protobuf:"bytes,86,opt,name=backup_designated_router_address,json=backupDesignatedRouterAddress" json:"backup_designated_router_address,omitempty"`
	// The amount of time in seconds before flush timer for old network LSA expires
	NetworkLsaFlushTimer uint32 `protobuf:"varint,87,opt,name=network_lsa_flush_timer,json=networkLsaFlushTimer" json:"network_lsa_flush_timer,omitempty"`
	// Filter is configured for out going LSAs
	InterfaceLsaFilter bool `protobuf:"varint,88,opt,name=interface_lsa_filter,json=interfaceLsaFilter" json:"interface_lsa_filter,omitempty"`
	// Configured hello interval (s)
	HelloInterval uint32 `protobuf:"varint,89,opt,name=hello_interval,json=helloInterval" json:"hello_interval,omitempty"`
	// Configured hello interval (ms)
	HelloIntervalMs uint32 `protobuf:"varint,90,opt,name=hello_interval_ms,json=helloIntervalMs" json:"hello_interval_ms,omitempty"`
	// Configured dead interval (s)
	DeadInterval uint32 `protobuf:"varint,91,opt,name=dead_interval,json=deadInterval" json:"dead_interval,omitempty"`
	// Configured wait interval (s)
	WaitInterval uint32 `protobuf:"varint,92,opt,name=wait_interval,json=waitInterval" json:"wait_interval,omitempty"`
	// Configured retransmit interval (s)
	InterfaceRetransmissionInterrval uint32 `protobuf:"varint,93,opt,name=interface_retransmission_interrval,json=interfaceRetransmissionInterrval" json:"interface_retransmission_interrval,omitempty"`
	// If true, NSF is enabled
	InterfaceNsfEnabled bool `protobuf:"varint,94,opt,name=interface_nsf_enabled,json=interfaceNsfEnabled" json:"interface_nsf_enabled,omitempty"`
	// If true, NSF restart in progress on this interface
	InterfaceNsf bool `protobuf:"varint,95,opt,name=interface_nsf,json=interfaceNsf" json:"interface_nsf,omitempty"`
	// Time since last NSF restart (s)
	InterfaceLastNsf uint32 `protobuf:"varint,96,opt,name=interface_last_nsf,json=interfaceLastNsf" json:"interface_last_nsf,omitempty"`
	// If true, passive interface
	PassiveInterface bool `protobuf:"varint,97,opt,name=passive_interface,json=passiveInterface" json:"passive_interface,omitempty"`
	// Time until next Hello (s)
	NextHelloTime uint32 `protobuf:"varint,98,opt,name=next_hello_time,json=nextHelloTime" json:"next_hello_time,omitempty"`
	// Time until next Hello (ms)
	NextHelloTimeMs uint32 `protobuf:"varint,99,opt,name=next_hello_time_ms,json=nextHelloTimeMs" json:"next_hello_time_ms,omitempty"`
	// Information for neighbors on the interface
	InterfaceNeighborList []*OspfShInterfaceNbr `protobuf:"bytes,100,rep,name=interface_neighbor_list,json=interfaceNeighborList" json:"interface_neighbor_list,omitempty"`
	// BFD information
	InterfaceBfdInformation *OspfShInterfaceBfd `protobuf:"bytes,101,opt,name=interface_bfd_information,json=interfaceBfdInformation" json:"interface_bfd_information,omitempty"`
	// TTL security enabled on the interface
	TtlSecurityEnabled bool `protobuf:"varint,102,opt,name=ttl_security_enabled,json=ttlSecurityEnabled" json:"ttl_security_enabled,omitempty"`
	// TTL security hop counts
	TtlSecurityHopCount uint32 `protobuf:"varint,103,opt,name=ttl_security_hop_count,json=ttlSecurityHopCount" json:"ttl_security_hop_count,omitempty"`
	// Active interface details
	ActiveInterface *OspfShInterfaceUp `protobuf:"bytes,104,opt,name=active_interface,json=activeInterface" json:"active_interface,omitempty"`
	// If true, interface is multi-area
	InterfaceisMadj bool `protobuf:"varint,105,opt,name=interfaceis_madj,json=interfaceisMadj" json:"interfaceis_madj,omitempty"`
	// Total number of multi-area
	InterfaceMadjCount uint32 `protobuf:"varint,106,opt,name=interface_madj_count,json=interfaceMadjCount" json:"interface_madj_count,omitempty"`
	// Information for multi-area on the interface
	InterfaceMadjList []*OspfShInterfaceMadj `protobuf:"bytes,107,rep,name=interface_madj_list,json=interfaceMadjList" json:"interface_madj_list,omitempty"`
	// Prefix Suppression for primary addresses
	PrefixSuppressPrimaryAddresses bool `protobuf:"varint,108,opt,name=prefix_suppress_primary_addresses,json=prefixSuppressPrimaryAddresses" json:"prefix_suppress_primary_addresses,omitempty"`
	// Prefix Suppression for secondary addresses
	PrefixSuppressSecondaryAddresses bool `protobuf:"varint,109,opt,name=prefix_suppress_secondary_addresses,json=prefixSuppressSecondaryAddresses" json:"prefix_suppress_secondary_addresses,omitempty"`
	// If true, loopback interface is advertised as a stub network
	IsLoopbackStubNetwork bool `protobuf:"varint,110,opt,name=is_loopback_stub_network,json=isLoopbackStubNetwork" json:"is_loopback_stub_network,omitempty"`
	// Ack List Count
	InterfaceAckListCount uint32 `protobuf:"varint,111,opt,name=interface_ack_list_count,json=interfaceAckListCount" json:"interface_ack_list_count,omitempty"`
	// Ack List High Watermark
	InterfaceAckListHighWatermark uint32 `protobuf:"varint,112,opt,name=interface_ack_list_high_watermark,json=interfaceAckListHighWatermark" json:"interface_ack_list_high_watermark,omitempty"`
	// Registered for Link Down Fast Detection
	RegisteredForLinkDownFastDetection bool `protobuf:"varint,113,opt,name=registered_for_link_down_fast_detection,json=registeredForLinkDownFastDetection" json:"registered_for_link_down_fast_detection,omitempty"`
	// Hold-down time in ms for fast-detect event
	FastDetectHoldDownTime uint32 `protobuf:"varint,114,opt,name=fast_detect_hold_down_time,json=fastDetectHoldDownTime" json:"fast_detect_hold_down_time,omitempty"`
	// Link in hold-down state due to fast detect event
	InterfaceFastDetectHoldDown bool `protobuf:"varint,115,opt,name=interface_fast_detect_hold_down,json=interfaceFastDetectHoldDown" json:"interface_fast_detect_hold_down,omitempty"`
	// Remaining hold down time in ms
	FastDetectHoldDownTimeRemaining uint32 `protobuf:"varint,116,opt,name=fast_detect_hold_down_time_remaining,json=fastDetectHoldDownTimeRemaining" json:"fast_detect_hold_down_time_remaining,omitempty"`
	// IP Fast Reroute Type
	FastRerouteType string `protobuf:"bytes,117,opt,name=fast_reroute_type,json=fastRerouteType" json:"fast_reroute_type,omitempty"`
	// Topology Independent LFA
	FastRerouteTopologyIndependentLfa bool `protobuf:"varint,118,opt,name=fast_reroute_topology_independent_lfa,json=fastRerouteTopologyIndependentLfa" json:"fast_reroute_topology_independent_lfa,omitempty"`
	// SRLG Values
	Srlg []uint32 `protobuf:"varint,119,rep,packed,name=srlg" json:"srlg,omitempty"`
	// IPFRR-Tiebreakers list
	IpfrrTiebreakersList []*OspfShIpfrrTb `protobuf:"bytes,120,rep,name=ipfrr_tiebreakers_list,json=ipfrrTiebreakersList" json:"ipfrr_tiebreakers_list,omitempty"`
}

func (m *OspfShInterface) Reset()                    { *m = OspfShInterface{} }
func (m *OspfShInterface) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterface) ProtoMessage()               {}
func (*OspfShInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShInterface) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *OspfShInterface) GetInterfaceState() string {
	if m != nil {
		return m.InterfaceState
	}
	return ""
}

func (m *OspfShInterface) GetInterfaceLineState() bool {
	if m != nil {
		return m.InterfaceLineState
	}
	return false
}

func (m *OspfShInterface) GetInterfaceAddress() string {
	if m != nil {
		return m.InterfaceAddress
	}
	return ""
}

func (m *OspfShInterface) GetInterfaceMask() uint32 {
	if m != nil {
		return m.InterfaceMask
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceArea() string {
	if m != nil {
		return m.InterfaceArea
	}
	return ""
}

func (m *OspfShInterface) GetInterfaceSid() uint32 {
	if m != nil {
		return m.InterfaceSid
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceSidPhpOff() bool {
	if m != nil {
		return m.InterfaceSidPhpOff
	}
	return false
}

func (m *OspfShInterface) GetInterfaceSidNFlagClear() bool {
	if m != nil {
		return m.InterfaceSidNFlagClear
	}
	return false
}

func (m *OspfShInterface) GetInterfaceStrictSpfSid() uint32 {
	if m != nil {
		return m.InterfaceStrictSpfSid
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceStrictSpfSidPhpOff() bool {
	if m != nil {
		return m.InterfaceStrictSpfSidPhpOff
	}
	return false
}

func (m *OspfShInterface) GetInterfaceStrictSpfSidNFlagClear() bool {
	if m != nil {
		return m.InterfaceStrictSpfSidNFlagClear
	}
	return false
}

func (m *OspfShInterface) GetInterfaceRouterId() string {
	if m != nil {
		return m.InterfaceRouterId
	}
	return ""
}

func (m *OspfShInterface) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

func (m *OspfShInterface) GetIpMtu() uint32 {
	if m != nil {
		return m.IpMtu
	}
	return 0
}

func (m *OspfShInterface) GetMaximumPacketSize() uint32 {
	if m != nil {
		return m.MaximumPacketSize
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceTunnelFlags() uint32 {
	if m != nil {
		return m.InterfaceTunnelFlags
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceLinkCost() uint32 {
	if m != nil {
		return m.InterfaceLinkCost
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceBandwidth() uint32 {
	if m != nil {
		return m.InterfaceBandwidth
	}
	return 0
}

func (m *OspfShInterface) GetCfgCostFallback() bool {
	if m != nil {
		return m.CfgCostFallback
	}
	return false
}

func (m *OspfShInterface) GetInterfaceCostFallback() uint32 {
	if m != nil {
		return m.InterfaceCostFallback
	}
	return 0
}

func (m *OspfShInterface) GetCostFallbackActive() bool {
	if m != nil {
		return m.CostFallbackActive
	}
	return false
}

func (m *OspfShInterface) GetConfiguredLdpSync() bool {
	if m != nil {
		return m.ConfiguredLdpSync
	}
	return false
}

func (m *OspfShInterface) GetConfiguredLdpSyncIgpShortcuts() bool {
	if m != nil {
		return m.ConfiguredLdpSyncIgpShortcuts
	}
	return false
}

func (m *OspfShInterface) GetInterfaceLdpSync() bool {
	if m != nil {
		return m.InterfaceLdpSync
	}
	return false
}

func (m *OspfShInterface) GetConfiguredDemandCircuit() bool {
	if m != nil {
		return m.ConfiguredDemandCircuit
	}
	return false
}

func (m *OspfShInterface) GetInterfaceDemandCircuit() bool {
	if m != nil {
		return m.InterfaceDemandCircuit
	}
	return false
}

func (m *OspfShInterface) GetInterfaceDcBitlessLsaCount() uint32 {
	if m != nil {
		return m.InterfaceDcBitlessLsaCount
	}
	return 0
}

func (m *OspfShInterface) GetTransmissionDelay() uint32 {
	if m != nil {
		return m.TransmissionDelay
	}
	return 0
}

func (m *OspfShInterface) GetOspfInterfaceState() string {
	if m != nil {
		return m.OspfInterfaceState
	}
	return ""
}

func (m *OspfShInterface) GetInterfacePriority() uint32 {
	if m != nil {
		return m.InterfacePriority
	}
	return 0
}

func (m *OspfShInterface) GetDesignatedRouter() bool {
	if m != nil {
		return m.DesignatedRouter
	}
	return false
}

func (m *OspfShInterface) GetDesignatedRouterId() string {
	if m != nil {
		return m.DesignatedRouterId
	}
	return ""
}

func (m *OspfShInterface) GetDesignatedRouterAddress() string {
	if m != nil {
		return m.DesignatedRouterAddress
	}
	return ""
}

func (m *OspfShInterface) GetBackupDesignatedRouter() bool {
	if m != nil {
		return m.BackupDesignatedRouter
	}
	return false
}

func (m *OspfShInterface) GetBackupDesignatedRouterId() string {
	if m != nil {
		return m.BackupDesignatedRouterId
	}
	return ""
}

func (m *OspfShInterface) GetBackupDesignatedRouterAddress() string {
	if m != nil {
		return m.BackupDesignatedRouterAddress
	}
	return ""
}

func (m *OspfShInterface) GetNetworkLsaFlushTimer() uint32 {
	if m != nil {
		return m.NetworkLsaFlushTimer
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceLsaFilter() bool {
	if m != nil {
		return m.InterfaceLsaFilter
	}
	return false
}

func (m *OspfShInterface) GetHelloInterval() uint32 {
	if m != nil {
		return m.HelloInterval
	}
	return 0
}

func (m *OspfShInterface) GetHelloIntervalMs() uint32 {
	if m != nil {
		return m.HelloIntervalMs
	}
	return 0
}

func (m *OspfShInterface) GetDeadInterval() uint32 {
	if m != nil {
		return m.DeadInterval
	}
	return 0
}

func (m *OspfShInterface) GetWaitInterval() uint32 {
	if m != nil {
		return m.WaitInterval
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceRetransmissionInterrval() uint32 {
	if m != nil {
		return m.InterfaceRetransmissionInterrval
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceNsfEnabled() bool {
	if m != nil {
		return m.InterfaceNsfEnabled
	}
	return false
}

func (m *OspfShInterface) GetInterfaceNsf() bool {
	if m != nil {
		return m.InterfaceNsf
	}
	return false
}

func (m *OspfShInterface) GetInterfaceLastNsf() uint32 {
	if m != nil {
		return m.InterfaceLastNsf
	}
	return 0
}

func (m *OspfShInterface) GetPassiveInterface() bool {
	if m != nil {
		return m.PassiveInterface
	}
	return false
}

func (m *OspfShInterface) GetNextHelloTime() uint32 {
	if m != nil {
		return m.NextHelloTime
	}
	return 0
}

func (m *OspfShInterface) GetNextHelloTimeMs() uint32 {
	if m != nil {
		return m.NextHelloTimeMs
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceNeighborList() []*OspfShInterfaceNbr {
	if m != nil {
		return m.InterfaceNeighborList
	}
	return nil
}

func (m *OspfShInterface) GetInterfaceBfdInformation() *OspfShInterfaceBfd {
	if m != nil {
		return m.InterfaceBfdInformation
	}
	return nil
}

func (m *OspfShInterface) GetTtlSecurityEnabled() bool {
	if m != nil {
		return m.TtlSecurityEnabled
	}
	return false
}

func (m *OspfShInterface) GetTtlSecurityHopCount() uint32 {
	if m != nil {
		return m.TtlSecurityHopCount
	}
	return 0
}

func (m *OspfShInterface) GetActiveInterface() *OspfShInterfaceUp {
	if m != nil {
		return m.ActiveInterface
	}
	return nil
}

func (m *OspfShInterface) GetInterfaceisMadj() bool {
	if m != nil {
		return m.InterfaceisMadj
	}
	return false
}

func (m *OspfShInterface) GetInterfaceMadjCount() uint32 {
	if m != nil {
		return m.InterfaceMadjCount
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceMadjList() []*OspfShInterfaceMadj {
	if m != nil {
		return m.InterfaceMadjList
	}
	return nil
}

func (m *OspfShInterface) GetPrefixSuppressPrimaryAddresses() bool {
	if m != nil {
		return m.PrefixSuppressPrimaryAddresses
	}
	return false
}

func (m *OspfShInterface) GetPrefixSuppressSecondaryAddresses() bool {
	if m != nil {
		return m.PrefixSuppressSecondaryAddresses
	}
	return false
}

func (m *OspfShInterface) GetIsLoopbackStubNetwork() bool {
	if m != nil {
		return m.IsLoopbackStubNetwork
	}
	return false
}

func (m *OspfShInterface) GetInterfaceAckListCount() uint32 {
	if m != nil {
		return m.InterfaceAckListCount
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceAckListHighWatermark() uint32 {
	if m != nil {
		return m.InterfaceAckListHighWatermark
	}
	return 0
}

func (m *OspfShInterface) GetRegisteredForLinkDownFastDetection() bool {
	if m != nil {
		return m.RegisteredForLinkDownFastDetection
	}
	return false
}

func (m *OspfShInterface) GetFastDetectHoldDownTime() uint32 {
	if m != nil {
		return m.FastDetectHoldDownTime
	}
	return 0
}

func (m *OspfShInterface) GetInterfaceFastDetectHoldDown() bool {
	if m != nil {
		return m.InterfaceFastDetectHoldDown
	}
	return false
}

func (m *OspfShInterface) GetFastDetectHoldDownTimeRemaining() uint32 {
	if m != nil {
		return m.FastDetectHoldDownTimeRemaining
	}
	return 0
}

func (m *OspfShInterface) GetFastRerouteType() string {
	if m != nil {
		return m.FastRerouteType
	}
	return ""
}

func (m *OspfShInterface) GetFastRerouteTopologyIndependentLfa() bool {
	if m != nil {
		return m.FastRerouteTopologyIndependentLfa
	}
	return false
}

func (m *OspfShInterface) GetSrlg() []uint32 {
	if m != nil {
		return m.Srlg
	}
	return nil
}

func (m *OspfShInterface) GetIpfrrTiebreakersList() []*OspfShIpfrrTb {
	if m != nil {
		return m.IpfrrTiebreakersList
	}
	return nil
}

// OSPF IPFRR Tiebreakers
type OspfShIpfrrTb struct {
	// Tiebreaker Type
	TiebreakerType string `protobuf:"bytes,1,opt,name=tiebreaker_type,json=tiebreakerType" json:"tiebreaker_type,omitempty"`
	// Tiebreaker Index
	TiebreakerIndex uint32 `protobuf:"varint,2,opt,name=tiebreaker_index,json=tiebreakerIndex" json:"tiebreaker_index,omitempty"`
}

func (m *OspfShIpfrrTb) Reset()                    { *m = OspfShIpfrrTb{} }
func (m *OspfShIpfrrTb) String() string            { return proto.CompactTextString(m) }
func (*OspfShIpfrrTb) ProtoMessage()               {}
func (*OspfShIpfrrTb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShIpfrrTb) GetTiebreakerType() string {
	if m != nil {
		return m.TiebreakerType
	}
	return ""
}

func (m *OspfShIpfrrTb) GetTiebreakerIndex() uint32 {
	if m != nil {
		return m.TiebreakerIndex
	}
	return 0
}

// Interface BFD information
type OspfShInterfaceBfd struct {
	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode" json:"bfd_intf_enable_mode,omitempty"`
	// BFD interval (ms)
	Interval uint32 `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	// BFD detection multiplier
	DetectionMultiplier uint32 `protobuf:"varint,3,opt,name=detection_multiplier,json=detectionMultiplier" json:"detection_multiplier,omitempty"`
}

func (m *OspfShInterfaceBfd) Reset()                    { *m = OspfShInterfaceBfd{} }
func (m *OspfShInterfaceBfd) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterfaceBfd) ProtoMessage()               {}
func (*OspfShInterfaceBfd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OspfShInterfaceBfd) GetBfdIntfEnableMode() uint32 {
	if m != nil {
		return m.BfdIntfEnableMode
	}
	return 0
}

func (m *OspfShInterfaceBfd) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *OspfShInterfaceBfd) GetDetectionMultiplier() uint32 {
	if m != nil {
		return m.DetectionMultiplier
	}
	return 0
}

// OSPF Interface Neighbor Information
type OspfShInterfaceNbr struct {
	// Neighbor Router ID
	InterfaceNeighborId string `protobuf:"bytes,1,opt,name=interface_neighbor_id,json=interfaceNeighborId" json:"interface_neighbor_id,omitempty"`
	// Cost of link to neighbor
	InterfaceNeighborCost uint32 `protobuf:"varint,2,opt,name=interface_neighbor_cost,json=interfaceNeighborCost" json:"interface_neighbor_cost,omitempty"`
	// If true, Designated router
	NeighborDr bool `protobuf:"varint,3,opt,name=neighbor_dr,json=neighborDr" json:"neighbor_dr,omitempty"`
	// If true, Backup designated router
	NeighborBdr bool `protobuf:"varint,4,opt,name=neighbor_bdr,json=neighborBdr" json:"neighbor_bdr,omitempty"`
	// If true, hellos suppressed
	SuppressHello bool `protobuf:"varint,5,opt,name=suppress_hello,json=suppressHello" json:"suppress_hello,omitempty"`
}

func (m *OspfShInterfaceNbr) Reset()                    { *m = OspfShInterfaceNbr{} }
func (m *OspfShInterfaceNbr) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterfaceNbr) ProtoMessage()               {}
func (*OspfShInterfaceNbr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OspfShInterfaceNbr) GetInterfaceNeighborId() string {
	if m != nil {
		return m.InterfaceNeighborId
	}
	return ""
}

func (m *OspfShInterfaceNbr) GetInterfaceNeighborCost() uint32 {
	if m != nil {
		return m.InterfaceNeighborCost
	}
	return 0
}

func (m *OspfShInterfaceNbr) GetNeighborDr() bool {
	if m != nil {
		return m.NeighborDr
	}
	return false
}

func (m *OspfShInterfaceNbr) GetNeighborBdr() bool {
	if m != nil {
		return m.NeighborBdr
	}
	return false
}

func (m *OspfShInterfaceNbr) GetSuppressHello() bool {
	if m != nil {
		return m.SuppressHello
	}
	return false
}

// OSPF Interface Multi-Area Information
type OspfShInterfaceMadj struct {
	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,1,opt,name=interface_area,json=interfaceArea" json:"interface_area,omitempty"`
	// Area ID
	MadjAreaId uint32 `protobuf:"varint,2,opt,name=madj_area_id,json=madjAreaId" json:"madj_area_id,omitempty"`
	// Number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,3,opt,name=interface_neighbor_count,json=interfaceNeighborCount" json:"interface_neighbor_count,omitempty"`
	// Total number of Adjacent Neighbors
	InterfaceAdjNeighborCount uint32 `protobuf:"varint,4,opt,name=interface_adj_neighbor_count,json=interfaceAdjNeighborCount" json:"interface_adj_neighbor_count,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,5,opt,name=interface_link_cost,json=interfaceLinkCost" json:"interface_link_cost,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,6,opt,name=ospf_interface_state,json=ospfInterfaceState" json:"ospf_interface_state,omitempty"`
}

func (m *OspfShInterfaceMadj) Reset()                    { *m = OspfShInterfaceMadj{} }
func (m *OspfShInterfaceMadj) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterfaceMadj) ProtoMessage()               {}
func (*OspfShInterfaceMadj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OspfShInterfaceMadj) GetInterfaceArea() string {
	if m != nil {
		return m.InterfaceArea
	}
	return ""
}

func (m *OspfShInterfaceMadj) GetMadjAreaId() uint32 {
	if m != nil {
		return m.MadjAreaId
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceAdjNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceAdjNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceLinkCost() uint32 {
	if m != nil {
		return m.InterfaceLinkCost
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetOspfInterfaceState() string {
	if m != nil {
		return m.OspfInterfaceState
	}
	return ""
}

// OSPF Interface Up-only Information
type OspfShInterfaceUp struct {
	// Wait time for DR/BDR selection (s)
	WaitTime uint32 `protobuf:"varint,1,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
	// Area scope LSAs flood index
	InterfaceAreaFloodIndex uint32 `protobuf:"varint,2,opt,name=interface_area_flood_index,json=interfaceAreaFloodIndex" json:"interface_area_flood_index,omitempty"`
	// AS scope LSAs flood index
	InterfaceAsFloodIndex uint32 `protobuf:"varint,3,opt,name=interface_as_flood_index,json=interfaceAsFloodIndex" json:"interface_as_flood_index,omitempty"`
	// Flood queue length
	InterfaceFloodLength uint32 `protobuf:"varint,4,opt,name=interface_flood_length,json=interfaceFloodLength" json:"interface_flood_length,omitempty"`
	// Next LSA to flood (Area scope)
	InterfaceAreaNextFlood uint32 `protobuf:"varint,5,opt,name=interface_area_next_flood,json=interfaceAreaNextFlood" json:"interface_area_next_flood,omitempty"`
	// Index of next LSA to flood (Area scope)
	InterfaceAreaNextFloodIndex uint32 `protobuf:"varint,6,opt,name=interface_area_next_flood_index,json=interfaceAreaNextFloodIndex" json:"interface_area_next_flood_index,omitempty"`
	// Next LSA to flood (AS scope)
	InterfaceAsNextFlood uint32 `protobuf:"varint,7,opt,name=interface_as_next_flood,json=interfaceAsNextFlood" json:"interface_as_next_flood,omitempty"`
	// Index of next LSA to flood (AS scope)
	InterfaceAsNextFloodIndex uint32 `protobuf:"varint,8,opt,name=interface_as_next_flood_index,json=interfaceAsNextFloodIndex" json:"interface_as_next_flood_index,omitempty"`
	// Last flood scan length
	FloodScanLength uint32 `protobuf:"varint,9,opt,name=flood_scan_length,json=floodScanLength" json:"flood_scan_length,omitempty"`
	// Maximum flood length
	MaximumFloodLength uint32 `protobuf:"varint,10,opt,name=maximum_flood_length,json=maximumFloodLength" json:"maximum_flood_length,omitempty"`
	// Last flood scan time (ms)
	LastFloodTime uint32 `protobuf:"varint,11,opt,name=last_flood_time,json=lastFloodTime" json:"last_flood_time,omitempty"`
	// Maximum flood time (ms)
	MaximumFloodTime uint32 `protobuf:"varint,12,opt,name=maximum_flood_time,json=maximumFloodTime" json:"maximum_flood_time,omitempty"`
	// Time until next flood pacing timer (ms)
	InterfaceFloodPacingTimer uint32 `protobuf:"varint,13,opt,name=interface_flood_pacing_timer,json=interfaceFloodPacingTimer" json:"interface_flood_pacing_timer,omitempty"`
	// Total number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,14,opt,name=interface_neighbor_count,json=interfaceNeighborCount" json:"interface_neighbor_count,omitempty"`
	// Number of neighbors for which hellos are suppressed
	SuppressHelloCount uint32 `protobuf:"varint,15,opt,name=suppress_hello_count,json=suppressHelloCount" json:"suppress_hello_count,omitempty"`
	// Authentication type
	InterfaceAuthenticationType string `protobuf:"bytes,16,opt,name=interface_authentication_type,json=interfaceAuthenticationType" json:"interface_authentication_type,omitempty"`
	// If true, MD key is configured
	YoungestMdKey bool `protobuf:"varint,17,opt,name=youngest_md_key,json=youngestMdKey" json:"youngest_md_key,omitempty"`
	// Number of neighbors using the old key (if rollover in progress)
	OldMd5KeyNeighborCount uint32 `protobuf:"varint,18,opt,name=old_md5_key_neighbor_count,json=oldMd5KeyNeighborCount" json:"old_md5_key_neighbor_count,omitempty"`
	// Youngest MD key ID
	YoungestMdKeyId uint32 `protobuf:"varint,19,opt,name=youngest_md_key_id,json=youngestMdKeyId" json:"youngest_md_key_id,omitempty"`
	// List of old MD keys
	MdKeysList []uint32 `protobuf:"varint,20,rep,packed,name=md_keys_list,json=mdKeysList" json:"md_keys_list,omitempty"`
	// Keychain ID
	KeychainId uint64 `protobuf:"varint,21,opt,name=keychain_id,json=keychainId" json:"keychain_id,omitempty"`
}

func (m *OspfShInterfaceUp) Reset()                    { *m = OspfShInterfaceUp{} }
func (m *OspfShInterfaceUp) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterfaceUp) ProtoMessage()               {}
func (*OspfShInterfaceUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OspfShInterfaceUp) GetWaitTime() uint32 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAreaFloodIndex() uint32 {
	if m != nil {
		return m.InterfaceAreaFloodIndex
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAsFloodIndex() uint32 {
	if m != nil {
		return m.InterfaceAsFloodIndex
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceFloodLength() uint32 {
	if m != nil {
		return m.InterfaceFloodLength
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAreaNextFlood() uint32 {
	if m != nil {
		return m.InterfaceAreaNextFlood
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAreaNextFloodIndex() uint32 {
	if m != nil {
		return m.InterfaceAreaNextFloodIndex
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAsNextFlood() uint32 {
	if m != nil {
		return m.InterfaceAsNextFlood
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAsNextFloodIndex() uint32 {
	if m != nil {
		return m.InterfaceAsNextFloodIndex
	}
	return 0
}

func (m *OspfShInterfaceUp) GetFloodScanLength() uint32 {
	if m != nil {
		return m.FloodScanLength
	}
	return 0
}

func (m *OspfShInterfaceUp) GetMaximumFloodLength() uint32 {
	if m != nil {
		return m.MaximumFloodLength
	}
	return 0
}

func (m *OspfShInterfaceUp) GetLastFloodTime() uint32 {
	if m != nil {
		return m.LastFloodTime
	}
	return 0
}

func (m *OspfShInterfaceUp) GetMaximumFloodTime() uint32 {
	if m != nil {
		return m.MaximumFloodTime
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceFloodPacingTimer() uint32 {
	if m != nil {
		return m.InterfaceFloodPacingTimer
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceUp) GetSuppressHelloCount() uint32 {
	if m != nil {
		return m.SuppressHelloCount
	}
	return 0
}

func (m *OspfShInterfaceUp) GetInterfaceAuthenticationType() string {
	if m != nil {
		return m.InterfaceAuthenticationType
	}
	return ""
}

func (m *OspfShInterfaceUp) GetYoungestMdKey() bool {
	if m != nil {
		return m.YoungestMdKey
	}
	return false
}

func (m *OspfShInterfaceUp) GetOldMd5KeyNeighborCount() uint32 {
	if m != nil {
		return m.OldMd5KeyNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceUp) GetYoungestMdKeyId() uint32 {
	if m != nil {
		return m.YoungestMdKeyId
	}
	return 0
}

func (m *OspfShInterfaceUp) GetMdKeysList() []uint32 {
	if m != nil {
		return m.MdKeysList
	}
	return nil
}

func (m *OspfShInterfaceUp) GetKeychainId() uint64 {
	if m != nil {
		return m.KeychainId
	}
	return 0
}

func init() {
	proto.RegisterType((*OspfShInterface_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_KEYS")
	proto.RegisterType((*OspfShInterface)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface")
	proto.RegisterType((*OspfShIpfrrTb)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_ipfrr_tb")
	proto.RegisterType((*OspfShInterfaceBfd)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_bfd")
	proto.RegisterType((*OspfShInterfaceNbr)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_nbr")
	proto.RegisterType((*OspfShInterfaceMadj)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_madj")
	proto.RegisterType((*OspfShInterfaceUp)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_up")
}

func init() { proto.RegisterFile("ospf_sh_interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcb, 0x7a, 0x1b, 0xb7,
	0xf5, 0xff, 0xe8, 0x5b, 0x64, 0xd8, 0xb2, 0x2c, 0x58, 0x17, 0x38, 0xfe, 0x3b, 0xa6, 0xe5, 0xbf,
	0x6d, 0xa5, 0x4e, 0x14, 0xc7, 0x97, 0xc4, 0x71, 0x9a, 0x26, 0x92, 0x65, 0x45, 0xac, 0x45, 0x45,
	0x25, 0xdd, 0xa6, 0xe9, 0x25, 0x28, 0x38, 0xc0, 0x90, 0x30, 0x67, 0x30, 0xd3, 0x01, 0x46, 0x12,
	0xd3, 0xa7, 0xe8, 0xaa, 0xcb, 0xee, 0xba, 0xeb, 0xa2, 0x2f, 0xd0, 0x87, 0xe8, 0x83, 0xf4, 0x19,
	0xfa, 0xe1, 0x60, 0x86, 0x33, 0x18, 0x51, 0xd9, 0xd5, 0xdd, 0xf8, 0xa3, 0x70, 0x7e, 0xbf, 0x83,
	0x83, 0x83, 0x73, 0xc3, 0x18, 0xad, 0x26, 0x3a, 0x0d, 0xa9, 0x1e, 0x51, 0xa9, 0x8c, 0xc8, 0x42,
	0x16, 0x88, 0x8d, 0x34, 0x4b, 0x4c, 0x82, 0xbf, 0x0f, 0xa4, 0x0e, 0x12, 0x2a, 0x13, 0x4d, 0x8f,
	0x33, 0x2a, 0xd3, 0xc3, 0x27, 0x14, 0xa0, 0x49, 0x2a, 0xb2, 0x0d, 0xfb, 0xcb, 0xe2, 0x02, 0xa1,
	0xb5, 0xd0, 0xe5, 0xaf, 0x0d, 0x2e, 0x42, 0x96, 0x47, 0x86, 0x1e, 0x66, 0xe1, 0x06, 0xcb, 0x04,
	0xd3, 0xf0, 0xef, 0xc6, 0x54, 0xb5, 0xae, 0x7e, 0xae, 0xfd, 0x09, 0xad, 0x9c, 0xd8, 0x9a, 0xbe,
	0x7a, 0xf9, 0x5d, 0x1f, 0xdf, 0x46, 0x97, 0x0b, 0x85, 0x54, 0xb1, 0x58, 0x90, 0x56, 0xbb, 0xb5,
	0x7e, 0xb1, 0x77, 0xa9, 0x58, 0xdb, 0x67, 0xb1, 0xc0, 0xab, 0xe8, 0x1d, 0xab, 0x99, 0x4a, 0x4e,
	0xce, 0xb4, 0x5b, 0xeb, 0xf3, 0xbd, 0x0b, 0xf6, 0xcf, 0x0e, 0xc7, 0x77, 0xd1, 0x95, 0x4a, 0x1b,
	0xb0, 0xcf, 0x02, 0x7b, 0x7e, 0xba, 0x6a, 0xf9, 0x6b, 0x7f, 0x5e, 0x43, 0x8b, 0x27, 0x76, 0x9f,
	0x41, 0x7e, 0x34, 0x83, 0x8c, 0xef, 0xa3, 0x85, 0x0a, 0xa6, 0x0d, 0x33, 0x82, 0x3c, 0x06, 0x5c,
	0xc5, 0xee, 0xdb, 0x55, 0xfc, 0x10, 0x2d, 0x55, 0xc0, 0x48, 0xaa, 0x12, 0xfd, 0xa4, 0xdd, 0x5a,
	0x9f, 0xeb, 0xe1, 0xa9, 0x6c, 0x4f, 0xaa, 0x82, 0xf1, 0x00, 0x2d, 0x56, 0x0c, 0xc6, 0x79, 0x26,
	0xb4, 0x26, 0x4f, 0x41, 0xf9, 0xd5, 0xa9, 0x60, 0xd3, 0xad, 0xfb, 0xe6, 0xc6, 0x4c, 0x8f, 0xc9,
	0x27, 0xe0, 0x8b, 0xca, 0xdc, 0x2e, 0xd3, 0x63, 0x1f, 0x66, 0xdd, 0x44, 0x3e, 0x6d, 0x9c, 0x6a,
	0x33, 0x13, 0x0c, 0xdf, 0x41, 0xf3, 0xb5, 0x53, 0x49, 0x4e, 0x9e, 0x81, 0xb2, 0xcb, 0xd5, 0x99,
	0x24, 0xc7, 0x1f, 0xa3, 0x65, 0x0f, 0x44, 0xd3, 0x51, 0x4a, 0x93, 0x30, 0x24, 0x9f, 0x35, 0x8e,
	0xd4, 0x97, 0xfc, 0x60, 0x94, 0x7e, 0x13, 0x86, 0xf8, 0x39, 0x7a, 0xd7, 0xa7, 0x28, 0x1a, 0x46,
	0x6c, 0x48, 0x83, 0x48, 0xb0, 0x8c, 0x3c, 0x07, 0xde, 0x4a, 0x9d, 0xb7, 0xbf, 0x13, 0xb1, 0xe1,
	0x0b, 0x2b, 0xc5, 0x9f, 0x22, 0x52, 0xf7, 0x74, 0x26, 0x03, 0x43, 0xe1, 0xd6, 0x24, 0x27, 0x9f,
	0x83, 0x79, 0xcb, 0x35, 0x97, 0x5b, 0x71, 0x3f, 0x0d, 0xad, 0x9d, 0x2f, 0x51, 0xfb, 0x34, 0xe2,
	0xd4, 0xe4, 0x9f, 0xc2, 0xd6, 0x37, 0x66, 0x2a, 0x28, 0x6c, 0xdf, 0x47, 0x77, 0x4f, 0x55, 0xe3,
	0x1d, 0xe3, 0x0b, 0xd0, 0x75, 0x6b, 0xa6, 0xae, 0xda, 0x79, 0x36, 0xd0, 0xb5, 0x4a, 0x5f, 0x96,
	0xe4, 0x46, 0x64, 0x36, 0x84, 0x7f, 0x06, 0xf7, 0x51, 0xdd, 0x7c, 0x0f, 0x24, 0x1d, 0x6e, 0x33,
	0x41, 0x09, 0x73, 0x94, 0x64, 0x63, 0x6a, 0x26, 0xa9, 0x20, 0x5f, 0xba, 0x4c, 0x28, 0xd6, 0x5e,
	0x4f, 0x52, 0x81, 0x97, 0xd1, 0x05, 0x99, 0xd2, 0xd8, 0xe4, 0xe4, 0x2b, 0x70, 0xc8, 0x79, 0x99,
	0x76, 0x4d, 0x6e, 0x77, 0x8a, 0xd9, 0xb1, 0x8c, 0xf3, 0x98, 0xa6, 0x2c, 0x18, 0x0b, 0x43, 0xb5,
	0xfc, 0x41, 0x90, 0x4d, 0xc0, 0x2c, 0x16, 0xa2, 0x03, 0x90, 0xf4, 0xe5, 0x0f, 0x02, 0x3f, 0x41,
	0xd5, 0x1d, 0x50, 0x93, 0x2b, 0x25, 0x22, 0x38, 0x9f, 0x26, 0x5b, 0x40, 0xa9, 0x02, 0xf9, 0x35,
	0x08, 0xed, 0x99, 0xb4, 0x7f, 0x9e, 0x48, 0xaa, 0x31, 0x0d, 0x12, 0x6d, 0xc8, 0x0b, 0xb7, 0x4b,
	0x3d, 0xbe, 0xc7, 0x2f, 0x12, 0x6d, 0xf0, 0x47, 0x75, 0xfc, 0x80, 0x29, 0x7e, 0x24, 0xb9, 0x19,
	0x91, 0x6d, 0xc0, 0x57, 0xc1, 0xb3, 0x55, 0x4a, 0xf0, 0x4f, 0xd0, 0x62, 0x10, 0x0e, 0x41, 0x2b,
	0x0d, 0x59, 0x14, 0x0d, 0x58, 0x30, 0x26, 0x2f, 0xc1, 0xd9, 0x0b, 0x41, 0x38, 0xb4, 0x4a, 0x77,
	0x8a, 0x65, 0xfc, 0x09, 0x5a, 0xad, 0x94, 0xfb, 0x8c, 0x9d, 0x46, 0xac, 0x78, 0xbc, 0x87, 0x68,
	0xc9, 0x43, 0x53, 0x16, 0x18, 0x79, 0x28, 0xc8, 0xd7, 0x2e, 0xa4, 0x83, 0x1a, 0x76, 0x13, 0x24,
	0xf6, 0xd8, 0x41, 0xa2, 0x42, 0x39, 0xcc, 0x33, 0xc1, 0x69, 0xc4, 0x53, 0xaa, 0x27, 0x2a, 0x20,
	0xbb, 0x40, 0x58, 0xac, 0x44, 0x7b, 0x3c, 0xed, 0x4f, 0x54, 0x80, 0x77, 0xd1, 0xed, 0x19, 0x78,
	0x2a, 0x87, 0x29, 0xd5, 0xa3, 0x24, 0x33, 0x41, 0x6e, 0x34, 0xe9, 0x00, 0xfb, 0xe6, 0x09, 0x76,
	0x67, 0x98, 0xf6, 0x4b, 0x10, 0xfe, 0x00, 0xe1, 0x9a, 0xc3, 0xcb, 0x8d, 0x7f, 0x0e, 0xd4, 0xaa,
	0x40, 0x94, 0xfb, 0x3e, 0x47, 0xd7, 0x6b, 0xfb, 0x72, 0x11, 0x33, 0xc5, 0x69, 0x20, 0xb3, 0x20,
	0x97, 0x86, 0xbc, 0x02, 0xd2, 0x6a, 0x05, 0xd8, 0x06, 0xf9, 0x0b, 0x27, 0xc6, 0xcf, 0xea, 0xa9,
	0xd7, 0xa0, 0xee, 0x35, 0x92, 0xd6, 0x67, 0x6e, 0xa1, 0xf7, 0x6a, 0xcc, 0x80, 0x0e, 0xa4, 0x89,
	0x6c, 0x2d, 0x8f, 0x34, 0xa3, 0x41, 0x92, 0x2b, 0x43, 0xba, 0x70, 0x1d, 0x55, 0x59, 0xd8, 0x0e,
	0xb6, 0x1c, 0x66, 0x4f, 0xb3, 0x17, 0x16, 0x81, 0x3f, 0x44, 0xd8, 0x64, 0x4c, 0xe9, 0x58, 0x6a,
	0x2d, 0x13, 0x45, 0xb9, 0x88, 0xd8, 0x84, 0xec, 0xbb, 0xb8, 0xaa, 0x4b, 0xb6, 0xad, 0xc0, 0x5e,
	0x21, 0x54, 0xf3, 0x66, 0x59, 0xfe, 0x06, 0xf2, 0x05, 0x5b, 0x59, 0xc7, 0x2f, 0xcd, 0x1f, 0xd6,
	0x1d, 0x99, 0x66, 0x32, 0xc9, 0xa4, 0x99, 0x90, 0x83, 0x46, 0xe0, 0x1e, 0x14, 0x02, 0x5b, 0x97,
	0xb9, 0xd0, 0x72, 0xa8, 0x98, 0x11, 0xbc, 0xc8, 0x5c, 0xf2, 0x0b, 0xe7, 0xf6, 0x4a, 0xe0, 0xf2,
	0xd6, 0x5a, 0x73, 0x02, 0x6c, 0xd3, 0xbc, 0xe7, 0xac, 0x69, 0xe2, 0x3b, 0xdc, 0x5e, 0xd4, 0x49,
	0x46, 0x59, 0xfe, 0xfb, 0x40, 0x5b, 0x6d, 0xd2, 0xca, 0x2e, 0xf0, 0x0c, 0x11, 0x1b, 0x9a, 0x79,
	0x4a, 0x4f, 0x5a, 0xf8, 0xda, 0x5d, 0x94, 0x93, 0x6f, 0x37, 0xed, 0xfc, 0x02, 0xdd, 0x38, 0x8d,
	0x69, 0xcd, 0xfd, 0x25, 0xec, 0x4b, 0x66, 0x93, 0x3b, 0x1c, 0x7f, 0x8d, 0xda, 0xa7, 0xd2, 0x4b,
	0xdb, 0x7f, 0x05, 0x3a, 0x6e, 0xce, 0xd6, 0x51, 0x9e, 0xe0, 0x29, 0x5a, 0x2d, 0xab, 0x9c, 0x8d,
	0x91, 0x30, 0xca, 0xf5, 0x88, 0x1a, 0x19, 0x8b, 0x8c, 0x7c, 0xeb, 0x8a, 0x4f, 0x21, 0xde, 0xd3,
	0x6c, 0xc7, 0x0a, 0x5f, 0x5b, 0x59, 0xa3, 0xbb, 0x5a, 0xa2, 0x8c, 0xec, 0xa1, 0x7f, 0xdd, 0xec,
	0xae, 0x9a, 0xed, 0x80, 0xc4, 0x76, 0xc2, 0x91, 0x88, 0xa2, 0xc4, 0xc5, 0xc9, 0x21, 0x8b, 0xc8,
	0x77, 0xae, 0x61, 0xc2, 0x6a, 0xa7, 0x58, 0xb4, 0x45, 0xc7, 0x87, 0xd1, 0x58, 0x93, 0xdf, 0x00,
	0x72, 0xc1, 0x43, 0x76, 0xb5, 0xed, 0x9a, 0x5c, 0x30, 0x5e, 0x69, 0xfc, 0xad, 0xeb, 0x9a, 0x76,
	0x71, 0xaa, 0xf0, 0x0e, 0x9a, 0x3f, 0x62, 0xd2, 0x54, 0xa0, 0xdf, 0x39, 0x90, 0x5d, 0x9c, 0x82,
	0xf6, 0xd0, 0x5a, 0xad, 0x37, 0x08, 0x2f, 0xfc, 0x41, 0x00, 0xcc, 0xdf, 0x03, 0xb3, 0x6a, 0x6e,
	0x3d, 0x0f, 0xd8, 0x29, 0x71, 0xf8, 0x51, 0xbd, 0x51, 0x2b, 0x1d, 0x52, 0xa1, 0xd8, 0x20, 0x12,
	0x9c, 0x7c, 0x0f, 0xde, 0xa9, 0xca, 0xf0, 0xbe, 0x0e, 0x5f, 0x3a, 0x91, 0x3f, 0x01, 0x28, 0x1d,
	0x12, 0x0a, 0xd8, 0xcb, 0x75, 0x6c, 0xa3, 0x02, 0x31, 0x6d, 0x00, 0xf9, 0x07, 0x30, 0xab, 0x56,
	0x81, 0x98, 0x36, 0x16, 0xfd, 0x00, 0x2d, 0xa6, 0x4c, 0x6b, 0x79, 0x28, 0xaa, 0xdc, 0x24, 0xcc,
	0xe5, 0x4d, 0x21, 0x98, 0x26, 0x26, 0xbe, 0x87, 0x16, 0x94, 0x38, 0x36, 0xd4, 0x39, 0xdf, 0x06,
	0x00, 0x19, 0xb8, 0xfb, 0xb1, 0xcb, 0xbb, 0x76, 0xd5, 0xde, 0x3c, 0x7e, 0x80, 0x70, 0x03, 0x67,
	0x2f, 0x28, 0x70, 0x17, 0xe4, 0x41, 0xbb, 0x1a, 0xff, 0xbd, 0x55, 0x6f, 0x0b, 0x4a, 0xc8, 0xe1,
	0x68, 0x90, 0x64, 0x34, 0x92, 0xda, 0x10, 0xde, 0x3e, 0xbb, 0x7e, 0xe9, 0x51, 0xbe, 0xf1, 0xdf,
	0x9d, 0x74, 0x37, 0x4e, 0x8e, 0xb9, 0x6a, 0x90, 0xd5, 0xba, 0xd1, 0x7e, 0x61, 0xd4, 0x9e, 0xd4,
	0x06, 0xff, 0xa3, 0x85, 0xae, 0xd7, 0x7a, 0x64, 0x68, 0x43, 0x2b, 0x4c, 0xb2, 0x98, 0x19, 0x99,
	0x28, 0x22, 0xda, 0xad, 0xff, 0x8d, 0xc5, 0x83, 0x90, 0xf7, 0x2a, 0x3f, 0x6e, 0x85, 0xbc, 0x53,
	0x59, 0x65, 0x33, 0xd1, 0x98, 0x88, 0x6a, 0x11, 0xe4, 0xb6, 0x5a, 0x4e, 0x63, 0x2d, 0x74, 0x99,
	0x68, 0x4c, 0xd4, 0x2f, 0x44, 0x65, 0xa8, 0x3d, 0x46, 0x2b, 0x1e, 0x63, 0x94, 0xa4, 0x45, 0x6f,
	0x18, 0xc2, 0x35, 0x5e, 0xab, 0x71, 0x76, 0x93, 0xd4, 0x35, 0x85, 0xbf, 0xb6, 0xd0, 0x55, 0xd7,
	0x9b, 0x6b, 0xc1, 0x34, 0x02, 0x8f, 0x98, 0xb7, 0xef, 0x91, 0x3c, 0xed, 0x2d, 0x38, 0x6b, 0xaa,
	0x08, 0x7e, 0x1f, 0x55, 0x29, 0x20, 0x35, 0x8d, 0x19, 0x7f, 0x43, 0xa4, 0x9b, 0x56, 0x6a, 0xeb,
	0x5d, 0xc6, 0xdf, 0xf8, 0xd5, 0xcb, 0x02, 0x8b, 0xf3, 0xbf, 0x69, 0xcc, 0x42, 0x16, 0xec, 0x8e,
	0xff, 0xb7, 0x56, 0x7d, 0x7a, 0x02, 0x0a, 0x44, 0xf1, 0x18, 0xa2, 0xf8, 0xf0, 0xed, 0x7b, 0xc0,
	0x9a, 0x50, 0x6b, 0x96, 0xd6, 0x52, 0x08, 0xe1, 0x0e, 0xba, 0x9d, 0x66, 0x22, 0x94, 0xc7, 0x54,
	0xe7, 0x69, 0x6a, 0x4b, 0xbc, 0xed, 0xb0, 0x31, 0xcb, 0x26, 0x65, 0x5f, 0x10, 0x9a, 0x44, 0xe0,
	0x96, 0xf7, 0x1c, 0xb0, 0x5f, 0xe0, 0x0e, 0x1c, 0x6c, 0xb3, 0x44, 0xe1, 0x2e, 0xba, 0xd3, 0x54,
	0xa5, 0x45, 0x90, 0x28, 0xee, 0x2b, 0x8b, 0x41, 0x59, 0xdb, 0x57, 0xd6, 0x2f, 0x81, 0x95, 0x3a,
	0xfb, 0x9e, 0xd0, 0x34, 0x4a, 0x92, 0x14, 0x06, 0x3d, 0x6d, 0xf2, 0x01, 0x2d, 0x7a, 0x0b, 0x51,
	0xa0, 0x63, 0x59, 0xea, 0xbd, 0x42, 0xdc, 0x37, 0xf9, 0x60, 0xdf, 0x09, 0xfd, 0x87, 0x88, 0xa5,
	0x5a, 0xcf, 0x17, 0x37, 0x96, 0x34, 0x86, 0xcb, 0xcd, 0x60, 0x6c, 0xdd, 0xe0, 0x2e, 0x6d, 0x17,
	0xdd, 0x9e, 0x41, 0x1c, 0xc9, 0xe1, 0x88, 0x1e, 0x31, 0x23, 0xb2, 0x98, 0x65, 0x63, 0x92, 0x82,
	0x86, 0x9b, 0x4d, 0x0d, 0xbb, 0x72, 0x38, 0xfa, 0xb6, 0x04, 0xe1, 0x3e, 0xba, 0x9f, 0x89, 0xa1,
	0xd4, 0x46, 0xd8, 0x61, 0x2e, 0x84, 0x1a, 0xa6, 0xc6, 0x94, 0x27, 0x47, 0x8a, 0x86, 0xb6, 0x0e,
	0x73, 0x61, 0x44, 0x00, 0x55, 0xe2, 0x8f, 0x70, 0x94, 0xb5, 0x0a, 0xbe, 0x63, 0x8b, 0x8b, 0x1a,
	0x6f, 0x27, 0x47, 0x6a, 0x87, 0x69, 0xb3, 0x5d, 0x22, 0xed, 0xe3, 0xac, 0xc6, 0xa5, 0xa3, 0x24,
	0xe2, 0x4e, 0x23, 0x54, 0xdf, 0x0c, 0xec, 0x5a, 0x09, 0xa7, 0x94, 0xdd, 0x24, 0xe2, 0x56, 0x09,
	0x94, 0xe1, 0x6d, 0x54, 0xbd, 0x77, 0xe8, 0x4c, 0x2d, 0x44, 0x37, 0x9e, 0x58, 0x3b, 0x27, 0x34,
	0xe1, 0x2e, 0xfa, 0xff, 0xd3, 0x2d, 0xa0, 0x99, 0x88, 0x99, 0x54, 0x52, 0x0d, 0x89, 0x01, 0x5b,
	0x6e, 0xcd, 0xb6, 0xa5, 0x57, 0xc2, 0x6c, 0xef, 0x06, 0x75, 0x99, 0x80, 0x49, 0xc4, 0x3d, 0x9b,
	0x72, 0x98, 0x42, 0x16, 0xac, 0xa0, 0xe7, 0xd6, 0xe1, 0xe9, 0x74, 0x80, 0xee, 0xfa, 0xd8, 0x24,
	0x4d, 0xa2, 0x64, 0x38, 0xa1, 0x52, 0x71, 0x91, 0x0a, 0xc5, 0x85, 0x32, 0x34, 0x0a, 0x19, 0x39,
	0x84, 0x63, 0xdc, 0xae, 0xf3, 0x0b, 0x68, 0xa7, 0x42, 0xee, 0x85, 0x0c, 0x63, 0x74, 0x4e, 0x67,
	0xd1, 0x90, 0x1c, 0xb5, 0xcf, 0xae, 0xcf, 0xf7, 0xe0, 0xb7, 0x4d, 0xdb, 0x15, 0x99, 0x86, 0x59,
	0x46, 0x8d, 0x14, 0x83, 0x4c, 0xb0, 0xb1, 0xc8, 0xb4, 0xcb, 0xdc, 0x63, 0xc8, 0xdc, 0xf4, 0xad,
	0x65, 0xae, 0xb3, 0x62, 0xd0, 0x5b, 0x82, 0x5f, 0xaf, 0x2b, 0x73, 0x6c, 0xb4, 0xad, 0x85, 0xe8,
	0x6a, 0x13, 0x89, 0xef, 0xa3, 0x85, 0xca, 0x6a, 0xe7, 0x4c, 0xf7, 0x35, 0xe6, 0x4a, 0xb5, 0x0c,
	0xbe, 0x7c, 0x1f, 0x5d, 0xad, 0x01, 0xad, 0x03, 0x8f, 0x8b, 0x2f, 0x33, 0x35, 0x05, 0xd6, 0x5b,
	0xc7, 0x6b, 0x7f, 0x69, 0xa1, 0xe5, 0x99, 0x0d, 0x06, 0x7f, 0x84, 0x96, 0x5c, 0xc3, 0x33, 0xe5,
	0xbc, 0x42, 0xe3, 0x84, 0xbb, 0x2d, 0xe7, 0x7b, 0x8b, 0x03, 0xdb, 0x75, 0x4c, 0x31, 0xae, 0x74,
	0x13, 0x2e, 0xf0, 0xbb, 0x68, 0x6e, 0x3a, 0x53, 0xb9, 0xdd, 0xa6, 0x7f, 0xe3, 0x8f, 0xed, 0x14,
	0x5e, 0xc4, 0x39, 0x8d, 0xf3, 0xc8, 0xc8, 0x34, 0x92, 0x22, 0x83, 0xef, 0x41, 0xf3, 0xbd, 0x6b,
	0x53, 0x59, 0x77, 0x2a, 0x5a, 0xfb, 0xf7, 0x4c, 0xcb, 0xd4, 0x20, 0x6b, 0x8c, 0x53, 0xe5, 0x10,
	0x21, 0x79, 0xe1, 0x8d, 0x6b, 0x27, 0x7a, 0x79, 0x87, 0xfb, 0xef, 0xd1, 0x29, 0x07, 0x1e, 0xc8,
	0x67, 0x1a, 0x25, 0xa3, 0x64, 0xc1, 0x23, 0xf9, 0x16, 0xba, 0x34, 0x45, 0x73, 0x67, 0xef, 0x5c,
	0x0f, 0x95, 0x4b, 0xdb, 0x99, 0xfb, 0x2a, 0x50, 0x00, 0x06, 0x3c, 0x23, 0xe7, 0x00, 0x31, 0x25,
	0x6d, 0x71, 0x98, 0x74, 0xa7, 0x05, 0x13, 0xc6, 0x24, 0x72, 0x1e, 0x40, 0xf3, 0xe5, 0x2a, 0x8c,
	0x48, 0x6b, 0xff, 0x3c, 0x33, 0xeb, 0x23, 0x9c, 0xad, 0xeb, 0x33, 0xbe, 0x1a, 0xb5, 0x66, 0x7d,
	0x35, 0x6a, 0xa3, 0xcb, 0xd0, 0x89, 0xfc, 0xaf, 0x71, 0xc8, 0xae, 0x6d, 0xba, 0x2f, 0x72, 0xde,
	0x43, 0xb2, 0xe6, 0x06, 0x5b, 0x3a, 0xdd, 0x5d, 0xac, 0xcc, 0xf0, 0x83, 0xad, 0x9d, 0x5f, 0xa2,
	0xff, 0xab, 0x7f, 0x0c, 0x7b, 0xd3, 0x64, 0x9f, 0x03, 0xf6, 0xf5, 0xda, 0x77, 0xb1, 0x37, 0xbe,
	0x82, 0x53, 0x3e, 0x4f, 0x9c, 0x3f, 0xed, 0xf3, 0xc4, 0x69, 0xcf, 0xc8, 0x0b, 0xa7, 0x3d, 0x23,
	0xd7, 0xfe, 0x35, 0x57, 0x50, 0x1a, 0xa3, 0x01, 0xbe, 0x81, 0x2e, 0xc2, 0xc8, 0x0f, 0x75, 0xd4,
	0xc5, 0xef, 0x9c, 0x5d, 0x80, 0xca, 0xf9, 0x79, 0xfd, 0x93, 0x18, 0x78, 0x2e, 0x8c, 0x92, 0x84,
	0x7b, 0x69, 0xb3, 0xea, 0xf9, 0x79, 0xc7, 0xca, 0x21, 0x7d, 0x1a, 0xad, 0x48, 0x7b, 0xd4, 0xb3,
	0xcd, 0x56, 0xa4, 0x6b, 0x44, 0xef, 0x13, 0x8f, 0x63, 0x45, 0x42, 0x0d, 0xcd, 0xa8, 0x70, 0x64,
	0x35, 0x8f, 0x00, 0x69, 0x0f, 0x64, 0xf8, 0xb3, 0xfa, 0x38, 0x0a, 0xb6, 0xc2, 0xec, 0x0d, 0xfc,
	0xc2, 0x93, 0x2b, 0x9e, 0xa9, 0xfb, 0xe2, 0xd8, 0x80, 0x02, 0xbf, 0x41, 0x34, 0xa8, 0x85, 0xc1,
	0x17, 0x40, 0xc1, 0x8d, 0xd9, 0x0a, 0x9c, 0xd9, 0x4f, 0xeb, 0x69, 0xc4, 0x74, 0x7d, 0xfb, 0x77,
	0x1a, 0x76, 0x6f, 0xea, 0x6a, 0xf3, 0xaf, 0xd0, 0xcd, 0x53, 0x68, 0xc5, 0xd6, 0x73, 0xcd, 0xe8,
	0xd1, 0x8d, 0x8d, 0x6d, 0x2b, 0x01, 0xbc, 0x0e, 0x98, 0x2a, 0x5d, 0x75, 0xd1, 0xd5, 0x34, 0x10,
	0xf4, 0x03, 0xa6, 0x0a, 0x2f, 0x3d, 0x44, 0x4b, 0xe5, 0xe7, 0x36, 0xcf, 0xb3, 0xc8, 0x4d, 0x73,
	0x85, 0xac, 0xee, 0xd7, 0x7b, 0x68, 0x01, 0x5e, 0x4f, 0x0e, 0x0e, 0x61, 0x72, 0xc9, 0x3d, 0x76,
	0xec, 0x32, 0x20, 0x21, 0x56, 0x3e, 0x40, 0xd8, 0xd7, 0x0c, 0xd0, 0xcb, 0xee, 0xbd, 0x55, 0xd7,
	0x0b, 0x68, 0x2f, 0x65, 0x1c, 0x3e, 0x65, 0x81, 0x54, 0xc3, 0xe2, 0x3d, 0x3d, 0xdf, 0x38, 0x34,
	0x30, 0x0f, 0x00, 0xe1, 0x1e, 0xd5, 0x3f, 0x96, 0xad, 0x57, 0x7e, 0x34, 0x5b, 0x1f, 0xa2, 0x25,
	0xbf, 0xe4, 0x14, 0xac, 0x05, 0xe7, 0x02, 0xaf, 0xf0, 0x38, 0xc6, 0x96, 0x77, 0x45, 0xb9, 0x19,
	0x09, 0x65, 0x64, 0x00, 0x4f, 0x0a, 0xd7, 0x6a, 0xae, 0x42, 0xde, 0xd5, 0xa2, 0xc3, 0xc3, 0x40,
	0xdf, 0xb9, 0x87, 0x16, 0x26, 0x49, 0xae, 0x86, 0x42, 0x1b, 0x1a, 0x73, 0x3a, 0x16, 0x13, 0xb2,
	0xe8, 0x2a, 0x5d, 0xb9, 0xdc, 0xe5, 0xaf, 0xc4, 0xc4, 0x0e, 0x3a, 0x76, 0xb2, 0x88, 0xf9, 0x53,
	0x8b, 0x69, 0x9e, 0x0c, 0xbb, 0x93, 0x25, 0x11, 0xef, 0xf2, 0xa7, 0xaf, 0xc4, 0xc4, 0x3f, 0xd9,
	0x03, 0x84, 0x1b, 0x7b, 0xd8, 0x4a, 0x77, 0xcd, 0x45, 0x82, 0xb7, 0x4d, 0x87, 0x43, 0x41, 0x04,
	0x4c, 0xd1, 0xe3, 0x97, 0x60, 0x14, 0x40, 0xb1, 0x15, 0x43, 0x9f, 0xb5, 0xf5, 0x7d, 0x2c, 0x26,
	0xc1, 0x88, 0x49, 0x65, 0xf5, 0x2c, 0xb7, 0x5b, 0xeb, 0xe7, 0x7a, 0xa8, 0x5c, 0xea, 0xf0, 0xc1,
	0x05, 0xf8, 0x0f, 0x98, 0xc7, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x28, 0xc9, 0x0f, 0x04, 0x9b,
	0x19, 0x00, 0x00,
}
