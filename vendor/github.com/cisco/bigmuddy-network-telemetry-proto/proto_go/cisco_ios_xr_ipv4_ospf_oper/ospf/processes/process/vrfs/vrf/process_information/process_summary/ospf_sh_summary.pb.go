// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_summary.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_process_information_process_summary is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_summary.proto

It has these top-level messages:
	OspfShSummary_KEYS
	OspfShSummary
	OspfShTime
	StringType
	OspfShRedistProto
	OspfShRedist
	OspfShDomainIdEntry
	OspfShDomainId
	OspfShMaxMetric
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_process_information_process_summary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Summary
type OspfShSummary_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *OspfShSummary_KEYS) Reset()                    { *m = OspfShSummary_KEYS{} }
func (m *OspfShSummary_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShSummary_KEYS) ProtoMessage()               {}
func (*OspfShSummary_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShSummary_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShSummary_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type OspfShSummary struct {
	// If true, Role is Standby, Active otherwise
	RoleStandby bool `protobuf:"varint,50,opt,name=role_standby,json=roleStandby" json:"role_standby,omitempty"`
	// Role, V1/V2 Active/Standby
	Role uint32 `protobuf:"varint,51,opt,name=role" json:"role,omitempty"`
	// If true, NSR is enabled
	NsrEnabled bool `protobuf:"varint,52,opt,name=nsr_enabled,json=nsrEnabled" json:"nsr_enabled,omitempty"`
	// Trigger RP Switchover on detectable process restart
	NsrSwitchoverOnRestart bool `protobuf:"varint,53,opt,name=nsr_switchover_on_restart,json=nsrSwitchoverOnRestart" json:"nsr_switchover_on_restart,omitempty"`
	// If true, running in IGP-Intact mode
	IgpIntactOn bool `protobuf:"varint,54,opt,name=igp_intact_on,json=igpIntactOn" json:"igp_intact_on,omitempty"`
	// Router ID
	RouterId string `protobuf:"bytes,55,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	// Type of Service supported
	TosOptions uint32 `protobuf:"varint,56,opt,name=tos_options,json=tosOptions" json:"tos_options,omitempty"`
	// Opaque LSA capable
	OpaqueCapable bool `protobuf:"varint,57,opt,name=opaque_capable,json=opaqueCapable" json:"opaque_capable,omitempty"`
	// If true, is an Area Border Router
	AreaBorderRouter bool `protobuf:"varint,58,opt,name=area_border_router,json=areaBorderRouter" json:"area_border_router,omitempty"`
	// If true, is an AS Border Router
	AsBorderRouter bool `protobuf:"varint,59,opt,name=as_border_router,json=asBorderRouter" json:"as_border_router,omitempty"`
	// If true, vrf lite is enabled
	VrfLiteEnabled bool `protobuf:"varint,60,opt,name=vrf_lite_enabled,json=vrfLiteEnabled" json:"vrf_lite_enabled,omitempty"`
	// If true, originate Router LSA with maximum metric
	MaximumMetricStart bool `protobuf:"varint,61,opt,name=maximum_metric_start,json=maximumMetricStart" json:"maximum_metric_start,omitempty"`
	// Time remaining for hold down timer (s)
	MaximumMetricStartTimer uint32 `protobuf:"varint,62,opt,name=maximum_metric_start_timer,json=maximumMetricStartTimer" json:"maximum_metric_start_timer,omitempty"`
	// Max-metric set reason
	MaximumMetricSetReason string `protobuf:"bytes,63,opt,name=maximum_metric_set_reason,json=maximumMetricSetReason" json:"maximum_metric_set_reason,omitempty"`
	// If true, ABR duties temporarily disabled
	MaximumMetricAbrOffMode bool `protobuf:"varint,64,opt,name=maximum_metric_abr_off_mode,json=maximumMetricAbrOffMode" json:"maximum_metric_abr_off_mode,omitempty"`
	// Reasons for ABR duties being temporarily disabled
	MaximumMetricAbrOffReasons string `protobuf:"bytes,65,opt,name=maximum_metric_abr_off_reasons,json=maximumMetricAbrOffReasons" json:"maximum_metric_abr_off_reasons,omitempty"`
	// Buffer time in seconds since last neighbor activity, to remain in max-metric ABR off state
	MaximumMetricAbrOffBufferTime uint32 `protobuf:"varint,66,opt,name=maximum_metric_abr_off_buffer_time,json=maximumMetricAbrOffBufferTime" json:"maximum_metric_abr_off_buffer_time,omitempty"`
	// Max-metric list
	MaximumMetricList []*OspfShMaxMetric `protobuf:"bytes,67,rep,name=maximum_metric_list,json=maximumMetricList" json:"maximum_metric_list,omitempty"`
	// Redistribution list
	RedistributionList []*OspfShRedist `protobuf:"bytes,68,rep,name=redistribution_list,json=redistributionList" json:"redistribution_list,omitempty"`
	// Scheduling delay for SPF (ms) This is valid if configured below 64k Deprecated by SPFStartTimeU32]
	SpfStartTime uint32 `protobuf:"varint,69,opt,name=spf_start_time,json=spfStartTime" json:"spf_start_time,omitempty"`
	// Minimum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFHoldTimeU32]
	SpfHoldTime uint32 `protobuf:"varint,70,opt,name=spf_hold_time,json=spfHoldTime" json:"spf_hold_time,omitempty"`
	// Maximum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFMaximumTimeU32]
	SpfMaximumTime uint32 `protobuf:"varint,71,opt,name=spf_maximum_time,json=spfMaximumTime" json:"spf_maximum_time,omitempty"`
	// Scheduling delay for SPF (ms)
	SpfStartTimeU32 uint32 `protobuf:"varint,72,opt,name=spf_start_time_u32,json=spfStartTimeU32" json:"spf_start_time_u32,omitempty"`
	// Minimum delay time between SPF runs (ms)
	SpfHoldTimeU32 uint32 `protobuf:"varint,73,opt,name=spf_hold_time_u32,json=spfHoldTimeU32" json:"spf_hold_time_u32,omitempty"`
	// Maximum delay time between SPF runs (ms)
	SpfMaximumTimeU32 uint32 `protobuf:"varint,74,opt,name=spf_maximum_time_u32,json=spfMaximumTimeU32" json:"spf_maximum_time_u32,omitempty"`
	// If true, prefix-priority policy is configured
	SpfPrefixPriority bool `protobuf:"varint,75,opt,name=spf_prefix_priority,json=spfPrefixPriority" json:"spf_prefix_priority,omitempty"`
	// SPF Prefix-priority route policy
	SpfPrefixPriorityRoutePolicy string `protobuf:"bytes,76,opt,name=spf_prefix_priority_route_policy,json=spfPrefixPriorityRoutePolicy" json:"spf_prefix_priority_route_policy,omitempty"`
	// Inital LSA throttle delay (ms)
	LsaStartTime int32 `protobuf:"zigzag32,77,opt,name=lsa_start_time,json=lsaStartTime" json:"lsa_start_time,omitempty"`
	// Second delay before generating next LSA (ms)
	LsaHoldTime uint32 `protobuf:"varint,78,opt,name=lsa_hold_time,json=lsaHoldTime" json:"lsa_hold_time,omitempty"`
	// Maximum delay before generating an LSA (ms)
	LsaMaximumTime uint32 `protobuf:"varint,79,opt,name=lsa_maximum_time,json=lsaMaximumTime" json:"lsa_maximum_time,omitempty"`
	// Minimum time between LSA regeneration (ms) Rel 4.0.1, deprecated by MinimumLSAIntervalU32]
	MinimumLsaInterval uint32 `protobuf:"varint,80,opt,name=minimum_lsa_interval,json=minimumLsaInterval" json:"minimum_lsa_interval,omitempty"`
	// Minimum time between LSA regeneration (ms)
	MinimumLsaIntervalU32 uint32 `protobuf:"varint,81,opt,name=minimum_lsa_interval_u32,json=minimumLsaIntervalU32" json:"minimum_lsa_interval_u32,omitempty"`
	// LSA refresh interval (sec)
	LsaRefreshInterval uint32 `protobuf:"varint,82,opt,name=lsa_refresh_interval,json=lsaRefreshInterval" json:"lsa_refresh_interval,omitempty"`
	// Minimum time between accepting LSAs (ms) Rel 4.0.1, deprecated by MinimumLSAArrivalIntervalU32]
	MinimumLsaArrivalInterval uint32 `protobuf:"varint,83,opt,name=minimum_lsa_arrival_interval,json=minimumLsaArrivalInterval" json:"minimum_lsa_arrival_interval,omitempty"`
	// Minimum time between accepting LSAs (ms)
	MinimumLsaArrivalIntervalU32 uint32 `protobuf:"varint,84,opt,name=minimum_lsa_arrival_interval_u32,json=minimumLsaArrivalIntervalU32" json:"minimum_lsa_arrival_interval_u32,omitempty"`
	// Flood pacing timer (ms)
	IfFloodPacingInterval uint32 `protobuf:"varint,85,opt,name=if_flood_pacing_interval,json=ifFloodPacingInterval" json:"if_flood_pacing_interval,omitempty"`
	// Retransmission pacing timer (ms)
	IfRetransPacingInterval uint32 `protobuf:"varint,86,opt,name=if_retrans_pacing_interval,json=ifRetransPacingInterval" json:"if_retrans_pacing_interval,omitempty"`
	// Num of nbrs brought up initially per area
	AdjStagInitNumNbr uint32 `protobuf:"varint,87,opt,name=adj_stag_init_num_nbr,json=adjStagInitNumNbr" json:"adj_stag_init_num_nbr,omitempty"`
	// Max num of nbrs brought up simultaneously per OSPF instance
	AdjStagMaxNumNbr uint32 `protobuf:"varint,88,opt,name=adj_stag_max_num_nbr,json=adjStagMaxNumNbr" json:"adj_stag_max_num_nbr,omitempty"`
	// If true, OSPF Adjacency Staggering is configured
	AdjStaggerEnabled bool `protobuf:"varint,89,opt,name=adj_stagger_enabled,json=adjStaggerEnabled" json:"adj_stagger_enabled,omitempty"`
	// Num of nbrs currently forming for OSPF instance
	AdjStagNumNbrForming uint32 `protobuf:"varint,90,opt,name=adj_stag_num_nbr_forming,json=adjStagNumNbrForming" json:"adj_stag_num_nbr_forming,omitempty"`
	// Num of full nbrs
	NumberNbrsFull uint32 `protobuf:"varint,91,opt,name=number_nbrs_full,json=numberNbrsFull" json:"number_nbrs_full,omitempty"`
	// Number of AS scope LSAs
	AsLsaCount uint32 `protobuf:"varint,92,opt,name=as_lsa_count,json=asLsaCount" json:"as_lsa_count,omitempty"`
	// Sum of AS scope LSA checksum
	AsLsaChecksum uint32 `protobuf:"varint,93,opt,name=as_lsa_checksum,json=asLsaChecksum" json:"as_lsa_checksum,omitempty"`
	// Number of Opaque LSAs
	OpaqueLsaCount uint32 `protobuf:"varint,94,opt,name=opaque_lsa_count,json=opaqueLsaCount" json:"opaque_lsa_count,omitempty"`
	// Sum of opaque LSA checksum
	OpaqueLsaChecksum uint32 `protobuf:"varint,95,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum" json:"opaque_lsa_checksum,omitempty"`
	// Number of External and AS Opaque LSAs with demand circut bit not set
	AsDcBitlessLsaCount uint32 `protobuf:"varint,96,opt,name=as_dc_bitless_lsa_count,json=asDcBitlessLsaCount" json:"as_dc_bitless_lsa_count,omitempty"`
	// Number of External and AS Opaque LSAs with DoNotAge set
	AsDnaLsaCount uint32 `protobuf:"varint,97,opt,name=as_dna_lsa_count,json=asDnaLsaCount" json:"as_dna_lsa_count,omitempty"`
	// Number of areas
	AreaCount uint32 `protobuf:"varint,98,opt,name=area_count,json=areaCount" json:"area_count,omitempty"`
	// Number of normal Areas
	NormalAreaCount uint32 `protobuf:"varint,99,opt,name=normal_area_count,json=normalAreaCount" json:"normal_area_count,omitempty"`
	// Number of Stub and Total Stub Areas
	StubAreaCount uint32 `protobuf:"varint,100,opt,name=stub_area_count,json=stubAreaCount" json:"stub_area_count,omitempty"`
	// Number of NSSA Areas
	NssaAreaCount uint32 `protobuf:"varint,101,opt,name=nssa_area_count,json=nssaAreaCount" json:"nssa_area_count,omitempty"`
	// Maximum number of interfaces
	MaximumInterfaces uint32 `protobuf:"varint,102,opt,name=maximum_interfaces,json=maximumInterfaces" json:"maximum_interfaces,omitempty"`
	// Length of AS LSAs flood list
	AsLsaFloodListLength uint32 `protobuf:"varint,103,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength" json:"as_lsa_flood_list_length,omitempty"`
	// If true, NSF enabled
	NsfEnabled bool `protobuf:"varint,104,opt,name=nsf_enabled,json=nsfEnabled" json:"nsf_enabled,omitempty"`
	//  Length of time since the last NSF (s)
	LastNsfTime uint32 `protobuf:"varint,105,opt,name=last_nsf_time,json=lastNsfTime" json:"last_nsf_time,omitempty"`
	// Total time to complete NSF (s)
	NsfTime uint32 `protobuf:"varint,106,opt,name=nsf_time,json=nsfTime" json:"nsf_time,omitempty"`
	// The number of redistributed prefixes allowed
	RedistributionLimit uint32 `protobuf:"varint,107,opt,name=redistribution_limit,json=redistributionLimit" json:"redistribution_limit,omitempty"`
	// When the number of redistributed prefixes reaches this threshold, a warning message is issued
	RedistributionThreshold uint32 `protobuf:"varint,108,opt,name=redistribution_threshold,json=redistributionThreshold" json:"redistribution_threshold,omitempty"`
	// If true, only a syslog message is printed when redistribution prefix limit is reached
	RedistributionLimitWarn bool `protobuf:"varint,109,opt,name=redistribution_limit_warn,json=redistributionLimitWarn" json:"redistribution_limit_warn,omitempty"`
	// Amount of time routes are retained after graceful shutdown (s)
	GracefulShutdownRetentionTime uint32 `protobuf:"varint,110,opt,name=graceful_shutdown_retention_time,json=gracefulShutdownRetentionTime" json:"graceful_shutdown_retention_time,omitempty"`
	// State of graceful shutdown
	GracefulShutdownState string `protobuf:"bytes,111,opt,name=graceful_shutdown_state,json=gracefulShutdownState" json:"graceful_shutdown_state,omitempty"`
	// Domain ID information
	DomainId *OspfShDomainId `protobuf:"bytes,112,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// If true, prefix limit for table has been  reached
	TablePrefixLimitReached bool `protobuf:"varint,113,opt,name=table_prefix_limit_reached,json=tablePrefixLimitReached" json:"table_prefix_limit_reached,omitempty"`
	// Non self-generated LSA count
	NonSelfLsaCount uint32 `protobuf:"varint,114,opt,name=non_self_lsa_count,json=nonSelfLsaCount" json:"non_self_lsa_count,omitempty"`
	// If true, max-lsa protection enabled
	MaxLsaEnabled bool `protobuf:"varint,115,opt,name=max_lsa_enabled,json=maxLsaEnabled" json:"max_lsa_enabled,omitempty"`
	// Maximum allowed number of non self-generated LSAs
	MaxLsaLimit uint32 `protobuf:"varint,116,opt,name=max_lsa_limit,json=maxLsaLimit" json:"max_lsa_limit,omitempty"`
	// max-lsa protection warning threshold
	MaxLsaTreshold uint32 `protobuf:"varint,117,opt,name=max_lsa_treshold,json=maxLsaTreshold" json:"max_lsa_treshold,omitempty"`
	// Warning only when max-lsa reached
	MaxLsaWarningOnly bool `protobuf:"varint,118,opt,name=max_lsa_warning_only,json=maxLsaWarningOnly" json:"max_lsa_warning_only,omitempty"`
	// Time ignoring new LSAs after max-lsa reached
	MaxLsaIgnoreTime uint32 `protobuf:"varint,119,opt,name=max_lsa_ignore_time,json=maxLsaIgnoreTime" json:"max_lsa_ignore_time,omitempty"`
	// Time after which LSA protection counter is reset
	MaxLsaResetTime uint32 `protobuf:"varint,120,opt,name=max_lsa_reset_time,json=maxLsaResetTime" json:"max_lsa_reset_time,omitempty"`
	// Max allowed number of entering ignore state
	MaxLsaIgnoreLimit uint32 `protobuf:"varint,121,opt,name=max_lsa_ignore_limit,json=maxLsaIgnoreLimit" json:"max_lsa_ignore_limit,omitempty"`
	// How many times ignore state has been entered
	MaxLsaIgnoreCount uint32 `protobuf:"varint,122,opt,name=max_lsa_ignore_count,json=maxLsaIgnoreCount" json:"max_lsa_ignore_count,omitempty"`
	// Remaining time when ignore timer is running
	MaxLsaIgnoreTimer uint32 `protobuf:"varint,123,opt,name=max_lsa_ignore_timer,json=maxLsaIgnoreTimer" json:"max_lsa_ignore_timer,omitempty"`
	// Remaining time when reset timer is running
	MaxLsaResetTimer uint32 `protobuf:"varint,124,opt,name=max_lsa_reset_timer,json=maxLsaResetTimer" json:"max_lsa_reset_timer,omitempty"`
	// Context name
	ContextName string `protobuf:"bytes,125,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	// If true, snmp trap is enabled
	SnmpTrapEnabled bool `protobuf:"varint,126,opt,name=snmp_trap_enabled,json=snmpTrapEnabled" json:"snmp_trap_enabled,omitempty"`
	// If true, UCMP is enabled
	Ucmp bool `protobuf:"varint,127,opt,name=ucmp" json:"ucmp,omitempty"`
	// UCMP Prefix-list
	UcmpPrefixList string `protobuf:"bytes,128,opt,name=ucmp_prefix_list,json=ucmpPrefixList" json:"ucmp_prefix_list,omitempty"`
	// UCMP Variance
	UcmpVariance int32 `protobuf:"zigzag32,129,opt,name=ucmp_variance,json=ucmpVariance" json:"ucmp_variance,omitempty"`
	// Delay between end of SPF and start of UCMP calculation (ms)
	UcmpDelay uint32 `protobuf:"varint,130,opt,name=ucmp_delay,json=ucmpDelay" json:"ucmp_delay,omitempty"`
	// True if connected to LSD
	LsdConnected bool `protobuf:"varint,131,opt,name=lsd_connected,json=lsdConnected" json:"lsd_connected,omitempty"`
	// True if registered with LSD
	LsdRegistered bool `protobuf:"varint,132,opt,name=lsd_registered,json=lsdRegistered" json:"lsd_registered,omitempty"`
	// True if bound to LSD
	LsdBound bool `protobuf:"varint,133,opt,name=lsd_bound,json=lsdBound" json:"lsd_bound,omitempty"`
	// LSD Connection Revision
	LsdConnectionRevision uint32 `protobuf:"varint,134,opt,name=lsd_connection_revision,json=lsdConnectionRevision" json:"lsd_connection_revision,omitempty"`
	// True if Segment Routing Global Block configured
	SrgbConfigured bool `protobuf:"varint,135,opt,name=srgb_configured,json=srgbConfigured" json:"srgb_configured,omitempty"`
	// Segment Routing Global Block start label value
	SrgbStart uint32 `protobuf:"varint,136,opt,name=srgb_start,json=srgbStart" json:"srgb_start,omitempty"`
	// Segment Routing Global Block end label value
	SrgbEnd uint32 `protobuf:"varint,137,opt,name=srgb_end,json=srgbEnd" json:"srgb_end,omitempty"`
	// Segment Routing Global Block allocation status
	SrgbStatus string `protobuf:"bytes,138,opt,name=srgb_status,json=srgbStatus" json:"srgb_status,omitempty"`
	// True if Segment Routing Strict-SPF capable
	SrStrictSpfCap bool `protobuf:"varint,139,opt,name=sr_strict_spf_cap,json=srStrictSpfCap" json:"sr_strict_spf_cap,omitempty"`
}

func (m *OspfShSummary) Reset()                    { *m = OspfShSummary{} }
func (m *OspfShSummary) String() string            { return proto.CompactTextString(m) }
func (*OspfShSummary) ProtoMessage()               {}
func (*OspfShSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShSummary) GetRoleStandby() bool {
	if m != nil {
		return m.RoleStandby
	}
	return false
}

func (m *OspfShSummary) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OspfShSummary) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *OspfShSummary) GetNsrSwitchoverOnRestart() bool {
	if m != nil {
		return m.NsrSwitchoverOnRestart
	}
	return false
}

func (m *OspfShSummary) GetIgpIntactOn() bool {
	if m != nil {
		return m.IgpIntactOn
	}
	return false
}

func (m *OspfShSummary) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *OspfShSummary) GetTosOptions() uint32 {
	if m != nil {
		return m.TosOptions
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueCapable() bool {
	if m != nil {
		return m.OpaqueCapable
	}
	return false
}

func (m *OspfShSummary) GetAreaBorderRouter() bool {
	if m != nil {
		return m.AreaBorderRouter
	}
	return false
}

func (m *OspfShSummary) GetAsBorderRouter() bool {
	if m != nil {
		return m.AsBorderRouter
	}
	return false
}

func (m *OspfShSummary) GetVrfLiteEnabled() bool {
	if m != nil {
		return m.VrfLiteEnabled
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricStart() bool {
	if m != nil {
		return m.MaximumMetricStart
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricStartTimer() uint32 {
	if m != nil {
		return m.MaximumMetricStartTimer
	}
	return 0
}

func (m *OspfShSummary) GetMaximumMetricSetReason() string {
	if m != nil {
		return m.MaximumMetricSetReason
	}
	return ""
}

func (m *OspfShSummary) GetMaximumMetricAbrOffMode() bool {
	if m != nil {
		return m.MaximumMetricAbrOffMode
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricAbrOffReasons() string {
	if m != nil {
		return m.MaximumMetricAbrOffReasons
	}
	return ""
}

func (m *OspfShSummary) GetMaximumMetricAbrOffBufferTime() uint32 {
	if m != nil {
		return m.MaximumMetricAbrOffBufferTime
	}
	return 0
}

func (m *OspfShSummary) GetMaximumMetricList() []*OspfShMaxMetric {
	if m != nil {
		return m.MaximumMetricList
	}
	return nil
}

func (m *OspfShSummary) GetRedistributionList() []*OspfShRedist {
	if m != nil {
		return m.RedistributionList
	}
	return nil
}

func (m *OspfShSummary) GetSpfStartTime() uint32 {
	if m != nil {
		return m.SpfStartTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfHoldTime() uint32 {
	if m != nil {
		return m.SpfHoldTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfMaximumTime() uint32 {
	if m != nil {
		return m.SpfMaximumTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfStartTimeU32() uint32 {
	if m != nil {
		return m.SpfStartTimeU32
	}
	return 0
}

func (m *OspfShSummary) GetSpfHoldTimeU32() uint32 {
	if m != nil {
		return m.SpfHoldTimeU32
	}
	return 0
}

func (m *OspfShSummary) GetSpfMaximumTimeU32() uint32 {
	if m != nil {
		return m.SpfMaximumTimeU32
	}
	return 0
}

func (m *OspfShSummary) GetSpfPrefixPriority() bool {
	if m != nil {
		return m.SpfPrefixPriority
	}
	return false
}

func (m *OspfShSummary) GetSpfPrefixPriorityRoutePolicy() string {
	if m != nil {
		return m.SpfPrefixPriorityRoutePolicy
	}
	return ""
}

func (m *OspfShSummary) GetLsaStartTime() int32 {
	if m != nil {
		return m.LsaStartTime
	}
	return 0
}

func (m *OspfShSummary) GetLsaHoldTime() uint32 {
	if m != nil {
		return m.LsaHoldTime
	}
	return 0
}

func (m *OspfShSummary) GetLsaMaximumTime() uint32 {
	if m != nil {
		return m.LsaMaximumTime
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaInterval() uint32 {
	if m != nil {
		return m.MinimumLsaInterval
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaIntervalU32() uint32 {
	if m != nil {
		return m.MinimumLsaIntervalU32
	}
	return 0
}

func (m *OspfShSummary) GetLsaRefreshInterval() uint32 {
	if m != nil {
		return m.LsaRefreshInterval
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaArrivalInterval() uint32 {
	if m != nil {
		return m.MinimumLsaArrivalInterval
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaArrivalIntervalU32() uint32 {
	if m != nil {
		return m.MinimumLsaArrivalIntervalU32
	}
	return 0
}

func (m *OspfShSummary) GetIfFloodPacingInterval() uint32 {
	if m != nil {
		return m.IfFloodPacingInterval
	}
	return 0
}

func (m *OspfShSummary) GetIfRetransPacingInterval() uint32 {
	if m != nil {
		return m.IfRetransPacingInterval
	}
	return 0
}

func (m *OspfShSummary) GetAdjStagInitNumNbr() uint32 {
	if m != nil {
		return m.AdjStagInitNumNbr
	}
	return 0
}

func (m *OspfShSummary) GetAdjStagMaxNumNbr() uint32 {
	if m != nil {
		return m.AdjStagMaxNumNbr
	}
	return 0
}

func (m *OspfShSummary) GetAdjStaggerEnabled() bool {
	if m != nil {
		return m.AdjStaggerEnabled
	}
	return false
}

func (m *OspfShSummary) GetAdjStagNumNbrForming() uint32 {
	if m != nil {
		return m.AdjStagNumNbrForming
	}
	return 0
}

func (m *OspfShSummary) GetNumberNbrsFull() uint32 {
	if m != nil {
		return m.NumberNbrsFull
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaCount() uint32 {
	if m != nil {
		return m.AsLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaChecksum() uint32 {
	if m != nil {
		return m.AsLsaChecksum
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueLsaCount() uint32 {
	if m != nil {
		return m.OpaqueLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.OpaqueLsaChecksum
	}
	return 0
}

func (m *OspfShSummary) GetAsDcBitlessLsaCount() uint32 {
	if m != nil {
		return m.AsDcBitlessLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAsDnaLsaCount() uint32 {
	if m != nil {
		return m.AsDnaLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAreaCount() uint32 {
	if m != nil {
		return m.AreaCount
	}
	return 0
}

func (m *OspfShSummary) GetNormalAreaCount() uint32 {
	if m != nil {
		return m.NormalAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetStubAreaCount() uint32 {
	if m != nil {
		return m.StubAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetNssaAreaCount() uint32 {
	if m != nil {
		return m.NssaAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetMaximumInterfaces() uint32 {
	if m != nil {
		return m.MaximumInterfaces
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaFloodListLength() uint32 {
	if m != nil {
		return m.AsLsaFloodListLength
	}
	return 0
}

func (m *OspfShSummary) GetNsfEnabled() bool {
	if m != nil {
		return m.NsfEnabled
	}
	return false
}

func (m *OspfShSummary) GetLastNsfTime() uint32 {
	if m != nil {
		return m.LastNsfTime
	}
	return 0
}

func (m *OspfShSummary) GetNsfTime() uint32 {
	if m != nil {
		return m.NsfTime
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionLimit() uint32 {
	if m != nil {
		return m.RedistributionLimit
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionThreshold() uint32 {
	if m != nil {
		return m.RedistributionThreshold
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionLimitWarn() bool {
	if m != nil {
		return m.RedistributionLimitWarn
	}
	return false
}

func (m *OspfShSummary) GetGracefulShutdownRetentionTime() uint32 {
	if m != nil {
		return m.GracefulShutdownRetentionTime
	}
	return 0
}

func (m *OspfShSummary) GetGracefulShutdownState() string {
	if m != nil {
		return m.GracefulShutdownState
	}
	return ""
}

func (m *OspfShSummary) GetDomainId() *OspfShDomainId {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *OspfShSummary) GetTablePrefixLimitReached() bool {
	if m != nil {
		return m.TablePrefixLimitReached
	}
	return false
}

func (m *OspfShSummary) GetNonSelfLsaCount() uint32 {
	if m != nil {
		return m.NonSelfLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaEnabled() bool {
	if m != nil {
		return m.MaxLsaEnabled
	}
	return false
}

func (m *OspfShSummary) GetMaxLsaLimit() uint32 {
	if m != nil {
		return m.MaxLsaLimit
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaTreshold() uint32 {
	if m != nil {
		return m.MaxLsaTreshold
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaWarningOnly() bool {
	if m != nil {
		return m.MaxLsaWarningOnly
	}
	return false
}

func (m *OspfShSummary) GetMaxLsaIgnoreTime() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreTime
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaResetTime() uint32 {
	if m != nil {
		return m.MaxLsaResetTime
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreLimit() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreLimit
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreCount() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreCount
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreTimer() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreTimer
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaResetTimer() uint32 {
	if m != nil {
		return m.MaxLsaResetTimer
	}
	return 0
}

func (m *OspfShSummary) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *OspfShSummary) GetSnmpTrapEnabled() bool {
	if m != nil {
		return m.SnmpTrapEnabled
	}
	return false
}

func (m *OspfShSummary) GetUcmp() bool {
	if m != nil {
		return m.Ucmp
	}
	return false
}

func (m *OspfShSummary) GetUcmpPrefixList() string {
	if m != nil {
		return m.UcmpPrefixList
	}
	return ""
}

func (m *OspfShSummary) GetUcmpVariance() int32 {
	if m != nil {
		return m.UcmpVariance
	}
	return 0
}

func (m *OspfShSummary) GetUcmpDelay() uint32 {
	if m != nil {
		return m.UcmpDelay
	}
	return 0
}

func (m *OspfShSummary) GetLsdConnected() bool {
	if m != nil {
		return m.LsdConnected
	}
	return false
}

func (m *OspfShSummary) GetLsdRegistered() bool {
	if m != nil {
		return m.LsdRegistered
	}
	return false
}

func (m *OspfShSummary) GetLsdBound() bool {
	if m != nil {
		return m.LsdBound
	}
	return false
}

func (m *OspfShSummary) GetLsdConnectionRevision() uint32 {
	if m != nil {
		return m.LsdConnectionRevision
	}
	return 0
}

func (m *OspfShSummary) GetSrgbConfigured() bool {
	if m != nil {
		return m.SrgbConfigured
	}
	return false
}

func (m *OspfShSummary) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *OspfShSummary) GetSrgbEnd() uint32 {
	if m != nil {
		return m.SrgbEnd
	}
	return 0
}

func (m *OspfShSummary) GetSrgbStatus() string {
	if m != nil {
		return m.SrgbStatus
	}
	return ""
}

func (m *OspfShSummary) GetSrStrictSpfCap() bool {
	if m != nil {
		return m.SrStrictSpfCap
	}
	return false
}

type OspfShTime struct {
	Second     uint32 `protobuf:"varint,1,opt,name=second" json:"second,omitempty"`
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond" json:"nanosecond,omitempty"`
}

func (m *OspfShTime) Reset()                    { *m = OspfShTime{} }
func (m *OspfShTime) String() string            { return proto.CompactTextString(m) }
func (*OspfShTime) ProtoMessage()               {}
func (*OspfShTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *OspfShTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type StringType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *StringType) Reset()                    { *m = StringType{} }
func (m *StringType) String() string            { return proto.CompactTextString(m) }
func (*StringType) ProtoMessage()               {}
func (*StringType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StringType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Redistributed protocol instance
type OspfShRedistProto struct {
	ProtocolType string `protobuf:"bytes,1,opt,name=protocol_type,json=protocolType" json:"protocol_type,omitempty"`
	// ISIS instance identifier
	IsisInstanceId *StringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId" json:"isis_instance_id,omitempty"`
	// OSPF process identifier
	OspfProcessId *StringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId" json:"ospf_process_id,omitempty"`
	// BGP Autonomous System Number
	BgpAsNumber *StringType `protobuf:"bytes,4,opt,name=bgp_as_number,json=bgpAsNumber" json:"bgp_as_number,omitempty"`
	// Autonomous System Number
	EigrpAsNumber *StringType `protobuf:"bytes,5,opt,name=eigrp_as_number,json=eigrpAsNumber" json:"eigrp_as_number,omitempty"`
	// Connected instance name
	ConnectedInstance *StringType `protobuf:"bytes,6,opt,name=connected_instance,json=connectedInstance" json:"connected_instance,omitempty"`
}

func (m *OspfShRedistProto) Reset()                    { *m = OspfShRedistProto{} }
func (m *OspfShRedistProto) String() string            { return proto.CompactTextString(m) }
func (*OspfShRedistProto) ProtoMessage()               {}
func (*OspfShRedistProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OspfShRedistProto) GetProtocolType() string {
	if m != nil {
		return m.ProtocolType
	}
	return ""
}

func (m *OspfShRedistProto) GetIsisInstanceId() *StringType {
	if m != nil {
		return m.IsisInstanceId
	}
	return nil
}

func (m *OspfShRedistProto) GetOspfProcessId() *StringType {
	if m != nil {
		return m.OspfProcessId
	}
	return nil
}

func (m *OspfShRedistProto) GetBgpAsNumber() *StringType {
	if m != nil {
		return m.BgpAsNumber
	}
	return nil
}

func (m *OspfShRedistProto) GetEigrpAsNumber() *StringType {
	if m != nil {
		return m.EigrpAsNumber
	}
	return nil
}

func (m *OspfShRedistProto) GetConnectedInstance() *StringType {
	if m != nil {
		return m.ConnectedInstance
	}
	return nil
}

// OSPF Redistribution Information
type OspfShRedist struct {
	// Protocol Information
	RedistributionProtocol *OspfShRedistProto `protobuf:"bytes,1,opt,name=redistribution_protocol,json=redistributionProtocol" json:"redistribution_protocol,omitempty"`
	// If true, Metric configured
	MetricFlag bool `protobuf:"varint,2,opt,name=metric_flag,json=metricFlag" json:"metric_flag,omitempty"`
	// Route metric
	Metric uint32 `protobuf:"varint,3,opt,name=metric" json:"metric,omitempty"`
	// Whether to use CIDR
	Classless bool `protobuf:"varint,4,opt,name=classless" json:"classless,omitempty"`
	// To NSSA areas only
	NssaOnly bool `protobuf:"varint,5,opt,name=nssa_only,json=nssaOnly" json:"nssa_only,omitempty"`
}

func (m *OspfShRedist) Reset()                    { *m = OspfShRedist{} }
func (m *OspfShRedist) String() string            { return proto.CompactTextString(m) }
func (*OspfShRedist) ProtoMessage()               {}
func (*OspfShRedist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OspfShRedist) GetRedistributionProtocol() *OspfShRedistProto {
	if m != nil {
		return m.RedistributionProtocol
	}
	return nil
}

func (m *OspfShRedist) GetMetricFlag() bool {
	if m != nil {
		return m.MetricFlag
	}
	return false
}

func (m *OspfShRedist) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *OspfShRedist) GetClassless() bool {
	if m != nil {
		return m.Classless
	}
	return false
}

func (m *OspfShRedist) GetNssaOnly() bool {
	if m != nil {
		return m.NssaOnly
	}
	return false
}

// OSPF Domain ID
type OspfShDomainIdEntry struct {
	// Domain ID Type
	DomainIdType uint32 `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType" json:"domain_id_type,omitempty"`
	// Domain ID value
	DomainIdValue []byte `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
}

func (m *OspfShDomainIdEntry) Reset()                    { *m = OspfShDomainIdEntry{} }
func (m *OspfShDomainIdEntry) String() string            { return proto.CompactTextString(m) }
func (*OspfShDomainIdEntry) ProtoMessage()               {}
func (*OspfShDomainIdEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OspfShDomainIdEntry) GetDomainIdType() uint32 {
	if m != nil {
		return m.DomainIdType
	}
	return 0
}

func (m *OspfShDomainIdEntry) GetDomainIdValue() []byte {
	if m != nil {
		return m.DomainIdValue
	}
	return nil
}

// OSPF Domain ID entries
type OspfShDomainId struct {
	// Primary Domain ID
	PrimaryDomainId *OspfShDomainIdEntry `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId" json:"primary_domain_id,omitempty"`
	// List of secondary domain IDs
	SecondaryDomainIdList []*OspfShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id_list,json=secondaryDomainIdList" json:"secondary_domain_id_list,omitempty"`
}

func (m *OspfShDomainId) Reset()                    { *m = OspfShDomainId{} }
func (m *OspfShDomainId) String() string            { return proto.CompactTextString(m) }
func (*OspfShDomainId) ProtoMessage()               {}
func (*OspfShDomainId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OspfShDomainId) GetPrimaryDomainId() *OspfShDomainIdEntry {
	if m != nil {
		return m.PrimaryDomainId
	}
	return nil
}

func (m *OspfShDomainId) GetSecondaryDomainIdList() []*OspfShDomainIdEntry {
	if m != nil {
		return m.SecondaryDomainIdList
	}
	return nil
}

// OSPF Max-metric Information
type OspfShMaxMetric struct {
	// Max-metric reason
	MaxMetricReason uint32 `protobuf:"varint,1,opt,name=max_metric_reason,json=maxMetricReason" json:"max_metric_reason,omitempty"`
	// Max-metric enabled
	MaxMetricEnabled bool `protobuf:"varint,2,opt,name=max_metric_enabled,json=maxMetricEnabled" json:"max_metric_enabled,omitempty"`
	// If true, BGP is up, no maximum metric Router LSA
	UnsetMaximumMetric bool `protobuf:"varint,3,opt,name=unset_maximum_metric,json=unsetMaximumMetric" json:"unset_maximum_metric,omitempty"`
	// Saved UnsetMaximumMetric
	SavedUnsetMaximumMetric bool `protobuf:"varint,4,opt,name=saved_unset_maximum_metric,json=savedUnsetMaximumMetric" json:"saved_unset_maximum_metric,omitempty"`
	// Time remaining until we will start using normal metrics (s)
	MaximumMetricStartTime uint32 `protobuf:"varint,5,opt,name=maximum_metric_start_time,json=maximumMetricStartTime" json:"maximum_metric_start_time,omitempty"`
	// Hold time configured (s)
	SavedStartupTime uint32 `protobuf:"varint,6,opt,name=saved_startup_time,json=savedStartupTime" json:"saved_startup_time,omitempty"`
	// If true, set max-metric in stub links
	MaximumMetricIncludeStubs bool `protobuf:"varint,7,opt,name=maximum_metric_include_stubs,json=maximumMetricIncludeStubs" json:"maximum_metric_include_stubs,omitempty"`
	// If true, advertise max-metric in summary-LSAs
	MaximumMetricSummaryLsa bool `protobuf:"varint,8,opt,name=maximum_metric_summary_lsa,json=maximumMetricSummaryLsa" json:"maximum_metric_summary_lsa,omitempty"`
	// Max-metric value to advertise in summary-LSAs
	MaximumMetricSummaryLsaMetric uint32 `protobuf:"varint,9,opt,name=maximum_metric_summary_lsa_metric,json=maximumMetricSummaryLsaMetric" json:"maximum_metric_summary_lsa_metric,omitempty"`
	// If true, advertise max-metric in external-LSAs
	MaximumMetricExternalLsa bool `protobuf:"varint,10,opt,name=maximum_metric_external_lsa,json=maximumMetricExternalLsa" json:"maximum_metric_external_lsa,omitempty"`
	// Max-metric value to advertise in external-LSAs
	MaximumMetricExternalLsaMetric uint32 `protobuf:"varint,11,opt,name=maximum_metric_external_lsa_metric,json=maximumMetricExternalLsaMetric" json:"maximum_metric_external_lsa_metric,omitempty"`
	// Time max-metric was used for
	MaximumMetricOriginatedFor uint32 `protobuf:"varint,12,opt,name=maximum_metric_originated_for,json=maximumMetricOriginatedFor" json:"maximum_metric_originated_for,omitempty"`
	// Time max-metric condition was cleared
	MaximumMetricTimeUnset *OspfShTime `protobuf:"bytes,13,opt,name=maximum_metric_time_unset,json=maximumMetricTimeUnset" json:"maximum_metric_time_unset,omitempty"`
	// Max-metric unset reason
	MaximumMetricUnsetReason string `protobuf:"bytes,14,opt,name=maximum_metric_unset_reason,json=maximumMetricUnsetReason" json:"maximum_metric_unset_reason,omitempty"`
}

func (m *OspfShMaxMetric) Reset()                    { *m = OspfShMaxMetric{} }
func (m *OspfShMaxMetric) String() string            { return proto.CompactTextString(m) }
func (*OspfShMaxMetric) ProtoMessage()               {}
func (*OspfShMaxMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OspfShMaxMetric) GetMaxMetricReason() uint32 {
	if m != nil {
		return m.MaxMetricReason
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaxMetricEnabled() bool {
	if m != nil {
		return m.MaxMetricEnabled
	}
	return false
}

func (m *OspfShMaxMetric) GetUnsetMaximumMetric() bool {
	if m != nil {
		return m.UnsetMaximumMetric
	}
	return false
}

func (m *OspfShMaxMetric) GetSavedUnsetMaximumMetric() bool {
	if m != nil {
		return m.SavedUnsetMaximumMetric
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricStartTime() uint32 {
	if m != nil {
		return m.MaximumMetricStartTime
	}
	return 0
}

func (m *OspfShMaxMetric) GetSavedStartupTime() uint32 {
	if m != nil {
		return m.SavedStartupTime
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricIncludeStubs() bool {
	if m != nil {
		return m.MaximumMetricIncludeStubs
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricSummaryLsa() bool {
	if m != nil {
		return m.MaximumMetricSummaryLsa
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricSummaryLsaMetric() uint32 {
	if m != nil {
		return m.MaximumMetricSummaryLsaMetric
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricExternalLsa() bool {
	if m != nil {
		return m.MaximumMetricExternalLsa
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricExternalLsaMetric() uint32 {
	if m != nil {
		return m.MaximumMetricExternalLsaMetric
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricOriginatedFor() uint32 {
	if m != nil {
		return m.MaximumMetricOriginatedFor
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricTimeUnset() *OspfShTime {
	if m != nil {
		return m.MaximumMetricTimeUnset
	}
	return nil
}

func (m *OspfShMaxMetric) GetMaximumMetricUnsetReason() string {
	if m != nil {
		return m.MaximumMetricUnsetReason
	}
	return ""
}

func init() {
	proto.RegisterType((*OspfShSummary_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_summary_KEYS")
	proto.RegisterType((*OspfShSummary)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_summary")
	proto.RegisterType((*OspfShTime)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_time")
	proto.RegisterType((*StringType)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.string_type")
	proto.RegisterType((*OspfShRedistProto)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_redist_proto")
	proto.RegisterType((*OspfShRedist)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_redist")
	proto.RegisterType((*OspfShDomainIdEntry)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_domain_id_entry")
	proto.RegisterType((*OspfShDomainId)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_domain_id")
	proto.RegisterType((*OspfShMaxMetric)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_summary.ospf_sh_max_metric")
}

func init() { proto.RegisterFile("ospf_sh_summary.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x4b, 0x93, 0x1c, 0x47,
	0x11, 0x8e, 0x91, 0x2d, 0x69, 0xb7, 0xf6, 0x5d, 0x5a, 0x49, 0x25, 0x59, 0x36, 0xeb, 0x35, 0x88,
	0xb5, 0xb1, 0xd7, 0x46, 0x32, 0x16, 0x7e, 0x61, 0xf4, 0x5a, 0x7b, 0xec, 0xd5, 0xae, 0xe8, 0x59,
	0xdb, 0x98, 0x57, 0x51, 0xd3, 0x5d, 0x3d, 0x5b, 0x76, 0x4f, 0x75, 0xbb, 0xaa, 0x7a, 0xb4, 0xcb,
	0xfb, 0xfd, 0x3c, 0xc0, 0x81, 0xe0, 0xc2, 0x85, 0x08, 0x38, 0x70, 0x22, 0x82, 0x20, 0xf8, 0x0b,
	0xfc, 0x14, 0x8e, 0xfc, 0x06, 0x22, 0x33, 0xbb, 0x7b, 0x9e, 0xe2, 0x66, 0xe9, 0x22, 0x4d, 0x67,
	0x7e, 0x99, 0xf9, 0x55, 0x76, 0x56, 0x76, 0x56, 0x2d, 0x3b, 0x9b, 0xfb, 0x22, 0x95, 0xfe, 0x50,
	0xfa, 0xb2, 0xdf, 0x57, 0xee, 0x78, 0xbb, 0x70, 0x79, 0xc8, 0xb9, 0x8c, 0x8d, 0x8f, 0x73, 0x69,
	0x72, 0x2f, 0x8f, 0x9c, 0x34, 0xc5, 0xe0, 0x45, 0x89, 0xc0, 0xbc, 0xd0, 0x6e, 0x1b, 0x7e, 0x01,
	0x2e, 0xd6, 0xde, 0x6b, 0x5f, 0xff, 0xda, 0x1e, 0xb8, 0x14, 0xff, 0xa9, 0x05, 0xd2, 0xd8, 0x34,
	0x77, 0x7d, 0x15, 0x4c, 0x6e, 0x1b, 0x59, 0x15, 0x66, 0xf3, 0x80, 0xad, 0x4f, 0x44, 0x96, 0xef,
	0xdc, 0xfe, 0xa0, 0xc3, 0x9f, 0x64, 0x8b, 0x35, 0xd4, 0xaa, 0xbe, 0x16, 0xad, 0x8d, 0xd6, 0xd6,
	0x7c, 0xb4, 0x50, 0xc9, 0xf6, 0x54, 0x5f, 0xf3, 0x0b, 0x6c, 0x6e, 0xe0, 0x52, 0x52, 0x9f, 0x40,
	0xf5, 0xe9, 0x81, 0x4b, 0x41, 0xb5, 0xf9, 0x9f, 0x4d, 0xb6, 0x32, 0xe1, 0x16, 0x3c, 0xba, 0x3c,
	0xd3, 0xd2, 0x07, 0x65, 0x93, 0xee, 0xb1, 0xb8, 0xb2, 0xd1, 0xda, 0x9a, 0x8b, 0x16, 0x40, 0xd6,
	0x21, 0x11, 0xe7, 0xec, 0x51, 0x78, 0x14, 0x57, 0x37, 0x5a, 0x5b, 0x4b, 0x11, 0xfe, 0xe6, 0x9f,
	0x62, 0x0b, 0xd6, 0x3b, 0xa9, 0xad, 0xea, 0x66, 0x3a, 0x11, 0x2f, 0xa2, 0x15, 0xb3, 0xde, 0xdd,
	0x26, 0x09, 0x7f, 0x99, 0x5d, 0x00, 0x80, 0xbf, 0x67, 0x42, 0x7c, 0x98, 0x0f, 0xb4, 0x93, 0xb9,
	0x95, 0x4e, 0xfb, 0xa0, 0x5c, 0x10, 0x5f, 0x40, 0xf8, 0x39, 0xeb, 0x5d, 0xa7, 0xd1, 0xef, 0xdb,
	0x88, 0xb4, 0x7c, 0x93, 0x2d, 0x99, 0x5e, 0x21, 0x8d, 0x0d, 0x2a, 0x0e, 0x32, 0xb7, 0xe2, 0x25,
	0xe2, 0x64, 0x7a, 0x45, 0x1b, 0x65, 0xfb, 0x96, 0x3f, 0xc6, 0xe6, 0x5d, 0x5e, 0x06, 0xed, 0xa4,
	0x49, 0xc4, 0x35, 0x5c, 0xe6, 0x1c, 0x09, 0xda, 0x09, 0x90, 0x0b, 0xb9, 0x97, 0x79, 0x01, 0xb9,
	0xf5, 0xe2, 0x8b, 0xc8, 0x9b, 0x85, 0xdc, 0xef, 0x93, 0x84, 0x7f, 0x86, 0x2d, 0xe7, 0x85, 0xfa,
	0xb8, 0xd4, 0x32, 0x56, 0x05, 0xf0, 0x15, 0x2f, 0x63, 0x88, 0x25, 0x92, 0xde, 0x24, 0x21, 0x7f,
	0x96, 0x71, 0xe5, 0xb4, 0x92, 0xdd, 0xdc, 0x25, 0xda, 0x49, 0xf2, 0x2f, 0x5e, 0x41, 0xe8, 0x2a,
	0x68, 0x6e, 0xa0, 0x22, 0x42, 0x39, 0xdf, 0x62, 0xab, 0xca, 0x4f, 0x60, 0x5f, 0x45, 0xec, 0xb2,
	0xf2, 0x93, 0x48, 0x78, 0x45, 0x99, 0x09, 0xba, 0xc9, 0xe0, 0x6b, 0x84, 0x1c, 0xb8, 0x74, 0xd7,
	0x04, 0x5d, 0x67, 0xf1, 0x05, 0xb6, 0xde, 0x57, 0x47, 0xa6, 0x5f, 0xf6, 0x65, 0x5f, 0x07, 0x67,
	0x62, 0x49, 0x09, 0x7c, 0x1d, 0xd1, 0xbc, 0xd2, 0xdd, 0x41, 0x55, 0x07, 0x93, 0xf7, 0x2a, 0xbb,
	0x38, 0xcb, 0x42, 0x06, 0xd3, 0xd7, 0x4e, 0x7c, 0x09, 0x53, 0x71, 0x7e, 0xda, 0xee, 0x00, 0xd4,
	0xf0, 0xd2, 0x26, 0x8d, 0x75, 0x90, 0x4e, 0x2b, 0x9f, 0x5b, 0xf1, 0x06, 0x66, 0xf9, 0xdc, 0xb8,
	0xad, 0x0e, 0x11, 0x6a, 0xf9, 0x6b, 0xec, 0xb1, 0x09, 0x53, 0xd5, 0x75, 0x32, 0x4f, 0x53, 0xd9,
	0xcf, 0x13, 0x2d, 0xbe, 0x8c, 0x84, 0xc7, 0x03, 0x5f, 0xef, 0xba, 0xfd, 0x34, 0xbd, 0x93, 0x27,
	0x9a, 0xdf, 0x60, 0x4f, 0xdc, 0xc7, 0x9a, 0x82, 0x7b, 0x71, 0x1d, 0xa3, 0x5f, 0x9c, 0xe1, 0x80,
	0x08, 0x78, 0xde, 0x66, 0x9b, 0xf7, 0xf1, 0xd1, 0x2d, 0xd3, 0x54, 0x3b, 0x4c, 0x81, 0xb8, 0x81,
	0x19, 0x78, 0x7c, 0x86, 0x9f, 0x1b, 0x88, 0x82, 0x44, 0xf0, 0xbf, 0xb4, 0xd8, 0x99, 0x09, 0x5f,
	0x99, 0xf1, 0x41, 0xdc, 0xdc, 0x78, 0x64, 0x6b, 0xe1, 0x8a, 0xdf, 0xfe, 0x84, 0xb7, 0xff, 0x76,
	0xbd, 0x49, 0xfb, 0xea, 0xa8, 0x8a, 0x1f, 0xad, 0x8d, 0x31, 0xde, 0x35, 0x3e, 0xf0, 0x3f, 0xb7,
	0xd8, 0x19, 0xa7, 0x13, 0xe3, 0x83, 0x33, 0xdd, 0x12, 0x1c, 0x11, 0xcb, 0x5b, 0xc8, 0x32, 0x7f,
	0x60, 0x2c, 0x89, 0x43, 0xc4, 0xc7, 0xb9, 0x20, 0xc5, 0x4f, 0xb3, 0x65, 0x04, 0x35, 0x25, 0x28,
	0x6e, 0x63, 0xfe, 0x17, 0x7d, 0x91, 0x36, 0x75, 0x07, 0x1b, 0x1e, 0x50, 0x87, 0x79, 0x96, 0x10,
	0x68, 0x07, 0x41, 0x0b, 0xbe, 0x48, 0xdf, 0xca, 0xb3, 0x04, 0x31, 0x5b, 0x6c, 0x15, 0x30, 0xf5,
	0x5b, 0x41, 0xd8, 0x9b, 0x08, 0x83, 0x08, 0x77, 0x48, 0x8c, 0xc8, 0xcf, 0x31, 0x3e, 0x1e, 0x53,
	0x96, 0x57, 0xaf, 0x88, 0xb7, 0x10, 0xbb, 0x32, 0x1a, 0xf7, 0xdd, 0xab, 0x57, 0xf8, 0xd3, 0x6c,
	0x6d, 0x2c, 0x34, 0x62, 0xdb, 0x8d, 0xdf, 0x3a, 0x3c, 0x40, 0x9f, 0x67, 0xeb, 0x93, 0x0c, 0x10,
	0xfd, 0x36, 0xa2, 0xd7, 0xc6, 0x59, 0x80, 0xc1, 0x36, 0x3b, 0x03, 0x06, 0x85, 0xd3, 0xa9, 0x39,
	0x92, 0x85, 0x33, 0xb9, 0x33, 0xe1, 0x58, 0xbc, 0x83, 0x5b, 0x01, 0xf0, 0x77, 0x51, 0x73, 0xb7,
	0x52, 0xf0, 0x1d, 0xb6, 0x31, 0x03, 0x4f, 0xad, 0x44, 0x16, 0x79, 0x66, 0xe2, 0x63, 0xb1, 0x8b,
	0xdb, 0xe0, 0xd2, 0x94, 0x31, 0x76, 0x96, 0xbb, 0x88, 0x81, 0xa4, 0x67, 0x5e, 0x8d, 0x26, 0xfd,
	0xce, 0x46, 0x6b, 0x6b, 0x2d, 0x5a, 0xcc, 0xbc, 0x1a, 0x4b, 0x3a, 0xa0, 0x86, 0x49, 0xdf, 0xa3,
	0xa4, 0x67, 0x5e, 0x8d, 0x26, 0x1d, 0x30, 0x63, 0x49, 0xdf, 0xa7, 0xe4, 0x64, 0x5e, 0x8d, 0x26,
	0x1d, 0x1a, 0x95, 0xb1, 0x88, 0x02, 0x0b, 0x63, 0x83, 0x76, 0x03, 0x95, 0x89, 0xbb, 0x88, 0xe6,
	0x95, 0x6e, 0xd7, 0xab, 0x76, 0xa5, 0xe1, 0xd7, 0x98, 0x98, 0x65, 0x81, 0x29, 0xfd, 0x0a, 0x5a,
	0x9d, 0x9d, 0xb6, 0x82, 0xb4, 0xbe, 0xc0, 0xd6, 0xc1, 0xc0, 0xe9, 0xd4, 0x69, 0x7f, 0x38, 0x0c,
	0x15, 0x51, 0xa8, 0xcc, 0xab, 0x88, 0x54, 0x4d, 0xa8, 0x37, 0xd8, 0xa5, 0xd1, 0x50, 0xca, 0x39,
	0x03, 0x91, 0x1a, 0xcb, 0x0e, 0x5a, 0x5e, 0x18, 0x86, 0xbb, 0x4e, 0x88, 0xc6, 0xc1, 0x0e, 0xdb,
	0xf8, 0x7f, 0x0e, 0x90, 0xf3, 0x01, 0x3a, 0xb9, 0x74, 0x5f, 0x27, 0x40, 0xfd, 0x1a, 0x13, 0x26,
	0x95, 0x69, 0x96, 0xe7, 0x89, 0x2c, 0x54, 0x6c, 0x6c, 0x6f, 0x48, 0xe2, 0x5d, 0x5a, 0xb3, 0x49,
	0x77, 0x40, 0x7d, 0x17, 0xb5, 0x0d, 0x81, 0x57, 0xd9, 0x45, 0x03, 0xbd, 0x30, 0x38, 0x65, 0xfd,
	0x94, 0xe9, 0x7b, 0xd4, 0xd5, 0x4d, 0x1a, 0x11, 0x60, 0xc2, 0xf8, 0x05, 0x76, 0x56, 0x25, 0x1f,
	0x42, 0x3d, 0x80, 0x8d, 0x09, 0xd2, 0x96, 0x7d, 0x69, 0xbb, 0x4e, 0xbc, 0x4f, 0x95, 0xab, 0x92,
	0x0f, 0x3b, 0x41, 0xf5, 0xda, 0xd6, 0x84, 0xbd, 0xb2, 0xbf, 0xd7, 0x75, 0x7c, 0x9b, 0xad, 0x37,
	0x16, 0xd0, 0x83, 0x6a, 0x83, 0xaf, 0xa2, 0xc1, 0x6a, 0x65, 0x70, 0x47, 0x1d, 0x35, 0xf8, 0x33,
	0x35, 0xbe, 0xa7, 0x87, 0x53, 0xc1, 0x07, 0x54, 0xe9, 0x15, 0xbc, 0xa7, 0x9b, 0xe1, 0xe0, 0x25,
	0x26, 0x1a, 0xff, 0x95, 0x6f, 0x09, 0x7d, 0xc6, 0xd8, 0x9e, 0xf8, 0x1a, 0xc6, 0x58, 0xaf, 0x8c,
	0x28, 0xc0, 0x0e, 0xe9, 0xa0, 0x1e, 0x6d, 0xd9, 0xef, 0x6a, 0x07, 0x16, 0x5e, 0xa6, 0x65, 0x96,
	0x89, 0xaf, 0x53, 0x3d, 0x92, 0x7c, 0xaf, 0xeb, 0xfc, 0x4e, 0x99, 0x65, 0x7c, 0x83, 0x2d, 0x2a,
	0x8f, 0x2f, 0x2b, 0xce, 0x4b, 0x1b, 0xc4, 0x37, 0x68, 0x06, 0x50, 0x7e, 0xd7, 0xab, 0x9b, 0x20,
	0xe1, 0x97, 0xd9, 0x4a, 0x8d, 0x38, 0xd4, 0xf1, 0x47, 0xbe, 0xec, 0x8b, 0x6f, 0x22, 0x68, 0x89,
	0x40, 0x95, 0x10, 0x62, 0x56, 0xb3, 0xc2, 0xd0, 0xdb, 0xb7, 0x28, 0x26, 0xc9, 0x1b, 0x8f, 0xdb,
	0xec, 0xcc, 0x28, 0xb2, 0xf6, 0x2a, 0x29, 0xcb, 0x43, 0x70, 0xed, 0xf9, 0x45, 0x76, 0x5e, 0x79,
	0x99, 0xc4, 0xb2, 0x6b, 0x42, 0x06, 0x8d, 0x75, 0x18, 0xe0, 0xdb, 0x68, 0x73, 0x46, 0xf9, 0x5b,
	0xf1, 0x0d, 0x52, 0x36, 0x51, 0x3e, 0x8b, 0x63, 0x46, 0x62, 0xd5, 0x08, 0x5c, 0xd5, 0xc4, 0x6f,
	0x59, 0xd5, 0x00, 0x1f, 0x67, 0x0c, 0xa7, 0x17, 0x82, 0x74, 0x11, 0x32, 0x0f, 0x12, 0x52, 0x3f,
	0xc3, 0xd6, 0x2c, 0xb4, 0xf6, 0x4c, 0x8e, 0xa0, 0x62, 0xea, 0x92, 0xa4, 0xb8, 0xde, 0x60, 0x2f,
	0xb3, 0x15, 0x1f, 0xca, 0xee, 0x28, 0x32, 0xa1, 0x90, 0x20, 0x1e, 0xc3, 0x59, 0x8f, 0x1b, 0xa4,
	0xc1, 0x69, 0xc2, 0x81, 0x78, 0x88, 0x7b, 0x8e, 0xd5, 0xa3, 0x0b, 0x15, 0x71, 0xaa, 0x62, 0xed,
	0x45, 0x4a, 0x89, 0xaa, 0x34, 0xed, 0x46, 0x81, 0xe5, 0x42, 0xd9, 0xa1, 0xad, 0x03, 0x5f, 0x39,
	0x99, 0x69, 0xdb, 0x0b, 0x87, 0xa2, 0x57, 0x95, 0x0b, 0x24, 0x08, 0x77, 0x0e, 0x7c, 0x77, 0x76,
	0x51, 0x47, 0x43, 0x6a, 0xda, 0x94, 0xe3, 0x61, 0x3d, 0xa4, 0xa6, 0x75, 0x1d, 0x42, 0x0f, 0x54,
	0x3e, 0x48, 0x40, 0x61, 0x73, 0x33, 0x55, 0x0f, 0x54, 0x3e, 0xec, 0xf9, 0x14, 0x3b, 0xdb, 0x05,
	0x36, 0xd7, 0xa8, 0x3f, 0x44, 0xf5, 0x69, 0x5b, 0xa9, 0x3e, 0xcf, 0xd6, 0xa7, 0xbe, 0xbf, 0x7d,
	0x13, 0xc4, 0x47, 0xf4, 0xf6, 0x26, 0xbf, 0x87, 0x7d, 0x13, 0xf8, 0xcb, 0x4c, 0x4c, 0x98, 0x84,
	0x43, 0xe8, 0x55, 0x79, 0x96, 0x88, 0x8c, 0xb6, 0xf1, 0xb8, 0xfe, 0xa0, 0x56, 0xf3, 0x57, 0xd8,
	0x85, 0x59, 0xd1, 0xe4, 0x3d, 0xe5, 0xac, 0xe8, 0xd3, 0x7c, 0x35, 0x23, 0xe4, 0xfb, 0xca, 0x59,
	0xfe, 0x26, 0xdb, 0xe8, 0x39, 0x15, 0xeb, 0xb4, 0xcc, 0xa4, 0x3f, 0x2c, 0x43, 0x92, 0xdf, 0x83,
	0x69, 0x3c, 0x68, 0x4b, 0x1c, 0x60, 0x71, 0x96, 0x26, 0xa3, 0x1a, 0xd7, 0xa9, 0x60, 0x51, 0x8d,
	0xc2, 0x25, 0xbf, 0xc4, 0xce, 0x4f, 0x3b, 0xf2, 0x41, 0x05, 0x2d, 0x72, 0xfc, 0x34, 0x9d, 0x9d,
	0xb4, 0xef, 0x80, 0x92, 0xff, 0xae, 0xc5, 0xe6, 0x93, 0xbc, 0xaf, 0x8c, 0x85, 0x81, 0xbd, 0xd8,
	0x68, 0x6d, 0x2d, 0x5c, 0x71, 0x0f, 0x6c, 0x42, 0x69, 0x22, 0x47, 0x73, 0xf4, 0xb3, 0x9d, 0x40,
	0x4b, 0x0d, 0x50, 0x05, 0xf5, 0xf7, 0x96, 0x92, 0xe9, 0xb4, 0x8a, 0x0f, 0x75, 0x22, 0x3e, 0xa6,
	0x7c, 0x22, 0x82, 0xbe, 0xb4, 0x98, 0xcc, 0x88, 0xd4, 0x30, 0x63, 0xd8, 0xdc, 0x4a, 0xaf, 0xb3,
	0x74, 0x64, 0x1b, 0xba, 0x7a, 0xf7, 0xd8, 0x8e, 0xce, 0xd2, 0xd1, 0x4e, 0x03, 0x4d, 0x14, 0x70,
	0x75, 0x29, 0x7a, 0x3a, 0x6e, 0xf4, 0xd5, 0xd1, 0xae, 0x57, 0x23, 0xd5, 0x58, 0xe3, 0xa8, 0x8e,
	0x02, 0x55, 0x23, 0xa1, 0xa8, 0x7e, 0xb6, 0xd8, 0x6a, 0x8d, 0x09, 0x75, 0xdd, 0x94, 0xd4, 0x8d,
	0x08, 0x76, 0x50, 0x97, 0xcb, 0xf3, 0x78, 0x74, 0x40, 0x24, 0x54, 0x08, 0x7c, 0x30, 0x72, 0x9b,
	0x1d, 0x8b, 0x01, 0x35, 0x65, 0x42, 0xbf, 0x4f, 0x9a, 0x7d, 0x9b, 0x1d, 0xf3, 0xe7, 0x70, 0xe6,
	0xa5, 0x8f, 0x71, 0xcf, 0xe6, 0x4e, 0x53, 0x59, 0xdc, 0xa3, 0x9e, 0x4f, 0xf8, 0x36, 0x2a, 0xea,
	0x31, 0xab, 0x86, 0x3b, 0x0d, 0xc7, 0x04, 0x44, 0x1f, 0x51, 0x0a, 0x08, 0x1d, 0x81, 0x1c, 0xc1,
	0x23, 0x64, 0x2a, 0xdf, 0xb4, 0xc2, 0xe3, 0x66, 0xcb, 0x37, 0xce, 0x69, 0x9d, 0xd3, 0x06, 0x94,
	0xe2, 0xef, 0x4c, 0x1b, 0x50, 0x92, 0xa7, 0x0d, 0xe8, 0xc4, 0xf3, 0xdd, 0x69, 0x03, 0x3a, 0xeb,
	0x8c, 0x2c, 0x77, 0xc8, 0xdf, 0x89, 0xef, 0x8d, 0x2e, 0xb7, 0x59, 0x80, 0x83, 0x73, 0x72, 0x9c,
	0xdb, 0xa0, 0x8f, 0x02, 0x1d, 0xad, 0xbf, 0x4f, 0x27, 0xef, 0x4a, 0x86, 0x27, 0xef, 0x67, 0xd8,
	0x9a, 0xb7, 0xfd, 0x42, 0x06, 0xa7, 0x8a, 0xe6, 0x4d, 0xff, 0x00, 0xd3, 0xbd, 0x02, 0x8a, 0x03,
	0xa7, 0x8a, 0xfa, 0x5d, 0x73, 0xf6, 0x68, 0x19, 0xf7, 0x0b, 0xf1, 0x43, 0x54, 0xe3, 0x6f, 0xfe,
	0x34, 0x5b, 0x85, 0xff, 0x87, 0x05, 0xe9, 0x83, 0xf8, 0x11, 0x9d, 0xf0, 0x97, 0x41, 0x51, 0xd7,
	0x21, 0xce, 0xd5, 0x4b, 0x08, 0x1d, 0x28, 0x67, 0x94, 0x8d, 0xb5, 0xf8, 0x71, 0x8b, 0x46, 0x3c,
	0x90, 0xbe, 0x57, 0x09, 0xf9, 0x13, 0x8c, 0x21, 0x2a, 0xd1, 0x99, 0x3a, 0x16, 0x3f, 0x69, 0xd1,
	0x27, 0x00, 0x44, 0xb7, 0x40, 0x02, 0x5e, 0x32, 0x9f, 0xc8, 0x38, 0xb7, 0x56, 0xc7, 0x41, 0x27,
	0xe2, 0xa7, 0x2d, 0xa4, 0xb3, 0x98, 0xf9, 0xe4, 0x66, 0x2d, 0xe4, 0x97, 0x61, 0x9c, 0x4c, 0xa4,
	0xd3, 0x3d, 0xe3, 0x83, 0x76, 0x3a, 0x11, 0x3f, 0x23, 0x18, 0x18, 0x47, 0x8d, 0x94, 0x5f, 0x62,
	0xf3, 0x80, 0xeb, 0xe6, 0xa5, 0x4d, 0xc4, 0xcf, 0x09, 0x32, 0x97, 0xf9, 0xe4, 0x06, 0x08, 0xf8,
	0x35, 0x76, 0x7e, 0x24, 0x96, 0xc1, 0xcb, 0x80, 0x81, 0xf1, 0x26, 0xb7, 0xe2, 0x17, 0x44, 0xec,
	0xec, 0x30, 0xaa, 0xc9, 0x6d, 0x54, 0x69, 0xf9, 0x16, 0x5b, 0xf1, 0xae, 0xd7, 0x05, 0xcb, 0xd4,
	0xf4, 0x4a, 0x88, 0xff, 0x4b, 0x72, 0xbe, 0x0c, 0xf2, 0x9b, 0x8d, 0x18, 0x96, 0x8b, 0x48, 0x3a,
	0x22, 0xff, 0xaa, 0x5a, 0x2e, 0x88, 0xe8, 0x68, 0x7c, 0x91, 0xcd, 0xa1, 0x5e, 0xdb, 0x44, 0xfc,
	0x9a, 0xb4, 0xa7, 0x41, 0x70, 0xdb, 0x26, 0x7c, 0x83, 0x2d, 0xd4, 0xb6, 0xa1, 0xf4, 0xe2, 0x37,
	0x94, 0x76, 0x56, 0x19, 0x87, 0xd2, 0xe3, 0xdb, 0x75, 0x12, 0x9a, 0x6b, 0x1c, 0x24, 0xf4, 0x95,
	0x58, 0x15, 0xe2, 0xb7, 0x0d, 0x93, 0x0e, 0x2a, 0x3a, 0x45, 0x7a, 0x53, 0x15, 0x9b, 0x3b, 0x6c,
	0xb1, 0x6e, 0x3d, 0x50, 0x55, 0xfc, 0x1c, 0x3b, 0xe5, 0x75, 0x9c, 0xdb, 0x44, 0x50, 0xd8, 0xea,
	0x09, 0x18, 0x5b, 0x65, 0xf3, 0x4a, 0x77, 0x82, 0x66, 0x94, 0xa1, 0x64, 0xf3, 0x29, 0xb6, 0x00,
	0x01, 0x6d, 0x4f, 0x86, 0xe3, 0x42, 0xf3, 0x75, 0x76, 0x72, 0xa0, 0xb2, 0xb2, 0xbe, 0xf6, 0xa1,
	0x87, 0xcd, 0x7f, 0x9e, 0x1a, 0x5e, 0x16, 0x51, 0xff, 0x97, 0x74, 0x4b, 0xf5, 0x14, 0x5b, 0xc2,
	0x1f, 0x71, 0x9e, 0xa1, 0x7d, 0x65, 0xb6, 0x58, 0x0b, 0x0f, 0xc0, 0xe7, 0x1f, 0x5b, 0x6c, 0xd5,
	0x78, 0x03, 0x7d, 0xd4, 0x07, 0xa8, 0x1a, 0xe8, 0xcf, 0x27, 0xb0, 0x3f, 0x67, 0x9f, 0x78, 0x7f,
	0x1e, 0x59, 0x5c, 0xb4, 0x0c, 0x2c, 0xda, 0x15, 0x89, 0x76, 0xc2, 0xff, 0xd0, 0xaa, 0x2e, 0xab,
	0x1a, 0x47, 0x89, 0x78, 0xe4, 0x21, 0xf0, 0x5a, 0xca, 0xf1, 0xb0, 0x85, 0x80, 0x76, 0xc2, 0x7f,
	0xdf, 0x62, 0x4b, 0xdd, 0x5e, 0x21, 0x95, 0x97, 0x34, 0x72, 0x8a, 0x47, 0x1f, 0x02, 0xa9, 0x85,
	0x6e, 0xaf, 0xb8, 0xee, 0xf7, 0x90, 0x00, 0x66, 0x4a, 0x9b, 0x9e, 0x1b, 0x25, 0x75, 0xf2, 0x61,
	0x64, 0x0a, 0x49, 0x34, 0xb4, 0xfe, 0xd4, 0x62, 0xbc, 0x69, 0x2d, 0x4d, 0x79, 0x89, 0x53, 0x0f,
	0x81, 0xd9, 0x5a, 0xc3, 0xa3, 0x2e, 0xb0, 0xcd, 0x7f, 0x9d, 0x60, 0xcb, 0xe3, 0xbb, 0x86, 0xff,
	0xbd, 0xc5, 0x26, 0x06, 0x28, 0x59, 0x6f, 0x15, 0xdc, 0x3a, 0x0b, 0x57, 0xca, 0x07, 0x7c, 0xa7,
	0x42, 0xf1, 0xa3, 0x73, 0xe3, 0xac, 0xee, 0x56, 0xa4, 0x60, 0xbe, 0xad, 0x6e, 0xa7, 0xd2, 0x4c,
	0xf5, 0x70, 0xd7, 0xce, 0x45, 0x8c, 0x44, 0x3b, 0x99, 0xea, 0x41, 0xdf, 0xa1, 0x27, 0xdc, 0x39,
	0x4b, 0x51, 0xf5, 0x04, 0xad, 0x3a, 0xce, 0x94, 0xf7, 0x70, 0xb0, 0xc0, 0xfa, 0x9d, 0x8b, 0x86,
	0x02, 0xfe, 0x18, 0x9b, 0xc7, 0x29, 0x1e, 0xc7, 0x85, 0x93, 0xd4, 0xc7, 0x41, 0x00, 0x53, 0xc2,
	0x66, 0x8f, 0x9d, 0x9f, 0x9a, 0xaa, 0xa4, 0xb6, 0xc1, 0xe1, 0xbd, 0xc3, 0x50, 0xd4, 0x34, 0x9c,
	0xa5, 0x68, 0xb1, 0x9e, 0xb9, 0xb0, 0xe1, 0x5c, 0x66, 0x2b, 0x43, 0x14, 0xb5, 0x33, 0x20, 0xbe,
	0x18, 0x2d, 0xd5, 0xb0, 0xf7, 0xb0, 0xad, 0xfd, 0xf7, 0x04, 0x5b, 0x9b, 0x8a, 0xc4, 0xff, 0xda,
	0x62, 0x6b, 0x85, 0x33, 0x78, 0x23, 0x3e, 0x9c, 0x27, 0xe9, 0xed, 0x1c, 0x3d, 0xf8, 0x79, 0x92,
	0x56, 0x1e, 0xad, 0x54, 0x94, 0x6e, 0xd5, 0xc3, 0xe5, 0x3f, 0x5a, 0x4c, 0x50, 0x0f, 0x1f, 0x23,
	0x4a, 0xdf, 0xf4, 0x13, 0x78, 0x3f, 0xf7, 0xf0, 0xd8, 0x9e, 0x6d, 0x98, 0xd5, 0x7c, 0x61, 0xa6,
	0xd8, 0xfc, 0xf7, 0x69, 0xc6, 0xa7, 0x2f, 0x1e, 0xe1, 0xbb, 0x37, 0x7c, 0xaa, 0xef, 0x82, 0x5b,
	0xcd, 0x98, 0x47, 0xf7, 0x91, 0xd5, 0x25, 0xf0, 0xb3, 0x34, 0x13, 0x56, 0xd8, 0x7a, 0x04, 0xa2,
	0xba, 0x5c, 0x6d, 0xc0, 0x23, 0x97, 0xdb, 0xa5, 0x85, 0xc9, 0x6b, 0xfc, 0xaa, 0x15, 0x6b, 0x75,
	0x2e, 0xe2, 0xa8, 0xbb, 0x33, 0x7a, 0xeb, 0x09, 0x33, 0xbb, 0x57, 0x03, 0x9d, 0xc8, 0x99, 0x76,
	0x54, 0xc8, 0xe7, 0x11, 0xf1, 0xee, 0xb4, 0xf1, 0x8c, 0xcb, 0xed, 0xe1, 0x0d, 0xd9, 0x49, 0x5c,
	0xd0, 0xb9, 0xd9, 0x17, 0xe3, 0xb0, 0x2e, 0x8a, 0x8b, 0x16, 0x65, 0x41, 0x36, 0xa7, 0x68, 0x54,
	0x44, 0x4d, 0x87, 0x14, 0x88, 0x7e, 0x83, 0x5d, 0x9a, 0x08, 0x64, 0x6c, 0x9c, 0x95, 0x89, 0x96,
	0x70, 0x5a, 0xf6, 0xe2, 0x34, 0xf2, 0xbc, 0x30, 0x16, 0xab, 0x4d, 0x88, 0x0e, 0x00, 0x66, 0xdd,
	0xe1, 0x57, 0x7f, 0x04, 0xca, 0xbc, 0x12, 0x73, 0x33, 0xae, 0xd2, 0x3b, 0xa4, 0xdf, 0xf5, 0x8a,
	0xbf, 0xc5, 0x9e, 0xbc, 0xbf, 0x71, 0x9d, 0xaa, 0xf9, 0x19, 0xb7, 0xe0, 0x43, 0x1f, 0x55, 0xc2,
	0x5e, 0x9f, 0xba, 0xd2, 0xd7, 0x47, 0x41, 0x3b, 0xab, 0x32, 0xe4, 0xc1, 0x90, 0x87, 0x18, 0xf3,
	0x71, 0xbb, 0x02, 0x00, 0x91, 0xb7, 0xa7, 0xee, 0xe3, 0x47, 0xcd, 0x6b, 0x26, 0x0b, 0xc8, 0xe4,
	0x89, 0xfb, 0x79, 0xa9, 0xa8, 0x5c, 0x67, 0x8f, 0x4f, 0xf8, 0xca, 0x9d, 0xe9, 0x19, 0xab, 0xe0,
	0xd3, 0x92, 0xe6, 0x4e, 0x2c, 0xa2, 0x9b, 0xf1, 0x3f, 0x0f, 0xec, 0x37, 0x90, 0x9d, 0xdc, 0xf1,
	0xbf, 0xb5, 0xa6, 0xde, 0x3f, 0x5d, 0xe1, 0x42, 0xa5, 0x88, 0x25, 0xec, 0x20, 0xfd, 0x07, 0xb6,
	0x27, 0x21, 0xf4, 0x44, 0xb9, 0xe1, 0xb5, 0x31, 0x90, 0x99, 0x91, 0x78, 0xaa, 0xf7, 0x6a, 0xf3,
	0x2d, 0xe3, 0x18, 0x37, 0x9e, 0x78, 0x34, 0xa4, 0x5d, 0xd8, 0x3d, 0x85, 0x5f, 0x8d, 0xab, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x0f, 0x8b, 0xce, 0xbd, 0x1c, 0x00, 0x00,
}
