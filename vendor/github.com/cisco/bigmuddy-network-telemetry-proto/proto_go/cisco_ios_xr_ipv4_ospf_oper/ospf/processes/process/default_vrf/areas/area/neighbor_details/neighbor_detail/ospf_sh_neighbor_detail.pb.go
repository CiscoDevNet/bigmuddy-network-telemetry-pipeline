// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_neighbor_detail.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_neighbor_details_neighbor_detail is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_neighbor_detail.proto

It has these top-level messages:
	OspfShNeighborDetail_KEYS
	OspfShNeighborDetail
	OspfShNeighborRetrans
	OspfShNeighborBfd
	OspfShNeighbor
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_neighbor_details_neighbor_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Neighbor Detailed Information
type OspfShNeighborDetail_KEYS struct {
	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	AreaId          uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	InterfaceName   string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,4,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *OspfShNeighborDetail_KEYS) Reset()                    { *m = OspfShNeighborDetail_KEYS{} }
func (m *OspfShNeighborDetail_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighborDetail_KEYS) ProtoMessage()               {}
func (*OspfShNeighborDetail_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShNeighborDetail_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShNeighborDetail_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *OspfShNeighborDetail_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *OspfShNeighborDetail_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type OspfShNeighborDetail struct {
	// Neighbor summary information
	NeighborSummary *OspfShNeighbor `protobuf:"bytes,50,opt,name=neighbor_summary,json=neighborSummary" json:"neighbor_summary,omitempty"`
	// Area ID string in decimal or dotted-decimal format
	NeighborAreaId string `protobuf:"bytes,51,opt,name=neighbor_area_id,json=neighborAreaId" json:"neighbor_area_id,omitempty"`
	// Number of state changes
	StateChangeCount uint32 `protobuf:"varint,52,opt,name=state_change_count,json=stateChangeCount" json:"state_change_count,omitempty"`
	// Cost of path to this neighbor
	NeighborCost uint32 `protobuf:"varint,53,opt,name=neighbor_cost,json=neighborCost" json:"neighbor_cost,omitempty"`
	// If true, filter outgoing LSAs
	NeighborFilter bool `protobuf:"varint,54,opt,name=neighbor_filter,json=neighborFilter" json:"neighbor_filter,omitempty"`
	// Address of designated router
	NeighborDesignatedRouterAddress string `protobuf:"bytes,55,opt,name=neighbor_designated_router_address,json=neighborDesignatedRouterAddress" json:"neighbor_designated_router_address,omitempty"`
	// Address of backup designated router
	NeighborBackupDesignatedRouterAddress string `protobuf:"bytes,56,opt,name=neighbor_backup_designated_router_address,json=neighborBackupDesignatedRouterAddress" json:"neighbor_backup_designated_router_address,omitempty"`
	// Interface type
	InterfaceType string `protobuf:"bytes,57,opt,name=interface_type,json=interfaceType" json:"interface_type,omitempty"`
	// Poll interval (s)
	PollInterval uint32 `protobuf:"varint,58,opt,name=poll_interval,json=pollInterval" json:"poll_interval,omitempty"`
	// For NBMA networks, amount of time remaining in seconds before the next poll interval expires and Hello is sent (s)
	NextPollInterval uint32 `protobuf:"varint,59,opt,name=next_poll_interval,json=nextPollInterval" json:"next_poll_interval,omitempty"`
	//  This is bitmaks of neighbor's option field received
	NeighborOption uint32 `protobuf:"varint,60,opt,name=neighbor_option,json=neighborOption" json:"neighbor_option,omitempty"`
	// Number of pending events
	PendingEvents uint32 `protobuf:"varint,61,opt,name=pending_events,json=pendingEvents" json:"pending_events,omitempty"`
	// This is a bitmask of Link Local signalling options received from the neighbor
	NeighborLlsOption uint32 `protobuf:"varint,62,opt,name=neighbor_lls_option,json=neighborLlsOption" json:"neighbor_lls_option,omitempty"`
	// Out-Of-Bound resynchronization in progress
	OobResynchronization bool `protobuf:"varint,63,opt,name=oob_resynchronization,json=oobResynchronization" json:"oob_resynchronization,omitempty"`
	// For cisco NSF, the router is either Requester or Receiver
	NsfRouterState string `protobuf:"bytes,64,opt,name=nsf_router_state,json=nsfRouterState" json:"nsf_router_state,omitempty"`
	// The amount of time in seconds since last time Out-Of-Band resynchronization was done with this neighbor
	LastOobTime uint32 `protobuf:"varint,65,opt,name=last_oob_time,json=lastOobTime" json:"last_oob_time,omitempty"`
	// Neighbor BFD information
	NeighborBfdInformation *OspfShNeighborBfd `protobuf:"bytes,66,opt,name=neighbor_bfd_information,json=neighborBfdInformation" json:"neighbor_bfd_information,omitempty"`
	// Retransmission information with this neighbor
	NeighborRetransmissionInformation *OspfShNeighborRetrans `protobuf:"bytes,67,opt,name=neighbor_retransmission_information,json=neighborRetransmissionInformation" json:"neighbor_retransmission_information,omitempty"`
	// LFA Interface
	LfaInterface string `protobuf:"bytes,68,opt,name=lfa_interface,json=lfaInterface" json:"lfa_interface,omitempty"`
	// LFA Next Hop
	LfaNextHop string `protobuf:"bytes,69,opt,name=lfa_next_hop,json=lfaNextHop" json:"lfa_next_hop,omitempty"`
	// LFA Neighbor ID
	LfaNeighborId string `protobuf:"bytes,70,opt,name=lfa_neighbor_id,json=lfaNeighborId" json:"lfa_neighbor_id,omitempty"`
	// LFA Neighbor Revision
	LfaNeighborRevision uint32 `protobuf:"varint,71,opt,name=lfa_neighbor_revision,json=lfaNeighborRevision" json:"lfa_neighbor_revision,omitempty"`
	// Ack List Count
	NeighborAckListCount uint32 `protobuf:"varint,72,opt,name=neighbor_ack_list_count,json=neighborAckListCount" json:"neighbor_ack_list_count,omitempty"`
	// Ack List High Watermark
	NeighborAckListHighWatermark uint32 `protobuf:"varint,73,opt,name=neighbor_ack_list_high_watermark,json=neighborAckListHighWatermark" json:"neighbor_ack_list_high_watermark,omitempty"`
	// SR Adjacency SID Label
	AdjacencySidLabel uint32 `protobuf:"varint,74,opt,name=adjacency_sid_label,json=adjacencySidLabel" json:"adjacency_sid_label,omitempty"`
	// SR Adjacency SID Protected
	AdjacencySidProtected bool `protobuf:"varint,75,opt,name=adjacency_sid_protected,json=adjacencySidProtected" json:"adjacency_sid_protected,omitempty"`
	// SR Adjacency SID Unprotected Label
	AdjacencySidUnprotectedLabel uint32 `protobuf:"varint,76,opt,name=adjacency_sid_unprotected_label,json=adjacencySidUnprotectedLabel" json:"adjacency_sid_unprotected_label,omitempty"`
}

func (m *OspfShNeighborDetail) Reset()                    { *m = OspfShNeighborDetail{} }
func (m *OspfShNeighborDetail) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighborDetail) ProtoMessage()               {}
func (*OspfShNeighborDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShNeighborDetail) GetNeighborSummary() *OspfShNeighbor {
	if m != nil {
		return m.NeighborSummary
	}
	return nil
}

func (m *OspfShNeighborDetail) GetNeighborAreaId() string {
	if m != nil {
		return m.NeighborAreaId
	}
	return ""
}

func (m *OspfShNeighborDetail) GetStateChangeCount() uint32 {
	if m != nil {
		return m.StateChangeCount
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborCost() uint32 {
	if m != nil {
		return m.NeighborCost
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborFilter() bool {
	if m != nil {
		return m.NeighborFilter
	}
	return false
}

func (m *OspfShNeighborDetail) GetNeighborDesignatedRouterAddress() string {
	if m != nil {
		return m.NeighborDesignatedRouterAddress
	}
	return ""
}

func (m *OspfShNeighborDetail) GetNeighborBackupDesignatedRouterAddress() string {
	if m != nil {
		return m.NeighborBackupDesignatedRouterAddress
	}
	return ""
}

func (m *OspfShNeighborDetail) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *OspfShNeighborDetail) GetPollInterval() uint32 {
	if m != nil {
		return m.PollInterval
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNextPollInterval() uint32 {
	if m != nil {
		return m.NextPollInterval
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborOption() uint32 {
	if m != nil {
		return m.NeighborOption
	}
	return 0
}

func (m *OspfShNeighborDetail) GetPendingEvents() uint32 {
	if m != nil {
		return m.PendingEvents
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborLlsOption() uint32 {
	if m != nil {
		return m.NeighborLlsOption
	}
	return 0
}

func (m *OspfShNeighborDetail) GetOobResynchronization() bool {
	if m != nil {
		return m.OobResynchronization
	}
	return false
}

func (m *OspfShNeighborDetail) GetNsfRouterState() string {
	if m != nil {
		return m.NsfRouterState
	}
	return ""
}

func (m *OspfShNeighborDetail) GetLastOobTime() uint32 {
	if m != nil {
		return m.LastOobTime
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborBfdInformation() *OspfShNeighborBfd {
	if m != nil {
		return m.NeighborBfdInformation
	}
	return nil
}

func (m *OspfShNeighborDetail) GetNeighborRetransmissionInformation() *OspfShNeighborRetrans {
	if m != nil {
		return m.NeighborRetransmissionInformation
	}
	return nil
}

func (m *OspfShNeighborDetail) GetLfaInterface() string {
	if m != nil {
		return m.LfaInterface
	}
	return ""
}

func (m *OspfShNeighborDetail) GetLfaNextHop() string {
	if m != nil {
		return m.LfaNextHop
	}
	return ""
}

func (m *OspfShNeighborDetail) GetLfaNeighborId() string {
	if m != nil {
		return m.LfaNeighborId
	}
	return ""
}

func (m *OspfShNeighborDetail) GetLfaNeighborRevision() uint32 {
	if m != nil {
		return m.LfaNeighborRevision
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborAckListCount() uint32 {
	if m != nil {
		return m.NeighborAckListCount
	}
	return 0
}

func (m *OspfShNeighborDetail) GetNeighborAckListHighWatermark() uint32 {
	if m != nil {
		return m.NeighborAckListHighWatermark
	}
	return 0
}

func (m *OspfShNeighborDetail) GetAdjacencySidLabel() uint32 {
	if m != nil {
		return m.AdjacencySidLabel
	}
	return 0
}

func (m *OspfShNeighborDetail) GetAdjacencySidProtected() bool {
	if m != nil {
		return m.AdjacencySidProtected
	}
	return false
}

func (m *OspfShNeighborDetail) GetAdjacencySidUnprotectedLabel() uint32 {
	if m != nil {
		return m.AdjacencySidUnprotectedLabel
	}
	return 0
}

// OSPF Neighbor Retransmission Information
type OspfShNeighborRetrans struct {
	// Number of DBD retransmissions during last exchange
	DbdRetransmissionCount uint32 `protobuf:"varint,1,opt,name=dbd_retransmission_count,json=dbdRetransmissionCount" json:"dbd_retransmission_count,omitempty"`
	// Total number of DBD retransmissions for this neighbor
	DbdRetransmissionTotalCount uint32 `protobuf:"varint,2,opt,name=dbd_retransmission_total_count,json=dbdRetransmissionTotalCount" json:"dbd_retransmission_total_count,omitempty"`
	// Area scope LSA's flood index
	AreaFloodingIndex uint32 `protobuf:"varint,3,opt,name=area_flooding_index,json=areaFloodingIndex" json:"area_flooding_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,4,opt,name=as_flood_index,json=asFloodIndex" json:"as_flood_index,omitempty"`
	// Retransmission queue length
	NeighborRetransmissionCount uint32 `protobuf:"varint,5,opt,name=neighbor_retransmission_count,json=neighborRetransmissionCount" json:"neighbor_retransmission_count,omitempty"`
	// Number of retransmissions for this neighbor
	NumberOfRetransmissions uint32 `protobuf:"varint,6,opt,name=number_of_retransmissions,json=numberOfRetransmissions" json:"number_of_retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFloodInformation uint32 `protobuf:"varint,7,opt,name=area_first_flood_information,json=areaFirstFloodInformation" json:"area_first_flood_information,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodInformationIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_information_index,json=areaFirstFloodInformationIndex" json:"area_first_flood_information_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFloodInformation uint32 `protobuf:"varint,9,opt,name=as_first_flood_information,json=asFirstFloodInformation" json:"as_first_flood_information,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodInformationIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_information_index,json=asFirstFloodInformationIndex" json:"as_first_flood_information_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFloodInformation uint32 `protobuf:"varint,11,opt,name=area_next_flood_information,json=areaNextFloodInformation" json:"area_next_flood_information,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodInformationIndex uint32 `protobuf:"varint,12,opt,name=area_next_flood_information_index,json=areaNextFloodInformationIndex" json:"area_next_flood_information_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFloodInformation uint32 `protobuf:"varint,13,opt,name=as_next_flood_information,json=asNextFloodInformation" json:"as_next_flood_information,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodInformationIndex uint32 `protobuf:"varint,14,opt,name=as_next_flood_information_index,json=asNextFloodInformationIndex" json:"as_next_flood_information_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,15,opt,name=last_retransmission_length,json=lastRetransmissionLength" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,16,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,17,opt,name=last_retransmission_time,json=lastRetransmissionTime" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,18,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,19,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer" json:"lsa_retransmission_timer,omitempty"`
}

func (m *OspfShNeighborRetrans) Reset()                    { *m = OspfShNeighborRetrans{} }
func (m *OspfShNeighborRetrans) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighborRetrans) ProtoMessage()               {}
func (*OspfShNeighborRetrans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShNeighborRetrans) GetDbdRetransmissionCount() uint32 {
	if m != nil {
		return m.DbdRetransmissionCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetDbdRetransmissionTotalCount() uint32 {
	if m != nil {
		return m.DbdRetransmissionTotalCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFloodingIndex() uint32 {
	if m != nil {
		return m.AreaFloodingIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFloodIndex() uint32 {
	if m != nil {
		return m.AsFloodIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetNeighborRetransmissionCount() uint32 {
	if m != nil {
		return m.NeighborRetransmissionCount
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetNumberOfRetransmissions() uint32 {
	if m != nil {
		return m.NumberOfRetransmissions
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFirstFloodInformation() uint32 {
	if m != nil {
		return m.AreaFirstFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaFirstFloodInformationIndex() uint32 {
	if m != nil {
		return m.AreaFirstFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFirstFloodInformation() uint32 {
	if m != nil {
		return m.AsFirstFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsFirstFloodInformationIndex() uint32 {
	if m != nil {
		return m.AsFirstFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaNextFloodInformation() uint32 {
	if m != nil {
		return m.AreaNextFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAreaNextFloodInformationIndex() uint32 {
	if m != nil {
		return m.AreaNextFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsNextFloodInformation() uint32 {
	if m != nil {
		return m.AsNextFloodInformation
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetAsNextFloodInformationIndex() uint32 {
	if m != nil {
		return m.AsNextFloodInformationIndex
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if m != nil {
		return m.LastRetransmissionLength
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if m != nil {
		return m.MaximumRetransmissionLength
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if m != nil {
		return m.LastRetransmissionTime
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *OspfShNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if m != nil {
		return m.LsaRetransmissionTimer
	}
	return 0
}

// OSPF Neighbor BFD information
type OspfShNeighborBfd struct {
	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode" json:"bfd_intf_enable_mode,omitempty"`
	// Status of the BFD Session
	BfdStatusFlag uint32 `protobuf:"varint,2,opt,name=bfd_status_flag,json=bfdStatusFlag" json:"bfd_status_flag,omitempty"`
}

func (m *OspfShNeighborBfd) Reset()                    { *m = OspfShNeighborBfd{} }
func (m *OspfShNeighborBfd) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighborBfd) ProtoMessage()               {}
func (*OspfShNeighborBfd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OspfShNeighborBfd) GetBfdIntfEnableMode() uint32 {
	if m != nil {
		return m.BfdIntfEnableMode
	}
	return 0
}

func (m *OspfShNeighborBfd) GetBfdStatusFlag() uint32 {
	if m != nil {
		return m.BfdStatusFlag
	}
	return 0
}

// OSPF Neighbor Summary Information
type OspfShNeighbor struct {
	// Neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	// Neighbor IP Address
	NeighborAddress string `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Interface via which the neighbor is seen
	NeighborInterfaceName string `protobuf:"bytes,3,opt,name=neighbor_interface_name,json=neighborInterfaceName" json:"neighbor_interface_name,omitempty"`
	// Neighbor's DR priority
	NeighborDrPriority uint32 `protobuf:"varint,4,opt,name=neighbor_dr_priority,json=neighborDrPriority" json:"neighbor_dr_priority,omitempty"`
	// Neighbor's state
	NeighborState string `protobuf:"bytes,5,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	// Designated Router state
	DrBdrState string `protobuf:"bytes,6,opt,name=dr_bdr_state,json=drBdrState" json:"dr_bdr_state,omitempty"`
	// Time until neighbor's dead timer expires (s)
	NeighborDeadTimer uint32 `protobuf:"varint,7,opt,name=neighbor_dead_timer,json=neighborDeadTimer" json:"neighbor_dead_timer,omitempty"`
	// Amount of time since the adjacency is up (s)
	NeighborUpTime uint32 `protobuf:"varint,8,opt,name=neighbor_up_time,json=neighborUpTime" json:"neighbor_up_time,omitempty"`
	// Interface is MADJ
	NeighborMadjInterface bool `protobuf:"varint,9,opt,name=neighbor_madj_interface,json=neighborMadjInterface" json:"neighbor_madj_interface,omitempty"`
	// Neighbor BFD information
	NeighborBfdInformation *OspfShNeighborBfd `protobuf:"bytes,10,opt,name=neighbor_bfd_information,json=neighborBfdInformation" json:"neighbor_bfd_information,omitempty"`
}

func (m *OspfShNeighbor) Reset()                    { *m = OspfShNeighbor{} }
func (m *OspfShNeighbor) String() string            { return proto.CompactTextString(m) }
func (*OspfShNeighbor) ProtoMessage()               {}
func (*OspfShNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OspfShNeighbor) GetNeighborId() string {
	if m != nil {
		return m.NeighborId
	}
	return ""
}

func (m *OspfShNeighbor) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *OspfShNeighbor) GetNeighborInterfaceName() string {
	if m != nil {
		return m.NeighborInterfaceName
	}
	return ""
}

func (m *OspfShNeighbor) GetNeighborDrPriority() uint32 {
	if m != nil {
		return m.NeighborDrPriority
	}
	return 0
}

func (m *OspfShNeighbor) GetNeighborState() string {
	if m != nil {
		return m.NeighborState
	}
	return ""
}

func (m *OspfShNeighbor) GetDrBdrState() string {
	if m != nil {
		return m.DrBdrState
	}
	return ""
}

func (m *OspfShNeighbor) GetNeighborDeadTimer() uint32 {
	if m != nil {
		return m.NeighborDeadTimer
	}
	return 0
}

func (m *OspfShNeighbor) GetNeighborUpTime() uint32 {
	if m != nil {
		return m.NeighborUpTime
	}
	return 0
}

func (m *OspfShNeighbor) GetNeighborMadjInterface() bool {
	if m != nil {
		return m.NeighborMadjInterface
	}
	return false
}

func (m *OspfShNeighbor) GetNeighborBfdInformation() *OspfShNeighborBfd {
	if m != nil {
		return m.NeighborBfdInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*OspfShNeighborDetail_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.neighbor_details.neighbor_detail.ospf_sh_neighbor_detail_KEYS")
	proto.RegisterType((*OspfShNeighborDetail)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.neighbor_details.neighbor_detail.ospf_sh_neighbor_detail")
	proto.RegisterType((*OspfShNeighborRetrans)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.neighbor_details.neighbor_detail.ospf_sh_neighbor_retrans")
	proto.RegisterType((*OspfShNeighborBfd)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.neighbor_details.neighbor_detail.ospf_sh_neighbor_bfd")
	proto.RegisterType((*OspfShNeighbor)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.neighbor_details.neighbor_detail.ospf_sh_neighbor")
}

func init() { proto.RegisterFile("ospf_sh_neighbor_detail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdb, 0x72, 0x1c, 0x35,
	0x10, 0xad, 0x0d, 0x89, 0x13, 0xcb, 0x5e, 0xc7, 0x51, 0xec, 0x58, 0xb9, 0x7a, 0xb3, 0x21, 0xe0,
	0x54, 0x51, 0x0b, 0x95, 0x1b, 0xb9, 0x87, 0xf8, 0x86, 0x9d, 0x38, 0x97, 0xb2, 0x93, 0x02, 0x9e,
	0x54, 0xda, 0x91, 0x66, 0x57, 0xf6, 0xcc, 0x68, 0x4a, 0xd2, 0x1a, 0x9b, 0xe2, 0x81, 0x07, 0xfe,
	0x85, 0x17, 0xfe, 0x80, 0x27, 0x3e, 0x82, 0x0f, 0xe0, 0x1f, 0xf8, 0x00, 0x4a, 0x2d, 0xed, 0xcc,
	0xce, 0x7a, 0xd7, 0x8f, 0x84, 0x17, 0x97, 0xb7, 0xfb, 0x9c, 0xd6, 0xe9, 0x9e, 0x96, 0x5a, 0x42,
	0x57, 0x95, 0xc9, 0x63, 0x6a, 0xba, 0x34, 0x13, 0xb2, 0xd3, 0x6d, 0x2b, 0x4d, 0xb9, 0xb0, 0x4c,
	0x26, 0xad, 0x5c, 0x2b, 0xab, 0xf0, 0x6e, 0x24, 0x4d, 0xa4, 0xa8, 0x54, 0x86, 0x1e, 0x68, 0x2a,
	0xf3, 0xfd, 0xbb, 0x14, 0x08, 0x2a, 0x17, 0xba, 0xe5, 0xfe, 0x73, 0xb8, 0x48, 0x18, 0x23, 0x4c,
	0xff, 0xbf, 0x16, 0x17, 0x31, 0xeb, 0x25, 0x96, 0xee, 0xeb, 0xb8, 0xc5, 0xb4, 0x60, 0x06, 0xfe,
	0xb6, 0x86, 0x16, 0x30, 0xc3, 0x86, 0xe6, 0xef, 0x35, 0x74, 0x65, 0x8c, 0x1a, 0xfa, 0x6a, 0xed,
	0x87, 0x1d, 0x7c, 0x1d, 0x4d, 0x87, 0x35, 0x68, 0xc6, 0x52, 0x41, 0x6a, 0x8d, 0xda, 0xd2, 0xe4,
	0xf6, 0x54, 0xb0, 0xbd, 0x61, 0xa9, 0xc0, 0x0b, 0xe8, 0xb4, 0x5b, 0x8c, 0x4a, 0x4e, 0x4e, 0x34,
	0x6a, 0x4b, 0xf5, 0xed, 0x09, 0xf7, 0x73, 0x93, 0xe3, 0x9b, 0x68, 0x46, 0x66, 0x56, 0xe8, 0x98,
	0x45, 0xc2, 0xb3, 0x3f, 0x01, 0x76, 0xbd, 0xb0, 0x02, 0xff, 0x16, 0x9a, 0x2d, 0x96, 0x66, 0x9c,
	0x6b, 0x61, 0x0c, 0x39, 0x09, 0xc0, 0xb3, 0x7d, 0xfb, 0x0b, 0x6f, 0x6e, 0xfe, 0x53, 0x47, 0x0b,
	0x63, 0xe4, 0xe2, 0xdf, 0x6a, 0x03, 0x71, 0x4c, 0x2f, 0x4d, 0x99, 0x3e, 0x24, 0xb7, 0x1b, 0xb5,
	0xa5, 0xa9, 0xdb, 0x3f, 0xb7, 0xfe, 0xbb, 0x92, 0xb6, 0x86, 0xf5, 0x95, 0x59, 0xec, 0x78, 0x51,
	0x78, 0x69, 0x30, 0xe1, 0x50, 0xb9, 0x3b, 0x90, 0xf0, 0x4c, 0x91, 0xb0, 0xaf, 0xe0, 0x17, 0x08,
	0x1b, 0xcb, 0xac, 0xa0, 0x51, 0x97, 0x65, 0x1d, 0x41, 0x23, 0xd5, 0xcb, 0x2c, 0xb9, 0x0b, 0x55,
	0x9e, 0x05, 0xcf, 0x0a, 0x38, 0x56, 0x9c, 0x1d, 0xdf, 0x40, 0xf5, 0x22, 0x6e, 0xa4, 0x8c, 0x25,
	0xf7, 0x00, 0x38, 0xdd, 0x37, 0xae, 0x28, 0x63, 0xf1, 0xe7, 0xa8, 0xd0, 0x43, 0x63, 0x99, 0x58,
	0xa1, 0xc9, 0xfd, 0x46, 0x6d, 0xe9, 0x4c, 0xb9, 0xf6, 0x3a, 0x58, 0xf1, 0x2b, 0xd4, 0x1c, 0x48,
	0xcd, 0xc8, 0x4e, 0xc6, 0xac, 0xe0, 0x54, 0xab, 0x9e, 0x15, 0xe5, 0x87, 0xfa, 0x1a, 0x74, 0x2f,
	0xf6, 0x91, 0xab, 0x05, 0x70, 0x1b, 0x70, 0xe1, 0xc3, 0xe1, 0xef, 0xd1, 0xad, 0x22, 0x58, 0x9b,
	0x45, 0x7b, 0xbd, 0xfc, 0x98, 0x98, 0x0f, 0x20, 0xe6, 0xcd, 0x3e, 0x61, 0x19, 0xf0, 0xe3, 0x22,
	0x57, 0x9a, 0xcc, 0x1e, 0xe6, 0x82, 0x3c, 0x1c, 0x6a, 0xb2, 0xf7, 0x87, 0xb9, 0x70, 0xb5, 0xc9,
	0x55, 0x92, 0x50, 0xb0, 0xee, 0xb3, 0x84, 0x3c, 0xf2, 0xb5, 0x71, 0xc6, 0xcd, 0x60, 0x73, 0xe5,
	0xce, 0xc4, 0x81, 0xa5, 0x55, 0xe4, 0x63, 0x5f, 0x6e, 0xe7, 0x79, 0x37, 0x88, 0x1e, 0xac, 0xa4,
	0xca, 0xad, 0x54, 0x19, 0x79, 0x02, 0xd0, 0xa2, 0x92, 0x6f, 0xc1, 0xea, 0x24, 0xe6, 0x22, 0xe3,
	0x32, 0xeb, 0x50, 0xb1, 0x2f, 0x32, 0x6b, 0xc8, 0x53, 0xc0, 0xd5, 0x83, 0x75, 0x0d, 0x8c, 0xb8,
	0x85, 0xce, 0x17, 0xf1, 0x92, 0xc4, 0xf4, 0x63, 0x3e, 0x03, 0xec, 0xb9, 0xbe, 0x6b, 0x2b, 0x31,
	0x21, 0xec, 0x1d, 0x34, 0xaf, 0x54, 0x9b, 0x6a, 0x61, 0x0e, 0xb3, 0xa8, 0xab, 0x55, 0x26, 0x7f,
	0x62, 0xc0, 0x78, 0x0e, 0xdf, 0x73, 0x4e, 0xa9, 0xf6, 0xf6, 0xb0, 0x0f, 0x7a, 0xcf, 0xc4, 0xfd,
	0x8a, 0x43, 0x0b, 0x91, 0x6f, 0x42, 0xef, 0x99, 0xd8, 0x97, 0x76, 0xc7, 0x59, 0x71, 0x13, 0xd5,
	0x13, 0x66, 0x2c, 0x75, 0x6b, 0x58, 0x99, 0x0a, 0xf2, 0x02, 0x84, 0x4c, 0x39, 0xe3, 0x5b, 0xd5,
	0x7e, 0x2f, 0x53, 0x81, 0xff, 0xa8, 0x21, 0x52, 0x7e, 0xd7, 0x98, 0x53, 0x99, 0xc5, 0x4a, 0xa7,
	0x5e, 0xc6, 0x32, 0xec, 0xbd, 0x5f, 0x6a, 0x1f, 0x73, 0xf3, 0x39, 0x51, 0xdb, 0x17, 0x8a, 0x4e,
	0x8a, 0xf9, 0x66, 0x29, 0x10, 0xff, 0x55, 0x43, 0x37, 0x0a, 0xa0, 0x16, 0x56, 0xb3, 0xcc, 0xa4,
	0xd2, 0x18, 0xa9, 0xb2, 0x4a, 0x22, 0x2b, 0x90, 0xc8, 0xaf, 0x1f, 0x37, 0x91, 0xa0, 0x6f, 0xfb,
	0x7a, 0x71, 0xae, 0x54, 0x04, 0x0f, 0xe6, 0x75, 0x03, 0xd5, 0x93, 0x98, 0xd1, 0x62, 0x03, 0x90,
	0x55, 0xf8, 0xc0, 0xd3, 0x49, 0xcc, 0x36, 0xfb, 0x36, 0xdc, 0x40, 0xee, 0x37, 0x85, 0x7e, 0xef,
	0xaa, 0x9c, 0xac, 0x01, 0x06, 0x25, 0x31, 0x7b, 0x23, 0x0e, 0xec, 0x86, 0xca, 0xf1, 0x67, 0xe8,
	0xac, 0x47, 0x04, 0x05, 0x92, 0x93, 0x75, 0xbf, 0xb5, 0x00, 0xe4, 0xad, 0x9b, 0x1c, 0xdf, 0x46,
	0xf3, 0x15, 0x9c, 0x16, 0xfb, 0xd2, 0x49, 0x22, 0xdf, 0x42, 0xc3, 0x9c, 0x1f, 0x40, 0x6f, 0x07,
	0x17, 0xbe, 0x87, 0x16, 0xca, 0x23, 0x30, 0xda, 0xa3, 0x89, 0x34, 0x36, 0x9c, 0x6e, 0x1b, 0xc0,
	0x9a, 0x2b, 0x4e, 0xc2, 0x68, 0x6f, 0x4b, 0x1a, 0xeb, 0x4f, 0xb8, 0x75, 0xd4, 0x38, 0x4a, 0xeb,
	0xca, 0x4e, 0x97, 0xfe, 0xc8, 0xac, 0xd0, 0x29, 0xd3, 0x7b, 0x64, 0x13, 0xf8, 0x57, 0x86, 0xf8,
	0x1b, 0xb2, 0xd3, 0xfd, 0xae, 0x8f, 0x71, 0x5b, 0x8d, 0xf1, 0x5d, 0x16, 0x89, 0x2c, 0x3a, 0xa4,
	0x46, 0x72, 0x9a, 0xb0, 0xb6, 0x48, 0xc8, 0x4b, 0xbf, 0xd5, 0x0a, 0xd7, 0x8e, 0xe4, 0x5b, 0xce,
	0x81, 0xef, 0xa3, 0x85, 0x2a, 0xde, 0x4d, 0x6a, 0x11, 0x59, 0xc1, 0xc9, 0x2b, 0xd8, 0x6c, 0xf3,
	0x83, 0x9c, 0x77, 0x7d, 0x27, 0x5e, 0x43, 0x8b, 0x55, 0x5e, 0x2f, 0x2b, 0x98, 0x61, 0xcd, 0x2d,
	0x2f, 0x77, 0x90, 0xff, 0xa1, 0x04, 0xc1, 0xf2, 0xcd, 0x3f, 0x27, 0x11, 0x19, 0xd7, 0x10, 0xf8,
	0x01, 0x22, 0xbc, 0xcd, 0x87, 0xfb, 0xd7, 0xd7, 0xb2, 0x06, 0xc1, 0x2f, 0xf0, 0x36, 0xaf, 0x76,
	0x8b, 0xaf, 0xe6, 0x0a, 0xba, 0x36, 0x82, 0x69, 0x95, 0x65, 0x49, 0xe0, 0xfb, 0x79, 0x7e, 0xf9,
	0x08, 0xff, 0xbd, 0xc3, 0xf8, 0x20, 0xae, 0x94, 0x6e, 0x86, 0xc5, 0x89, 0x52, 0x70, 0xc4, 0xc9,
	0x8c, 0x8b, 0x03, 0x98, 0xf4, 0xae, 0x94, 0x5a, 0xb0, 0xf5, 0xe0, 0xd9, 0x74, 0x0e, 0xfc, 0x29,
	0x9a, 0x61, 0xc6, 0xa3, 0x03, 0xf4, 0xa4, 0x3f, 0x89, 0x99, 0x01, 0xa0, 0x47, 0x2d, 0xa3, 0xab,
	0xe3, 0x76, 0xa6, 0x57, 0x76, 0xca, 0x2b, 0x1b, 0xbd, 0x19, 0xbc, 0xb2, 0x47, 0xe8, 0x62, 0xd6,
	0x4b, 0xdb, 0x42, 0x53, 0x15, 0x0f, 0x05, 0x31, 0x64, 0x02, 0xf8, 0x0b, 0x1e, 0xf0, 0x36, 0xae,
	0xf2, 0x0d, 0x7e, 0x8e, 0xae, 0xf8, 0xac, 0xa4, 0x36, 0xb6, 0x50, 0x5b, 0x1e, 0x09, 0xa7, 0x81,
	0x7e, 0x11, 0xd2, 0x73, 0x90, 0x20, 0xbd, 0xdc, 0x83, 0x2f, 0x51, 0xf3, 0xb8, 0x00, 0x21, 0xf5,
	0x33, 0x10, 0xe6, 0xda, 0xd8, 0x30, 0xbe, 0x18, 0x8f, 0xd1, 0x25, 0x57, 0xb2, 0x31, 0x52, 0x26,
	0x7d, 0x26, 0xcc, 0x8c, 0x16, 0xb2, 0x8e, 0x1a, 0xe3, 0xc9, 0x41, 0x06, 0x0a, 0x3d, 0x68, 0x8e,
	0x11, 0xf1, 0x14, 0x5d, 0x86, 0x84, 0xe0, 0xc0, 0x38, 0xaa, 0x62, 0x0a, 0x42, 0x10, 0x07, 0x71,
	0xe7, 0xc7, 0x11, 0x19, 0x1b, 0xe8, 0xfa, 0x31, 0xf4, 0xa0, 0x63, 0x1a, 0x82, 0x5c, 0x1d, 0x17,
	0xc4, 0x0b, 0x79, 0x88, 0x2e, 0x32, 0x33, 0x4e, 0x46, 0xdd, 0x37, 0x3c, 0x33, 0x23, 0x45, 0xac,
	0xa2, 0xc5, 0xb1, 0xd4, 0x20, 0x61, 0xc6, 0xf7, 0xd5, 0xe8, 0x00, 0x5e, 0xc0, 0x13, 0x74, 0x09,
	0x06, 0xe3, 0x50, 0x5f, 0x26, 0x22, 0xeb, 0xd8, 0x2e, 0x39, 0xeb, 0x0b, 0xe1, 0x10, 0xd5, 0xa6,
	0xda, 0x02, 0xbf, 0xeb, 0xec, 0x94, 0x1d, 0xc8, 0xb4, 0x97, 0x8e, 0x09, 0x30, 0xeb, 0x15, 0x04,
	0xd0, 0xc8, 0x18, 0x0f, 0x10, 0x19, 0xa5, 0x00, 0xa6, 0xf4, 0x39, 0x5f, 0x81, 0xa3, 0xeb, 0xc3,
	0xc0, 0x7e, 0x86, 0x2e, 0x8f, 0x59, 0x1d, 0xc8, 0xd8, 0xb7, 0xf5, 0xc8, 0xb5, 0x81, 0xef, 0x56,
	0x36, 0x6c, 0x14, 0x57, 0x93, 0xf3, 0x61, 0x65, 0xc3, 0x8e, 0x12, 0x75, 0x53, 0xa1, 0xb9, 0x51,
	0xc3, 0x19, 0x7f, 0x89, 0xe6, 0xfc, 0xc5, 0xc1, 0xc6, 0x54, 0x64, 0xac, 0x9d, 0x08, 0x9a, 0x2a,
	0x2e, 0xc2, 0xd1, 0x75, 0xae, 0xed, 0x46, 0xb6, 0x8d, 0xd7, 0xc0, 0xf3, 0x5a, 0x71, 0xe1, 0xc6,
	0x92, 0x23, 0xb8, 0xab, 0x4b, 0xcf, 0x1d, 0x24, 0xac, 0x13, 0x8e, 0xa9, 0x7a, 0x3b, 0xe6, 0x3b,
	0x60, 0x5d, 0x4f, 0x58, 0xa7, 0xf9, 0xf7, 0x49, 0x34, 0x3b, 0xbc, 0x22, 0x5e, 0x44, 0x53, 0x83,
	0xf3, 0xcc, 0xbf, 0x66, 0x50, 0x56, 0x0e, 0xb3, 0x51, 0x8f, 0x91, 0x13, 0x23, 0x1f, 0x23, 0x6e,
	0x28, 0x94, 0xb1, 0x46, 0xbd, 0x73, 0xe6, 0x8b, 0xb8, 0x95, 0xf7, 0xce, 0x57, 0x68, 0xae, 0x9c,
	0xf6, 0x9a, 0xe6, 0x5a, 0x2a, 0x2d, 0xed, 0x61, 0x38, 0x07, 0x71, 0x71, 0x95, 0xd6, 0xef, 0x82,
	0xc7, 0x5d, 0x20, 0xcb, 0x97, 0x0d, 0x5c, 0xd9, 0x4e, 0xf9, 0x41, 0x5c, 0xbc, 0x2c, 0xe0, 0xc6,
	0xd6, 0x40, 0xd3, 0x5c, 0xd3, 0x36, 0xef, 0x83, 0x26, 0x7c, 0x76, 0x5c, 0x2f, 0xf3, 0x80, 0x18,
	0xbc, 0x62, 0x72, 0xc1, 0x78, 0xf8, 0x72, 0xa7, 0xab, 0x57, 0xcc, 0x55, 0xc1, 0x38, 0x7c, 0xb4,
	0xca, 0x4b, 0xa5, 0x97, 0xfb, 0x1e, 0x39, 0x53, 0xbd, 0xe3, 0x7e, 0xc8, 0xa1, 0x31, 0x06, 0x8b,
	0x91, 0x32, 0xbe, 0x3b, 0x70, 0xfb, 0x98, 0xf4, 0x13, 0xb2, 0xef, 0x7e, 0xcd, 0xf8, 0x6e, 0x79,
	0x0d, 0x39, 0xf6, 0x06, 0x89, 0xfe, 0xe7, 0x37, 0xc8, 0xf6, 0x04, 0xbc, 0xd8, 0xef, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xa4, 0xf5, 0x78, 0xcc, 0xd2, 0x0f, 0x00, 0x00,
}
