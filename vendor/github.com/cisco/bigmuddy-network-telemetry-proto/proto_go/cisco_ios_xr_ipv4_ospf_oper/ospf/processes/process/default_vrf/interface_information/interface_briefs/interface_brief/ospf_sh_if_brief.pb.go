// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_if_brief.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_interface_information_interface_briefs_interface_brief is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_if_brief.proto

It has these top-level messages:
	OspfShIfBrief_KEYS
	OspfShIfBrief
	OspfShInterfaceMadj
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_interface_information_interface_briefs_interface_brief

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Interface Brief Information
type OspfShIfBrief_KEYS struct {
	ProcessName   string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *OspfShIfBrief_KEYS) Reset()                    { *m = OspfShIfBrief_KEYS{} }
func (m *OspfShIfBrief_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShIfBrief_KEYS) ProtoMessage()               {}
func (*OspfShIfBrief_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShIfBrief_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShIfBrief_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type OspfShIfBrief struct {
	// Interface name
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,51,opt,name=interface_area,json=interfaceArea" json:"interface_area,omitempty"`
	// Interface IP Address
	InterfaceAddress string `protobuf:"bytes,52,opt,name=interface_address,json=interfaceAddress" json:"interface_address,omitempty"`
	// Interface IP Mask
	InterfaceMask uint32 `protobuf:"varint,53,opt,name=interface_mask,json=interfaceMask" json:"interface_mask,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,54,opt,name=interface_link_cost,json=interfaceLinkCost" json:"interface_link_cost,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,55,opt,name=ospf_interface_state,json=ospfInterfaceState" json:"ospf_interface_state,omitempty"`
	// Interface in fast detect hold down state
	InterfaceFastDetectHoldDown bool `protobuf:"varint,56,opt,name=interface_fast_detect_hold_down,json=interfaceFastDetectHoldDown" json:"interface_fast_detect_hold_down,omitempty"`
	// Total number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,57,opt,name=interface_neighbor_count,json=interfaceNeighborCount" json:"interface_neighbor_count,omitempty"`
	// Total number of Adjacent Neighbors
	InterfaceAdjNeighborCount uint32 `protobuf:"varint,58,opt,name=interface_adj_neighbor_count,json=interfaceAdjNeighborCount" json:"interface_adj_neighbor_count,omitempty"`
	// If true, interface is multi-area
	InterfaceisMadj bool `protobuf:"varint,59,opt,name=interfaceis_madj,json=interfaceisMadj" json:"interfaceis_madj,omitempty"`
	// Total number of multi-area
	InterfaceMadjCount uint32 `protobuf:"varint,60,opt,name=interface_madj_count,json=interfaceMadjCount" json:"interface_madj_count,omitempty"`
	// Information for multi-area on the interface
	InterfaceMadjList []*OspfShInterfaceMadj `protobuf:"bytes,61,rep,name=interface_madj_list,json=interfaceMadjList" json:"interface_madj_list,omitempty"`
}

func (m *OspfShIfBrief) Reset()                    { *m = OspfShIfBrief{} }
func (m *OspfShIfBrief) String() string            { return proto.CompactTextString(m) }
func (*OspfShIfBrief) ProtoMessage()               {}
func (*OspfShIfBrief) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShIfBrief) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *OspfShIfBrief) GetInterfaceArea() string {
	if m != nil {
		return m.InterfaceArea
	}
	return ""
}

func (m *OspfShIfBrief) GetInterfaceAddress() string {
	if m != nil {
		return m.InterfaceAddress
	}
	return ""
}

func (m *OspfShIfBrief) GetInterfaceMask() uint32 {
	if m != nil {
		return m.InterfaceMask
	}
	return 0
}

func (m *OspfShIfBrief) GetInterfaceLinkCost() uint32 {
	if m != nil {
		return m.InterfaceLinkCost
	}
	return 0
}

func (m *OspfShIfBrief) GetOspfInterfaceState() string {
	if m != nil {
		return m.OspfInterfaceState
	}
	return ""
}

func (m *OspfShIfBrief) GetInterfaceFastDetectHoldDown() bool {
	if m != nil {
		return m.InterfaceFastDetectHoldDown
	}
	return false
}

func (m *OspfShIfBrief) GetInterfaceNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceNeighborCount
	}
	return 0
}

func (m *OspfShIfBrief) GetInterfaceAdjNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceAdjNeighborCount
	}
	return 0
}

func (m *OspfShIfBrief) GetInterfaceisMadj() bool {
	if m != nil {
		return m.InterfaceisMadj
	}
	return false
}

func (m *OspfShIfBrief) GetInterfaceMadjCount() uint32 {
	if m != nil {
		return m.InterfaceMadjCount
	}
	return 0
}

func (m *OspfShIfBrief) GetInterfaceMadjList() []*OspfShInterfaceMadj {
	if m != nil {
		return m.InterfaceMadjList
	}
	return nil
}

// OSPF Interface Multi-Area Information
type OspfShInterfaceMadj struct {
	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,1,opt,name=interface_area,json=interfaceArea" json:"interface_area,omitempty"`
	// Area ID
	MadjAreaId uint32 `protobuf:"varint,2,opt,name=madj_area_id,json=madjAreaId" json:"madj_area_id,omitempty"`
	// Number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,3,opt,name=interface_neighbor_count,json=interfaceNeighborCount" json:"interface_neighbor_count,omitempty"`
	// Total number of Adjacent Neighbors
	InterfaceAdjNeighborCount uint32 `protobuf:"varint,4,opt,name=interface_adj_neighbor_count,json=interfaceAdjNeighborCount" json:"interface_adj_neighbor_count,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,5,opt,name=interface_link_cost,json=interfaceLinkCost" json:"interface_link_cost,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,6,opt,name=ospf_interface_state,json=ospfInterfaceState" json:"ospf_interface_state,omitempty"`
}

func (m *OspfShInterfaceMadj) Reset()                    { *m = OspfShInterfaceMadj{} }
func (m *OspfShInterfaceMadj) String() string            { return proto.CompactTextString(m) }
func (*OspfShInterfaceMadj) ProtoMessage()               {}
func (*OspfShInterfaceMadj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShInterfaceMadj) GetInterfaceArea() string {
	if m != nil {
		return m.InterfaceArea
	}
	return ""
}

func (m *OspfShInterfaceMadj) GetMadjAreaId() uint32 {
	if m != nil {
		return m.MadjAreaId
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceAdjNeighborCount() uint32 {
	if m != nil {
		return m.InterfaceAdjNeighborCount
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetInterfaceLinkCost() uint32 {
	if m != nil {
		return m.InterfaceLinkCost
	}
	return 0
}

func (m *OspfShInterfaceMadj) GetOspfInterfaceState() string {
	if m != nil {
		return m.OspfInterfaceState
	}
	return ""
}

func init() {
	proto.RegisterType((*OspfShIfBrief_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.interface_briefs.interface_brief.ospf_sh_if_brief_KEYS")
	proto.RegisterType((*OspfShIfBrief)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.interface_briefs.interface_brief.ospf_sh_if_brief")
	proto.RegisterType((*OspfShInterfaceMadj)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.interface_briefs.interface_brief.ospf_sh_interface_madj")
}

func init() { proto.RegisterFile("ospf_sh_if_brief.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x8d, 0x4d, 0xe0, 0xad, 0x30, 0x0c, 0x4c, 0x46, 0x20, 0x11, 0x2a, 0x21, 0x15,
	0x21, 0x45, 0x68, 0x1b, 0x30, 0x7e, 0x09, 0xa1, 0x15, 0xc4, 0xc4, 0xc6, 0x43, 0xf7, 0xc4, 0xd3,
	0xc9, 0x8d, 0x1d, 0xea, 0x34, 0x89, 0x2b, 0x9f, 0xbb, 0xf1, 0x4f, 0xf0, 0x2f, 0xed, 0xbf, 0xe2,
	0x1d, 0xd9, 0xeb, 0x1a, 0x27, 0x6a, 0x41, 0x88, 0x07, 0xde, 0xa2, 0xbb, 0xcf, 0xfd, 0xf0, 0xf7,
	0xee, 0x42, 0xb6, 0x35, 0x4e, 0x32, 0xc0, 0x11, 0xa8, 0x0c, 0x86, 0x46, 0xc9, 0x2c, 0x99, 0x18,
	0x6d, 0x35, 0x9d, 0xa6, 0x0a, 0x53, 0x0d, 0x4a, 0x23, 0x7c, 0x37, 0xa0, 0x26, 0xa7, 0x7b, 0xe0,
	0x49, 0x3d, 0x91, 0x26, 0x71, 0x5f, 0x8e, 0x4b, 0x25, 0xa2, 0xc4, 0xcb, 0xaf, 0x44, 0xc8, 0x8c,
	0x4f, 0x0b, 0x0b, 0xa7, 0x26, 0x4b, 0x54, 0x65, 0xa5, 0xc9, 0x78, 0x2a, 0x41, 0x55, 0x99, 0x36,
	0x25, 0xb7, 0x4a, 0x57, 0x81, 0xd5, 0xd7, 0xc2, 0xb6, 0xa1, 0xcb, 0xc9, 0x9d, 0x76, 0x43, 0xf0,
	0xf9, 0xc3, 0xd7, 0x13, 0xfa, 0x90, 0x6c, 0xce, 0xca, 0x40, 0xc5, 0x4b, 0xc9, 0xa2, 0x38, 0xea,
	0x5d, 0x1b, 0x6c, 0xcc, 0x6c, 0x5f, 0x78, 0x29, 0xe9, 0x23, 0x72, 0xbd, 0x4e, 0xe7, 0xa1, 0x15,
	0x0f, 0x75, 0xe6, 0x56, 0x87, 0x75, 0x7f, 0xae, 0x91, 0xad, 0x76, 0x8d, 0x05, 0xb1, 0x3b, 0x0b,
	0x62, 0x9b, 0x18, 0x37, 0x92, 0xb3, 0xdd, 0x16, 0xf6, 0xde, 0x48, 0x4e, 0x9f, 0x90, 0x9b, 0x01,
	0x26, 0x84, 0x91, 0x88, 0x6c, 0xcf, 0x93, 0x5b, 0x35, 0x79, 0x61, 0x6f, 0xe6, 0x2c, 0x39, 0x8e,
	0xd9, 0xb3, 0x38, 0xea, 0x75, 0x82, 0x9c, 0xc7, 0x1c, 0xc7, 0x34, 0x21, 0xb7, 0x6a, 0xac, 0x50,
	0xd5, 0x18, 0x52, 0x8d, 0x96, 0x3d, 0xf7, 0x6c, 0x5d, 0xee, 0x48, 0x55, 0xe3, 0x03, 0x8d, 0x96,
	0x3e, 0x25, 0xb7, 0xfd, 0x2b, 0xeb, 0x20, 0xb4, 0xdc, 0x4a, 0xf6, 0xc2, 0xb7, 0x41, 0x9d, 0xef,
	0xf0, 0xd2, 0x75, 0xe2, 0x3c, 0xb4, 0x4f, 0x1e, 0xd4, 0x70, 0xc6, 0xd1, 0x82, 0x90, 0x56, 0xa6,
	0x16, 0x46, 0xba, 0x10, 0x20, 0xf4, 0x59, 0xc5, 0xf6, 0xe3, 0xa8, 0x77, 0x75, 0x70, 0x6f, 0x8e,
	0x7d, 0xe4, 0x68, 0xfb, 0x1e, 0xfa, 0xa4, 0x0b, 0xd1, 0xd7, 0x67, 0x15, 0xdd, 0x27, 0x2c, 0x50,
	0x52, 0xaa, 0x6f, 0xa3, 0xa1, 0x36, 0x90, 0xea, 0x69, 0x65, 0xd9, 0x4b, 0xdf, 0xec, 0x76, 0xad,
	0xe9, 0xcc, 0x7d, 0xe0, 0xbc, 0xf4, 0x1d, 0xb9, 0x1f, 0xaa, 0x96, 0xb7, 0xa3, 0x5f, 0xf9, 0xe8,
	0xbb, 0x81, 0x80, 0x79, 0x33, 0xc1, 0x63, 0x52, 0xab, 0xab, 0x10, 0x4a, 0x2e, 0x72, 0xf6, 0xda,
	0x77, 0x7c, 0x23, 0xb0, 0x1f, 0x73, 0x91, 0x3b, 0x75, 0x42, 0xd1, 0x45, 0x3e, 0xab, 0xf1, 0xc6,
	0xd7, 0xa0, 0x81, 0xf4, 0x22, 0xbf, 0x48, 0x7e, 0x1e, 0x85, 0x03, 0xf0, 0x21, 0x85, 0x42, 0xcb,
	0xde, 0xc6, 0xab, 0xbd, 0x8d, 0x9d, 0x1f, 0x51, 0xf2, 0x5f, 0x0e, 0x26, 0x99, 0x6f, 0x72, 0xa3,
	0xb5, 0x60, 0x21, 0xdc, 0x0b, 0x8e, 0x14, 0xda, 0xee, 0xf9, 0x4a, 0x70, 0xec, 0x0d, 0x7a, 0xc1,
	0x5a, 0x47, 0x8b, 0xd6, 0x3a, 0x26, 0x9b, 0xfe, 0xdd, 0x8e, 0x00, 0x25, 0xfc, 0x79, 0x75, 0x06,
	0xc4, 0xd9, 0x9c, 0xff, 0x50, 0xfc, 0x76, 0xf8, 0xab, 0xff, 0x34, 0xfc, 0x2b, 0x7f, 0x1a, 0xfe,
	0x92, 0xfb, 0x58, 0xfb, 0xdb, 0xfb, 0x58, 0x5f, 0x76, 0x1f, 0xc3, 0x75, 0xff, 0x67, 0xdc, 0xfd,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x94, 0x48, 0xb9, 0xcd, 0x33, 0x05, 0x00, 0x00,
}
