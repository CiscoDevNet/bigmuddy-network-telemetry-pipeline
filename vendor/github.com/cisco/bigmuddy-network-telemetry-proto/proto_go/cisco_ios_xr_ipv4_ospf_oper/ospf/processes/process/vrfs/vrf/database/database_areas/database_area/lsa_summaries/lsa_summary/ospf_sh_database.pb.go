// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_database.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_database_database_areas_database_area_lsa_summaries_lsa_summary is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_database.proto

It has these top-level messages:
	OspfShDatabase_KEYS
	OspfShDatabase
	OspfShDbHeader
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_database_database_areas_database_area_lsa_summaries_lsa_summary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Database Information
type OspfShDatabase_KEYS struct {
	ProcessName       string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName           string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AreaId            uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	AreaId_1          uint32 `protobuf:"varint,4,opt,name=area_id_1,json=areaId1" json:"area_id_1,omitempty"`
	LsType            string `protobuf:"bytes,5,opt,name=ls_type,json=lsType" json:"ls_type,omitempty"`
	LsId              string `protobuf:"bytes,6,opt,name=ls_id,json=lsId" json:"ls_id,omitempty"`
	AdvertisingRouter string `protobuf:"bytes,7,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	InterfaceName     string `protobuf:"bytes,8,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *OspfShDatabase_KEYS) Reset()                    { *m = OspfShDatabase_KEYS{} }
func (m *OspfShDatabase_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShDatabase_KEYS) ProtoMessage()               {}
func (*OspfShDatabase_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShDatabase_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShDatabase_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *OspfShDatabase_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *OspfShDatabase_KEYS) GetAreaId_1() uint32 {
	if m != nil {
		return m.AreaId_1
	}
	return 0
}

func (m *OspfShDatabase_KEYS) GetLsType() string {
	if m != nil {
		return m.LsType
	}
	return ""
}

func (m *OspfShDatabase_KEYS) GetLsId() string {
	if m != nil {
		return m.LsId
	}
	return ""
}

func (m *OspfShDatabase_KEYS) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *OspfShDatabase_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type OspfShDatabase struct {
	// LSA header information
	LsaHeader *OspfShDbHeader `protobuf:"bytes,50,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Route Tag
	ExternalTag uint32 `protobuf:"varint,51,opt,name=external_tag,json=externalTag" json:"external_tag,omitempty"`
	// Number of links
	LinkCount uint32 `protobuf:"varint,52,opt,name=link_count,json=linkCount" json:"link_count,omitempty"`
}

func (m *OspfShDatabase) Reset()                    { *m = OspfShDatabase{} }
func (m *OspfShDatabase) String() string            { return proto.CompactTextString(m) }
func (*OspfShDatabase) ProtoMessage()               {}
func (*OspfShDatabase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShDatabase) GetLsaHeader() *OspfShDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *OspfShDatabase) GetExternalTag() uint32 {
	if m != nil {
		return m.ExternalTag
	}
	return 0
}

func (m *OspfShDatabase) GetLinkCount() uint32 {
	if m != nil {
		return m.LinkCount
	}
	return 0
}

// OSPF LSA Database Header
type OspfShDbHeader struct {
	// LSA type
	LsType string `protobuf:"bytes,1,opt,name=ls_type,json=lsType" json:"ls_type,omitempty"`
	// LS ID
	Lsid string `protobuf:"bytes,2,opt,name=lsid" json:"lsid,omitempty"`
	// Router ID of Advertising Router
	AdvertisingRouter string `protobuf:"bytes,3,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	// Area ID in decimal or dotted-decimal format
	LsaAreaId string `protobuf:"bytes,4,opt,name=lsa_area_id,json=lsaAreaId" json:"lsa_area_id,omitempty"`
	// LSA's Age (s)
	LsaAge uint32 `protobuf:"varint,5,opt,name=lsa_age,json=lsaAge" json:"lsa_age,omitempty"`
	// If true, Do Not Age this LSA
	DnAgeLsa bool `protobuf:"varint,6,opt,name=dn_age_lsa,json=dnAgeLsa" json:"dn_age_lsa,omitempty"`
	// If true,  LSA received from neighbor during NSF
	Nsf bool `protobuf:"varint,7,opt,name=nsf" json:"nsf,omitempty"`
	// Current Sequence number
	SequenceNumber uint32 `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Checksum value
	Checksum uint32 `protobuf:"varint,9,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *OspfShDbHeader) Reset()                    { *m = OspfShDbHeader{} }
func (m *OspfShDbHeader) String() string            { return proto.CompactTextString(m) }
func (*OspfShDbHeader) ProtoMessage()               {}
func (*OspfShDbHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShDbHeader) GetLsType() string {
	if m != nil {
		return m.LsType
	}
	return ""
}

func (m *OspfShDbHeader) GetLsid() string {
	if m != nil {
		return m.Lsid
	}
	return ""
}

func (m *OspfShDbHeader) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *OspfShDbHeader) GetLsaAreaId() string {
	if m != nil {
		return m.LsaAreaId
	}
	return ""
}

func (m *OspfShDbHeader) GetLsaAge() uint32 {
	if m != nil {
		return m.LsaAge
	}
	return 0
}

func (m *OspfShDbHeader) GetDnAgeLsa() bool {
	if m != nil {
		return m.DnAgeLsa
	}
	return false
}

func (m *OspfShDbHeader) GetNsf() bool {
	if m != nil {
		return m.Nsf
	}
	return false
}

func (m *OspfShDbHeader) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *OspfShDbHeader) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func init() {
	proto.RegisterType((*OspfShDatabase_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.database.database_areas.database_area.lsa_summaries.lsa_summary.ospf_sh_database_KEYS")
	proto.RegisterType((*OspfShDatabase)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.database.database_areas.database_area.lsa_summaries.lsa_summary.ospf_sh_database")
	proto.RegisterType((*OspfShDbHeader)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.database.database_areas.database_area.lsa_summaries.lsa_summary.ospf_sh_db_header")
}

func init() { proto.RegisterFile("ospf_sh_database.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0xcd, 0x6e, 0xd3, 0x5c,
	0x10, 0x95, 0x93, 0x34, 0x71, 0x26, 0x5f, 0xfa, 0xb5, 0x17, 0x01, 0xa6, 0x02, 0x14, 0x22, 0x21,
	0xb2, 0xc1, 0x52, 0x7f, 0x5e, 0x20, 0x42, 0x48, 0x54, 0xa0, 0x2e, 0x4c, 0x37, 0xac, 0xae, 0x26,
	0xf6, 0xd8, 0xb1, 0xea, 0x3f, 0xee, 0xd8, 0x51, 0x23, 0xd6, 0x6c, 0xfb, 0x06, 0xbc, 0x02, 0xcf,
	0x88, 0xee, 0x24, 0x8e, 0xd2, 0xa2, 0xae, 0xd9, 0x44, 0x33, 0xe7, 0x9c, 0xdc, 0x99, 0x7b, 0xcf,
	0x31, 0x3c, 0x2b, 0xb9, 0x8a, 0x35, 0x2f, 0x75, 0x84, 0x35, 0x2e, 0x90, 0xc9, 0xaf, 0x4c, 0x59,
	0x97, 0xea, 0x47, 0x98, 0x72, 0x58, 0xea, 0xb4, 0x64, 0x7d, 0x6b, 0x74, 0x5a, 0xad, 0x2e, 0xb4,
	0x28, 0xcb, 0x8a, 0x8c, 0x6f, 0x2b, 0xab, 0x0b, 0x89, 0x99, 0xb8, 0xad, 0xfc, 0x95, 0x89, 0xe5,
	0xc7, 0xdf, 0x9d, 0xd5, 0x16, 0x1a, 0x0d, 0x21, 0xdf, 0x6f, 0xfd, 0x8c, 0x51, 0x73, 0x93, 0xe7,
	0x68, 0x52, 0xe2, 0xbd, 0x6e, 0x3d, 0xbd, 0xeb, 0xc0, 0xd3, 0x87, 0x7b, 0xe9, 0xcf, 0x1f, 0xbf,
	0x7d, 0x55, 0x6f, 0xe0, 0xbf, 0xed, 0x34, 0x5d, 0x60, 0x4e, 0x9e, 0x33, 0x71, 0x66, 0xc3, 0x60,
	0xb4, 0xc5, 0xae, 0x30, 0x27, 0xf5, 0x02, 0xdc, 0x95, 0x89, 0x37, 0x74, 0x47, 0xe8, 0xc1, 0xca,
	0xc4, 0x42, 0x3d, 0x87, 0x81, 0x9d, 0xac, 0xd3, 0xc8, 0xeb, 0x4e, 0x9c, 0xd9, 0x38, 0xe8, 0xdb,
	0xf6, 0x32, 0x52, 0x27, 0x30, 0xdc, 0x12, 0xfa, 0xd4, 0xeb, 0x09, 0x35, 0xd8, 0x50, 0xa7, 0xf6,
	0x4f, 0x19, 0xeb, 0x7a, 0x5d, 0x91, 0x77, 0x20, 0xc7, 0xf5, 0x33, 0xbe, 0x5e, 0x57, 0xa4, 0x9e,
	0xc0, 0x41, 0xc6, 0xf6, 0xac, 0xbe, 0xc0, 0xbd, 0x8c, 0x2f, 0x23, 0xf5, 0x1e, 0x14, 0x46, 0x2b,
	0x32, 0x75, 0xca, 0x69, 0x91, 0x68, 0x53, 0x36, 0x35, 0x19, 0x6f, 0x20, 0x8a, 0xe3, 0x3d, 0x26,
	0x10, 0x42, 0xbd, 0x85, 0xc3, 0xb4, 0xa8, 0xc9, 0xc4, 0x18, 0xd2, 0x66, 0x65, 0x57, 0xa4, 0xe3,
	0x1d, 0x6a, 0x17, 0x9f, 0xfe, 0xec, 0xc0, 0xd1, 0xc3, 0x07, 0x51, 0xbf, 0x1d, 0x00, 0xfb, 0x6a,
	0x4b, 0xc2, 0x88, 0x8c, 0x77, 0x36, 0x71, 0x66, 0xa3, 0xb3, 0x3b, 0xc7, 0xff, 0x87, 0xce, 0xf9,
	0xbb, 0x25, 0x17, 0xdb, 0xb5, 0x82, 0x61, 0xc6, 0xf8, 0x49, 0x4a, 0x6b, 0x1e, 0xdd, 0xd6, 0x64,
	0x0a, 0xcc, 0x74, 0x8d, 0x89, 0x77, 0x2e, 0x0f, 0x3d, 0x6a, 0xb1, 0x6b, 0x4c, 0xd4, 0x2b, 0x80,
	0x2c, 0x2d, 0x6e, 0x74, 0x58, 0x36, 0x45, 0xed, 0x5d, 0x88, 0x60, 0x68, 0x91, 0x0f, 0x16, 0x98,
	0xfe, 0xea, 0xc0, 0xf1, 0x5f, 0x23, 0xf6, 0x1d, 0x72, 0xee, 0x39, 0xa4, 0xa0, 0x97, 0x71, 0x1a,
	0x6d, 0x63, 0x20, 0xf5, 0x23, 0x06, 0x75, 0x1f, 0x33, 0xe8, 0x35, 0x8c, 0xec, 0xfd, 0xda, 0xd8,
	0xf4, 0x44, 0x67, 0xef, 0x34, 0xdf, 0x24, 0x47, 0x66, 0xa3, 0xc6, 0x64, 0x93, 0x8e, 0xb1, 0x9d,
	0x8d, 0xf3, 0x84, 0xd4, 0x4b, 0x80, 0xa8, 0xb0, 0xb8, 0xce, 0x18, 0x25, 0x22, 0x6e, 0xe0, 0x46,
	0xc5, 0x3c, 0xa1, 0x2f, 0x8c, 0xea, 0x08, 0xba, 0x05, 0xc7, 0x92, 0x0b, 0x37, 0xb0, 0xa5, 0x7a,
	0x07, 0xff, 0x33, 0x7d, 0x6f, 0xa8, 0xb0, 0x41, 0x68, 0xf2, 0x05, 0x19, 0x89, 0xc2, 0x38, 0x38,
	0x6c, 0xe1, 0x2b, 0x41, 0xd5, 0x09, 0xb8, 0xe1, 0x92, 0xc2, 0x1b, 0x6e, 0x72, 0x6f, 0x28, 0x8a,
	0x5d, 0xbf, 0xe8, 0xcb, 0xc7, 0x7b, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x68, 0x04, 0xb4, 0x42,
	0xd6, 0x03, 0x00, 0x00,
}
