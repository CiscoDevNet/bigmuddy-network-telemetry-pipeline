// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_border_router.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_border_routers_border_router is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_border_router.proto

It has these top-level messages:
	OspfShBorderRouter_KEYS
	OspfShBorderRouter
	OspfShBrPath
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_border_routers_border_router

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Border Router
type OspfShBorderRouter_KEYS struct {
	ProcessName    string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	BorderRouterId string `protobuf:"bytes,2,opt,name=border_router_id,json=borderRouterId" json:"border_router_id,omitempty"`
}

func (m *OspfShBorderRouter_KEYS) Reset()                    { *m = OspfShBorderRouter_KEYS{} }
func (m *OspfShBorderRouter_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShBorderRouter_KEYS) ProtoMessage()               {}
func (*OspfShBorderRouter_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShBorderRouter_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShBorderRouter_KEYS) GetBorderRouterId() string {
	if m != nil {
		return m.BorderRouterId
	}
	return ""
}

type OspfShBorderRouter struct {
	// Router ID of Border Router
	BorderRouterId string `protobuf:"bytes,50,opt,name=border_router_id,json=borderRouterId" json:"border_router_id,omitempty"`
	// List of Border Router paths
	BorderRouterPathList []*OspfShBrPath `protobuf:"bytes,51,rep,name=border_router_path_list,json=borderRouterPathList" json:"border_router_path_list,omitempty"`
}

func (m *OspfShBorderRouter) Reset()                    { *m = OspfShBorderRouter{} }
func (m *OspfShBorderRouter) String() string            { return proto.CompactTextString(m) }
func (*OspfShBorderRouter) ProtoMessage()               {}
func (*OspfShBorderRouter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShBorderRouter) GetBorderRouterId() string {
	if m != nil {
		return m.BorderRouterId
	}
	return ""
}

func (m *OspfShBorderRouter) GetBorderRouterPathList() []*OspfShBrPath {
	if m != nil {
		return m.BorderRouterPathList
	}
	return nil
}

// OSPF Border Router Path
type OspfShBrPath struct {
	// Route type
	BorderRouterRouteType string `protobuf:"bytes,1,opt,name=border_router_route_type,json=borderRouterRouteType" json:"border_router_route_type,omitempty"`
	// Metric
	BorderRouterRouteMetric uint32 `protobuf:"varint,2,opt,name=border_router_route_metric,json=borderRouterRouteMetric" json:"border_router_route_metric,omitempty"`
	// Next hop address
	BorderRouterNextHop string `protobuf:"bytes,3,opt,name=border_router_next_hop,json=borderRouterNextHop" json:"border_router_next_hop,omitempty"`
	// Next hop Interface
	BorderRouterNextHopInterfaceName string `protobuf:"bytes,4,opt,name=border_router_next_hop_interface_name,json=borderRouterNextHopInterfaceName" json:"border_router_next_hop_interface_name,omitempty"`
	// Border router type
	BorderRouterType string `protobuf:"bytes,5,opt,name=border_router_type,json=borderRouterType" json:"border_router_type,omitempty"`
	// Area string in decimal or dotted-decimal format
	BorderRouterAreaId string `protobuf:"bytes,6,opt,name=border_router_area_id,json=borderRouterAreaId" json:"border_router_area_id,omitempty"`
	// SPF run instance count
	SpfVersion uint64 `protobuf:"varint,7,opt,name=spf_version,json=spfVersion" json:"spf_version,omitempty"`
}

func (m *OspfShBrPath) Reset()                    { *m = OspfShBrPath{} }
func (m *OspfShBrPath) String() string            { return proto.CompactTextString(m) }
func (*OspfShBrPath) ProtoMessage()               {}
func (*OspfShBrPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShBrPath) GetBorderRouterRouteType() string {
	if m != nil {
		return m.BorderRouterRouteType
	}
	return ""
}

func (m *OspfShBrPath) GetBorderRouterRouteMetric() uint32 {
	if m != nil {
		return m.BorderRouterRouteMetric
	}
	return 0
}

func (m *OspfShBrPath) GetBorderRouterNextHop() string {
	if m != nil {
		return m.BorderRouterNextHop
	}
	return ""
}

func (m *OspfShBrPath) GetBorderRouterNextHopInterfaceName() string {
	if m != nil {
		return m.BorderRouterNextHopInterfaceName
	}
	return ""
}

func (m *OspfShBrPath) GetBorderRouterType() string {
	if m != nil {
		return m.BorderRouterType
	}
	return ""
}

func (m *OspfShBrPath) GetBorderRouterAreaId() string {
	if m != nil {
		return m.BorderRouterAreaId
	}
	return ""
}

func (m *OspfShBrPath) GetSpfVersion() uint64 {
	if m != nil {
		return m.SpfVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*OspfShBorderRouter_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.border_routers.border_router.ospf_sh_border_router_KEYS")
	proto.RegisterType((*OspfShBorderRouter)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.border_routers.border_router.ospf_sh_border_router")
	proto.RegisterType((*OspfShBrPath)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.border_routers.border_router.ospf_sh_br_path")
}

func init() { proto.RegisterFile("ospf_sh_border_router.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0xc9, 0xd7, 0x7e, 0x15, 0xa7, 0xfe, 0x94, 0xd1, 0xda, 0x50, 0x17, 0xc6, 0x82, 0x90,
	0x85, 0x04, 0x6c, 0x05, 0x17, 0xae, 0x5c, 0x08, 0x16, 0xb5, 0x4a, 0x14, 0x41, 0x5c, 0x0c, 0xd3,
	0xe4, 0x84, 0x0c, 0xb4, 0x99, 0x61, 0x66, 0x5a, 0xda, 0xab, 0xf0, 0x22, 0xbc, 0x38, 0x6f, 0x43,
	0x32, 0x69, 0x25, 0xa3, 0xd9, 0xba, 0x49, 0x26, 0x27, 0xef, 0xf3, 0x9e, 0x1f, 0xce, 0xa0, 0x43,
	0xae, 0x44, 0x42, 0x54, 0x4a, 0xc6, 0x5c, 0xc6, 0x20, 0x89, 0xe4, 0x33, 0x0d, 0x32, 0x10, 0x92,
	0x6b, 0x8e, 0xdf, 0x22, 0xa6, 0x22, 0x4e, 0x18, 0x57, 0x64, 0x21, 0x09, 0x13, 0xf3, 0x73, 0x62,
	0xe4, 0x5c, 0x80, 0x0c, 0xf2, 0x53, 0xae, 0x8b, 0x40, 0x29, 0x50, 0xeb, 0x53, 0x10, 0x43, 0x42,
	0x67, 0x13, 0x4d, 0xe6, 0x32, 0x09, 0x2c, 0x4f, 0x65, 0x7f, 0xf6, 0x18, 0xea, 0x56, 0xe6, 0x26,
	0xb7, 0xd7, 0xaf, 0x4f, 0xf8, 0x18, 0x6d, 0xad, 0x1c, 0x49, 0x46, 0xa7, 0xe0, 0x3a, 0x9e, 0xe3,
	0x6f, 0x86, 0xcd, 0x55, 0x6c, 0x44, 0xa7, 0x80, 0x7d, 0xd4, 0xb2, 0x41, 0x16, 0xbb, 0xff, 0x8c,
	0x6c, 0xa7, 0x88, 0x87, 0x26, 0x3c, 0x8c, 0x7b, 0x9f, 0x0e, 0x6a, 0x57, 0xe6, 0xaa, 0xf4, 0xe8,
	0x57, 0x79, 0xe0, 0x0f, 0x07, 0x75, 0x6c, 0xa9, 0xa0, 0x3a, 0x25, 0x13, 0xa6, 0xb4, 0x3b, 0xf0,
	0x6a, 0x7e, 0xb3, 0x3f, 0x09, 0xfe, 0x70, 0x5c, 0xc1, 0x77, 0xfd, 0x45, 0xe2, 0x70, 0xbf, 0x5c,
	0xdf, 0x23, 0xd5, 0xe9, 0x1d, 0x53, 0xba, 0xf7, 0x5e, 0x43, 0xbb, 0x3f, 0x94, 0xf8, 0x02, 0xb9,
	0x76, 0xe1, 0xe6, 0x45, 0xf4, 0x52, 0xac, 0xc7, 0xda, 0x2e, 0x7b, 0x99, 0xe7, 0xf3, 0x52, 0x00,
	0xbe, 0x44, 0xdd, 0x2a, 0x70, 0x0a, 0x5a, 0xb2, 0xc8, 0x8c, 0x7a, 0x3b, 0xec, 0xfc, 0x42, 0xef,
	0xcd, 0x6f, 0x3c, 0x40, 0x07, 0x36, 0x9c, 0xc1, 0x42, 0x93, 0x94, 0x0b, 0xb7, 0x66, 0x72, 0xee,
	0x95, 0xc1, 0x11, 0x2c, 0xf4, 0x0d, 0x17, 0xf8, 0x01, 0x9d, 0x54, 0x43, 0x84, 0x65, 0x1a, 0x64,
	0x42, 0x23, 0x28, 0xd6, 0xa1, 0x6e, 0x3c, 0xbc, 0x0a, 0x8f, 0xe1, 0x5a, 0x68, 0x76, 0xe4, 0x14,
	0x61, 0xdb, 0xd0, 0x74, 0xfd, 0xdf, 0xd0, 0xad, 0x32, 0x6d, 0x1a, 0x3e, 0x43, 0x6d, 0x5b, 0x4d,
	0x25, 0xd0, 0x7c, 0x25, 0x1a, 0x06, 0xc0, 0x65, 0xe0, 0x4a, 0x02, 0x1d, 0xc6, 0xf8, 0x08, 0x35,
	0xf3, 0x71, 0xcf, 0x41, 0x2a, 0xc6, 0x33, 0x77, 0xc3, 0x73, 0xfc, 0x7a, 0x88, 0x94, 0x48, 0x5e,
	0x8a, 0xc8, 0xb8, 0x61, 0xae, 0xd2, 0xe0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x49, 0x6f, 0xeb,
	0x69, 0x03, 0x00, 0x00,
}
