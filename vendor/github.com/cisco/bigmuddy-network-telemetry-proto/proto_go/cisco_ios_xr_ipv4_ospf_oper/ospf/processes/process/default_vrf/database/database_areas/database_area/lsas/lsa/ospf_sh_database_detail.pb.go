// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_database_detail.proto

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_database_areas_database_area_lsas_lsa is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_database_detail.proto

It has these top-level messages:
	OspfShDatabaseDetail_KEYS
	OspfShDatabaseDetail
	OspfShTime
	OspfShDbNotDelete
	OspfShDbThrottleTimer
	OspfShDbHeader
	OspfShDbDetail
	OspfShLsaExTos
	OspfShLsaExternal
	OspfShLsaNetwork
	OspfShOpqSubtlv
	OspfShOpqTlv
	OspfShLsaOpqLink
	OspfShLsaOpqRrr
	OspfShLsaOpqEpl
	OspfShLsaOpqEll
	OspfShOpqRiUnknownTlv
	OspfShOpqRiRtrcapTlv
	OspfShOpqRiPceIpv4AddrStlv
	OspfShOpqRiPceIpv6AddrStlv
	OspfShOpqRiPceAddrStlvsUnion
	OspfShOpqRiPcedScopeStlv
	OspfShOpqRiPcedTlv
	OspfShOpqRiSrAlgoTlv
	OspfShSrSidStlv
	OspfShOpqRiSrRangeTlv
	OspfShOpqRiTlvsUnion
	OspfShLsaOpqRi
	OspfShLsaOpqGrace
	OspfShTosMetric
	OspfShLink
	OspfShLsaRouter
	OspfShLsaSummary
	OspfLsaInternalUnion
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_database_areas_database_area_lsas_lsa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Database Information
type OspfShDatabaseDetail_KEYS struct {
	ProcessName       string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	AreaId            uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	AreaId_1          uint32 `protobuf:"varint,3,opt,name=area_id_1,json=areaId1" json:"area_id_1,omitempty"`
	LsType            string `protobuf:"bytes,4,opt,name=ls_type,json=lsType" json:"ls_type,omitempty"`
	LsId              string `protobuf:"bytes,5,opt,name=ls_id,json=lsId" json:"ls_id,omitempty"`
	AdvertisingRouter string `protobuf:"bytes,6,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	InterfaceName     string `protobuf:"bytes,7,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *OspfShDatabaseDetail_KEYS) Reset()                    { *m = OspfShDatabaseDetail_KEYS{} }
func (m *OspfShDatabaseDetail_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShDatabaseDetail_KEYS) ProtoMessage()               {}
func (*OspfShDatabaseDetail_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShDatabaseDetail_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShDatabaseDetail_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *OspfShDatabaseDetail_KEYS) GetAreaId_1() uint32 {
	if m != nil {
		return m.AreaId_1
	}
	return 0
}

func (m *OspfShDatabaseDetail_KEYS) GetLsType() string {
	if m != nil {
		return m.LsType
	}
	return ""
}

func (m *OspfShDatabaseDetail_KEYS) GetLsId() string {
	if m != nil {
		return m.LsId
	}
	return ""
}

func (m *OspfShDatabaseDetail_KEYS) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *OspfShDatabaseDetail_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type OspfShDatabaseDetail struct {
	// Header information
	LsaHeader *OspfShDbHeader `protobuf:"bytes,50,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetailData *OspfShDbDetail `protobuf:"bytes,51,opt,name=lsa_detail_data,json=lsaDetailData" json:"lsa_detail_data,omitempty"`
	// Information pertaining to a specific LSA type
	LsaInternalData *OspfLsaInternalUnion `protobuf:"bytes,52,opt,name=lsa_internal_data,json=lsaInternalData" json:"lsa_internal_data,omitempty"`
}

func (m *OspfShDatabaseDetail) Reset()                    { *m = OspfShDatabaseDetail{} }
func (m *OspfShDatabaseDetail) String() string            { return proto.CompactTextString(m) }
func (*OspfShDatabaseDetail) ProtoMessage()               {}
func (*OspfShDatabaseDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShDatabaseDetail) GetLsaHeader() *OspfShDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *OspfShDatabaseDetail) GetLsaDetailData() *OspfShDbDetail {
	if m != nil {
		return m.LsaDetailData
	}
	return nil
}

func (m *OspfShDatabaseDetail) GetLsaInternalData() *OspfLsaInternalUnion {
	if m != nil {
		return m.LsaInternalData
	}
	return nil
}

type OspfShTime struct {
	Second     uint32 `protobuf:"varint,1,opt,name=second" json:"second,omitempty"`
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond" json:"nanosecond,omitempty"`
}

func (m *OspfShTime) Reset()                    { *m = OspfShTime{} }
func (m *OspfShTime) String() string            { return proto.CompactTextString(m) }
func (*OspfShTime) ProtoMessage()               {}
func (*OspfShTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *OspfShTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

// Reason why LSA is not deleted
type OspfShDbNotDelete struct {
	// The amount of time since the last check was made to free this LSA (s)
	FreeTime uint32 `protobuf:"varint,1,opt,name=free_time,json=freeTime" json:"free_time,omitempty"`
	// If true, the reason not to delete this LSA is because delete flag not set on this LSA
	NoDelete bool `protobuf:"varint,2,opt,name=no_delete,json=noDelete" json:"no_delete,omitempty"`
	// If true, the reason  not to delete this LSA is because neighbor is in exchange state
	NeighborExchange bool `protobuf:"varint,3,opt,name=neighbor_exchange,json=neighborExchange" json:"neighbor_exchange,omitempty"`
	// If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table
	RoutingTable bool `protobuf:"varint,4,opt,name=routing_table,json=routingTable" json:"routing_table,omitempty"`
	// If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty
	Acknowledgement bool `protobuf:"varint,5,opt,name=acknowledgement" json:"acknowledgement,omitempty"`
	// If true, the reason not to delete this LSA is because it is in Maxage Queue
	MaximumAge bool `protobuf:"varint,6,opt,name=maximum_age,json=maximumAge" json:"maximum_age,omitempty"`
	// If true, the reason not to delete this LSA is because it is in partial SPF queue
	PartialSpf bool `protobuf:"varint,7,opt,name=partial_spf,json=partialSpf" json:"partial_spf,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for flooding or retransmission
	FloodPending bool `protobuf:"varint,8,opt,name=flood_pending,json=floodPending" json:"flood_pending,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
	RateLimit bool `protobuf:"varint,9,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	// If true, the reason not to delete this LSA is because NSR ACK from standby is pending
	NsrAckPending bool `protobuf:"varint,10,opt,name=nsr_ack_pending,json=nsrAckPending" json:"nsr_ack_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending summary LSA originating
	SumOrigPending bool `protobuf:"varint,11,opt,name=sum_orig_pending,json=sumOrigPending" json:"sum_orig_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending flooding on switchover
	NsrFloodRequired bool `protobuf:"varint,12,opt,name=nsr_flood_required,json=nsrFloodRequired" json:"nsr_flood_required,omitempty"`
}

func (m *OspfShDbNotDelete) Reset()                    { *m = OspfShDbNotDelete{} }
func (m *OspfShDbNotDelete) String() string            { return proto.CompactTextString(m) }
func (*OspfShDbNotDelete) ProtoMessage()               {}
func (*OspfShDbNotDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OspfShDbNotDelete) GetFreeTime() uint32 {
	if m != nil {
		return m.FreeTime
	}
	return 0
}

func (m *OspfShDbNotDelete) GetNoDelete() bool {
	if m != nil {
		return m.NoDelete
	}
	return false
}

func (m *OspfShDbNotDelete) GetNeighborExchange() bool {
	if m != nil {
		return m.NeighborExchange
	}
	return false
}

func (m *OspfShDbNotDelete) GetRoutingTable() bool {
	if m != nil {
		return m.RoutingTable
	}
	return false
}

func (m *OspfShDbNotDelete) GetAcknowledgement() bool {
	if m != nil {
		return m.Acknowledgement
	}
	return false
}

func (m *OspfShDbNotDelete) GetMaximumAge() bool {
	if m != nil {
		return m.MaximumAge
	}
	return false
}

func (m *OspfShDbNotDelete) GetPartialSpf() bool {
	if m != nil {
		return m.PartialSpf
	}
	return false
}

func (m *OspfShDbNotDelete) GetFloodPending() bool {
	if m != nil {
		return m.FloodPending
	}
	return false
}

func (m *OspfShDbNotDelete) GetRateLimit() bool {
	if m != nil {
		return m.RateLimit
	}
	return false
}

func (m *OspfShDbNotDelete) GetNsrAckPending() bool {
	if m != nil {
		return m.NsrAckPending
	}
	return false
}

func (m *OspfShDbNotDelete) GetSumOrigPending() bool {
	if m != nil {
		return m.SumOrigPending
	}
	return false
}

func (m *OspfShDbNotDelete) GetNsrFloodRequired() bool {
	if m != nil {
		return m.NsrFloodRequired
	}
	return false
}

// OSPF LSA throttle timer table information
type OspfShDbThrottleTimer struct {
	// Timer table
	TimerLocation string `protobuf:"bytes,1,opt,name=timer_location,json=timerLocation" json:"timer_location,omitempty"`
	// Timer type
	TimerType string `protobuf:"bytes,2,opt,name=timer_type,json=timerType" json:"timer_type,omitempty"`
	// Second table index
	SecondTableIndex uint32 `protobuf:"varint,3,opt,name=second_table_index,json=secondTableIndex" json:"second_table_index,omitempty"`
	// Minute table index
	MinuteTableIndex uint32 `protobuf:"varint,4,opt,name=minute_table_index,json=minuteTableIndex" json:"minute_table_index,omitempty"`
	// Last Second table index processed
	LastInstSecondTableIndex uint32 `protobuf:"varint,5,opt,name=last_inst_second_table_index,json=lastInstSecondTableIndex" json:"last_inst_second_table_index,omitempty"`
	// Last Minute table index processed
	LastInstMinuteTableIndex uint32 `protobuf:"varint,6,opt,name=last_inst_minute_table_index,json=lastInstMinuteTableIndex" json:"last_inst_minute_table_index,omitempty"`
}

func (m *OspfShDbThrottleTimer) Reset()                    { *m = OspfShDbThrottleTimer{} }
func (m *OspfShDbThrottleTimer) String() string            { return proto.CompactTextString(m) }
func (*OspfShDbThrottleTimer) ProtoMessage()               {}
func (*OspfShDbThrottleTimer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OspfShDbThrottleTimer) GetTimerLocation() string {
	if m != nil {
		return m.TimerLocation
	}
	return ""
}

func (m *OspfShDbThrottleTimer) GetTimerType() string {
	if m != nil {
		return m.TimerType
	}
	return ""
}

func (m *OspfShDbThrottleTimer) GetSecondTableIndex() uint32 {
	if m != nil {
		return m.SecondTableIndex
	}
	return 0
}

func (m *OspfShDbThrottleTimer) GetMinuteTableIndex() uint32 {
	if m != nil {
		return m.MinuteTableIndex
	}
	return 0
}

func (m *OspfShDbThrottleTimer) GetLastInstSecondTableIndex() uint32 {
	if m != nil {
		return m.LastInstSecondTableIndex
	}
	return 0
}

func (m *OspfShDbThrottleTimer) GetLastInstMinuteTableIndex() uint32 {
	if m != nil {
		return m.LastInstMinuteTableIndex
	}
	return 0
}

// OSPF LSA Database Header
type OspfShDbHeader struct {
	// LSA type
	LsType string `protobuf:"bytes,1,opt,name=ls_type,json=lsType" json:"ls_type,omitempty"`
	// LS ID
	Lsid string `protobuf:"bytes,2,opt,name=lsid" json:"lsid,omitempty"`
	// Router ID of Advertising Router
	AdvertisingRouter string `protobuf:"bytes,3,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	// Area ID in decimal or dotted-decimal format
	LsaAreaId string `protobuf:"bytes,4,opt,name=lsa_area_id,json=lsaAreaId" json:"lsa_area_id,omitempty"`
	// LSA's Age (s)
	LsaAge uint32 `protobuf:"varint,5,opt,name=lsa_age,json=lsaAge" json:"lsa_age,omitempty"`
	// If true, Do Not Age this LSA
	DnAgeLsa bool `protobuf:"varint,6,opt,name=dn_age_lsa,json=dnAgeLsa" json:"dn_age_lsa,omitempty"`
	// If true,  LSA received from neighbor during NSF
	Nsf bool `protobuf:"varint,7,opt,name=nsf" json:"nsf,omitempty"`
	// Current Sequence number
	SequenceNumber uint32 `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Checksum value
	Checksum uint32 `protobuf:"varint,9,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *OspfShDbHeader) Reset()                    { *m = OspfShDbHeader{} }
func (m *OspfShDbHeader) String() string            { return proto.CompactTextString(m) }
func (*OspfShDbHeader) ProtoMessage()               {}
func (*OspfShDbHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OspfShDbHeader) GetLsType() string {
	if m != nil {
		return m.LsType
	}
	return ""
}

func (m *OspfShDbHeader) GetLsid() string {
	if m != nil {
		return m.Lsid
	}
	return ""
}

func (m *OspfShDbHeader) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *OspfShDbHeader) GetLsaAreaId() string {
	if m != nil {
		return m.LsaAreaId
	}
	return ""
}

func (m *OspfShDbHeader) GetLsaAge() uint32 {
	if m != nil {
		return m.LsaAge
	}
	return 0
}

func (m *OspfShDbHeader) GetDnAgeLsa() bool {
	if m != nil {
		return m.DnAgeLsa
	}
	return false
}

func (m *OspfShDbHeader) GetNsf() bool {
	if m != nil {
		return m.Nsf
	}
	return false
}

func (m *OspfShDbHeader) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *OspfShDbHeader) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

// OSPF Detailed LSA Database Information
type OspfShDbDetail struct {
	// If true, type of service capable indicated by LSA's option field
	TosCapable bool `protobuf:"varint,1,opt,name=tos_capable,json=tosCapable" json:"tos_capable,omitempty"`
	// If true,  capable of type 7 to 5 translation indicated by LSA's option field
	NssaTranslation bool `protobuf:"varint,2,opt,name=nssa_translation,json=nssaTranslation" json:"nssa_translation,omitempty"`
	// If true, capable of demand circuit as indicated by LSA's option field
	DemandCircuit bool `protobuf:"varint,3,opt,name=demand_circuit,json=demandCircuit" json:"demand_circuit,omitempty"`
	// if true, DN bit set on the summary LSA indicated by LSA's option field
	DnBit bool `protobuf:"varint,4,opt,name=dn_bit,json=dnBit" json:"dn_bit,omitempty"`
	// LSA throttle timer table information
	LsaThrottleTimer *OspfShDbThrottleTimer `protobuf:"bytes,5,opt,name=lsa_throttle_timer,json=lsaThrottleTimer" json:"lsa_throttle_timer,omitempty"`
	// Time LSA was last updated
	LsaLastUpdatedTime *OspfShTime `protobuf:"bytes,6,opt,name=lsa_last_updated_time,json=lsaLastUpdatedTime" json:"lsa_last_updated_time,omitempty"`
	// Current time stamp
	LsadbBaseTimeStamp *OspfShTime `protobuf:"bytes,7,opt,name=lsadb_base_time_stamp,json=lsadbBaseTimeStamp" json:"lsadb_base_time_stamp,omitempty"`
	// Due time for rate-limit timer (ms)
	LsaRateLimitDueTime uint32 `protobuf:"varint,8,opt,name=lsa_rate_limit_due_time,json=lsaRateLimitDueTime" json:"lsa_rate_limit_due_time,omitempty"`
	// Clock stamp since boot
	LsadbBaseClock uint64 `protobuf:"varint,9,opt,name=lsadb_base_clock,json=lsadbBaseClock" json:"lsadb_base_clock,omitempty"`
	// If true, Routing Bit set on the LSA
	RoutingBit bool `protobuf:"varint,10,opt,name=routing_bit,json=routingBit" json:"routing_bit,omitempty"`
	// If true, Advertising Router is reachable
	AdvertisingRouterReachable bool `protobuf:"varint,11,opt,name=advertising_router_reachable,json=advertisingRouterReachable" json:"advertising_router_reachable,omitempty"`
	// Reason why LSA is not deleted
	NotDelete *OspfShDbNotDelete `protobuf:"bytes,12,opt,name=not_delete,json=notDelete" json:"not_delete,omitempty"`
	// Length of the LSA
	Length uint32 `protobuf:"varint,13,opt,name=length" json:"length,omitempty"`
	// Summary Origin
	SumOrigin uint32 `protobuf:"varint,14,opt,name=sum_origin,json=sumOrigin" json:"sum_origin,omitempty"`
	// External Origin
	AseOrigin uint32 `protobuf:"varint,15,opt,name=ase_origin,json=aseOrigin" json:"ase_origin,omitempty"`
	// Not In Sync With Active
	InSync uint32 `protobuf:"varint,16,opt,name=in_sync,json=inSync" json:"in_sync,omitempty"`
	// Current LSA prefix priority
	LsaPrefixPriority uint32 `protobuf:"varint,17,opt,name=lsa_prefix_priority,json=lsaPrefixPriority" json:"lsa_prefix_priority,omitempty"`
	// New LSA prefix priority
	NewLsaPrefixPriority uint32 `protobuf:"varint,18,opt,name=new_lsa_prefix_priority,json=newLsaPrefixPriority" json:"new_lsa_prefix_priority,omitempty"`
	// LSA flood required after FO
	LsaFloodRequiredPostFailOver bool `protobuf:"varint,19,opt,name=lsa_flood_required_post_fail_over,json=lsaFloodRequiredPostFailOver" json:"lsa_flood_required_post_fail_over,omitempty"`
}

func (m *OspfShDbDetail) Reset()                    { *m = OspfShDbDetail{} }
func (m *OspfShDbDetail) String() string            { return proto.CompactTextString(m) }
func (*OspfShDbDetail) ProtoMessage()               {}
func (*OspfShDbDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OspfShDbDetail) GetTosCapable() bool {
	if m != nil {
		return m.TosCapable
	}
	return false
}

func (m *OspfShDbDetail) GetNssaTranslation() bool {
	if m != nil {
		return m.NssaTranslation
	}
	return false
}

func (m *OspfShDbDetail) GetDemandCircuit() bool {
	if m != nil {
		return m.DemandCircuit
	}
	return false
}

func (m *OspfShDbDetail) GetDnBit() bool {
	if m != nil {
		return m.DnBit
	}
	return false
}

func (m *OspfShDbDetail) GetLsaThrottleTimer() *OspfShDbThrottleTimer {
	if m != nil {
		return m.LsaThrottleTimer
	}
	return nil
}

func (m *OspfShDbDetail) GetLsaLastUpdatedTime() *OspfShTime {
	if m != nil {
		return m.LsaLastUpdatedTime
	}
	return nil
}

func (m *OspfShDbDetail) GetLsadbBaseTimeStamp() *OspfShTime {
	if m != nil {
		return m.LsadbBaseTimeStamp
	}
	return nil
}

func (m *OspfShDbDetail) GetLsaRateLimitDueTime() uint32 {
	if m != nil {
		return m.LsaRateLimitDueTime
	}
	return 0
}

func (m *OspfShDbDetail) GetLsadbBaseClock() uint64 {
	if m != nil {
		return m.LsadbBaseClock
	}
	return 0
}

func (m *OspfShDbDetail) GetRoutingBit() bool {
	if m != nil {
		return m.RoutingBit
	}
	return false
}

func (m *OspfShDbDetail) GetAdvertisingRouterReachable() bool {
	if m != nil {
		return m.AdvertisingRouterReachable
	}
	return false
}

func (m *OspfShDbDetail) GetNotDelete() *OspfShDbNotDelete {
	if m != nil {
		return m.NotDelete
	}
	return nil
}

func (m *OspfShDbDetail) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *OspfShDbDetail) GetSumOrigin() uint32 {
	if m != nil {
		return m.SumOrigin
	}
	return 0
}

func (m *OspfShDbDetail) GetAseOrigin() uint32 {
	if m != nil {
		return m.AseOrigin
	}
	return 0
}

func (m *OspfShDbDetail) GetInSync() uint32 {
	if m != nil {
		return m.InSync
	}
	return 0
}

func (m *OspfShDbDetail) GetLsaPrefixPriority() uint32 {
	if m != nil {
		return m.LsaPrefixPriority
	}
	return 0
}

func (m *OspfShDbDetail) GetNewLsaPrefixPriority() uint32 {
	if m != nil {
		return m.NewLsaPrefixPriority
	}
	return 0
}

func (m *OspfShDbDetail) GetLsaFloodRequiredPostFailOver() bool {
	if m != nil {
		return m.LsaFloodRequiredPostFailOver
	}
	return false
}

// OSPF External Type of service specific Information
type OspfShLsaExTos struct {
	// Cost of this route
	ExternalMetric uint32 `protobuf:"varint,1,opt,name=external_metric,json=externalMetric" json:"external_metric,omitempty"`
	// External LSA metric type
	ExternalMetricType string `protobuf:"bytes,2,opt,name=external_metric_type,json=externalMetricType" json:"external_metric_type,omitempty"`
	// Type of Service
	ExternalTos uint32 `protobuf:"varint,3,opt,name=external_tos,json=externalTos" json:"external_tos,omitempty"`
	// Forwarding Address
	ForwardingAddress string `protobuf:"bytes,4,opt,name=forwarding_address,json=forwardingAddress" json:"forwarding_address,omitempty"`
	// Route Tag
	ExternalTag uint32 `protobuf:"varint,5,opt,name=external_tag,json=externalTag" json:"external_tag,omitempty"`
}

func (m *OspfShLsaExTos) Reset()                    { *m = OspfShLsaExTos{} }
func (m *OspfShLsaExTos) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaExTos) ProtoMessage()               {}
func (*OspfShLsaExTos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OspfShLsaExTos) GetExternalMetric() uint32 {
	if m != nil {
		return m.ExternalMetric
	}
	return 0
}

func (m *OspfShLsaExTos) GetExternalMetricType() string {
	if m != nil {
		return m.ExternalMetricType
	}
	return ""
}

func (m *OspfShLsaExTos) GetExternalTos() uint32 {
	if m != nil {
		return m.ExternalTos
	}
	return 0
}

func (m *OspfShLsaExTos) GetForwardingAddress() string {
	if m != nil {
		return m.ForwardingAddress
	}
	return ""
}

func (m *OspfShLsaExTos) GetExternalTag() uint32 {
	if m != nil {
		return m.ExternalTag
	}
	return 0
}

// OSPF External LSA
type OspfShLsaExternal struct {
	// Prefix length
	ExternalPrefixLength uint32 `protobuf:"varint,1,opt,name=external_prefix_length,json=externalPrefixLength" json:"external_prefix_length,omitempty"`
	// If true, internal max-metric LSA
	InternalExternalLsa bool `protobuf:"varint,2,opt,name=internal_external_lsa,json=internalExternalLsa" json:"internal_external_lsa,omitempty"`
	// Type of service information
	ExternalTosMetric []*OspfShLsaExTos `protobuf:"bytes,3,rep,name=external_tos_metric,json=externalTosMetric" json:"external_tos_metric,omitempty"`
}

func (m *OspfShLsaExternal) Reset()                    { *m = OspfShLsaExternal{} }
func (m *OspfShLsaExternal) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaExternal) ProtoMessage()               {}
func (*OspfShLsaExternal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OspfShLsaExternal) GetExternalPrefixLength() uint32 {
	if m != nil {
		return m.ExternalPrefixLength
	}
	return 0
}

func (m *OspfShLsaExternal) GetInternalExternalLsa() bool {
	if m != nil {
		return m.InternalExternalLsa
	}
	return false
}

func (m *OspfShLsaExternal) GetExternalTosMetric() []*OspfShLsaExTos {
	if m != nil {
		return m.ExternalTosMetric
	}
	return nil
}

// OSPF Network LSA
type OspfShLsaNetwork struct {
	// Network prefix length
	NetworkPrefixLength uint32 `protobuf:"varint,1,opt,name=network_prefix_length,json=networkPrefixLength" json:"network_prefix_length,omitempty"`
	// Neighbor router list
	NeighborRouterList [][]byte `protobuf:"bytes,2,rep,name=neighbor_router_list,json=neighborRouterList,proto3" json:"neighbor_router_list,omitempty"`
}

func (m *OspfShLsaNetwork) Reset()                    { *m = OspfShLsaNetwork{} }
func (m *OspfShLsaNetwork) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaNetwork) ProtoMessage()               {}
func (*OspfShLsaNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *OspfShLsaNetwork) GetNetworkPrefixLength() uint32 {
	if m != nil {
		return m.NetworkPrefixLength
	}
	return 0
}

func (m *OspfShLsaNetwork) GetNeighborRouterList() [][]byte {
	if m != nil {
		return m.NeighborRouterList
	}
	return nil
}

// OSPF Opaque LSA Sub-TLV Information
type OspfShOpqSubtlv struct {
	// Type of sub TLV
	SubTlvType string `protobuf:"bytes,1,opt,name=sub_tlv_type,json=subTlvType" json:"sub_tlv_type,omitempty"`
	// Length of sub TLV
	SubTlvLength uint32 `protobuf:"varint,2,opt,name=sub_tlv_length,json=subTlvLength" json:"sub_tlv_length,omitempty"`
	// Value of sub TLV
	SubTlvValue []byte `protobuf:"bytes,3,opt,name=sub_tlv_value,json=subTlvValue,proto3" json:"sub_tlv_value,omitempty"`
	// List of Sub-TLVs
	SubTlvSubTlv []*OspfShOpqSubtlv `protobuf:"bytes,4,rep,name=sub_tlv_sub_tlv,json=subTlvSubTlv" json:"sub_tlv_sub_tlv,omitempty"`
}

func (m *OspfShOpqSubtlv) Reset()                    { *m = OspfShOpqSubtlv{} }
func (m *OspfShOpqSubtlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqSubtlv) ProtoMessage()               {}
func (*OspfShOpqSubtlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OspfShOpqSubtlv) GetSubTlvType() string {
	if m != nil {
		return m.SubTlvType
	}
	return ""
}

func (m *OspfShOpqSubtlv) GetSubTlvLength() uint32 {
	if m != nil {
		return m.SubTlvLength
	}
	return 0
}

func (m *OspfShOpqSubtlv) GetSubTlvValue() []byte {
	if m != nil {
		return m.SubTlvValue
	}
	return nil
}

func (m *OspfShOpqSubtlv) GetSubTlvSubTlv() []*OspfShOpqSubtlv {
	if m != nil {
		return m.SubTlvSubTlv
	}
	return nil
}

// OSPF Opaque LSA TLV Information
type OspfShOpqTlv struct {
	// Type of top-level TLV
	TlvType uint32 `protobuf:"varint,1,opt,name=tlv_type,json=tlvType" json:"tlv_type,omitempty"`
	// Length of top-level TLV
	TlvLength uint32 `protobuf:"varint,2,opt,name=tlv_length,json=tlvLength" json:"tlv_length,omitempty"`
	// MPLS-TE Router ID
	MplsRouterId uint32 `protobuf:"varint,3,opt,name=mpls_router_id,json=mplsRouterId" json:"mpls_router_id,omitempty"`
	// MPLS DS-TE supported
	MplsDsteLink bool `protobuf:"varint,4,opt,name=mpls_dste_link,json=mplsDsteLink" json:"mpls_dste_link,omitempty"`
	// TLV direct data
	TlvData []byte `protobuf:"bytes,5,opt,name=tlv_data,json=tlvData,proto3" json:"tlv_data,omitempty"`
	// List of Sub-TLVs
	TeLinkSubTlv []*OspfShOpqSubtlv `protobuf:"bytes,6,rep,name=te_link_sub_tlv,json=teLinkSubTlv" json:"te_link_sub_tlv,omitempty"`
}

func (m *OspfShOpqTlv) Reset()                    { *m = OspfShOpqTlv{} }
func (m *OspfShOpqTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqTlv) ProtoMessage()               {}
func (*OspfShOpqTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OspfShOpqTlv) GetTlvType() uint32 {
	if m != nil {
		return m.TlvType
	}
	return 0
}

func (m *OspfShOpqTlv) GetTlvLength() uint32 {
	if m != nil {
		return m.TlvLength
	}
	return 0
}

func (m *OspfShOpqTlv) GetMplsRouterId() uint32 {
	if m != nil {
		return m.MplsRouterId
	}
	return 0
}

func (m *OspfShOpqTlv) GetMplsDsteLink() bool {
	if m != nil {
		return m.MplsDsteLink
	}
	return false
}

func (m *OspfShOpqTlv) GetTlvData() []byte {
	if m != nil {
		return m.TlvData
	}
	return nil
}

func (m *OspfShOpqTlv) GetTeLinkSubTlv() []*OspfShOpqSubtlv {
	if m != nil {
		return m.TeLinkSubTlv
	}
	return nil
}

// OSPF Opaque-link LSA Information
type OspfShLsaOpqLink struct {
	// Interface on which the Opaque link LSA is received
	OpaqueInterfaceName string `protobuf:"bytes,1,opt,name=opaque_interface_name,json=opaqueInterfaceName" json:"opaque_interface_name,omitempty"`
}

func (m *OspfShLsaOpqLink) Reset()                    { *m = OspfShLsaOpqLink{} }
func (m *OspfShLsaOpqLink) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqLink) ProtoMessage()               {}
func (*OspfShLsaOpqLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OspfShLsaOpqLink) GetOpaqueInterfaceName() string {
	if m != nil {
		return m.OpaqueInterfaceName
	}
	return ""
}

// OSPF Opaque-area type 1 MPLS-TE LSA Information
type OspfShLsaOpqRrr struct {
	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList" json:"tlv_list,omitempty"`
}

func (m *OspfShLsaOpqRrr) Reset()                    { *m = OspfShLsaOpqRrr{} }
func (m *OspfShLsaOpqRrr) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqRrr) ProtoMessage()               {}
func (*OspfShLsaOpqRrr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OspfShLsaOpqRrr) GetTlvList() []*OspfShOpqTlv {
	if m != nil {
		return m.TlvList
	}
	return nil
}

// OSPF Opaque-area type 128 ExtendedPrefix LSA Information
type OspfShLsaOpqEpl struct {
	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList" json:"tlv_list,omitempty"`
}

func (m *OspfShLsaOpqEpl) Reset()                    { *m = OspfShLsaOpqEpl{} }
func (m *OspfShLsaOpqEpl) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqEpl) ProtoMessage()               {}
func (*OspfShLsaOpqEpl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *OspfShLsaOpqEpl) GetTlvList() []*OspfShOpqTlv {
	if m != nil {
		return m.TlvList
	}
	return nil
}

// OSPF Opaque-area type 8 ExtendedLink LSA Information
type OspfShLsaOpqEll struct {
	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList" json:"tlv_list,omitempty"`
}

func (m *OspfShLsaOpqEll) Reset()                    { *m = OspfShLsaOpqEll{} }
func (m *OspfShLsaOpqEll) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqEll) ProtoMessage()               {}
func (*OspfShLsaOpqEll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OspfShLsaOpqEll) GetTlvList() []*OspfShOpqTlv {
	if m != nil {
		return m.TlvList
	}
	return nil
}

// OSPF Opaque Router Information TLV
type OspfShOpqRiUnknownTlv struct {
	// Type of TLV
	RiGenTlvType uint32 `protobuf:"varint,1,opt,name=ri_gen_tlv_type,json=riGenTlvType" json:"ri_gen_tlv_type,omitempty"`
	// Length of TLV
	RiGenTlvLength uint32 `protobuf:"varint,2,opt,name=ri_gen_tlv_length,json=riGenTlvLength" json:"ri_gen_tlv_length,omitempty"`
	// Data in TLV
	RiGenValue []byte `protobuf:"bytes,3,opt,name=ri_gen_value,json=riGenValue,proto3" json:"ri_gen_value,omitempty"`
}

func (m *OspfShOpqRiUnknownTlv) Reset()                    { *m = OspfShOpqRiUnknownTlv{} }
func (m *OspfShOpqRiUnknownTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiUnknownTlv) ProtoMessage()               {}
func (*OspfShOpqRiUnknownTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OspfShOpqRiUnknownTlv) GetRiGenTlvType() uint32 {
	if m != nil {
		return m.RiGenTlvType
	}
	return 0
}

func (m *OspfShOpqRiUnknownTlv) GetRiGenTlvLength() uint32 {
	if m != nil {
		return m.RiGenTlvLength
	}
	return 0
}

func (m *OspfShOpqRiUnknownTlv) GetRiGenValue() []byte {
	if m != nil {
		return m.RiGenValue
	}
	return nil
}

// OSPF Router Capabilities TLV
type OspfShOpqRiRtrcapTlv struct {
	// Length of TLV
	RtrCapTlvLength uint32 `protobuf:"varint,1,opt,name=rtr_cap_tlv_length,json=rtrCapTlvLength" json:"rtr_cap_tlv_length,omitempty"`
	// Graceful Restart Capability
	RtrCapGracefulRestart bool `protobuf:"varint,2,opt,name=rtr_cap_graceful_restart,json=rtrCapGracefulRestart" json:"rtr_cap_graceful_restart,omitempty"`
	// Graceful Restart Helper Capability
	RtrCapGracefulRestartHelper bool `protobuf:"varint,3,opt,name=rtr_cap_graceful_restart_helper,json=rtrCapGracefulRestartHelper" json:"rtr_cap_graceful_restart_helper,omitempty"`
	// Stub Router capability
	RtrCapStubRtr bool `protobuf:"varint,4,opt,name=rtr_cap_stub_rtr,json=rtrCapStubRtr" json:"rtr_cap_stub_rtr,omitempty"`
	// Traffic Engineering capability of area
	RtrCapAreaTe bool `protobuf:"varint,5,opt,name=rtr_cap_area_te,json=rtrCapAreaTe" json:"rtr_cap_area_te,omitempty"`
	// P2P LAN Capability
	RtrCapP2Plan bool `protobuf:"varint,6,opt,name=rtr_cap_p2_plan,json=rtrCapP2Plan" json:"rtr_cap_p2_plan,omitempty"`
	// TE Experimental bit
	RtrCapTeExp bool `protobuf:"varint,7,opt,name=rtr_cap_te_exp,json=rtrCapTeExp" json:"rtr_cap_te_exp,omitempty"`
	// All capability bits
	RtrCapAllBits uint32 `protobuf:"varint,8,opt,name=rtr_cap_all_bits,json=rtrCapAllBits" json:"rtr_cap_all_bits,omitempty"`
	// Additional Information in TLV
	RtrCapAdditionalInfo []byte `protobuf:"bytes,9,opt,name=rtr_cap_additional_info,json=rtrCapAdditionalInfo,proto3" json:"rtr_cap_additional_info,omitempty"`
}

func (m *OspfShOpqRiRtrcapTlv) Reset()                    { *m = OspfShOpqRiRtrcapTlv{} }
func (m *OspfShOpqRiRtrcapTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiRtrcapTlv) ProtoMessage()               {}
func (*OspfShOpqRiRtrcapTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapTlvLength() uint32 {
	if m != nil {
		return m.RtrCapTlvLength
	}
	return 0
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapGracefulRestart() bool {
	if m != nil {
		return m.RtrCapGracefulRestart
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapGracefulRestartHelper() bool {
	if m != nil {
		return m.RtrCapGracefulRestartHelper
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapStubRtr() bool {
	if m != nil {
		return m.RtrCapStubRtr
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapAreaTe() bool {
	if m != nil {
		return m.RtrCapAreaTe
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapP2Plan() bool {
	if m != nil {
		return m.RtrCapP2Plan
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapTeExp() bool {
	if m != nil {
		return m.RtrCapTeExp
	}
	return false
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapAllBits() uint32 {
	if m != nil {
		return m.RtrCapAllBits
	}
	return 0
}

func (m *OspfShOpqRiRtrcapTlv) GetRtrCapAdditionalInfo() []byte {
	if m != nil {
		return m.RtrCapAdditionalInfo
	}
	return nil
}

// PCE IPv4 Address SubTLV
type OspfShOpqRiPceIpv4AddrStlv struct {
	// PCE IPv4 Address
	PceIpv4Addr string `protobuf:"bytes,1,opt,name=pce_ipv4_addr,json=pceIpv4Addr" json:"pce_ipv4_addr,omitempty"`
}

func (m *OspfShOpqRiPceIpv4AddrStlv) Reset()                    { *m = OspfShOpqRiPceIpv4AddrStlv{} }
func (m *OspfShOpqRiPceIpv4AddrStlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiPceIpv4AddrStlv) ProtoMessage()               {}
func (*OspfShOpqRiPceIpv4AddrStlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *OspfShOpqRiPceIpv4AddrStlv) GetPceIpv4Addr() string {
	if m != nil {
		return m.PceIpv4Addr
	}
	return ""
}

// PCE IPv6 Address SubTLV
type OspfShOpqRiPceIpv6AddrStlv struct {
	// PCE IPv6 Address
	PceIpv6Addr string `protobuf:"bytes,1,opt,name=pce_ipv6_addr,json=pceIpv6Addr" json:"pce_ipv6_addr,omitempty"`
}

func (m *OspfShOpqRiPceIpv6AddrStlv) Reset()                    { *m = OspfShOpqRiPceIpv6AddrStlv{} }
func (m *OspfShOpqRiPceIpv6AddrStlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiPceIpv6AddrStlv) ProtoMessage()               {}
func (*OspfShOpqRiPceIpv6AddrStlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *OspfShOpqRiPceIpv6AddrStlv) GetPceIpv6Addr() string {
	if m != nil {
		return m.PceIpv6Addr
	}
	return ""
}

// OSPF PCE Address SubTLVs
type OspfShOpqRiPceAddrStlvsUnion struct {
	PceAddrType string `protobuf:"bytes,1,opt,name=pce_addr_type,json=pceAddrType" json:"pce_addr_type,omitempty"`
	// Unknown PCE Addr TLV
	PceAddrUnknownTlv *OspfShOpqRiUnknownTlv `protobuf:"bytes,2,opt,name=pce_addr_unknown_tlv,json=pceAddrUnknownTlv" json:"pce_addr_unknown_tlv,omitempty"`
	// IPv4 PCE Address
	Ipv4PceAddr *OspfShOpqRiPceIpv4AddrStlv `protobuf:"bytes,3,opt,name=ipv4_pce_addr,json=ipv4PceAddr" json:"ipv4_pce_addr,omitempty"`
	// IPv6 PCE Address
	Ipv6PceAddr *OspfShOpqRiPceIpv6AddrStlv `protobuf:"bytes,4,opt,name=ipv6_pce_addr,json=ipv6PceAddr" json:"ipv6_pce_addr,omitempty"`
}

func (m *OspfShOpqRiPceAddrStlvsUnion) Reset()                    { *m = OspfShOpqRiPceAddrStlvsUnion{} }
func (m *OspfShOpqRiPceAddrStlvsUnion) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiPceAddrStlvsUnion) ProtoMessage()               {}
func (*OspfShOpqRiPceAddrStlvsUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *OspfShOpqRiPceAddrStlvsUnion) GetPceAddrType() string {
	if m != nil {
		return m.PceAddrType
	}
	return ""
}

func (m *OspfShOpqRiPceAddrStlvsUnion) GetPceAddrUnknownTlv() *OspfShOpqRiUnknownTlv {
	if m != nil {
		return m.PceAddrUnknownTlv
	}
	return nil
}

func (m *OspfShOpqRiPceAddrStlvsUnion) GetIpv4PceAddr() *OspfShOpqRiPceIpv4AddrStlv {
	if m != nil {
		return m.Ipv4PceAddr
	}
	return nil
}

func (m *OspfShOpqRiPceAddrStlvsUnion) GetIpv6PceAddr() *OspfShOpqRiPceIpv6AddrStlv {
	if m != nil {
		return m.Ipv6PceAddr
	}
	return nil
}

// OSPF PCE-Discovery PCE Scope SubTLV
type OspfShOpqRiPcedScopeStlv struct {
	// L Bit
	LBit bool `protobuf:"varint,1,opt,name=l_bit,json=lBit" json:"l_bit,omitempty"`
	// R Bit
	RBit bool `protobuf:"varint,2,opt,name=r_bit,json=rBit" json:"r_bit,omitempty"`
	// Rd Bit
	RdBit bool `protobuf:"varint,3,opt,name=rd_bit,json=rdBit" json:"rd_bit,omitempty"`
	// S Bit
	SBit bool `protobuf:"varint,4,opt,name=s_bit,json=sBit" json:"s_bit,omitempty"`
	// Sd Bit
	SdBit bool `protobuf:"varint,5,opt,name=sd_bit,json=sdBit" json:"sd_bit,omitempty"`
	// Y Bit
	YBit bool `protobuf:"varint,6,opt,name=y_bit,json=yBit" json:"y_bit,omitempty"`
	// Pref L
	PrefL uint32 `protobuf:"varint,7,opt,name=pref_l,json=prefL" json:"pref_l,omitempty"`
	// Pref R
	PrefR uint32 `protobuf:"varint,8,opt,name=pref_r,json=prefR" json:"pref_r,omitempty"`
	// Pref S
	PrefS uint32 `protobuf:"varint,9,opt,name=pref_s,json=prefS" json:"pref_s,omitempty"`
	// Pref Y
	PrefY uint32 `protobuf:"varint,10,opt,name=pref_y,json=prefY" json:"pref_y,omitempty"`
	// PCE Scope Information
	AllScopeInfoBits uint32 `protobuf:"varint,11,opt,name=all_scope_info_bits,json=allScopeInfoBits" json:"all_scope_info_bits,omitempty"`
}

func (m *OspfShOpqRiPcedScopeStlv) Reset()                    { *m = OspfShOpqRiPcedScopeStlv{} }
func (m *OspfShOpqRiPcedScopeStlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiPcedScopeStlv) ProtoMessage()               {}
func (*OspfShOpqRiPcedScopeStlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *OspfShOpqRiPcedScopeStlv) GetLBit() bool {
	if m != nil {
		return m.LBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetRBit() bool {
	if m != nil {
		return m.RBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetRdBit() bool {
	if m != nil {
		return m.RdBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetSBit() bool {
	if m != nil {
		return m.SBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetSdBit() bool {
	if m != nil {
		return m.SdBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetYBit() bool {
	if m != nil {
		return m.YBit
	}
	return false
}

func (m *OspfShOpqRiPcedScopeStlv) GetPrefL() uint32 {
	if m != nil {
		return m.PrefL
	}
	return 0
}

func (m *OspfShOpqRiPcedScopeStlv) GetPrefR() uint32 {
	if m != nil {
		return m.PrefR
	}
	return 0
}

func (m *OspfShOpqRiPcedScopeStlv) GetPrefS() uint32 {
	if m != nil {
		return m.PrefS
	}
	return 0
}

func (m *OspfShOpqRiPcedScopeStlv) GetPrefY() uint32 {
	if m != nil {
		return m.PrefY
	}
	return 0
}

func (m *OspfShOpqRiPcedScopeStlv) GetAllScopeInfoBits() uint32 {
	if m != nil {
		return m.AllScopeInfoBits
	}
	return 0
}

// OSPF PCE Discovery TLV
type OspfShOpqRiPcedTlv struct {
	// Length of TLV
	PcedtlvLength uint32 `protobuf:"varint,1,opt,name=pcedtlv_length,json=pcedtlvLength" json:"pcedtlv_length,omitempty"`
	// PCE Address
	PcedAddr *OspfShOpqRiPceAddrStlvsUnion `protobuf:"bytes,2,opt,name=pced_addr,json=pcedAddr" json:"pced_addr,omitempty"`
	// PCE Scope Information
	PcedScope *OspfShOpqRiPcedScopeStlv `protobuf:"bytes,3,opt,name=pced_scope,json=pcedScope" json:"pced_scope,omitempty"`
}

func (m *OspfShOpqRiPcedTlv) Reset()                    { *m = OspfShOpqRiPcedTlv{} }
func (m *OspfShOpqRiPcedTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiPcedTlv) ProtoMessage()               {}
func (*OspfShOpqRiPcedTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *OspfShOpqRiPcedTlv) GetPcedtlvLength() uint32 {
	if m != nil {
		return m.PcedtlvLength
	}
	return 0
}

func (m *OspfShOpqRiPcedTlv) GetPcedAddr() *OspfShOpqRiPceAddrStlvsUnion {
	if m != nil {
		return m.PcedAddr
	}
	return nil
}

func (m *OspfShOpqRiPcedTlv) GetPcedScope() *OspfShOpqRiPcedScopeStlv {
	if m != nil {
		return m.PcedScope
	}
	return nil
}

// OSPF SR Algorithm TLV
type OspfShOpqRiSrAlgoTlv struct {
	// Length of TLV
	SrAlgoLength uint32 `protobuf:"varint,1,opt,name=sr_algo_length,json=srAlgoLength" json:"sr_algo_length,omitempty"`
	// SR Algorithms
	SrAlgoValue []byte `protobuf:"bytes,2,opt,name=sr_algo_value,json=srAlgoValue,proto3" json:"sr_algo_value,omitempty"`
}

func (m *OspfShOpqRiSrAlgoTlv) Reset()                    { *m = OspfShOpqRiSrAlgoTlv{} }
func (m *OspfShOpqRiSrAlgoTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiSrAlgoTlv) ProtoMessage()               {}
func (*OspfShOpqRiSrAlgoTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *OspfShOpqRiSrAlgoTlv) GetSrAlgoLength() uint32 {
	if m != nil {
		return m.SrAlgoLength
	}
	return 0
}

func (m *OspfShOpqRiSrAlgoTlv) GetSrAlgoValue() []byte {
	if m != nil {
		return m.SrAlgoValue
	}
	return nil
}

// OSPF PCE-Discovery PCE Scope SubTLV
type OspfShSrSidStlv struct {
	// Length of sub-TLV
	SrSidLength uint32 `protobuf:"varint,1,opt,name=sr_sid_length,json=srSidLength" json:"sr_sid_length,omitempty"`
	// SID Value
	SrSidValue uint32 `protobuf:"varint,2,opt,name=sr_sid_value,json=srSidValue" json:"sr_sid_value,omitempty"`
}

func (m *OspfShSrSidStlv) Reset()                    { *m = OspfShSrSidStlv{} }
func (m *OspfShSrSidStlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShSrSidStlv) ProtoMessage()               {}
func (*OspfShSrSidStlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *OspfShSrSidStlv) GetSrSidLength() uint32 {
	if m != nil {
		return m.SrSidLength
	}
	return 0
}

func (m *OspfShSrSidStlv) GetSrSidValue() uint32 {
	if m != nil {
		return m.SrSidValue
	}
	return 0
}

// OSPF SR Range TLV
type OspfShOpqRiSrRangeTlv struct {
	// Length of TLV
	SrRangeLength uint32 `protobuf:"varint,1,opt,name=sr_range_length,json=srRangeLength" json:"sr_range_length,omitempty"`
	// SR Range Size
	SrRangeSize uint32 `protobuf:"varint,2,opt,name=sr_range_size,json=srRangeSize" json:"sr_range_size,omitempty"`
	// SID sub-TLV
	Sidtlv *OspfShSrSidStlv `protobuf:"bytes,3,opt,name=sidtlv" json:"sidtlv,omitempty"`
}

func (m *OspfShOpqRiSrRangeTlv) Reset()                    { *m = OspfShOpqRiSrRangeTlv{} }
func (m *OspfShOpqRiSrRangeTlv) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiSrRangeTlv) ProtoMessage()               {}
func (*OspfShOpqRiSrRangeTlv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *OspfShOpqRiSrRangeTlv) GetSrRangeLength() uint32 {
	if m != nil {
		return m.SrRangeLength
	}
	return 0
}

func (m *OspfShOpqRiSrRangeTlv) GetSrRangeSize() uint32 {
	if m != nil {
		return m.SrRangeSize
	}
	return 0
}

func (m *OspfShOpqRiSrRangeTlv) GetSidtlv() *OspfShSrSidStlv {
	if m != nil {
		return m.Sidtlv
	}
	return nil
}

// OSPF Router Information TLVs
type OspfShOpqRiTlvsUnion struct {
	RitlvInternalType string `protobuf:"bytes,1,opt,name=ritlv_internal_type,json=ritlvInternalType" json:"ritlv_internal_type,omitempty"`
	// Unknown Rtr Info TLV
	UnknownTlv *OspfShOpqRiUnknownTlv `protobuf:"bytes,2,opt,name=unknown_tlv,json=unknownTlv" json:"unknown_tlv,omitempty"`
	// Rtr Cap TLV
	RtrCapTlv *OspfShOpqRiRtrcapTlv `protobuf:"bytes,3,opt,name=rtr_cap_tlv,json=rtrCapTlv" json:"rtr_cap_tlv,omitempty"`
	// PCE Discovery TLV
	Pcedtlv *OspfShOpqRiPcedTlv `protobuf:"bytes,4,opt,name=pcedtlv" json:"pcedtlv,omitempty"`
	// SR Algorithm TLV
	SrAlgoTlv *OspfShOpqRiSrAlgoTlv `protobuf:"bytes,5,opt,name=sr_algo_tlv,json=srAlgoTlv" json:"sr_algo_tlv,omitempty"`
	// SR Range TLV
	SrRangeTlv *OspfShOpqRiSrRangeTlv `protobuf:"bytes,6,opt,name=sr_range_tlv,json=srRangeTlv" json:"sr_range_tlv,omitempty"`
}

func (m *OspfShOpqRiTlvsUnion) Reset()                    { *m = OspfShOpqRiTlvsUnion{} }
func (m *OspfShOpqRiTlvsUnion) String() string            { return proto.CompactTextString(m) }
func (*OspfShOpqRiTlvsUnion) ProtoMessage()               {}
func (*OspfShOpqRiTlvsUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *OspfShOpqRiTlvsUnion) GetRitlvInternalType() string {
	if m != nil {
		return m.RitlvInternalType
	}
	return ""
}

func (m *OspfShOpqRiTlvsUnion) GetUnknownTlv() *OspfShOpqRiUnknownTlv {
	if m != nil {
		return m.UnknownTlv
	}
	return nil
}

func (m *OspfShOpqRiTlvsUnion) GetRtrCapTlv() *OspfShOpqRiRtrcapTlv {
	if m != nil {
		return m.RtrCapTlv
	}
	return nil
}

func (m *OspfShOpqRiTlvsUnion) GetPcedtlv() *OspfShOpqRiPcedTlv {
	if m != nil {
		return m.Pcedtlv
	}
	return nil
}

func (m *OspfShOpqRiTlvsUnion) GetSrAlgoTlv() *OspfShOpqRiSrAlgoTlv {
	if m != nil {
		return m.SrAlgoTlv
	}
	return nil
}

func (m *OspfShOpqRiTlvsUnion) GetSrRangeTlv() *OspfShOpqRiSrRangeTlv {
	if m != nil {
		return m.SrRangeTlv
	}
	return nil
}

// OSPF Router Information LSA
type OspfShLsaOpqRi struct {
	// Opaque LSA flooding scope, a.k.a., Opaque LSA Type
	OpaqueRilsaScope string `protobuf:"bytes,1,opt,name=opaque_rilsa_scope,json=opaqueRilsaScope" json:"opaque_rilsa_scope,omitempty"`
	// Interface on which this Link-Local Opaque link LSA is received
	OpaqueRiInterfaceName string `protobuf:"bytes,2,opt,name=opaque_ri_interface_name,json=opaqueRiInterfaceName" json:"opaque_ri_interface_name,omitempty"`
	// Router Information TLV
	OpaqueRitlv []*OspfShOpqRiTlvsUnion `protobuf:"bytes,3,rep,name=opaque_ritlv,json=opaqueRitlv" json:"opaque_ritlv,omitempty"`
}

func (m *OspfShLsaOpqRi) Reset()                    { *m = OspfShLsaOpqRi{} }
func (m *OspfShLsaOpqRi) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqRi) ProtoMessage()               {}
func (*OspfShLsaOpqRi) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *OspfShLsaOpqRi) GetOpaqueRilsaScope() string {
	if m != nil {
		return m.OpaqueRilsaScope
	}
	return ""
}

func (m *OspfShLsaOpqRi) GetOpaqueRiInterfaceName() string {
	if m != nil {
		return m.OpaqueRiInterfaceName
	}
	return ""
}

func (m *OspfShLsaOpqRi) GetOpaqueRitlv() []*OspfShOpqRiTlvsUnion {
	if m != nil {
		return m.OpaqueRitlv
	}
	return nil
}

// OSPF Opaque-link type 3 grace LSA Information
type OspfShLsaOpqGrace struct {
	// The amount of time the router's neighbor should advertise it fully adjacent (s)
	GracePeriod uint32 `protobuf:"varint,1,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
	// Reason for router restart
	GraceReason string `protobuf:"bytes,2,opt,name=grace_reason,json=graceReason" json:"grace_reason,omitempty"`
	// IP interface address on the subnet associated with the grace LSA
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (m *OspfShLsaOpqGrace) Reset()                    { *m = OspfShLsaOpqGrace{} }
func (m *OspfShLsaOpqGrace) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaOpqGrace) ProtoMessage()               {}
func (*OspfShLsaOpqGrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *OspfShLsaOpqGrace) GetGracePeriod() uint32 {
	if m != nil {
		return m.GracePeriod
	}
	return 0
}

func (m *OspfShLsaOpqGrace) GetGraceReason() string {
	if m != nil {
		return m.GraceReason
	}
	return ""
}

func (m *OspfShLsaOpqGrace) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

// OSPF Router LSA TOS Metric
type OspfShTosMetric struct {
	// Type of Service
	RouterTos uint32 `protobuf:"varint,1,opt,name=router_tos,json=routerTos" json:"router_tos,omitempty"`
	// Type of service specific metric
	TosCost uint32 `protobuf:"varint,2,opt,name=tos_cost,json=tosCost" json:"tos_cost,omitempty"`
}

func (m *OspfShTosMetric) Reset()                    { *m = OspfShTosMetric{} }
func (m *OspfShTosMetric) String() string            { return proto.CompactTextString(m) }
func (*OspfShTosMetric) ProtoMessage()               {}
func (*OspfShTosMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *OspfShTosMetric) GetRouterTos() uint32 {
	if m != nil {
		return m.RouterTos
	}
	return 0
}

func (m *OspfShTosMetric) GetTosCost() uint32 {
	if m != nil {
		return m.TosCost
	}
	return 0
}

// OSPF Router LSA Links
type OspfShLink struct {
	// Link ID
	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	// Link Data
	LinkData string `protobuf:"bytes,2,opt,name=link_data,json=linkData" json:"link_data,omitempty"`
	// Type of link
	LinkType string `protobuf:"bytes,3,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// Cost for using this link
	LinkMetric uint32 `protobuf:"varint,4,opt,name=link_metric,json=linkMetric" json:"link_metric,omitempty"`
	// List of type of service metrics
	LinkTosList []*OspfShTosMetric `protobuf:"bytes,5,rep,name=link_tos_list,json=linkTosList" json:"link_tos_list,omitempty"`
}

func (m *OspfShLink) Reset()                    { *m = OspfShLink{} }
func (m *OspfShLink) String() string            { return proto.CompactTextString(m) }
func (*OspfShLink) ProtoMessage()               {}
func (*OspfShLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *OspfShLink) GetLinkId() string {
	if m != nil {
		return m.LinkId
	}
	return ""
}

func (m *OspfShLink) GetLinkData() string {
	if m != nil {
		return m.LinkData
	}
	return ""
}

func (m *OspfShLink) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *OspfShLink) GetLinkMetric() uint32 {
	if m != nil {
		return m.LinkMetric
	}
	return 0
}

func (m *OspfShLink) GetLinkTosList() []*OspfShTosMetric {
	if m != nil {
		return m.LinkTosList
	}
	return nil
}

// OSPF Router LSA
type OspfShLsaRouter struct {
	// If True, router is an Autonomous system Border Router
	RouterAsbr bool `protobuf:"varint,1,opt,name=router_asbr,json=routerAsbr" json:"router_asbr,omitempty"`
	// If True, router is an Area Border Router
	RouterAbr bool `protobuf:"varint,2,opt,name=router_abr,json=routerAbr" json:"router_abr,omitempty"`
	// If true, internal LSA
	InternalLsa bool `protobuf:"varint,3,opt,name=internal_lsa,json=internalLsa" json:"internal_lsa,omitempty"`
	// List of links in this LSA
	LinkList []*OspfShLink `protobuf:"bytes,4,rep,name=link_list,json=linkList" json:"link_list,omitempty"`
	// List of links for internal LSA
	InternalLinks []*OspfShLink `protobuf:"bytes,5,rep,name=internal_links,json=internalLinks" json:"internal_links,omitempty"`
}

func (m *OspfShLsaRouter) Reset()                    { *m = OspfShLsaRouter{} }
func (m *OspfShLsaRouter) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaRouter) ProtoMessage()               {}
func (*OspfShLsaRouter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *OspfShLsaRouter) GetRouterAsbr() bool {
	if m != nil {
		return m.RouterAsbr
	}
	return false
}

func (m *OspfShLsaRouter) GetRouterAbr() bool {
	if m != nil {
		return m.RouterAbr
	}
	return false
}

func (m *OspfShLsaRouter) GetInternalLsa() bool {
	if m != nil {
		return m.InternalLsa
	}
	return false
}

func (m *OspfShLsaRouter) GetLinkList() []*OspfShLink {
	if m != nil {
		return m.LinkList
	}
	return nil
}

func (m *OspfShLsaRouter) GetInternalLinks() []*OspfShLink {
	if m != nil {
		return m.InternalLinks
	}
	return nil
}

// OSPF Summary LSA
type OspfShLsaSummary struct {
	// Summary LSA prefix length
	SummaryPrefixLength uint32 `protobuf:"varint,1,opt,name=summary_prefix_length,json=summaryPrefixLength" json:"summary_prefix_length,omitempty"`
	// Metric
	SummaryLsaMetric []uint32 `protobuf:"varint,2,rep,packed,name=summary_lsa_metric,json=summaryLsaMetric" json:"summary_lsa_metric,omitempty"`
	// If true, internal max-metric LSA
	InternalSumLsa bool `protobuf:"varint,3,opt,name=internal_sum_lsa,json=internalSumLsa" json:"internal_sum_lsa,omitempty"`
}

func (m *OspfShLsaSummary) Reset()                    { *m = OspfShLsaSummary{} }
func (m *OspfShLsaSummary) String() string            { return proto.CompactTextString(m) }
func (*OspfShLsaSummary) ProtoMessage()               {}
func (*OspfShLsaSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *OspfShLsaSummary) GetSummaryPrefixLength() uint32 {
	if m != nil {
		return m.SummaryPrefixLength
	}
	return 0
}

func (m *OspfShLsaSummary) GetSummaryLsaMetric() []uint32 {
	if m != nil {
		return m.SummaryLsaMetric
	}
	return nil
}

func (m *OspfShLsaSummary) GetInternalSumLsa() bool {
	if m != nil {
		return m.InternalSumLsa
	}
	return false
}

// LSA internal information for an LSA
type OspfLsaInternalUnion struct {
	InternalLsaType string `protobuf:"bytes,1,opt,name=internal_lsa_type,json=internalLsaType" json:"internal_lsa_type,omitempty"`
	// Router LSA
	RouterLsaType *OspfShLsaRouter `protobuf:"bytes,2,opt,name=router_lsa_type,json=routerLsaType" json:"router_lsa_type,omitempty"`
	// Network LSA
	NetworkLsaType *OspfShLsaNetwork `protobuf:"bytes,3,opt,name=network_lsa_type,json=networkLsaType" json:"network_lsa_type,omitempty"`
	// Summary LSA
	SummaryLsaType *OspfShLsaSummary `protobuf:"bytes,4,opt,name=summary_lsa_type,json=summaryLsaType" json:"summary_lsa_type,omitempty"`
	// External LSA
	ExternalLsaType *OspfShLsaExternal `protobuf:"bytes,5,opt,name=external_lsa_type,json=externalLsaType" json:"external_lsa_type,omitempty"`
	// Opaque-Link LSA
	OpaqueLinkLsaType *OspfShLsaOpqLink `protobuf:"bytes,6,opt,name=opaque_link_lsa_type,json=opaqueLinkLsaType" json:"opaque_link_lsa_type,omitempty"`
	// Opaque-Area, opaque type 1 LSA
	OpaqueMplsTeLsaType *OspfShLsaOpqRrr `protobuf:"bytes,7,opt,name=opaque_mpls_te_lsa_type,json=opaqueMplsTeLsaType" json:"opaque_mpls_te_lsa_type,omitempty"`
	// Opaque-link, opaque type 3 Grace LSA
	OpaqueGraceLsa *OspfShLsaOpqGrace `protobuf:"bytes,8,opt,name=opaque_grace_lsa,json=opaqueGraceLsa" json:"opaque_grace_lsa,omitempty"`
	// Opaque Router Information LSA
	OpaqueRouterInfoLsaType *OspfShLsaOpqRi `protobuf:"bytes,9,opt,name=opaque_router_info_lsa_type,json=opaqueRouterInfoLsaType" json:"opaque_router_info_lsa_type,omitempty"`
	// Extende Prefix LSA type
	OpaqueEpLsaType *OspfShLsaOpqEpl `protobuf:"bytes,10,opt,name=opaque_ep_lsa_type,json=opaqueEpLsaType" json:"opaque_ep_lsa_type,omitempty"`
	// Extended Link LSA type
	OpaqueElLsaType *OspfShLsaOpqEll `protobuf:"bytes,11,opt,name=opaque_el_lsa_type,json=opaqueElLsaType" json:"opaque_el_lsa_type,omitempty"`
}

func (m *OspfLsaInternalUnion) Reset()                    { *m = OspfLsaInternalUnion{} }
func (m *OspfLsaInternalUnion) String() string            { return proto.CompactTextString(m) }
func (*OspfLsaInternalUnion) ProtoMessage()               {}
func (*OspfLsaInternalUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *OspfLsaInternalUnion) GetInternalLsaType() string {
	if m != nil {
		return m.InternalLsaType
	}
	return ""
}

func (m *OspfLsaInternalUnion) GetRouterLsaType() *OspfShLsaRouter {
	if m != nil {
		return m.RouterLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetNetworkLsaType() *OspfShLsaNetwork {
	if m != nil {
		return m.NetworkLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetSummaryLsaType() *OspfShLsaSummary {
	if m != nil {
		return m.SummaryLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetExternalLsaType() *OspfShLsaExternal {
	if m != nil {
		return m.ExternalLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueLinkLsaType() *OspfShLsaOpqLink {
	if m != nil {
		return m.OpaqueLinkLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueMplsTeLsaType() *OspfShLsaOpqRrr {
	if m != nil {
		return m.OpaqueMplsTeLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueGraceLsa() *OspfShLsaOpqGrace {
	if m != nil {
		return m.OpaqueGraceLsa
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueRouterInfoLsaType() *OspfShLsaOpqRi {
	if m != nil {
		return m.OpaqueRouterInfoLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueEpLsaType() *OspfShLsaOpqEpl {
	if m != nil {
		return m.OpaqueEpLsaType
	}
	return nil
}

func (m *OspfLsaInternalUnion) GetOpaqueElLsaType() *OspfShLsaOpqEll {
	if m != nil {
		return m.OpaqueElLsaType
	}
	return nil
}

func init() {
	proto.RegisterType((*OspfShDatabaseDetail_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_database_detail_KEYS")
	proto.RegisterType((*OspfShDatabaseDetail)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_database_detail")
	proto.RegisterType((*OspfShTime)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_time")
	proto.RegisterType((*OspfShDbNotDelete)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_db_not_delete")
	proto.RegisterType((*OspfShDbThrottleTimer)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_db_throttle_timer")
	proto.RegisterType((*OspfShDbHeader)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_db_header")
	proto.RegisterType((*OspfShDbDetail)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_db_detail")
	proto.RegisterType((*OspfShLsaExTos)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_ex_tos")
	proto.RegisterType((*OspfShLsaExternal)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_external")
	proto.RegisterType((*OspfShLsaNetwork)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_network")
	proto.RegisterType((*OspfShOpqSubtlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_subtlv")
	proto.RegisterType((*OspfShOpqTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_tlv")
	proto.RegisterType((*OspfShLsaOpqLink)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_link")
	proto.RegisterType((*OspfShLsaOpqRrr)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_rrr")
	proto.RegisterType((*OspfShLsaOpqEpl)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_epl")
	proto.RegisterType((*OspfShLsaOpqEll)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_ell")
	proto.RegisterType((*OspfShOpqRiUnknownTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_unknown_tlv")
	proto.RegisterType((*OspfShOpqRiRtrcapTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_rtrcap_tlv")
	proto.RegisterType((*OspfShOpqRiPceIpv4AddrStlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_pce_ipv4_addr_stlv")
	proto.RegisterType((*OspfShOpqRiPceIpv6AddrStlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_pce_ipv6_addr_stlv")
	proto.RegisterType((*OspfShOpqRiPceAddrStlvsUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union")
	proto.RegisterType((*OspfShOpqRiPcedScopeStlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_pced_scope_stlv")
	proto.RegisterType((*OspfShOpqRiPcedTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_pced_tlv")
	proto.RegisterType((*OspfShOpqRiSrAlgoTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_sr_algo_tlv")
	proto.RegisterType((*OspfShSrSidStlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_sr_sid_stlv")
	proto.RegisterType((*OspfShOpqRiSrRangeTlv)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_sr_range_tlv")
	proto.RegisterType((*OspfShOpqRiTlvsUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_opq_ri_tlvs_union")
	proto.RegisterType((*OspfShLsaOpqRi)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_ri")
	proto.RegisterType((*OspfShLsaOpqGrace)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_opq_grace")
	proto.RegisterType((*OspfShTosMetric)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_tos_metric")
	proto.RegisterType((*OspfShLink)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_link")
	proto.RegisterType((*OspfShLsaRouter)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_router")
	proto.RegisterType((*OspfShLsaSummary)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_sh_lsa_summary")
	proto.RegisterType((*OspfLsaInternalUnion)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.database_areas.database_area.lsas.lsa.ospf_lsa_internal_union")
}

func init() { proto.RegisterFile("ospf_sh_database_detail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x5b, 0x6f, 0x1c, 0xc7,
	0x95, 0x46, 0xf3, 0x3a, 0x73, 0x66, 0x86, 0x97, 0xa2, 0x64, 0x8d, 0x25, 0xd9, 0xa2, 0xc6, 0x37,
	0x7a, 0x2d, 0x13, 0x36, 0xad, 0xd5, 0xbe, 0x2d, 0x96, 0xba, 0x58, 0xe6, 0x2e, 0x6d, 0x13, 0x4d,
	0x7a, 0x01, 0x63, 0x1f, 0x0a, 0x35, 0xd3, 0x35, 0xc3, 0x06, 0x7b, 0xaa, 0x5b, 0x55, 0x35, 0x14,
	0x69, 0x2f, 0x16, 0x7b, 0x83, 0xd7, 0xbb, 0xc0, 0x02, 0x46, 0x9e, 0x12, 0x04, 0x09, 0xe2, 0x24,
	0x30, 0xe0, 0x8b, 0x12, 0x27, 0x81, 0x61, 0x04, 0x41, 0x80, 0x20, 0xf9, 0x09, 0xc9, 0x73, 0x9e,
	0xf2, 0x1f, 0x02, 0xe4, 0x29, 0xa8, 0x53, 0xa7, 0x7b, 0xba, 0x49, 0xea, 0x35, 0xc3, 0xbc, 0x90,
	0xdd, 0xe7, 0x9c, 0xaa, 0xfe, 0xea, 0xd4, 0xb9, 0xd5, 0xa9, 0x81, 0xa7, 0x52, 0x93, 0xf5, 0xb9,
	0xd9, 0xe7, 0x91, 0xb0, 0xa2, 0x2b, 0x8c, 0xe4, 0x91, 0xb4, 0x22, 0x4e, 0xd6, 0x33, 0x9d, 0xda,
	0x94, 0x0d, 0x7b, 0xb1, 0xe9, 0xa5, 0x3c, 0x4e, 0x0d, 0x3f, 0xd2, 0x3c, 0xce, 0x0e, 0x6f, 0x72,
	0x1c, 0x90, 0x66, 0x52, 0xaf, 0xbb, 0x27, 0x27, 0xd7, 0x93, 0xc6, 0x48, 0x93, 0x3f, 0xad, 0x47,
	0xb2, 0x2f, 0x46, 0x89, 0xe5, 0x87, 0xba, 0xbf, 0x9e, 0xcf, 0x5a, 0x3c, 0x70, 0xa1, 0xa5, 0x30,
	0xd5, 0xd7, 0xf5, 0xc4, 0x08, 0xe3, 0xfe, 0x74, 0xfe, 0x14, 0xc0, 0xd5, 0xc7, 0x00, 0xe2, 0xff,
	0x74, 0xef, 0xdd, 0x5d, 0x76, 0x1d, 0x9a, 0xf4, 0x19, 0xae, 0xc4, 0x50, 0xb6, 0x83, 0xd5, 0x60,
	0xad, 0x1e, 0x36, 0x88, 0xf6, 0x96, 0x18, 0x4a, 0x76, 0x09, 0xe6, 0xdd, 0xa4, 0x3c, 0x8e, 0xda,
	0x53, 0xab, 0xc1, 0x5a, 0x2b, 0x9c, 0x73, 0xaf, 0x5b, 0x11, 0xbb, 0x0c, 0x75, 0x62, 0xf0, 0x57,
	0xdb, 0xd3, 0xc8, 0x9a, 0xf7, 0xac, 0x57, 0xdd, 0xa0, 0xc4, 0x70, 0x7b, 0x9c, 0xc9, 0xf6, 0x0c,
	0x4e, 0x39, 0x97, 0x98, 0xbd, 0xe3, 0x4c, 0xb2, 0x15, 0x98, 0x4d, 0x8c, 0x9b, 0x6b, 0x16, 0xc9,
	0x33, 0x89, 0xd9, 0x8a, 0xd8, 0xcb, 0xc0, 0x44, 0x74, 0x28, 0xb5, 0x8d, 0x4d, 0xac, 0x06, 0x5c,
	0xa7, 0x23, 0x2b, 0x75, 0x7b, 0x0e, 0x25, 0x96, 0x4b, 0x9c, 0x10, 0x19, 0xec, 0x39, 0x58, 0x88,
	0x95, 0x95, 0xba, 0x2f, 0x7a, 0xd2, 0xc3, 0x9e, 0x47, 0xd1, 0x56, 0x41, 0x75, 0xc0, 0x3b, 0xdf,
	0x9d, 0x81, 0x4b, 0x8f, 0x59, 0x3c, 0xfb, 0x5e, 0x00, 0x90, 0x18, 0xc1, 0xf7, 0xa5, 0x88, 0xa4,
	0x6e, 0x6f, 0xac, 0x06, 0x6b, 0x8d, 0x8d, 0x7f, 0x0f, 0xd6, 0xff, 0xa2, 0xdb, 0xb3, 0x5e, 0xa0,
	0xeb, 0x12, 0x90, 0xb0, 0x9e, 0x18, 0xf1, 0x06, 0x3e, 0xb2, 0x4f, 0x03, 0x58, 0x74, 0x10, 0x69,
	0xbb, 0xdc, 0x14, 0xed, 0xd7, 0x26, 0x8e, 0xd3, 0xa3, 0x09, 0x5b, 0x89, 0x11, 0x77, 0xf1, 0xf1,
	0xae, 0xb0, 0x82, 0xfd, 0x2c, 0x80, 0x65, 0x87, 0x15, 0x37, 0x40, 0x09, 0x42, 0x7b, 0x13, 0xd1,
	0x7e, 0x30, 0x11, 0xb4, 0x15, 0x34, 0x23, 0x15, 0xa7, 0x2a, 0x74, 0xda, 0xdc, 0x22, 0x92, 0x43,
	0xdd, 0x79, 0x1d, 0x9a, 0xf9, 0xca, 0x6c, 0x3c, 0x94, 0xec, 0x09, 0x98, 0x33, 0xb2, 0x97, 0xaa,
	0x08, 0xdd, 0xa0, 0x15, 0xd2, 0x1b, 0x7b, 0x1a, 0x40, 0x09, 0x95, 0x12, 0xcf, 0x3b, 0x41, 0x89,
	0xd2, 0xf9, 0xed, 0x34, 0x5c, 0x2c, 0xa9, 0x48, 0xa5, 0x96, 0x47, 0x32, 0x91, 0x56, 0xb2, 0x2b,
	0x50, 0xef, 0x6b, 0x29, 0x71, 0x7a, 0x9a, 0xb4, 0xe6, 0x08, 0x7b, 0xee, 0x73, 0x57, 0xa0, 0xae,
	0x52, 0x92, 0xc4, 0x59, 0x6b, 0x61, 0x4d, 0xa5, 0x77, 0xfd, 0xc8, 0x97, 0x60, 0x59, 0xc9, 0x78,
	0xb0, 0xdf, 0x4d, 0x35, 0x97, 0x47, 0xbd, 0x7d, 0xa1, 0x06, 0x12, 0x9d, 0xac, 0x16, 0x2e, 0xe5,
	0x8c, 0x7b, 0x44, 0x67, 0xcf, 0x40, 0xcb, 0xf9, 0x8c, 0xf3, 0x1d, 0x2b, 0xba, 0x89, 0xf7, 0xb9,
	0x5a, 0xd8, 0x24, 0xe2, 0x9e, 0xa3, 0xb1, 0x35, 0x58, 0x14, 0xbd, 0x03, 0x95, 0x3e, 0x4c, 0x64,
	0x34, 0x90, 0x43, 0xa9, 0x2c, 0xfa, 0x60, 0x2d, 0x3c, 0x49, 0x66, 0xd7, 0xa0, 0x31, 0x14, 0x47,
	0xf1, 0x70, 0x34, 0xe4, 0x62, 0x20, 0xd1, 0x0f, 0x6b, 0x21, 0x10, 0x69, 0x73, 0x20, 0x9d, 0x40,
	0x26, 0xb4, 0x8d, 0x45, 0xc2, 0x4d, 0xd6, 0x47, 0xef, 0xab, 0x85, 0x40, 0xa4, 0xdd, 0xac, 0xef,
	0x00, 0xf5, 0x93, 0x34, 0x8d, 0x78, 0x26, 0x55, 0x14, 0xab, 0x41, 0xbb, 0xe6, 0x01, 0x21, 0x71,
	0xc7, 0xd3, 0xd8, 0x53, 0x00, 0x5a, 0x58, 0xc9, 0x93, 0x78, 0x18, 0xdb, 0x76, 0x1d, 0x25, 0xea,
	0x8e, 0xb2, 0xed, 0x08, 0xec, 0x79, 0x58, 0x54, 0x46, 0x73, 0xd1, 0x3b, 0x28, 0x66, 0x01, 0x94,
	0x69, 0x29, 0xa3, 0x37, 0x7b, 0x07, 0xf9, 0x34, 0x6b, 0xb0, 0x64, 0x46, 0x43, 0x9e, 0xea, 0x78,
	0x50, 0x08, 0x36, 0x50, 0x70, 0xc1, 0x8c, 0x86, 0x6f, 0xeb, 0x78, 0x90, 0x4b, 0xde, 0x00, 0xe6,
	0x66, 0xf4, 0xc8, 0xb4, 0x7c, 0x30, 0x8a, 0xb5, 0x8c, 0xda, 0x4d, 0x52, 0xaa, 0xd1, 0xaf, 0x3b,
	0x46, 0x48, 0xf4, 0xce, 0x2f, 0xa7, 0xe0, 0xc9, 0xd2, 0xae, 0xda, 0x7d, 0x9d, 0x5a, 0x9b, 0xf8,
	0xbd, 0xc4, 0x18, 0x84, 0x0f, 0x3c, 0x49, 0x7b, 0xc2, 0xc6, 0xa9, 0xa2, 0xd0, 0xd9, 0x42, 0xea,
	0x36, 0x11, 0xdd, 0x1a, 0xbd, 0x18, 0x86, 0xc2, 0x29, 0x14, 0xa9, 0x23, 0x05, 0xa3, 0xe1, 0x0d,
	0x60, 0xde, 0x86, 0xfc, 0xbe, 0xf1, 0x58, 0x45, 0xf2, 0x88, 0x62, 0xe9, 0x92, 0xe7, 0xe0, 0xe6,
	0x6d, 0x39, 0xba, 0x93, 0x1e, 0xc6, 0x6a, 0x64, 0x65, 0x45, 0x7a, 0xc6, 0x4b, 0x7b, 0x4e, 0x49,
	0xfa, 0xef, 0xe1, 0x6a, 0x22, 0x8c, 0xe5, 0xb1, 0x32, 0x96, 0x9f, 0xf1, 0x95, 0x59, 0x1c, 0xd7,
	0x76, 0x32, 0x5b, 0xca, 0xd8, 0xdd, 0x93, 0x5f, 0xab, 0x8c, 0x3f, 0xe3, 0xbb, 0x73, 0xd5, 0xf1,
	0x6f, 0x9e, 0xf8, 0x7e, 0xe7, 0x3b, 0x53, 0xb0, 0x7c, 0x2a, 0xc0, 0x95, 0x13, 0x43, 0x50, 0x49,
	0x0c, 0x0c, 0x66, 0x12, 0x43, 0x39, 0x06, 0xf3, 0x42, 0xfc, 0xb8, 0xbc, 0x30, 0xfd, 0xb8, 0xbc,
	0xf0, 0x34, 0x34, 0x9c, 0xdb, 0xe7, 0xd9, 0xca, 0x27, 0x1e, 0x17, 0x51, 0x37, 0x7d, 0xc2, 0xc2,
	0x6f, 0x0b, 0xb4, 0x69, 0xbf, 0xf8, 0x39, 0xc7, 0x1b, 0x48, 0x76, 0x15, 0x20, 0x52, 0x8e, 0xee,
	0xc2, 0x06, 0xd9, 0x7b, 0x2d, 0x52, 0x9b, 0x03, 0xb9, 0x6d, 0x04, 0x5b, 0x82, 0x69, 0x65, 0x72,
	0x2b, 0x77, 0x8f, 0xec, 0x05, 0x58, 0x34, 0xf2, 0xc1, 0x48, 0x2a, 0x97, 0x7f, 0x46, 0xc3, 0xae,
	0xd4, 0x68, 0xe0, 0xad, 0x70, 0x21, 0x27, 0xbf, 0x85, 0x54, 0x76, 0x19, 0x6a, 0xbd, 0x7d, 0xd9,
	0x3b, 0x30, 0xa3, 0x21, 0x1a, 0x78, 0x2b, 0x2c, 0xde, 0x3b, 0xbf, 0x86, 0x8a, 0x7e, 0x28, 0x31,
	0x5d, 0x83, 0x86, 0x4d, 0x0d, 0xef, 0x89, 0x0c, 0x1d, 0x39, 0xf0, 0xae, 0x65, 0x53, 0x73, 0xc7,
	0x53, 0xd8, 0x8b, 0xb0, 0xa4, 0x8c, 0x11, 0xdc, 0x6a, 0xa1, 0x4c, 0xe2, 0x4d, 0xcf, 0x07, 0x8f,
	0x45, 0x47, 0xdf, 0x1b, 0x93, 0x9d, 0x8d, 0x46, 0x72, 0x28, 0x54, 0xc4, 0x7b, 0xb1, 0xee, 0x8d,
	0x62, 0x4b, 0x01, 0xa4, 0xe5, 0xa9, 0x77, 0x3c, 0x91, 0x5d, 0x84, 0xb9, 0x48, 0xf1, 0x6e, 0x6c,
	0x29, 0x6c, 0xcc, 0x46, 0xea, 0x76, 0x6c, 0xd9, 0xd7, 0x01, 0x30, 0xa7, 0xae, 0xaa, 0xe1, 0xa3,
	0xe6, 0x1a, 0x1b, 0x1f, 0x4e, 0x30, 0x05, 0x55, 0x01, 0x85, 0x4b, 0x89, 0x11, 0x7b, 0x44, 0xda,
	0x43, 0xdf, 0xfc, 0x51, 0x00, 0x17, 0x1d, 0x72, 0x34, 0xdf, 0x51, 0x16, 0x09, 0x2b, 0x23, 0x1f,
	0x82, 0xe7, 0x10, 0xfc, 0xfb, 0x13, 0xc2, 0xee, 0x20, 0x84, 0x4e, 0xa7, 0xdb, 0xc2, 0xd8, 0x77,
	0x3c, 0x2e, 0xcc, 0x04, 0x04, 0x38, 0xea, 0x72, 0x1c, 0xed, 0xe4, 0xb8, 0xb1, 0x62, 0x98, 0xa1,
	0xd1, 0x9d, 0x03, 0xc0, 0x51, 0xf7, 0xb6, 0x30, 0xa8, 0xdd, 0x5d, 0x07, 0x8b, 0xdd, 0x84, 0x4b,
	0x4e, 0xc1, 0xe3, 0xf0, 0xcd, 0xa3, 0x11, 0x65, 0x39, 0xef, 0x08, 0x2b, 0x89, 0x11, 0x61, 0x1e,
	0xca, 0xef, 0x8e, 0x7c, 0xc2, 0x5b, 0x83, 0xa5, 0xd2, 0x2a, 0x7b, 0x49, 0xda, 0x3b, 0x40, 0xaf,
	0x98, 0x09, 0x17, 0x8a, 0x6f, 0xdc, 0x71, 0x54, 0xe7, 0x05, 0x79, 0x42, 0x73, 0x76, 0xe9, 0xe3,
	0x3e, 0x10, 0xc9, 0x19, 0xe7, 0x3f, 0xc0, 0xd5, 0xd3, 0x91, 0x81, 0x6b, 0x29, 0x7a, 0xfb, 0xe8,
	0x37, 0x3e, 0x01, 0x5c, 0x3e, 0x15, 0x23, 0xc2, 0x5c, 0x82, 0xfd, 0x30, 0x00, 0x18, 0x67, 0x6a,
	0xcc, 0x02, 0x8d, 0x8d, 0xff, 0x9e, 0xa0, 0x59, 0x8f, 0xc1, 0x84, 0x75, 0x95, 0x5a, 0xaa, 0x03,
	0x9e, 0x80, 0xb9, 0x44, 0xaa, 0x81, 0xdd, 0x6f, 0xb7, 0x28, 0x64, 0xe1, 0x9b, 0x4b, 0x2c, 0x79,
	0xd6, 0x8b, 0x55, 0x7b, 0x01, 0x79, 0x75, 0xca, 0x77, 0x31, 0xe6, 0x1d, 0xf7, 0x31, 0x62, 0x2f,
	0x7a, 0xb6, 0x30, 0x92, 0xd8, 0x97, 0x60, 0x3e, 0x56, 0xdc, 0x1c, 0xab, 0x5e, 0x7b, 0xc9, 0x4f,
	0x1b, 0xab, 0xdd, 0x63, 0xd5, 0x63, 0xeb, 0xe0, 0x76, 0x8e, 0x67, 0x5a, 0xf6, 0xe3, 0x23, 0x9e,
	0xe9, 0x38, 0xd5, 0xb1, 0x3d, 0x6e, 0x2f, 0xa3, 0x90, 0x2b, 0xf1, 0x76, 0x90, 0xb3, 0x43, 0x0c,
	0xf6, 0xb7, 0x70, 0x49, 0xc9, 0x87, 0xfc, 0xac, 0x31, 0x0c, 0xc7, 0x5c, 0x50, 0xf2, 0xe1, 0xf6,
	0xa9, 0x61, 0xf7, 0xe1, 0xba, 0x1b, 0x52, 0xcd, 0xc4, 0x3c, 0x4b, 0x8d, 0xe5, 0x7d, 0x57, 0xec,
	0xa6, 0x87, 0x52, 0xb7, 0x57, 0x70, 0x0f, 0xaf, 0x26, 0x46, 0x54, 0x12, 0xf3, 0x4e, 0x6a, 0xec,
	0xeb, 0x22, 0x4e, 0xde, 0x3e, 0x94, 0xba, 0xf3, 0x87, 0x00, 0x58, 0xae, 0x43, 0x37, 0xa3, 0x3c,
	0xe2, 0x36, 0x35, 0x2e, 0x40, 0xcb, 0x23, 0x2a, 0xfe, 0x86, 0xd2, 0xea, 0xb8, 0x47, 0xd5, 0xd7,
	0x42, 0x4e, 0x7e, 0x13, 0xa9, 0xec, 0x15, 0xb8, 0x70, 0x42, 0xb0, 0x9c, 0xa9, 0x59, 0x55, 0x1a,
	0xf3, 0xd4, 0x75, 0x68, 0x16, 0x23, 0x6c, 0x6a, 0x28, 0x59, 0x37, 0x72, 0xda, 0x5e, 0x6a, 0x5c,
	0xda, 0xea, 0xa7, 0xfa, 0xa1, 0xd0, 0xae, 0xea, 0xe0, 0x22, 0x8a, 0xb4, 0x34, 0x86, 0xd2, 0xd1,
	0xf2, 0x98, 0xb3, 0xe9, 0x19, 0xd5, 0x19, 0xc5, 0x80, 0x72, 0xd3, 0x78, 0x46, 0x31, 0xe8, 0x7c,
	0x35, 0x05, 0x17, 0xaa, 0xcb, 0xf4, 0x3c, 0x76, 0x13, 0x9e, 0x28, 0xc6, 0xd2, 0x06, 0x90, 0xb9,
	0xf8, 0xf5, 0x16, 0xab, 0xf3, 0x1b, 0xb0, 0xed, 0x8d, 0x67, 0x03, 0x2e, 0x16, 0xb5, 0x71, 0x31,
	0xdc, 0xa5, 0x3e, 0x9f, 0x48, 0x56, 0x72, 0xe6, 0x3d, 0xe2, 0xb9, 0x2c, 0xf8, 0xd3, 0x00, 0x56,
	0xca, 0x0b, 0xcf, 0xf5, 0x3a, 0xbd, 0x3a, 0xbd, 0xd6, 0xd8, 0xf8, 0x8f, 0x49, 0x39, 0xce, 0x78,
	0xd3, 0xc3, 0xe5, 0xd2, 0x1e, 0xf8, 0x0d, 0xeb, 0xbc, 0x0f, 0x2b, 0x65, 0x41, 0x25, 0xed, 0xc3,
	0x54, 0x1f, 0xb8, 0xf5, 0xd3, 0xe3, 0x99, 0x4a, 0x5b, 0x21, 0x66, 0x45, 0x67, 0xaf, 0xc0, 0x85,
	0xa2, 0x20, 0xa7, 0x70, 0x93, 0xc4, 0xc6, 0xb6, 0xa7, 0x56, 0xa7, 0xd7, 0x9a, 0x21, 0xcb, 0x79,
	0x3e, 0xcc, 0x6c, 0xc7, 0xc6, 0x76, 0xbe, 0x98, 0x1a, 0xdb, 0x66, 0x9a, 0x3d, 0xe0, 0x66, 0xd4,
	0xb5, 0xc9, 0x21, 0x5b, 0x85, 0xa6, 0x19, 0x75, 0xb9, 0x4d, 0x0e, 0xcb, 0x65, 0x10, 0x98, 0x51,
	0x77, 0x2f, 0x39, 0x44, 0x13, 0x7b, 0x16, 0x16, 0x72, 0x09, 0xc2, 0xe5, 0xcf, 0x1c, 0x4d, 0x2f,
	0x43, 0x80, 0x3a, 0xd0, 0xca, 0xa5, 0x0e, 0x45, 0x32, 0xf2, 0xa7, 0x83, 0x66, 0xd8, 0xf0, 0x42,
	0xff, 0xec, 0x48, 0x78, 0x86, 0xcc, 0x85, 0xe8, 0x7f, 0x7b, 0x66, 0xb2, 0x1b, 0x36, 0xd6, 0x44,
	0xbe, 0x9e, 0x5d, 0xfc, 0xdb, 0xf9, 0xfd, 0x14, 0x2c, 0x96, 0x85, 0x9c, 0xae, 0x9e, 0x84, 0x5a,
	0x45, 0x4f, 0xad, 0x70, 0xde, 0x92, 0x92, 0x5c, 0x65, 0x7d, 0x52, 0x41, 0x75, 0x5b, 0x68, 0xe7,
	0x59, 0x58, 0x18, 0x66, 0x89, 0xc9, 0xb7, 0x2a, 0x8e, 0xc8, 0x51, 0x9b, 0x8e, 0xea, 0x37, 0x69,
	0x2b, 0x2a, 0xa4, 0x22, 0x83, 0x89, 0x4c, 0x1d, 0xe4, 0x27, 0x27, 0x47, 0xbd, 0x6b, 0x5c, 0xfe,
	0x52, 0x07, 0x39, 0x0a, 0x3c, 0xd3, 0xce, 0xa2, 0x92, 0x1d, 0x0a, 0x3c, 0xf8, 0x3a, 0x05, 0xd3,
	0xd0, 0x42, 0xc1, 0x73, 0xe7, 0x47, 0xc1, 0x7e, 0x01, 0xa4, 0xe0, 0x7f, 0xac, 0xc6, 0x10, 0x27,
	0xe7, 0x70, 0x3b, 0x6f, 0x48, 0x33, 0xf1, 0x60, 0x24, 0xf9, 0x89, 0xae, 0x8a, 0xb7, 0xcc, 0x15,
	0xcf, 0xdc, 0xaa, 0xf4, 0x56, 0x7e, 0x12, 0x54, 0x3d, 0xcb, 0x4d, 0xa6, 0xb5, 0x66, 0xdf, 0x0a,
	0xbc, 0xae, 0xd0, 0x35, 0x02, 0x54, 0xc4, 0xbf, 0x4d, 0x50, 0x0f, 0x4e, 0x09, 0x6e, 0xaf, 0xd0,
	0x1f, 0xcf, 0xc2, 0x2c, 0xb3, 0xe4, 0xaf, 0x0f, 0x73, 0x72, 0xbe, 0x31, 0x7f, 0x14, 0xc0, 0xe5,
	0x32, 0x53, 0xc7, 0x7c, 0xa4, 0x0e, 0x54, 0xfa, 0x50, 0xa1, 0x4f, 0x3f, 0x07, 0x8b, 0x3a, 0xe6,
	0x03, 0xa9, 0xf8, 0x09, 0xd7, 0x6e, 0xea, 0xf8, 0xbe, 0x54, 0x79, 0x10, 0x7c, 0x11, 0x96, 0x4b,
	0x62, 0x15, 0x37, 0x5f, 0xc8, 0x05, 0xc9, 0xd7, 0x57, 0xa1, 0x49, 0xa2, 0xe5, 0x40, 0x08, 0x28,
	0x85, 0x71, 0xb0, 0xf3, 0x9b, 0xe9, 0xf1, 0x59, 0x9e, 0x20, 0x69, 0xab, 0x7b, 0x22, 0x43, 0x44,
	0x2f, 0x01, 0xd3, 0x56, 0x73, 0x7a, 0xad, 0xe6, 0x82, 0x45, 0x6d, 0xf5, 0x1d, 0x91, 0x8d, 0x3f,
	0xf6, 0x77, 0xd0, 0xce, 0x85, 0x07, 0x5a, 0xf4, 0x64, 0x7f, 0x94, 0x70, 0x2d, 0x8d, 0x15, 0xda,
	0x52, 0xfa, 0xbc, 0xe8, 0x87, 0xdc, 0x27, 0x6e, 0xe8, 0x99, 0xec, 0x2e, 0x5c, 0x7b, 0xdc, 0x40,
	0xbe, 0x2f, 0x93, 0x8c, 0x4e, 0xb6, 0xb5, 0xf0, 0xca, 0x99, 0xe3, 0xdf, 0x40, 0x11, 0xf6, 0x02,
	0x2c, 0xe5, 0xb3, 0x18, 0x3b, 0xea, 0xba, 0x65, 0x50, 0xcc, 0x6a, 0xf9, 0x61, 0xbb, 0x76, 0xd4,
	0x0d, 0xad, 0x46, 0x35, 0x93, 0x20, 0x1e, 0x88, 0xad, 0xa4, 0x76, 0x4f, 0xd3, 0xcb, 0xb9, 0x33,
	0xf1, 0x9e, 0x2c, 0x8b, 0x65, 0x1b, 0x3c, 0x4b, 0x84, 0xa2, 0xf3, 0x2f, 0x89, 0xed, 0x6c, 0xec,
	0x24, 0x42, 0xb1, 0x67, 0x60, 0xa1, 0x50, 0x91, 0xe4, 0xf2, 0x28, 0xa3, 0xe3, 0x70, 0x83, 0xd4,
	0x23, 0xef, 0x1d, 0x65, 0x65, 0x6c, 0x22, 0x49, 0x5c, 0xe5, 0x6e, 0xe8, 0x38, 0x40, 0xd8, 0x36,
	0x93, 0xe4, 0x76, 0x6c, 0x8d, 0xab, 0x1a, 0x0b, 0xc1, 0x28, 0x8a, 0xdd, 0x61, 0x55, 0x24, 0x3c,
	0x56, 0xfd, 0x14, 0xcf, 0x03, 0xcd, 0xf0, 0x02, 0xc9, 0x17, 0xcc, 0x2d, 0xd5, 0x4f, 0x3b, 0xf7,
	0xe1, 0xfa, 0x89, 0x4d, 0xcc, 0x7a, 0xd2, 0x1b, 0xba, 0x2b, 0xb2, 0xb8, 0x71, 0x9b, 0xd9, 0x81,
	0x56, 0x85, 0x5a, 0xb4, 0xb4, 0x7b, 0x72, 0x2b, 0x3b, 0xbc, 0xe9, 0x8a, 0xae, 0xc7, 0x4f, 0x74,
	0xeb, 0xcc, 0x89, 0x6e, 0x9d, 0x31, 0xd1, 0x2d, 0x9c, 0xe8, 0x8f, 0x33, 0xf0, 0xcc, 0x19, 0x33,
	0x15, 0x93, 0x18, 0xdf, 0x7a, 0xcc, 0xe7, 0x42, 0x7a, 0x29, 0xe9, 0xbb, 0xb9, 0xdc, 0x3c, 0x68,
	0xf0, 0xbf, 0x08, 0xe0, 0x42, 0x21, 0x54, 0x72, 0x18, 0xb4, 0xaa, 0xc6, 0xc6, 0xff, 0x4e, 0x32,
	0x9f, 0x54, 0x5d, 0x38, 0x5c, 0x26, 0xdc, 0xef, 0x78, 0xda, 0x5e, 0x72, 0xc8, 0xbe, 0x0a, 0xa0,
	0x85, 0x90, 0xf2, 0x25, 0xa0, 0x31, 0x37, 0x36, 0x3e, 0x9a, 0x30, 0xec, 0xd3, 0x16, 0x12, 0x36,
	0xdc, 0xfb, 0x8e, 0x5f, 0x41, 0x8e, 0xfb, 0xd6, 0x18, 0xf7, 0xcc, 0x79, 0xc2, 0x7d, 0xeb, 0x04,
	0xee, 0x5b, 0x84, 0xbb, 0xf3, 0x68, 0x0a, 0x9e, 0x3e, 0x3d, 0x24, 0xe2, 0xa6, 0x97, 0x66, 0xd2,
	0x1b, 0xf0, 0x0a, 0xcc, 0xa2, 0x13, 0x52, 0x13, 0x69, 0xc6, 0xf9, 0x9e, 0x23, 0x6a, 0x24, 0xfa,
	0x58, 0x35, 0xa3, 0x6f, 0xfb, 0x0e, 0x90, 0x8e, 0x90, 0xea, 0x23, 0xd0, 0xac, 0x8e, 0x48, 0xd6,
	0x94, 0xfa, 0x42, 0x33, 0x86, 0x64, 0x8d, 0x97, 0xf5, 0xe1, 0x64, 0xd6, 0xe4, 0xb2, 0xc7, 0x48,
	0xf5, 0xd1, 0x63, 0xe6, 0x98, 0x64, 0x5d, 0x7d, 0xcd, 0x13, 0x8c, 0x16, 0xad, 0x70, 0xd6, 0xbd,
	0x6d, 0x17, 0xe4, 0xbc, 0x6b, 0x86, 0xe4, 0xb0, 0x20, 0x1b, 0x6a, 0x95, 0x21, 0x79, 0xb7, 0x20,
	0x1f, 0x63, 0x1b, 0x80, 0xc8, 0xef, 0xb2, 0x97, 0x61, 0xc5, 0x05, 0x19, 0xbf, 0x5e, 0x17, 0x3a,
	0x7c, 0xbc, 0x69, 0xf8, 0x6e, 0xa8, 0x48, 0x92, 0x5d, 0xc7, 0x71, 0x71, 0xc3, 0x85, 0x9c, 0xce,
	0x0f, 0xa6, 0xc7, 0x97, 0x41, 0x65, 0x7d, 0xf9, 0x8c, 0xb4, 0xe0, 0x9e, 0x4f, 0xc5, 0xfe, 0x16,
	0x51, 0x29, 0xf2, 0x7f, 0x19, 0x40, 0x1d, 0xc7, 0xa0, 0x99, 0x78, 0xaf, 0xfc, 0xc6, 0x39, 0x30,
	0x93, 0x93, 0xd1, 0x26, 0xac, 0x39, 0x94, 0x68, 0xdd, 0x8f, 0x02, 0x80, 0xb1, 0x59, 0x90, 0x4b,
	0xfe, 0xff, 0xe4, 0x31, 0x97, 0xed, 0x34, 0x44, 0xa5, 0xe2, 0x6e, 0x75, 0xfa, 0xa7, 0x2a, 0x07,
	0xa3, 0xb9, 0x48, 0x06, 0x29, 0xee, 0x93, 0x3b, 0x17, 0xd1, 0x6b, 0x65, 0x9f, 0x9a, 0x46, 0x6f,
	0x26, 0x83, 0xb4, 0x74, 0x2e, 0x22, 0x29, 0x5f, 0x0e, 0x4c, 0xd1, 0xb9, 0x08, 0x85, 0x7c, 0x3d,
	0xf0, 0x2f, 0xe3, 0xaa, 0xca, 0x68, 0x6e, 0xe2, 0xa8, 0x08, 0xf9, 0xf4, 0x5a, 0x99, 0xbf, 0x61,
	0xf4, 0x6e, 0x1c, 0x8d, 0x8b, 0x0d, 0x92, 0x19, 0xcf, 0xde, 0x0a, 0x01, 0x45, 0xfc, 0xe4, 0xff,
	0x33, 0x05, 0x57, 0x4e, 0xaf, 0x42, 0x0b, 0x35, 0x90, 0xb8, 0x8c, 0xe7, 0x61, 0xb1, 0x78, 0xaf,
	0xda, 0x9b, 0xd1, 0xa1, 0xa3, 0x56, 0x16, 0xe2, 0xe5, 0x4c, 0xfc, 0x5e, 0xfe, 0xa9, 0x06, 0x49,
	0xed, 0xc6, 0xef, 0x49, 0xf6, 0xed, 0x00, 0xe6, 0x4c, 0xec, 0x8c, 0x94, 0x36, 0xf7, 0x3f, 0x27,
	0xb5, 0xb9, 0x25, 0x3d, 0x86, 0x04, 0xa9, 0xf3, 0xc9, 0xfc, 0xa9, 0xb2, 0xab, 0x94, 0x14, 0xd7,
	0x61, 0x45, 0xc7, 0xce, 0xe9, 0x8a, 0x5e, 0x44, 0x29, 0x35, 0x2e, 0x23, 0x2b, 0xbf, 0xae, 0xc3,
	0x04, 0xf9, 0x79, 0x00, 0x8d, 0xf3, 0x9d, 0x17, 0x61, 0x34, 0x4e, 0x88, 0x9f, 0x06, 0xd0, 0x28,
	0x55, 0x95, 0xb4, 0x3d, 0x1f, 0x4e, 0x18, 0xed, 0xb8, 0xea, 0x0d, 0xeb, 0x45, 0x65, 0xcb, 0x3e,
	0x0e, 0x60, 0x9e, 0x62, 0x1d, 0xa5, 0xbf, 0x0f, 0xce, 0x43, 0x8c, 0xc0, 0x53, 0x05, 0xe1, 0x62,
	0x9f, 0x05, 0xd0, 0x28, 0x05, 0x03, 0xba, 0x87, 0x98, 0xf4, 0xee, 0x97, 0x10, 0x85, 0x75, 0x1f,
	0x61, 0x9c, 0x42, 0x1f, 0x05, 0x18, 0x25, 0x0a, 0x9f, 0xa7, 0x8b, 0x87, 0xff, 0x9b, 0x3c, 0xda,
	0x02, 0x92, 0x0b, 0x59, 0x18, 0x47, 0xf6, 0x92, 0xc3, 0xce, 0x67, 0x53, 0xd5, 0x36, 0xaa, 0x97,
	0x67, 0x37, 0x80, 0x51, 0x67, 0x40, 0xc7, 0x8e, 0xec, 0xb3, 0x88, 0x77, 0xd0, 0x25, 0xcf, 0x09,
	0x1d, 0x03, 0x83, 0xb7, 0x3b, 0x19, 0x15, 0xd2, 0x27, 0x5b, 0x09, 0xbe, 0x9f, 0x7a, 0x31, 0x1f,
	0x53, 0x69, 0x26, 0xb0, 0x2f, 0x02, 0x68, 0x16, 0x23, 0xbd, 0xaf, 0x4c, 0x9f, 0x03, 0x5f, 0x29,
	0x65, 0xd4, 0x46, 0x0e, 0xdc, 0x45, 0xb5, 0x7f, 0x1d, 0xdf, 0xf6, 0xe7, 0xba, 0xc2, 0x03, 0x1d,
	0xbb, 0x0e, 0x4d, 0x7c, 0xe0, 0x99, 0xd4, 0x71, 0x9a, 0xff, 0x8a, 0xa0, 0x81, 0xb4, 0x1d, 0x24,
	0x8d, 0x45, 0x1c, 0x0e, 0xba, 0xb9, 0xab, 0x93, 0x48, 0x88, 0x24, 0xf6, 0x14, 0x40, 0x9c, 0x15,
	0x5d, 0x63, 0x7f, 0xd9, 0x59, 0x8f, 0x33, 0xea, 0x16, 0x77, 0xde, 0x1a, 0xef, 0xd4, 0xb8, 0x0b,
	0x8b, 0x77, 0xe9, 0xbe, 0xd3, 0x65, 0x53, 0x43, 0x1f, 0xae, 0x7b, 0xca, 0x5e, 0x6a, 0xb0, 0x83,
	0x95, 0x1a, 0xde, 0x4b, 0x8d, 0xa5, 0x2c, 0x32, 0x6f, 0x53, 0x73, 0x27, 0x35, 0xb6, 0xf3, 0xf9,
	0xd4, 0xf8, 0x57, 0x10, 0xd8, 0x0e, 0xba, 0x04, 0xf3, 0xd8, 0xce, 0x8a, 0xa3, 0xe2, 0x86, 0x36,
	0x56, 0x07, 0x5b, 0x11, 0xbb, 0x02, 0x75, 0x64, 0x60, 0x1f, 0xcc, 0x03, 0xaf, 0x39, 0x02, 0x36,
	0xc2, 0x72, 0x26, 0x86, 0xf0, 0xe9, 0x31, 0x13, 0x23, 0xf7, 0x35, 0x68, 0x20, 0x93, 0x5a, 0xc6,
	0xfe, 0xc6, 0x1a, 0x1c, 0x89, 0xda, 0xf0, 0x9f, 0x04, 0xd0, 0xf2, 0xc3, 0x53, 0xe3, 0x7b, 0x1a,
	0xb3, 0x93, 0x6d, 0xa2, 0x8d, 0x55, 0x1b, 0x22, 0xf4, 0xbd, 0xd4, 0x60, 0x6f, 0xe3, 0xeb, 0xe9,
	0xaa, 0xa3, 0x78, 0x15, 0xe7, 0xf7, 0x55, 0x52, 0x73, 0x61, 0xba, 0x3a, 0xbf, 0xb5, 0xf5, 0xa4,
	0x4d, 0xd3, 0xd5, 0xa5, 0xfd, 0x11, 0x5d, 0x4d, 0xb5, 0x37, 0xed, 0xcf, 0x66, 0x57, 0x3b, 0xb3,
	0x28, 0x92, 0x60, 0x62, 0x04, 0x95, 0xe1, 0x8d, 0x9c, 0xb6, 0x6d, 0x04, 0xfb, 0x66, 0x40, 0x1a,
	0x46, 0xf5, 0xf8, 0x26, 0xee, 0xa4, 0xee, 0x05, 0x1d, 0x0e, 0xbf, 0xbd, 0x4e, 0x29, 0xec, 0xfb,
	0x01, 0xfd, 0x20, 0x0b, 0xe1, 0xc7, 0xea, 0xc0, 0xd0, 0xf6, 0x4d, 0x14, 0x5f, 0xab, 0xd0, 0x9e,
	0x43, 0xd4, 0xf9, 0xf8, 0x44, 0x27, 0xcd, 0x8c, 0x86, 0x43, 0xa1, 0x8f, 0xd9, 0x06, 0x5c, 0xa4,
	0xc7, 0xb3, 0xef, 0x02, 0x88, 0x59, 0xb9, 0x0b, 0xb8, 0x01, 0x2c, 0x1f, 0xe3, 0xa6, 0x22, 0xb3,
	0x9e, 0x5a, 0x9d, 0xc6, 0x9f, 0x6d, 0x78, 0xce, 0xb6, 0x11, 0x64, 0xdc, 0x6b, 0xb0, 0x54, 0x68,
	0xc7, 0x8c, 0x86, 0xa5, 0x0d, 0x2e, 0xb4, 0xb6, 0x3b, 0x1a, 0x6e, 0x1b, 0xd1, 0xf9, 0xdd, 0x02,
	0x1d, 0x52, 0x4e, 0xff, 0x7a, 0x89, 0xfd, 0x0d, 0x2c, 0x97, 0x4d, 0xa4, 0x5c, 0x2b, 0x2d, 0x96,
	0xec, 0x04, 0xfd, 0xed, 0xb3, 0x00, 0x16, 0xf3, 0x3b, 0x8a, 0x5c, 0xd4, 0x57, 0x4b, 0x13, 0xbd,
	0xa7, 0xf1, 0x90, 0xc2, 0x96, 0xff, 0x9f, 0x83, 0x7d, 0x14, 0xc0, 0x52, 0x7e, 0x1b, 0x53, 0xa0,
	0x9d, 0x70, 0x31, 0x5b, 0xba, 0x2c, 0x0a, 0x17, 0xe8, 0xa1, 0x8c, 0xb7, 0xbc, 0xfb, 0xc5, 0x8f,
	0x1c, 0x27, 0x8c, 0x97, 0x30, 0xe1, 0xaf, 0x9e, 0xc8, 0x00, 0x11, 0xef, 0x97, 0x01, 0x2c, 0x97,
	0x2f, 0xf9, 0x3c, 0x60, 0x5f, 0x3e, 0xfd, 0xd7, 0x64, 0xaf, 0xed, 0x3c, 0xa8, 0xb0, 0xb8, 0xab,
	0xcd, 0x21, 0x7f, 0x15, 0xc0, 0x05, 0x2a, 0x08, 0x7c, 0xc8, 0xcb, 0x51, 0xcf, 0x4d, 0x1e, 0x75,
	0x7e, 0x6d, 0x12, 0x2e, 0x7b, 0x84, 0x2e, 0xba, 0xe4, 0xb8, 0x7f, 0x1e, 0xc0, 0x25, 0xc2, 0x8d,
	0xd7, 0x4a, 0x56, 0x8e, 0xa1, 0xcf, 0x4f, 0xde, 0x42, 0xe8, 0x92, 0x26, 0xbf, 0xd1, 0x79, 0x33,
	0x4b, 0xcc, 0x9e, 0xcc, 0xb1, 0xff, 0x38, 0x00, 0x2a, 0xe9, 0x7c, 0x35, 0x83, 0x61, 0xaa, 0x36,
	0xd9, 0x5f, 0x45, 0x54, 0xca, 0xab, 0x70, 0xc1, 0xc3, 0xc3, 0xbe, 0xb8, 0xcb, 0x88, 0xbf, 0x0a,
	0xe0, 0x4a, 0x5e, 0x36, 0xd2, 0x2d, 0x9f, 0xea, 0xa7, 0x63, 0x8d, 0xd7, 0x27, 0x1f, 0xf1, 0x7c,
	0x25, 0x19, 0x92, 0x51, 0xd0, 0xb5, 0xa3, 0xea, 0xa7, 0x25, 0xdf, 0xcc, 0x2b, 0x6c, 0x99, 0x8d,
	0x91, 0xc3, 0xf9, 0xb0, 0x15, 0x99, 0x25, 0xe1, 0xa2, 0x87, 0x77, 0x2f, 0x3b, 0x0b, 0x72, 0x29,
	0x9e, 0x34, 0xce, 0x09, 0xe4, 0x64, 0x0c, 0x39, 0x0f, 0x27, 0xdd, 0x39, 0xfc, 0xed, 0xfd, 0x6b,
	0x7f, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x17, 0xfa, 0xa5, 0x09, 0x9c, 0x2f, 0x00, 0x00,
}
