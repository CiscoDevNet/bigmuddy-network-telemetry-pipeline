// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ethernet_controller_driver_bag_v2_type.proto

/*
Package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface is a generated protocol buffer package.

It is generated from these files:
	ethernet_controller_driver_bag_v2_type.proto

It has these top-level messages:
	EthernetControllerDriverBagV2Type_KEYS
	EthernetControllerDriverBagV2Type
	EtherAutoneg_
	MacAddrType
	EtherMcastMacType_
	EthCtrlrPhyDomLaneAlarms
	EthCtrlrPhyLaneOptMonValidity
	EthCtrlrPhyLaneOptMon
	EthCtrlrPhyDomAlarms
	EthCtrlrPhyDomThresholdValidity
	EthCtrlrPhyDomThresholds
	EtherPhyDetails
	EthCtrlrAlarms
	EthCtrlrErrorCounters
	EtherBerSettings
	EthBerMonitoring
	EthCtrlrUcastMacFilter
	EthCtrlrMcastMacFilter
	EtherFecDetails
	EtherPfcDetailsType
	EthCtrlrPhyInfo
	EthCtrlrL1Info
	EthCtrlrMacInfo
	EthCtlrTransportInfo
*/
package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ethernet bag for driver state for the show controllers command
type EthernetControllerDriverBagV2Type_KEYS struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *EthernetControllerDriverBagV2Type_KEYS) Reset() {
	*m = EthernetControllerDriverBagV2Type_KEYS{}
}
func (m *EthernetControllerDriverBagV2Type_KEYS) String() string { return proto.CompactTextString(m) }
func (*EthernetControllerDriverBagV2Type_KEYS) ProtoMessage()    {}
func (*EthernetControllerDriverBagV2Type_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0}
}

func (m *EthernetControllerDriverBagV2Type_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type EthernetControllerDriverBagV2Type struct {
	// Port Administrative State
	AdminState string `protobuf:"bytes,50,opt,name=admin_state,json=adminState" json:"admin_state,omitempty"`
	// Port Operational state - TRUE if up
	OperStateUp uint32 `protobuf:"varint,51,opt,name=oper_state_up,json=operStateUp" json:"oper_state_up,omitempty"`
	// PHY information
	PhyInfo *EthCtrlrPhyInfo `protobuf:"bytes,52,opt,name=phy_info,json=phyInfo" json:"phy_info,omitempty"`
	// Layer 1 information
	Layer1Info *EthCtrlrL1Info `protobuf:"bytes,53,opt,name=layer1_info,json=layer1Info" json:"layer1_info,omitempty"`
	// MAC Layer information
	MacInfo *EthCtrlrMacInfo `protobuf:"bytes,54,opt,name=mac_info,json=macInfo" json:"mac_info,omitempty"`
	// Transport state information
	TransportInfo *EthCtlrTransportInfo `protobuf:"bytes,55,opt,name=transport_info,json=transportInfo" json:"transport_info,omitempty"`
}

func (m *EthernetControllerDriverBagV2Type) Reset()         { *m = EthernetControllerDriverBagV2Type{} }
func (m *EthernetControllerDriverBagV2Type) String() string { return proto.CompactTextString(m) }
func (*EthernetControllerDriverBagV2Type) ProtoMessage()    {}
func (*EthernetControllerDriverBagV2Type) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1}
}

func (m *EthernetControllerDriverBagV2Type) GetAdminState() string {
	if m != nil {
		return m.AdminState
	}
	return ""
}

func (m *EthernetControllerDriverBagV2Type) GetOperStateUp() uint32 {
	if m != nil {
		return m.OperStateUp
	}
	return 0
}

func (m *EthernetControllerDriverBagV2Type) GetPhyInfo() *EthCtrlrPhyInfo {
	if m != nil {
		return m.PhyInfo
	}
	return nil
}

func (m *EthernetControllerDriverBagV2Type) GetLayer1Info() *EthCtrlrL1Info {
	if m != nil {
		return m.Layer1Info
	}
	return nil
}

func (m *EthernetControllerDriverBagV2Type) GetMacInfo() *EthCtrlrMacInfo {
	if m != nil {
		return m.MacInfo
	}
	return nil
}

func (m *EthernetControllerDriverBagV2Type) GetTransportInfo() *EthCtlrTransportInfo {
	if m != nil {
		return m.TransportInfo
	}
	return nil
}

type EtherAutoneg_ struct {
	// TRUE if autonegotiation is enabled
	AutonegEnabled int32 `protobuf:"zigzag32,1,opt,name=autoneg_enabled,json=autonegEnabled" json:"autoneg_enabled,omitempty"`
	// Validity mask: 0x1 speed, 0x2 duplex, 0x4 flowcontrol, 0x8 fec
	Mask uint32 `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	// Restricted speed (if relevant bit is set in mask)
	Speed string `protobuf:"bytes,3,opt,name=speed" json:"speed,omitempty"`
	// Restricted duplex (if relevant bit is set in mask)
	Duplex string `protobuf:"bytes,4,opt,name=duplex" json:"duplex,omitempty"`
	// Restricted flowcontrol (if relevant bit is set in mask)
	Flowcontrol string `protobuf:"bytes,5,opt,name=flowcontrol" json:"flowcontrol,omitempty"`
	// If true, configuration overrides negotiated settings.  If false, negotiated settings in effect
	ConfigOverride int32 `protobuf:"zigzag32,6,opt,name=config_override,json=configOverride" json:"config_override,omitempty"`
	// Restricted FEC (if revelevant bit is set in mask)
	Fec string `protobuf:"bytes,7,opt,name=fec" json:"fec,omitempty"`
}

func (m *EtherAutoneg_) Reset()                    { *m = EtherAutoneg_{} }
func (m *EtherAutoneg_) String() string            { return proto.CompactTextString(m) }
func (*EtherAutoneg_) ProtoMessage()               {}
func (*EtherAutoneg_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EtherAutoneg_) GetAutonegEnabled() int32 {
	if m != nil {
		return m.AutonegEnabled
	}
	return 0
}

func (m *EtherAutoneg_) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *EtherAutoneg_) GetSpeed() string {
	if m != nil {
		return m.Speed
	}
	return ""
}

func (m *EtherAutoneg_) GetDuplex() string {
	if m != nil {
		return m.Duplex
	}
	return ""
}

func (m *EtherAutoneg_) GetFlowcontrol() string {
	if m != nil {
		return m.Flowcontrol
	}
	return ""
}

func (m *EtherAutoneg_) GetConfigOverride() int32 {
	if m != nil {
		return m.ConfigOverride
	}
	return 0
}

func (m *EtherAutoneg_) GetFec() string {
	if m != nil {
		return m.Fec
	}
	return ""
}

type MacAddrType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *MacAddrType) Reset()                    { *m = MacAddrType{} }
func (m *MacAddrType) String() string            { return proto.CompactTextString(m) }
func (*MacAddrType) ProtoMessage()               {}
func (*MacAddrType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MacAddrType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EtherMcastMacType_ struct {
	// MAC address
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Mask for this MAC address
	Mask string `protobuf:"bytes,2,opt,name=mask" json:"mask,omitempty"`
}

func (m *EtherMcastMacType_) Reset()                    { *m = EtherMcastMacType_{} }
func (m *EtherMcastMacType_) String() string            { return proto.CompactTextString(m) }
func (*EtherMcastMacType_) ProtoMessage()               {}
func (*EtherMcastMacType_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EtherMcastMacType_) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EtherMcastMacType_) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

type EthCtrlrPhyDomLaneAlarms struct {
	// Transmit Laser Power Alarm
	TransmitLaserPower string `protobuf:"bytes,1,opt,name=transmit_laser_power,json=transmitLaserPower" json:"transmit_laser_power,omitempty"`
	// Received Optical Power Alarm
	ReceivedLaserPower string `protobuf:"bytes,2,opt,name=received_laser_power,json=receivedLaserPower" json:"received_laser_power,omitempty"`
	// Laser Bias Current Alarm
	LaserBiasCurrent string `protobuf:"bytes,3,opt,name=laser_bias_current,json=laserBiasCurrent" json:"laser_bias_current,omitempty"`
}

func (m *EthCtrlrPhyDomLaneAlarms) Reset()                    { *m = EthCtrlrPhyDomLaneAlarms{} }
func (m *EthCtrlrPhyDomLaneAlarms) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyDomLaneAlarms) ProtoMessage()               {}
func (*EthCtrlrPhyDomLaneAlarms) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EthCtrlrPhyDomLaneAlarms) GetTransmitLaserPower() string {
	if m != nil {
		return m.TransmitLaserPower
	}
	return ""
}

func (m *EthCtrlrPhyDomLaneAlarms) GetReceivedLaserPower() string {
	if m != nil {
		return m.ReceivedLaserPower
	}
	return ""
}

func (m *EthCtrlrPhyDomLaneAlarms) GetLaserBiasCurrent() string {
	if m != nil {
		return m.LaserBiasCurrent
	}
	return ""
}

type EthCtrlrPhyLaneOptMonValidity struct {
	// The wavelength 'per lane' field is valid
	WavelengthValid int32 `protobuf:"zigzag32,1,opt,name=wavelength_valid,json=wavelengthValid" json:"wavelength_valid,omitempty"`
	// The transmit power 'per lane' field is valid
	TransmitPowerValid int32 `protobuf:"zigzag32,2,opt,name=transmit_power_valid,json=transmitPowerValid" json:"transmit_power_valid,omitempty"`
	// The receive power 'per lane' field is valid
	ReceivePowerValid int32 `protobuf:"zigzag32,3,opt,name=receive_power_valid,json=receivePowerValid" json:"receive_power_valid,omitempty"`
	// The laser bias 'per lane' field is valid
	LaserBiasValid int32 `protobuf:"zigzag32,4,opt,name=laser_bias_valid,json=laserBiasValid" json:"laser_bias_valid,omitempty"`
}

func (m *EthCtrlrPhyLaneOptMonValidity) Reset()                    { *m = EthCtrlrPhyLaneOptMonValidity{} }
func (m *EthCtrlrPhyLaneOptMonValidity) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyLaneOptMonValidity) ProtoMessage()               {}
func (*EthCtrlrPhyLaneOptMonValidity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EthCtrlrPhyLaneOptMonValidity) GetWavelengthValid() int32 {
	if m != nil {
		return m.WavelengthValid
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMonValidity) GetTransmitPowerValid() int32 {
	if m != nil {
		return m.TransmitPowerValid
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMonValidity) GetReceivePowerValid() int32 {
	if m != nil {
		return m.ReceivePowerValid
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMonValidity) GetLaserBiasValid() int32 {
	if m != nil {
		return m.LaserBiasValid
	}
	return 0
}

type EthCtrlrPhyLaneOptMon struct {
	// Center Wavelength (nm*1000)
	CenterWavelength uint32 `protobuf:"varint,1,opt,name=center_wavelength,json=centerWavelength" json:"center_wavelength,omitempty"`
	// Transmit Laser Power (dBm*1000)
	TransmitLaserPower int32 `protobuf:"zigzag32,2,opt,name=transmit_laser_power,json=transmitLaserPower" json:"transmit_laser_power,omitempty"`
	// Received Optical Power (dBm*1000)
	ReceivedLaserPower int32 `protobuf:"zigzag32,3,opt,name=received_laser_power,json=receivedLaserPower" json:"received_laser_power,omitempty"`
	// Laser Bias Current (uAmps)
	LaserBiasCurrent uint32 `protobuf:"varint,4,opt,name=laser_bias_current,json=laserBiasCurrent" json:"laser_bias_current,omitempty"`
	// Digital Optical Monitoring alarms
	DigOptMonAlarm *EthCtrlrPhyDomLaneAlarms `protobuf:"bytes,5,opt,name=dig_opt_mon_alarm,json=digOptMonAlarm" json:"dig_opt_mon_alarm,omitempty"`
}

func (m *EthCtrlrPhyLaneOptMon) Reset()                    { *m = EthCtrlrPhyLaneOptMon{} }
func (m *EthCtrlrPhyLaneOptMon) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyLaneOptMon) ProtoMessage()               {}
func (*EthCtrlrPhyLaneOptMon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EthCtrlrPhyLaneOptMon) GetCenterWavelength() uint32 {
	if m != nil {
		return m.CenterWavelength
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMon) GetTransmitLaserPower() int32 {
	if m != nil {
		return m.TransmitLaserPower
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMon) GetReceivedLaserPower() int32 {
	if m != nil {
		return m.ReceivedLaserPower
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMon) GetLaserBiasCurrent() uint32 {
	if m != nil {
		return m.LaserBiasCurrent
	}
	return 0
}

func (m *EthCtrlrPhyLaneOptMon) GetDigOptMonAlarm() *EthCtrlrPhyDomLaneAlarms {
	if m != nil {
		return m.DigOptMonAlarm
	}
	return nil
}

type EthCtrlrPhyDomAlarms struct {
	// Transceiver Temperature Alarm
	TransceiverTemperature string `protobuf:"bytes,1,opt,name=transceiver_temperature,json=transceiverTemperature" json:"transceiver_temperature,omitempty"`
	// Transceiver Voltage Alarm
	TransceiverVoltage string `protobuf:"bytes,2,opt,name=transceiver_voltage,json=transceiverVoltage" json:"transceiver_voltage,omitempty"`
	// Transmit Laser Power Alarm
	TransmitLaserPower string `protobuf:"bytes,3,opt,name=transmit_laser_power,json=transmitLaserPower" json:"transmit_laser_power,omitempty"`
	// Received Optical Power Alarm
	ReceivedLaserPower string `protobuf:"bytes,4,opt,name=received_laser_power,json=receivedLaserPower" json:"received_laser_power,omitempty"`
	// Laser Bias Current Alarm
	LaserBiasCurrent string `protobuf:"bytes,5,opt,name=laser_bias_current,json=laserBiasCurrent" json:"laser_bias_current,omitempty"`
}

func (m *EthCtrlrPhyDomAlarms) Reset()                    { *m = EthCtrlrPhyDomAlarms{} }
func (m *EthCtrlrPhyDomAlarms) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyDomAlarms) ProtoMessage()               {}
func (*EthCtrlrPhyDomAlarms) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EthCtrlrPhyDomAlarms) GetTransceiverTemperature() string {
	if m != nil {
		return m.TransceiverTemperature
	}
	return ""
}

func (m *EthCtrlrPhyDomAlarms) GetTransceiverVoltage() string {
	if m != nil {
		return m.TransceiverVoltage
	}
	return ""
}

func (m *EthCtrlrPhyDomAlarms) GetTransmitLaserPower() string {
	if m != nil {
		return m.TransmitLaserPower
	}
	return ""
}

func (m *EthCtrlrPhyDomAlarms) GetReceivedLaserPower() string {
	if m != nil {
		return m.ReceivedLaserPower
	}
	return ""
}

func (m *EthCtrlrPhyDomAlarms) GetLaserBiasCurrent() string {
	if m != nil {
		return m.LaserBiasCurrent
	}
	return ""
}

type EthCtrlrPhyDomThresholdValidity struct {
	// The temperature fields are valid
	TemperatureValid int32 `protobuf:"zigzag32,1,opt,name=temperature_valid,json=temperatureValid" json:"temperature_valid,omitempty"`
	// The voltage fields are valid
	VoltageValid int32 `protobuf:"zigzag32,2,opt,name=voltage_valid,json=voltageValid" json:"voltage_valid,omitempty"`
	// The laser bias fields are valid
	LaserBiasValid int32 `protobuf:"zigzag32,3,opt,name=laser_bias_valid,json=laserBiasValid" json:"laser_bias_valid,omitempty"`
	// The transmit power fields are valid
	TransmitPowerValid int32 `protobuf:"zigzag32,4,opt,name=transmit_power_valid,json=transmitPowerValid" json:"transmit_power_valid,omitempty"`
	// The receive power fields are valid
	ReceivePowerValid int32 `protobuf:"zigzag32,5,opt,name=receive_power_valid,json=receivePowerValid" json:"receive_power_valid,omitempty"`
}

func (m *EthCtrlrPhyDomThresholdValidity) Reset()                    { *m = EthCtrlrPhyDomThresholdValidity{} }
func (m *EthCtrlrPhyDomThresholdValidity) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyDomThresholdValidity) ProtoMessage()               {}
func (*EthCtrlrPhyDomThresholdValidity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EthCtrlrPhyDomThresholdValidity) GetTemperatureValid() int32 {
	if m != nil {
		return m.TemperatureValid
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholdValidity) GetVoltageValid() int32 {
	if m != nil {
		return m.VoltageValid
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholdValidity) GetLaserBiasValid() int32 {
	if m != nil {
		return m.LaserBiasValid
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholdValidity) GetTransmitPowerValid() int32 {
	if m != nil {
		return m.TransmitPowerValid
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholdValidity) GetReceivePowerValid() int32 {
	if m != nil {
		return m.ReceivePowerValid
	}
	return 0
}

type EthCtrlrPhyDomThresholds struct {
	// Field validity
	FieldValidity *EthCtrlrPhyDomThresholdValidity `protobuf:"bytes,1,opt,name=field_validity,json=fieldValidity" json:"field_validity,omitempty"`
	// Transceiver high temperature alarm threshold (mDegrees C)
	TransceiverTemperatureAlarmHigh int32 `protobuf:"zigzag32,2,opt,name=transceiver_temperature_alarm_high,json=transceiverTemperatureAlarmHigh" json:"transceiver_temperature_alarm_high,omitempty"`
	// Transceiver high temperature warning threshold (mDegrees C)
	TransceiverTemperatureWarningHigh int32 `protobuf:"zigzag32,3,opt,name=transceiver_temperature_warning_high,json=transceiverTemperatureWarningHigh" json:"transceiver_temperature_warning_high,omitempty"`
	// Transceiver low temperature warning threshold (mDegrees C)
	TransceiverTemperatureWarningLow int32 `protobuf:"zigzag32,4,opt,name=transceiver_temperature_warning_low,json=transceiverTemperatureWarningLow" json:"transceiver_temperature_warning_low,omitempty"`
	// Transceiver low temperature alarm threshold (mDegrees C)
	TransceiverTemperatureAlarmLow int32 `protobuf:"zigzag32,5,opt,name=transceiver_temperature_alarm_low,json=transceiverTemperatureAlarmLow" json:"transceiver_temperature_alarm_low,omitempty"`
	// Transceiver high voltage alarm threshold (mV)
	TransceiverVoltageAlarmHigh uint32 `protobuf:"varint,6,opt,name=transceiver_voltage_alarm_high,json=transceiverVoltageAlarmHigh" json:"transceiver_voltage_alarm_high,omitempty"`
	// Transceiver high voltage warning threshold (mV)
	TransceiverVoltageWarningHigh uint32 `protobuf:"varint,7,opt,name=transceiver_voltage_warning_high,json=transceiverVoltageWarningHigh" json:"transceiver_voltage_warning_high,omitempty"`
	// Transceiver low voltage warning threshold (mV)
	TransceiverVoltageWarningLow uint32 `protobuf:"varint,8,opt,name=transceiver_voltage_warning_low,json=transceiverVoltageWarningLow" json:"transceiver_voltage_warning_low,omitempty"`
	// Transceiver low voltage alarm threshold (mV)
	TransceiverVoltageAlarmLow uint32 `protobuf:"varint,9,opt,name=transceiver_voltage_alarm_low,json=transceiverVoltageAlarmLow" json:"transceiver_voltage_alarm_low,omitempty"`
	// Laser bias high alarm threshold (uA)
	LaserBiasAlarmHigh uint32 `protobuf:"varint,10,opt,name=laser_bias_alarm_high,json=laserBiasAlarmHigh" json:"laser_bias_alarm_high,omitempty"`
	// Laser bias high warning threshold (uA)
	LaserBiasWarningHigh uint32 `protobuf:"varint,11,opt,name=laser_bias_warning_high,json=laserBiasWarningHigh" json:"laser_bias_warning_high,omitempty"`
	// Laser bias low warning threshold (uA)
	LaserBiasWarningLow uint32 `protobuf:"varint,12,opt,name=laser_bias_warning_low,json=laserBiasWarningLow" json:"laser_bias_warning_low,omitempty"`
	// Laser bias low alarm threshold (uA)
	LaserBiasAlarmLow uint32 `protobuf:"varint,13,opt,name=laser_bias_alarm_low,json=laserBiasAlarmLow" json:"laser_bias_alarm_low,omitempty"`
	// High optical transmit power alarm threshold (uW)
	OpticalTransmitPowerAlarmHigh uint32 `protobuf:"varint,14,opt,name=optical_transmit_power_alarm_high,json=opticalTransmitPowerAlarmHigh" json:"optical_transmit_power_alarm_high,omitempty"`
	// High optical transmit power warning threshold (uW)
	OpticalTransmitPowerWarningHigh uint32 `protobuf:"varint,15,opt,name=optical_transmit_power_warning_high,json=opticalTransmitPowerWarningHigh" json:"optical_transmit_power_warning_high,omitempty"`
	// Low optical transmit power warning threshold (uW)
	OpticalTransmitPowerWarningLow uint32 `protobuf:"varint,16,opt,name=optical_transmit_power_warning_low,json=opticalTransmitPowerWarningLow" json:"optical_transmit_power_warning_low,omitempty"`
	// Low optical transmit power alarm threshold (uW)
	OpticalTransmitPowerAlarmLow uint32 `protobuf:"varint,17,opt,name=optical_transmit_power_alarm_low,json=opticalTransmitPowerAlarmLow" json:"optical_transmit_power_alarm_low,omitempty"`
	// High optical receive power alarm threshold (uW)
	OpticalReceivePowerAlarmHigh uint32 `protobuf:"varint,18,opt,name=optical_receive_power_alarm_high,json=opticalReceivePowerAlarmHigh" json:"optical_receive_power_alarm_high,omitempty"`
	// High optical receive power warning threshold (uW)
	OpticalReceivePowerWarningHigh uint32 `protobuf:"varint,19,opt,name=optical_receive_power_warning_high,json=opticalReceivePowerWarningHigh" json:"optical_receive_power_warning_high,omitempty"`
	// Low optical receive power warning threshold (uW)
	OpticalReceivePowerWarningLow uint32 `protobuf:"varint,20,opt,name=optical_receive_power_warning_low,json=opticalReceivePowerWarningLow" json:"optical_receive_power_warning_low,omitempty"`
	// Low optical receive power alarm threshold (uW)
	OpticalReceivePowerAlarmLow uint32 `protobuf:"varint,21,opt,name=optical_receive_power_alarm_low,json=opticalReceivePowerAlarmLow" json:"optical_receive_power_alarm_low,omitempty"`
}

func (m *EthCtrlrPhyDomThresholds) Reset()                    { *m = EthCtrlrPhyDomThresholds{} }
func (m *EthCtrlrPhyDomThresholds) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyDomThresholds) ProtoMessage()               {}
func (*EthCtrlrPhyDomThresholds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EthCtrlrPhyDomThresholds) GetFieldValidity() *EthCtrlrPhyDomThresholdValidity {
	if m != nil {
		return m.FieldValidity
	}
	return nil
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureAlarmHigh() int32 {
	if m != nil {
		return m.TransceiverTemperatureAlarmHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureWarningHigh() int32 {
	if m != nil {
		return m.TransceiverTemperatureWarningHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureWarningLow() int32 {
	if m != nil {
		return m.TransceiverTemperatureWarningLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureAlarmLow() int32 {
	if m != nil {
		return m.TransceiverTemperatureAlarmLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverVoltageAlarmHigh() uint32 {
	if m != nil {
		return m.TransceiverVoltageAlarmHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverVoltageWarningHigh() uint32 {
	if m != nil {
		return m.TransceiverVoltageWarningHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverVoltageWarningLow() uint32 {
	if m != nil {
		return m.TransceiverVoltageWarningLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetTransceiverVoltageAlarmLow() uint32 {
	if m != nil {
		return m.TransceiverVoltageAlarmLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetLaserBiasAlarmHigh() uint32 {
	if m != nil {
		return m.LaserBiasAlarmHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetLaserBiasWarningHigh() uint32 {
	if m != nil {
		return m.LaserBiasWarningHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetLaserBiasWarningLow() uint32 {
	if m != nil {
		return m.LaserBiasWarningLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetLaserBiasAlarmLow() uint32 {
	if m != nil {
		return m.LaserBiasAlarmLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerAlarmHigh() uint32 {
	if m != nil {
		return m.OpticalTransmitPowerAlarmHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerWarningHigh() uint32 {
	if m != nil {
		return m.OpticalTransmitPowerWarningHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerWarningLow() uint32 {
	if m != nil {
		return m.OpticalTransmitPowerWarningLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerAlarmLow() uint32 {
	if m != nil {
		return m.OpticalTransmitPowerAlarmLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerAlarmHigh() uint32 {
	if m != nil {
		return m.OpticalReceivePowerAlarmHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerWarningHigh() uint32 {
	if m != nil {
		return m.OpticalReceivePowerWarningHigh
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerWarningLow() uint32 {
	if m != nil {
		return m.OpticalReceivePowerWarningLow
	}
	return 0
}

func (m *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerAlarmLow() uint32 {
	if m != nil {
		return m.OpticalReceivePowerAlarmLow
	}
	return 0
}

type EtherPhyDetails struct {
	// Name of the port optics manufacturer
	Vendor string `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	// Part number for the port optics
	VendorPartNumber string `protobuf:"bytes,2,opt,name=vendor_part_number,json=vendorPartNumber" json:"vendor_part_number,omitempty"`
	// Serial number for the port optics
	VendorSerialNumber string `protobuf:"bytes,3,opt,name=vendor_serial_number,json=vendorSerialNumber" json:"vendor_serial_number,omitempty"`
	// The temperature of the transceiver (mDegrees C)
	TransceiverTemperature int32 `protobuf:"zigzag32,4,opt,name=transceiver_temperature,json=transceiverTemperature" json:"transceiver_temperature,omitempty"`
	// The input voltage to the transceiver (mV)
	TransceiverVoltage int32 `protobuf:"zigzag32,5,opt,name=transceiver_voltage,json=transceiverVoltage" json:"transceiver_voltage,omitempty"`
	// The transceiver transmit laser power (uW)
	TransceiverTxPower int32 `protobuf:"zigzag32,6,opt,name=transceiver_tx_power,json=transceiverTxPower" json:"transceiver_tx_power,omitempty"`
	// The transceiver receive optical power (uW)
	TransceiverRxPower int32 `protobuf:"zigzag32,7,opt,name=transceiver_rx_power,json=transceiverRxPower" json:"transceiver_rx_power,omitempty"`
	// The laser bias of the transceiver (uA)
	TransceiverTxBias int32 `protobuf:"zigzag32,8,opt,name=transceiver_tx_bias,json=transceiverTxBias" json:"transceiver_tx_bias,omitempty"`
	// Digital Optical Monitoring (per lane information)
	Lane []*EthCtrlrPhyLaneOptMon `protobuf:"bytes,9,rep,name=lane" json:"lane,omitempty"`
	// Digital Optical Monitoring (per lane information) validity
	LaneFieldValidity *EthCtrlrPhyLaneOptMonValidity `protobuf:"bytes,10,opt,name=lane_field_validity,json=laneFieldValidity" json:"lane_field_validity,omitempty"`
	// Digital Optical Monitoring alarm thresholds
	DigOptMonAlarmThresholds *EthCtrlrPhyDomThresholds `protobuf:"bytes,11,opt,name=dig_opt_mon_alarm_thresholds,json=digOptMonAlarmThresholds" json:"dig_opt_mon_alarm_thresholds,omitempty"`
	// Digital Optical Monitoring alarms
	DigOptMonAlarms *EthCtrlrPhyDomAlarms `protobuf:"bytes,12,opt,name=dig_opt_mon_alarms,json=digOptMonAlarms" json:"dig_opt_mon_alarms,omitempty"`
	// Wavelength of the optics being used in nm * 1000
	OpticsWavelength uint32 `protobuf:"varint,13,opt,name=optics_wavelength,json=opticsWavelength" json:"optics_wavelength,omitempty"`
}

func (m *EtherPhyDetails) Reset()                    { *m = EtherPhyDetails{} }
func (m *EtherPhyDetails) String() string            { return proto.CompactTextString(m) }
func (*EtherPhyDetails) ProtoMessage()               {}
func (*EtherPhyDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EtherPhyDetails) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *EtherPhyDetails) GetVendorPartNumber() string {
	if m != nil {
		return m.VendorPartNumber
	}
	return ""
}

func (m *EtherPhyDetails) GetVendorSerialNumber() string {
	if m != nil {
		return m.VendorSerialNumber
	}
	return ""
}

func (m *EtherPhyDetails) GetTransceiverTemperature() int32 {
	if m != nil {
		return m.TransceiverTemperature
	}
	return 0
}

func (m *EtherPhyDetails) GetTransceiverVoltage() int32 {
	if m != nil {
		return m.TransceiverVoltage
	}
	return 0
}

func (m *EtherPhyDetails) GetTransceiverTxPower() int32 {
	if m != nil {
		return m.TransceiverTxPower
	}
	return 0
}

func (m *EtherPhyDetails) GetTransceiverRxPower() int32 {
	if m != nil {
		return m.TransceiverRxPower
	}
	return 0
}

func (m *EtherPhyDetails) GetTransceiverTxBias() int32 {
	if m != nil {
		return m.TransceiverTxBias
	}
	return 0
}

func (m *EtherPhyDetails) GetLane() []*EthCtrlrPhyLaneOptMon {
	if m != nil {
		return m.Lane
	}
	return nil
}

func (m *EtherPhyDetails) GetLaneFieldValidity() *EthCtrlrPhyLaneOptMonValidity {
	if m != nil {
		return m.LaneFieldValidity
	}
	return nil
}

func (m *EtherPhyDetails) GetDigOptMonAlarmThresholds() *EthCtrlrPhyDomThresholds {
	if m != nil {
		return m.DigOptMonAlarmThresholds
	}
	return nil
}

func (m *EtherPhyDetails) GetDigOptMonAlarms() *EthCtrlrPhyDomAlarms {
	if m != nil {
		return m.DigOptMonAlarms
	}
	return nil
}

func (m *EtherPhyDetails) GetOpticsWavelength() uint32 {
	if m != nil {
		return m.OpticsWavelength
	}
	return 0
}

type EthCtrlrAlarms struct {
	// Received Loss of Signal
	ReceivedLossOfSignalAlarm string `protobuf:"bytes,1,opt,name=received_loss_of_signal_alarm,json=receivedLossOfSignalAlarm" json:"received_loss_of_signal_alarm,omitempty"`
	// PCS Loss of Block Lock
	PcsLossOfBlockLockAlarm string `protobuf:"bytes,2,opt,name=pcs_loss_of_block_lock_alarm,json=pcsLossOfBlockLockAlarm" json:"pcs_loss_of_block_lock_alarm,omitempty"`
	// Local Fault
	LocalFaultAlarm string `protobuf:"bytes,3,opt,name=local_fault_alarm,json=localFaultAlarm" json:"local_fault_alarm,omitempty"`
	// Remote Fault
	RemoteFaultAlarm string `protobuf:"bytes,4,opt,name=remote_fault_alarm,json=remoteFaultAlarm" json:"remote_fault_alarm,omitempty"`
	// SD-BER
	SdBerAlarm string `protobuf:"bytes,5,opt,name=sd_ber_alarm,json=sdBerAlarm" json:"sd_ber_alarm,omitempty"`
	// SF-BER
	SfBerAlarm string `protobuf:"bytes,6,opt,name=sf_ber_alarm,json=sfBerAlarm" json:"sf_ber_alarm,omitempty"`
	// Loss of Synchronization Data
	LossOfSynchronizationDataAlarm string `protobuf:"bytes,7,opt,name=loss_of_synchronization_data_alarm,json=lossOfSynchronizationDataAlarm" json:"loss_of_synchronization_data_alarm,omitempty"`
	// Hi-BER
	HiBerAlarm string `protobuf:"bytes,8,opt,name=hi_ber_alarm,json=hiBerAlarm" json:"hi_ber_alarm,omitempty"`
	// Squelch
	SquelchAlarm string `protobuf:"bytes,9,opt,name=squelch_alarm,json=squelchAlarm" json:"squelch_alarm,omitempty"`
}

func (m *EthCtrlrAlarms) Reset()                    { *m = EthCtrlrAlarms{} }
func (m *EthCtrlrAlarms) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrAlarms) ProtoMessage()               {}
func (*EthCtrlrAlarms) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EthCtrlrAlarms) GetReceivedLossOfSignalAlarm() string {
	if m != nil {
		return m.ReceivedLossOfSignalAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetPcsLossOfBlockLockAlarm() string {
	if m != nil {
		return m.PcsLossOfBlockLockAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetLocalFaultAlarm() string {
	if m != nil {
		return m.LocalFaultAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetRemoteFaultAlarm() string {
	if m != nil {
		return m.RemoteFaultAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetSdBerAlarm() string {
	if m != nil {
		return m.SdBerAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetSfBerAlarm() string {
	if m != nil {
		return m.SfBerAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetLossOfSynchronizationDataAlarm() string {
	if m != nil {
		return m.LossOfSynchronizationDataAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetHiBerAlarm() string {
	if m != nil {
		return m.HiBerAlarm
	}
	return ""
}

func (m *EthCtrlrAlarms) GetSquelchAlarm() string {
	if m != nil {
		return m.SquelchAlarm
	}
	return ""
}

type EthCtrlrErrorCounters struct {
	// Sync-header error count
	SyncHeaderErrors uint64 `protobuf:"varint,1,opt,name=sync_header_errors,json=syncHeaderErrors" json:"sync_header_errors,omitempty"`
	// PCS BIP error count
	PcsbipErrors uint64 `protobuf:"varint,2,opt,name=pcsbip_errors,json=pcsbipErrors" json:"pcsbip_errors,omitempty"`
}

func (m *EthCtrlrErrorCounters) Reset()                    { *m = EthCtrlrErrorCounters{} }
func (m *EthCtrlrErrorCounters) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrErrorCounters) ProtoMessage()               {}
func (*EthCtrlrErrorCounters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EthCtrlrErrorCounters) GetSyncHeaderErrors() uint64 {
	if m != nil {
		return m.SyncHeaderErrors
	}
	return 0
}

func (m *EthCtrlrErrorCounters) GetPcsbipErrors() uint64 {
	if m != nil {
		return m.PcsbipErrors
	}
	return 0
}

type EtherBerSettings struct {
	// BER threshold for signal to degrade
	SignalDegradeThreshold uint32 `protobuf:"varint,1,opt,name=signal_degrade_threshold,json=signalDegradeThreshold" json:"signal_degrade_threshold,omitempty"`
	// Report alarm to indicate signal degrade
	SignalDegradeAlarm int32 `protobuf:"zigzag32,2,opt,name=signal_degrade_alarm,json=signalDegradeAlarm" json:"signal_degrade_alarm,omitempty"`
	// BER threshold for signal to fail
	SignalFailThreshold uint32 `protobuf:"varint,3,opt,name=signal_fail_threshold,json=signalFailThreshold" json:"signal_fail_threshold,omitempty"`
	// Report alarm to indicate signal failure
	SignalFailAlarm int32 `protobuf:"zigzag32,4,opt,name=signal_fail_alarm,json=signalFailAlarm" json:"signal_fail_alarm,omitempty"`
	// Whether drivers should signal remote faults
	SignalRemoteFault int32 `protobuf:"zigzag32,5,opt,name=signal_remote_fault,json=signalRemoteFault" json:"signal_remote_fault,omitempty"`
}

func (m *EtherBerSettings) Reset()                    { *m = EtherBerSettings{} }
func (m *EtherBerSettings) String() string            { return proto.CompactTextString(m) }
func (*EtherBerSettings) ProtoMessage()               {}
func (*EtherBerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EtherBerSettings) GetSignalDegradeThreshold() uint32 {
	if m != nil {
		return m.SignalDegradeThreshold
	}
	return 0
}

func (m *EtherBerSettings) GetSignalDegradeAlarm() int32 {
	if m != nil {
		return m.SignalDegradeAlarm
	}
	return 0
}

func (m *EtherBerSettings) GetSignalFailThreshold() uint32 {
	if m != nil {
		return m.SignalFailThreshold
	}
	return 0
}

func (m *EtherBerSettings) GetSignalFailAlarm() int32 {
	if m != nil {
		return m.SignalFailAlarm
	}
	return 0
}

func (m *EtherBerSettings) GetSignalRemoteFault() int32 {
	if m != nil {
		return m.SignalRemoteFault
	}
	return 0
}

type EthBerMonitoring struct {
	// Whether or not BER monitoring is supported
	Supported int32 `protobuf:"zigzag32,1,opt,name=supported" json:"supported,omitempty"`
	// The BER monitoring settings to be applied
	Settings *EtherBerSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *EthBerMonitoring) Reset()                    { *m = EthBerMonitoring{} }
func (m *EthBerMonitoring) String() string            { return proto.CompactTextString(m) }
func (*EthBerMonitoring) ProtoMessage()               {}
func (*EthBerMonitoring) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EthBerMonitoring) GetSupported() int32 {
	if m != nil {
		return m.Supported
	}
	return 0
}

func (m *EthBerMonitoring) GetSettings() *EtherBerSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type EthCtrlrUcastMacFilter struct {
	// MAC addresses in the unicast ingress destination MAC filter
	UnicastMacAddresses []*MacAddrType `protobuf:"bytes,1,rep,name=unicast_mac_addresses,json=unicastMacAddresses" json:"unicast_mac_addresses,omitempty"`
}

func (m *EthCtrlrUcastMacFilter) Reset()                    { *m = EthCtrlrUcastMacFilter{} }
func (m *EthCtrlrUcastMacFilter) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrUcastMacFilter) ProtoMessage()               {}
func (*EthCtrlrUcastMacFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EthCtrlrUcastMacFilter) GetUnicastMacAddresses() []*MacAddrType {
	if m != nil {
		return m.UnicastMacAddresses
	}
	return nil
}

type EthCtrlrMcastMacFilter struct {
	// Whether the port is in multicast promiscuous mode
	MulticastPromiscuous uint32 `protobuf:"varint,1,opt,name=multicast_promiscuous,json=multicastPromiscuous" json:"multicast_promiscuous,omitempty"`
	// MAC addresses in the multicast ingress destination MAC filter
	MulticastMacAddresses []*EtherMcastMacType_ `protobuf:"bytes,2,rep,name=multicast_mac_addresses,json=multicastMacAddresses" json:"multicast_mac_addresses,omitempty"`
}

func (m *EthCtrlrMcastMacFilter) Reset()                    { *m = EthCtrlrMcastMacFilter{} }
func (m *EthCtrlrMcastMacFilter) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrMcastMacFilter) ProtoMessage()               {}
func (*EthCtrlrMcastMacFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EthCtrlrMcastMacFilter) GetMulticastPromiscuous() uint32 {
	if m != nil {
		return m.MulticastPromiscuous
	}
	return 0
}

func (m *EthCtrlrMcastMacFilter) GetMulticastMacAddresses() []*EtherMcastMacType_ {
	if m != nil {
		return m.MulticastMacAddresses
	}
	return nil
}

type EtherFecDetails struct {
	// Port operational FEC type
	Fec string `protobuf:"bytes,1,opt,name=fec" json:"fec,omitempty"`
	// Corrected codeword error count
	CorrectedCodewordCount uint64 `protobuf:"varint,2,opt,name=corrected_codeword_count,json=correctedCodewordCount" json:"corrected_codeword_count,omitempty"`
	// Uncorrected codeword error count
	UncorrectedCodewordCount uint64 `protobuf:"varint,3,opt,name=uncorrected_codeword_count,json=uncorrectedCodewordCount" json:"uncorrected_codeword_count,omitempty"`
}

func (m *EtherFecDetails) Reset()                    { *m = EtherFecDetails{} }
func (m *EtherFecDetails) String() string            { return proto.CompactTextString(m) }
func (*EtherFecDetails) ProtoMessage()               {}
func (*EtherFecDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *EtherFecDetails) GetFec() string {
	if m != nil {
		return m.Fec
	}
	return ""
}

func (m *EtherFecDetails) GetCorrectedCodewordCount() uint64 {
	if m != nil {
		return m.CorrectedCodewordCount
	}
	return 0
}

func (m *EtherFecDetails) GetUncorrectedCodewordCount() uint64 {
	if m != nil {
		return m.UncorrectedCodewordCount
	}
	return 0
}

type EtherPfcDetailsType struct {
	// Port operational priority flow control
	PriorityFlowcontrol string `protobuf:"bytes,1,opt,name=priority_flowcontrol,json=priorityFlowcontrol" json:"priority_flowcontrol,omitempty"`
	// Priority bitmap
	PriorityEnabledBitmap uint32 `protobuf:"varint,2,opt,name=priority_enabled_bitmap,json=priorityEnabledBitmap" json:"priority_enabled_bitmap,omitempty"`
	// RX Frame counts
	RxFrames []uint64 `protobuf:"varint,3,rep,packed,name=rx_frames,json=rxFrames" json:"rx_frames,omitempty"`
	// TX Frame counts
	TxFrames []uint64 `protobuf:"varint,4,rep,packed,name=tx_frames,json=txFrames" json:"tx_frames,omitempty"`
}

func (m *EtherPfcDetailsType) Reset()                    { *m = EtherPfcDetailsType{} }
func (m *EtherPfcDetailsType) String() string            { return proto.CompactTextString(m) }
func (*EtherPfcDetailsType) ProtoMessage()               {}
func (*EtherPfcDetailsType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *EtherPfcDetailsType) GetPriorityFlowcontrol() string {
	if m != nil {
		return m.PriorityFlowcontrol
	}
	return ""
}

func (m *EtherPfcDetailsType) GetPriorityEnabledBitmap() uint32 {
	if m != nil {
		return m.PriorityEnabledBitmap
	}
	return 0
}

func (m *EtherPfcDetailsType) GetRxFrames() []uint64 {
	if m != nil {
		return m.RxFrames
	}
	return nil
}

func (m *EtherPfcDetailsType) GetTxFrames() []uint64 {
	if m != nil {
		return m.TxFrames
	}
	return nil
}

type EthCtrlrPhyInfo struct {
	// Port media type
	MediaType string `protobuf:"bytes,1,opt,name=media_type,json=mediaType" json:"media_type,omitempty"`
	// Presence of PHY
	PhyPresent string `protobuf:"bytes,2,opt,name=phy_present,json=phyPresent" json:"phy_present,omitempty"`
	// Details about the PHY
	PhyDetails *EtherPhyDetails `protobuf:"bytes,3,opt,name=phy_details,json=phyDetails" json:"phy_details,omitempty"`
	// Port operational loopback
	Loopback string `protobuf:"bytes,4,opt,name=loopback" json:"loopback,omitempty"`
	// Forward Error Correction information
	FecDetails *EtherFecDetails `protobuf:"bytes,5,opt,name=fec_details,json=fecDetails" json:"fec_details,omitempty"`
}

func (m *EthCtrlrPhyInfo) Reset()                    { *m = EthCtrlrPhyInfo{} }
func (m *EthCtrlrPhyInfo) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrPhyInfo) ProtoMessage()               {}
func (*EthCtrlrPhyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *EthCtrlrPhyInfo) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *EthCtrlrPhyInfo) GetPhyPresent() string {
	if m != nil {
		return m.PhyPresent
	}
	return ""
}

func (m *EthCtrlrPhyInfo) GetPhyDetails() *EtherPhyDetails {
	if m != nil {
		return m.PhyDetails
	}
	return nil
}

func (m *EthCtrlrPhyInfo) GetLoopback() string {
	if m != nil {
		return m.Loopback
	}
	return ""
}

func (m *EthCtrlrPhyInfo) GetFecDetails() *EtherFecDetails {
	if m != nil {
		return m.FecDetails
	}
	return nil
}

type EthCtrlrL1Info struct {
	// Link state
	LinkState string `protobuf:"bytes,1,opt,name=link_state,json=linkState" json:"link_state,omitempty"`
	// State of the LED
	LedState string `protobuf:"bytes,2,opt,name=led_state,json=ledState" json:"led_state,omitempty"`
	// Port autonegotiation configuration settings
	Autoneg *EtherAutoneg_ `protobuf:"bytes,3,opt,name=autoneg" json:"autoneg,omitempty"`
	// Port operational speed
	Speed string `protobuf:"bytes,4,opt,name=speed" json:"speed,omitempty"`
	// Port operational duplexity
	Duplex string `protobuf:"bytes,5,opt,name=duplex" json:"duplex,omitempty"`
	// Port operational flow control
	Flowcontrol string `protobuf:"bytes,6,opt,name=flowcontrol" json:"flowcontrol,omitempty"`
	// Port operational inter-packet-gap
	Ipg string `protobuf:"bytes,7,opt,name=ipg" json:"ipg,omitempty"`
	// Current alarms
	CurrentAlarms *EthCtrlrAlarms `protobuf:"bytes,8,opt,name=current_alarms,json=currentAlarms" json:"current_alarms,omitempty"`
	// Previous alarms
	PreviousAlarms *EthCtrlrAlarms `protobuf:"bytes,9,opt,name=previous_alarms,json=previousAlarms" json:"previous_alarms,omitempty"`
	// Statistics for detected errors
	ErrorCounts *EthCtrlrErrorCounters `protobuf:"bytes,10,opt,name=error_counts,json=errorCounts" json:"error_counts,omitempty"`
	// BER monitoring details
	BerMonitoring *EthBerMonitoring `protobuf:"bytes,11,opt,name=ber_monitoring,json=berMonitoring" json:"ber_monitoring,omitempty"`
	// Laser Squelch - TRUE if enabled
	LaserSquelchEnabled uint32 `protobuf:"varint,12,opt,name=laser_squelch_enabled,json=laserSquelchEnabled" json:"laser_squelch_enabled,omitempty"`
	// Bandwidth utilization (hundredths of a percent)
	BandwidthUtilization uint32 `protobuf:"varint,13,opt,name=bandwidth_utilization,json=bandwidthUtilization" json:"bandwidth_utilization,omitempty"`
	// Priority flow control information
	PfcInfo *EtherPfcDetailsType `protobuf:"bytes,14,opt,name=pfc_info,json=pfcInfo" json:"pfc_info,omitempty"`
	// Port operational bandwidth
	Bandwidth uint64 `protobuf:"varint,15,opt,name=bandwidth" json:"bandwidth,omitempty"`
}

func (m *EthCtrlrL1Info) Reset()                    { *m = EthCtrlrL1Info{} }
func (m *EthCtrlrL1Info) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrL1Info) ProtoMessage()               {}
func (*EthCtrlrL1Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EthCtrlrL1Info) GetLinkState() string {
	if m != nil {
		return m.LinkState
	}
	return ""
}

func (m *EthCtrlrL1Info) GetLedState() string {
	if m != nil {
		return m.LedState
	}
	return ""
}

func (m *EthCtrlrL1Info) GetAutoneg() *EtherAutoneg_ {
	if m != nil {
		return m.Autoneg
	}
	return nil
}

func (m *EthCtrlrL1Info) GetSpeed() string {
	if m != nil {
		return m.Speed
	}
	return ""
}

func (m *EthCtrlrL1Info) GetDuplex() string {
	if m != nil {
		return m.Duplex
	}
	return ""
}

func (m *EthCtrlrL1Info) GetFlowcontrol() string {
	if m != nil {
		return m.Flowcontrol
	}
	return ""
}

func (m *EthCtrlrL1Info) GetIpg() string {
	if m != nil {
		return m.Ipg
	}
	return ""
}

func (m *EthCtrlrL1Info) GetCurrentAlarms() *EthCtrlrAlarms {
	if m != nil {
		return m.CurrentAlarms
	}
	return nil
}

func (m *EthCtrlrL1Info) GetPreviousAlarms() *EthCtrlrAlarms {
	if m != nil {
		return m.PreviousAlarms
	}
	return nil
}

func (m *EthCtrlrL1Info) GetErrorCounts() *EthCtrlrErrorCounters {
	if m != nil {
		return m.ErrorCounts
	}
	return nil
}

func (m *EthCtrlrL1Info) GetBerMonitoring() *EthBerMonitoring {
	if m != nil {
		return m.BerMonitoring
	}
	return nil
}

func (m *EthCtrlrL1Info) GetLaserSquelchEnabled() uint32 {
	if m != nil {
		return m.LaserSquelchEnabled
	}
	return 0
}

func (m *EthCtrlrL1Info) GetBandwidthUtilization() uint32 {
	if m != nil {
		return m.BandwidthUtilization
	}
	return 0
}

func (m *EthCtrlrL1Info) GetPfcInfo() *EtherPfcDetailsType {
	if m != nil {
		return m.PfcInfo
	}
	return nil
}

func (m *EthCtrlrL1Info) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

type EthCtrlrMacInfo struct {
	// Port operational MTU
	Mtu uint32 `protobuf:"varint,1,opt,name=mtu" json:"mtu,omitempty"`
	// Port operational MRU
	Mru uint32 `protobuf:"varint,2,opt,name=mru" json:"mru,omitempty"`
	// Port Burned-In MAC address
	BurnedInMacAddress string `protobuf:"bytes,3,opt,name=burned_in_mac_address,json=burnedInMacAddress" json:"burned_in_mac_address,omitempty"`
	// Port operational MAC address
	OperationalMacAddress *MacAddrType `protobuf:"bytes,4,opt,name=operational_mac_address,json=operationalMacAddress" json:"operational_mac_address,omitempty"`
	// Port unicast MAC filter information
	UnicastMacFilters *EthCtrlrUcastMacFilter `protobuf:"bytes,5,opt,name=unicast_mac_filters,json=unicastMacFilters" json:"unicast_mac_filters,omitempty"`
	// Port multicast MAC filter information
	MulticastMacFilters *EthCtrlrMcastMacFilter `protobuf:"bytes,6,opt,name=multicast_mac_filters,json=multicastMacFilters" json:"multicast_mac_filters,omitempty"`
}

func (m *EthCtrlrMacInfo) Reset()                    { *m = EthCtrlrMacInfo{} }
func (m *EthCtrlrMacInfo) String() string            { return proto.CompactTextString(m) }
func (*EthCtrlrMacInfo) ProtoMessage()               {}
func (*EthCtrlrMacInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EthCtrlrMacInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *EthCtrlrMacInfo) GetMru() uint32 {
	if m != nil {
		return m.Mru
	}
	return 0
}

func (m *EthCtrlrMacInfo) GetBurnedInMacAddress() string {
	if m != nil {
		return m.BurnedInMacAddress
	}
	return ""
}

func (m *EthCtrlrMacInfo) GetOperationalMacAddress() *MacAddrType {
	if m != nil {
		return m.OperationalMacAddress
	}
	return nil
}

func (m *EthCtrlrMacInfo) GetUnicastMacFilters() *EthCtrlrUcastMacFilter {
	if m != nil {
		return m.UnicastMacFilters
	}
	return nil
}

func (m *EthCtrlrMacInfo) GetMulticastMacFilters() *EthCtrlrMcastMacFilter {
	if m != nil {
		return m.MulticastMacFilters
	}
	return nil
}

type EthCtlrTransportInfo struct {
	// Maintenance Mode - TRUE if enabled
	MaintenanceModeEnabled uint32 `protobuf:"varint,1,opt,name=maintenance_mode_enabled,json=maintenanceModeEnabled" json:"maintenance_mode_enabled,omitempty"`
	// AINS Soak status
	AinsStatus string `protobuf:"bytes,2,opt,name=ains_status,json=ainsStatus" json:"ains_status,omitempty"`
	// Total duration (seconds) of AINS soak timer
	TotalDuration uint32 `protobuf:"varint,3,opt,name=total_duration,json=totalDuration" json:"total_duration,omitempty"`
	// Remaining duration (seconds) of AINS soak timer
	RemainingDuration uint32 `protobuf:"varint,4,opt,name=remaining_duration,json=remainingDuration" json:"remaining_duration,omitempty"`
}

func (m *EthCtlrTransportInfo) Reset()                    { *m = EthCtlrTransportInfo{} }
func (m *EthCtlrTransportInfo) String() string            { return proto.CompactTextString(m) }
func (*EthCtlrTransportInfo) ProtoMessage()               {}
func (*EthCtlrTransportInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EthCtlrTransportInfo) GetMaintenanceModeEnabled() uint32 {
	if m != nil {
		return m.MaintenanceModeEnabled
	}
	return 0
}

func (m *EthCtlrTransportInfo) GetAinsStatus() string {
	if m != nil {
		return m.AinsStatus
	}
	return ""
}

func (m *EthCtlrTransportInfo) GetTotalDuration() uint32 {
	if m != nil {
		return m.TotalDuration
	}
	return 0
}

func (m *EthCtlrTransportInfo) GetRemainingDuration() uint32 {
	if m != nil {
		return m.RemainingDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*EthernetControllerDriverBagV2Type_KEYS)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type_KEYS")
	proto.RegisterType((*EthernetControllerDriverBagV2Type)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type")
	proto.RegisterType((*EtherAutoneg_)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_autoneg_")
	proto.RegisterType((*MacAddrType)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.mac_addr_type")
	proto.RegisterType((*EtherMcastMacType_)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_mcast_mac_type_")
	proto.RegisterType((*EthCtrlrPhyDomLaneAlarms)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_lane_alarms")
	proto.RegisterType((*EthCtrlrPhyLaneOptMonValidity)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon_validity")
	proto.RegisterType((*EthCtrlrPhyLaneOptMon)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon")
	proto.RegisterType((*EthCtrlrPhyDomAlarms)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_alarms")
	proto.RegisterType((*EthCtrlrPhyDomThresholdValidity)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_threshold_validity")
	proto.RegisterType((*EthCtrlrPhyDomThresholds)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_thresholds")
	proto.RegisterType((*EtherPhyDetails)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details")
	proto.RegisterType((*EthCtrlrAlarms)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_alarms")
	proto.RegisterType((*EthCtrlrErrorCounters)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_error_counters")
	proto.RegisterType((*EtherBerSettings)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_ber_settings")
	proto.RegisterType((*EthBerMonitoring)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ber_monitoring")
	proto.RegisterType((*EthCtrlrUcastMacFilter)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_ucast_mac_filter")
	proto.RegisterType((*EthCtrlrMcastMacFilter)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mcast_mac_filter")
	proto.RegisterType((*EtherFecDetails)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_fec_details")
	proto.RegisterType((*EtherPfcDetailsType)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_pfc_details_type")
	proto.RegisterType((*EthCtrlrPhyInfo)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_info")
	proto.RegisterType((*EthCtrlrL1Info)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info")
	proto.RegisterType((*EthCtrlrMacInfo)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info")
	proto.RegisterType((*EthCtlrTransportInfo)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctlr_transport_info")
}

func init() { proto.RegisterFile("ethernet_controller_driver_bag_v2_type.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x49, 0x8f, 0x24, 0x47,
	0xd5, 0xca, 0xae, 0xea, 0xa5, 0x5e, 0x75, 0x55, 0x57, 0x65, 0x6f, 0xf5, 0x8d, 0x67, 0x69, 0xe7,
	0xd8, 0x1f, 0x83, 0x6d, 0xda, 0x4c, 0x0f, 0xb6, 0x39, 0x80, 0x84, 0x67, 0x69, 0xbc, 0xcc, 0x78,
	0x46, 0x39, 0x6d, 0x5b, 0x80, 0x20, 0x14, 0x95, 0x19, 0x55, 0x15, 0x4c, 0x66, 0x46, 0x3a, 0x32,
	0xb2, 0x17, 0x5b, 0xc2, 0x17, 0x0b, 0x21, 0x21, 0x21, 0x84, 0x04, 0x46, 0x20, 0x24, 0xae, 0x3e,
	0x20, 0xc4, 0x8d, 0x0b, 0x37, 0x4e, 0x5c, 0xb9, 0x70, 0xe0, 0x37, 0x70, 0x00, 0x7e, 0x00, 0x8a,
	0x25, 0x33, 0x23, 0xab, 0xbb, 0xda, 0x33, 0x92, 0x6b, 0x2e, 0xad, 0xca, 0xb7, 0xbf, 0x17, 0xef,
	0x45, 0xbc, 0x78, 0xd1, 0xf0, 0x12, 0x11, 0x13, 0xc2, 0x13, 0x22, 0x50, 0xc0, 0x12, 0xc1, 0x59,
	0x14, 0x11, 0x8e, 0x42, 0x4e, 0x0f, 0x09, 0x47, 0x43, 0x3c, 0x46, 0x87, 0x7b, 0x48, 0x9c, 0xa4,
	0x64, 0x37, 0xe5, 0x4c, 0x30, 0xf7, 0xed, 0x80, 0x66, 0x01, 0x43, 0x94, 0x65, 0xe8, 0xb8, 0x20,
	0xcb, 0x50, 0x4c, 0x42, 0x8a, 0x11, 0x11, 0x13, 0xc4, 0x52, 0xc2, 0x77, 0x4b, 0x89, 0x34, 0x11,
	0x84, 0x8f, 0x70, 0x40, 0x76, 0xcb, 0x5f, 0x59, 0xf5, 0xd3, 0x3b, 0x80, 0x17, 0x1f, 0x4f, 0x39,
	0x7a, 0xfb, 0xce, 0x77, 0x1e, 0xba, 0xcf, 0x43, 0xb7, 0xe4, 0x45, 0x09, 0x8e, 0xc9, 0xc0, 0xd9,
	0x71, 0xae, 0xb5, 0xfc, 0x4e, 0x09, 0x7d, 0x07, 0xc7, 0xc4, 0xfb, 0x6f, 0x13, 0xfe, 0xff, 0xf1,
	0xc4, 0xba, 0x57, 0xa0, 0x8d, 0xc3, 0x98, 0x26, 0x28, 0x13, 0x58, 0x90, 0xc1, 0x9e, 0x12, 0x07,
	0x0a, 0xf4, 0x50, 0x42, 0x5c, 0x0f, 0x3a, 0xd2, 0x23, 0x8d, 0x47, 0x79, 0x3a, 0xb8, 0xb1, 0xe3,
	0x5c, 0xeb, 0xf8, 0x6d, 0x09, 0x54, 0x14, 0xef, 0xa6, 0xee, 0x87, 0xb0, 0x92, 0x4e, 0x4e, 0x10,
	0x4d, 0x46, 0x6c, 0xf0, 0xb5, 0x1d, 0xe7, 0x5a, 0x7b, 0x0f, 0xed, 0x7e, 0x81, 0x51, 0x92, 0x74,
	0x28, 0x10, 0x3c, 0xe2, 0xa8, 0x50, 0xe3, 0x2f, 0xa7, 0x93, 0x93, 0x37, 0x93, 0x11, 0x73, 0x3f,
	0x86, 0x76, 0x84, 0x4f, 0x08, 0xbf, 0xae, 0xd5, 0xbf, 0xa2, 0xd4, 0xff, 0x60, 0x4e, 0xea, 0x23,
	0xad, 0xc5, 0x07, 0xad, 0x52, 0x19, 0xf0, 0x21, 0xac, 0xc4, 0x38, 0xd0, 0xda, 0x5f, 0x9d, 0xab,
	0xf3, 0x85, 0x1a, 0x7f, 0x39, 0xc6, 0x81, 0xd2, 0xfd, 0x53, 0x07, 0xba, 0x82, 0xe3, 0x24, 0x4b,
	0x19, 0x17, 0xda, 0x84, 0xd7, 0x94, 0x09, 0xe1, 0x1c, 0x4c, 0x88, 0x38, 0xaa, 0xeb, 0xf2, 0x3b,
	0xe5, 0xb7, 0xb4, 0xc6, 0xfb, 0x87, 0x03, 0x5d, 0x25, 0x12, 0xe1, 0x5c, 0xb0, 0x84, 0x8c, 0x91,
	0xfb, 0x25, 0x58, 0x2b, 0x7e, 0x93, 0x04, 0x0f, 0x23, 0x12, 0xaa, 0x8c, 0xed, 0xfb, 0x5d, 0x03,
	0xbe, 0xa3, 0xa1, 0xae, 0x0b, 0xcd, 0x18, 0x67, 0x8f, 0x06, 0x0b, 0x2a, 0xbb, 0xd4, 0x6f, 0x77,
	0x03, 0x16, 0xb3, 0x94, 0x90, 0x70, 0xd0, 0x50, 0x59, 0xa9, 0x3f, 0xdc, 0x2d, 0x58, 0x0a, 0xf3,
	0x34, 0x22, 0xc7, 0x83, 0xa6, 0x02, 0x9b, 0x2f, 0x77, 0x07, 0xda, 0xa3, 0x88, 0x1d, 0x99, 0x74,
	0x1f, 0x2c, 0x2a, 0xa4, 0x0d, 0x92, 0xc6, 0x04, 0x2c, 0x19, 0xd1, 0x31, 0x62, 0x87, 0x84, 0x73,
	0x1a, 0x92, 0xc1, 0x92, 0x36, 0x46, 0x83, 0xef, 0x1b, 0xa8, 0xdb, 0x83, 0xc6, 0x88, 0x04, 0x83,
	0x65, 0x25, 0x42, 0xfe, 0xf4, 0x9e, 0x87, 0x8e, 0x8c, 0x3e, 0x0e, 0x43, 0xae, 0xeb, 0x66, 0x03,
	0x16, 0x0f, 0x71, 0x94, 0x17, 0x05, 0xa8, 0x3f, 0xbc, 0xbb, 0xb0, 0xa9, 0x03, 0x10, 0x07, 0x38,
	0x13, 0x6a, 0xc1, 0x54, 0xf1, 0xca, 0x32, 0x2b, 0xf8, 0x49, 0x96, 0x19, 0x26, 0x88, 0x71, 0xf0,
	0xba, 0x86, 0xd4, 0xfc, 0x6f, 0x69, 0xff, 0xbd, 0x3f, 0x39, 0x70, 0xa9, 0x9e, 0xfa, 0x21, 0x8b,
	0x51, 0x84, 0x13, 0x82, 0x70, 0x84, 0x79, 0x9c, 0xb9, 0x5f, 0x85, 0x0d, 0xb5, 0x04, 0x31, 0x15,
	0x28, 0xc2, 0x19, 0xe1, 0x28, 0x65, 0x47, 0x84, 0x1b, 0xf9, 0x6e, 0x81, 0xbb, 0x2b, 0x51, 0x0f,
	0x24, 0x46, 0x72, 0x70, 0x12, 0x10, 0x7a, 0x48, 0xc2, 0x1a, 0x87, 0xd6, 0xeb, 0x16, 0x38, 0x8b,
	0xe3, 0x25, 0x70, 0x35, 0xe1, 0x90, 0xe2, 0x0c, 0x05, 0x39, 0xe7, 0x24, 0x11, 0x66, 0x49, 0x7a,
	0x0a, 0x73, 0x93, 0xe2, 0xec, 0x96, 0x86, 0x7b, 0xff, 0x74, 0xe0, 0x6a, 0xdd, 0x66, 0x65, 0x2f,
	0x4b, 0x05, 0x8a, 0x59, 0x82, 0x0e, 0x71, 0x44, 0x43, 0x2a, 0x4e, 0xdc, 0x2f, 0x43, 0xef, 0x08,
	0x1f, 0x92, 0x88, 0x24, 0x63, 0x31, 0xd1, 0x60, 0x93, 0x19, 0x6b, 0x15, 0xfc, 0x3d, 0x09, 0xae,
	0x39, 0xa9, 0x8c, 0x35, 0xe4, 0x0b, 0x8a, 0xbc, 0x74, 0x52, 0x59, 0xab, 0x39, 0x76, 0x61, 0xdd,
	0x38, 0x52, 0x63, 0x68, 0x28, 0x86, 0xbe, 0x41, 0x59, 0xf4, 0xd7, 0xa0, 0x67, 0xb9, 0xa8, 0x89,
	0x9b, 0x3a, 0x33, 0x4a, 0x07, 0x15, 0xa5, 0xf7, 0x9f, 0x05, 0xb8, 0x30, 0xdb, 0x3d, 0xf7, 0x45,
	0xe8, 0x07, 0x44, 0x96, 0x0d, 0xaa, 0x9c, 0x50, 0x6e, 0x75, 0xfc, 0x9e, 0x46, 0xbc, 0x5f, 0xc2,
	0x67, 0x2e, 0xde, 0x94, 0x5f, 0x8f, 0xb1, 0x78, 0xda, 0xb1, 0xc7, 0x5f, 0xbc, 0xa6, 0xb6, 0x68,
	0x7a, 0xf1, 0xdc, 0x5f, 0x3a, 0xd0, 0x0f, 0x65, 0x79, 0x98, 0xd5, 0x52, 0x59, 0xa6, 0x2a, 0xa9,
	0xbd, 0xf7, 0xc3, 0x39, 0xee, 0xe8, 0x53, 0x69, 0xed, 0x77, 0x43, 0x3a, 0xbe, 0x9f, 0x8a, 0x7b,
	0x2c, 0x79, 0x5d, 0x02, 0xbc, 0x5f, 0x2d, 0xc0, 0xe0, 0x34, 0x87, 0xa9, 0x81, 0xd7, 0x60, 0x5b,
	0x85, 0x4a, 0xf9, 0xce, 0x91, 0x20, 0x71, 0x4a, 0x38, 0x16, 0x39, 0x2f, 0x6a, 0x73, 0xcb, 0x42,
	0x1f, 0x54, 0x58, 0xf7, 0x65, 0x58, 0xb7, 0x19, 0x0f, 0x59, 0x24, 0xf0, 0x98, 0x14, 0x95, 0x60,
	0xa1, 0xde, 0xd3, 0x98, 0x99, 0x0b, 0xd6, 0x78, 0xe2, 0x6a, 0x6b, 0x3e, 0x61, 0xb5, 0x2d, 0xce,
	0xa8, 0xb6, 0x4f, 0x16, 0xe0, 0xb9, 0xd3, 0x81, 0x11, 0x13, 0x4e, 0xb2, 0x09, 0x8b, 0xc2, 0xaa,
	0xdc, 0x5e, 0x84, 0xbe, 0x15, 0x98, 0x5a, 0xbd, 0xf5, 0x2c, 0x84, 0x2e, 0x87, 0xab, 0xd0, 0x31,
	0xc1, 0xa8, 0x55, 0xda, 0xaa, 0x01, 0xce, 0xae, 0x99, 0xc6, 0x59, 0x35, 0x33, 0xb3, 0x7e, 0x9b,
	0x4f, 0x5a, 0xbf, 0x8b, 0x33, 0xea, 0xd7, 0xfb, 0x6c, 0x15, 0x2e, 0x9e, 0x13, 0x86, 0xcc, 0xfd,
	0xb5, 0x03, 0xdd, 0x11, 0x25, 0x56, 0x44, 0x94, 0xf3, 0xed, 0xbd, 0x0f, 0xe6, 0x9c, 0xd5, 0xa7,
	0x97, 0xc2, 0xef, 0x28, 0x43, 0xde, 0x2b, 0x56, 0xe6, 0x6d, 0xf0, 0x66, 0xa4, 0xaf, 0x4e, 0x70,
	0x34, 0xa1, 0xe3, 0x89, 0x59, 0x81, 0x2b, 0x67, 0x67, 0xb2, 0x2a, 0x92, 0x37, 0xe8, 0x78, 0xe2,
	0xde, 0x87, 0xe7, 0x66, 0x09, 0x3b, 0xc2, 0x3c, 0xa1, 0xc9, 0x58, 0x8b, 0xd3, 0x0b, 0xf5, 0xec,
	0xd9, 0xe2, 0xde, 0xd7, 0x94, 0x4a, 0xe0, 0x3d, 0xb8, 0xfa, 0x79, 0x02, 0x23, 0x76, 0x64, 0x96,
	0x72, 0xe7, 0x5c, 0x79, 0x77, 0xd9, 0x91, 0xfb, 0x26, 0x3c, 0x7b, 0xbe, 0xb3, 0x52, 0x98, 0x5e,
	0xe6, 0xcb, 0xe7, 0xf8, 0x2a, 0x45, 0xdd, 0x82, 0xcb, 0x67, 0x54, 0xaf, 0x1d, 0xb3, 0x25, 0xb5,
	0xcb, 0x3d, 0x73, 0xba, 0x90, 0xab, 0x78, 0x7d, 0x1b, 0x76, 0xce, 0x12, 0x52, 0x8b, 0xd5, 0xb2,
	0x12, 0x73, 0xe9, 0xb4, 0x18, 0x3b, 0x4e, 0x77, 0xe0, 0xca, 0x79, 0x82, 0xa4, 0x5b, 0x2b, 0x4a,
	0xce, 0xc5, 0x99, 0x72, 0xa4, 0x53, 0xaf, 0xc3, 0xa5, 0xd9, 0x4e, 0x49, 0x21, 0x2d, 0x25, 0xe4,
	0xc2, 0x0c, 0x9f, 0xa4, 0x88, 0xeb, 0xb0, 0x69, 0xd5, 0xa5, 0x15, 0x0e, 0x50, 0xac, 0x6e, 0x59,
	0x9c, 0x55, 0x14, 0x5e, 0x81, 0x6d, 0x8b, 0xa5, 0xe6, 0x7c, 0x5b, 0x31, 0x6d, 0x94, 0x4c, 0xb6,
	0xcf, 0x37, 0x60, 0xeb, 0x0c, 0x36, 0x69, 0xe5, 0xaa, 0xe2, 0x5a, 0x9f, 0xe6, 0x92, 0xe6, 0xbd,
	0x0c, 0x1b, 0xa7, 0xcc, 0x93, 0x2c, 0x1d, 0xc5, 0xd2, 0xaf, 0x5b, 0x27, 0x19, 0xde, 0x80, 0x67,
	0x59, 0x2a, 0x68, 0x80, 0x23, 0x34, 0xb5, 0x8b, 0x58, 0xbe, 0x75, 0xf5, 0x1a, 0x19, 0xc2, 0x03,
	0x7b, 0x47, 0xa9, 0xdc, 0xbc, 0x0b, 0x57, 0x67, 0x48, 0xaa, 0xb9, 0xbc, 0xa6, 0x64, 0x5d, 0x39,
	0x4b, 0x96, 0xed, 0xfd, 0x5b, 0xe0, 0x7d, 0x8e, 0x34, 0xe9, 0x56, 0x4f, 0x09, 0xbb, 0x7c, 0x8e,
	0x30, 0xe9, 0xe3, 0x3e, 0xec, 0x9c, 0xeb, 0xa3, 0x94, 0xd4, 0xd7, 0xe9, 0x33, 0xd3, 0xc5, 0x29,
	0x39, 0xf5, 0xfd, 0xd3, 0x0a, 0x95, 0x5b, 0x93, 0xe3, 0x5b, 0x7b, 0x69, 0x15, 0x29, 0xcb, 0xb7,
	0xba, 0x9c, 0x5a, 0xa0, 0xd6, 0x6b, 0xbe, 0xd9, 0x92, 0xec, 0x38, 0x59, 0xeb, 0x77, 0xb6, 0x2c,
	0xe9, 0xdc, 0x46, 0x6d, 0xfd, 0xce, 0x10, 0x25, 0xbd, 0xbb, 0x0d, 0x57, 0xce, 0xf3, 0x4e, 0xca,
	0xd9, 0xd4, 0x25, 0x3f, 0xcb, 0xb9, 0xbb, 0xec, 0xc8, 0xfb, 0x74, 0x05, 0xfa, 0xba, 0x47, 0x57,
	0x7b, 0x34, 0x11, 0x98, 0x46, 0x99, 0xbc, 0x54, 0x1c, 0x92, 0x24, 0x64, 0x45, 0xeb, 0x6c, 0xbe,
	0xe4, 0x71, 0xac, 0x7f, 0xa1, 0x14, 0x73, 0x81, 0x92, 0x3c, 0x1e, 0x96, 0xcd, 0x72, 0x4f, 0x63,
	0x1e, 0x60, 0x2e, 0xde, 0x51, 0x70, 0x79, 0xd2, 0x19, 0xea, 0x8c, 0x70, 0x8a, 0xa3, 0x82, 0xde,
	0x34, 0x08, 0x1a, 0xf7, 0x50, 0xa1, 0x0c, 0xc7, 0x39, 0xcd, 0x8b, 0xde, 0x53, 0x9f, 0xb0, 0x79,
	0x59, 0xb4, 0xce, 0xd4, 0xb3, 0x9b, 0x97, 0x42, 0xd3, 0xb1, 0x69, 0x45, 0x96, 0x4e, 0x71, 0x1c,
	0x1c, 0x97, 0xcd, 0x8b, 0xcd, 0xc1, 0x0b, 0x8e, 0xe5, 0x53, 0x1c, 0xbe, 0xe1, 0xd8, 0xad, 0x1b,
	0x25, 0x8e, 0x55, 0x95, 0xab, 0x9d, 0xaf, 0xef, 0xf7, 0x6b, 0x2a, 0x64, 0x8d, 0xbb, 0x1f, 0x41,
	0x53, 0xb6, 0x7d, 0x83, 0xd6, 0x4e, 0xe3, 0x5a, 0x7b, 0x6f, 0x3c, 0xc7, 0xb3, 0xd8, 0xee, 0xd2,
	0x7d, 0xa5, 0xd4, 0xfd, 0xbd, 0x03, 0xeb, 0x0a, 0x3c, 0xd5, 0x18, 0x80, 0x6a, 0x0c, 0xd2, 0xa7,
	0x64, 0x4c, 0xd5, 0x17, 0xf4, 0x25, 0x78, 0xbf, 0xd6, 0x1b, 0x7c, 0xe6, 0xc0, 0xc5, 0x53, 0xfd,
	0xb8, 0xd5, 0xd7, 0xa8, 0xed, 0xb9, 0xbd, 0x47, 0x9f, 0x56, 0x13, 0x93, 0xf9, 0x83, 0x7a, 0x67,
	0x7e, 0x50, 0xb5, 0x58, 0xbf, 0x70, 0xc0, 0x3d, 0x65, 0x6b, 0xa6, 0x8e, 0x82, 0xf6, 0x1e, 0x99,
	0xb3, 0x85, 0xe6, 0xde, 0xb0, 0x56, 0xb7, 0x2e, 0x93, 0x6d, 0xaf, 0xda, 0x0b, 0x32, 0xfb, 0x3e,
	0xa6, 0x8f, 0x9a, 0x9e, 0x46, 0x54, 0xf7, 0x31, 0xef, 0xaf, 0x0d, 0xe8, 0x55, 0xa2, 0xcd, 0xed,
	0xe2, 0x5b, 0x70, 0xa9, 0xea, 0xe0, 0x59, 0x96, 0x21, 0x36, 0x42, 0x19, 0x1d, 0x27, 0x38, 0x32,
	0xb7, 0x23, 0xbd, 0x5f, 0xfc, 0x5f, 0xd9, 0xca, 0xb3, 0x2c, 0xbb, 0x3f, 0x7a, 0xa8, 0x28, 0x94,
	0x11, 0xee, 0x37, 0xe1, 0x62, 0x1a, 0x64, 0x25, 0xf3, 0x30, 0x62, 0xc1, 0x23, 0xa4, 0xfe, 0x68,
	0x01, 0x7a, 0x33, 0xd9, 0x4e, 0x83, 0x4c, 0xf3, 0xde, 0x94, 0xb8, 0xbb, 0x2c, 0x78, 0xa4, 0xd9,
	0x5f, 0x80, 0x7e, 0xc4, 0xe4, 0x9e, 0x37, 0xc2, 0x79, 0x24, 0x0c, 0x8f, 0xde, 0x50, 0xd6, 0x14,
	0x62, 0x5f, 0xc2, 0x35, 0xed, 0x4b, 0xe0, 0x72, 0x12, 0x33, 0x41, 0x6a, 0xc4, 0xfa, 0xb2, 0xd1,
	0xd3, 0x18, 0x8b, 0x7a, 0x07, 0x56, 0xb3, 0x10, 0x0d, 0x8b, 0x0d, 0xd4, 0x5c, 0x32, 0x20, 0x0b,
	0x6f, 0x9a, 0xed, 0x52, 0x51, 0x8c, 0x2c, 0x8a, 0x25, 0x43, 0x31, 0x2a, 0x29, 0xde, 0x02, 0xaf,
	0x8c, 0xca, 0x49, 0x12, 0x4c, 0x38, 0x4b, 0xe8, 0x87, 0x58, 0x50, 0x96, 0xa0, 0x10, 0x0b, 0x6c,
	0xf8, 0xf4, 0x20, 0xe5, 0x72, 0xa4, 0x63, 0x53, 0xa7, 0xbb, 0x8d, 0x05, 0x2e, 0xb5, 0x4d, 0xa8,
	0xa5, 0x6d, 0x45, 0x6b, 0x9b, 0xd0, 0x52, 0xdb, 0x55, 0xe8, 0x64, 0x1f, 0xe4, 0x24, 0x0a, 0x26,
	0x86, 0xa4, 0xa5, 0x48, 0x56, 0x0d, 0x50, 0x5f, 0x16, 0x63, 0xfb, 0xae, 0x48, 0x38, 0x67, 0x1c,
	0x05, 0x2c, 0x97, 0xc9, 0x93, 0xc9, 0x00, 0x49, 0x33, 0xd1, 0x84, 0xe0, 0x90, 0x18, 0xac, 0x9e,
	0xc6, 0x34, 0xfd, 0x9e, 0xc4, 0xbc, 0xa1, 0x10, 0x77, 0x14, 0x5c, 0xaa, 0x4b, 0x83, 0x6c, 0x48,
	0xd3, 0x82, 0x70, 0x41, 0x11, 0xae, 0x6a, 0xa0, 0x26, 0xf2, 0x7e, 0xbe, 0x00, 0xae, 0x3e, 0x4f,
	0xa4, 0xe5, 0x19, 0x11, 0x82, 0x26, 0xe3, 0xcc, 0xfd, 0x3a, 0x0c, 0x4c, 0x9a, 0x84, 0x64, 0xcc,
	0x71, 0x48, 0xaa, 0x2a, 0x32, 0x03, 0x81, 0x2d, 0x8d, 0xbf, 0xad, 0xd1, 0x65, 0x25, 0xc9, 0x6d,
	0x77, 0x8a, 0xb3, 0xca, 0x93, 0xbe, 0xef, 0xd6, 0xb8, 0x74, 0x58, 0xf6, 0x60, 0xd3, 0x70, 0x8c,
	0x30, 0x8d, 0x2c, 0x45, 0x0d, 0xdd, 0x87, 0x69, 0xe4, 0x3e, 0xa6, 0x51, 0xa5, 0xe5, 0x05, 0xe8,
	0xdb, 0x3c, 0x55, 0xa6, 0xf4, 0xfd, 0xb5, 0x8a, 0x5e, 0xcb, 0xdf, 0x05, 0x23, 0x02, 0xd9, 0xd9,
	0x55, 0x5c, 0xc7, 0x34, 0xca, 0xaf, 0xb2, 0xcb, 0xfb, 0xa3, 0xa3, 0x42, 0xa2, 0x02, 0x12, 0xb3,
	0x84, 0x0a, 0xc6, 0x69, 0x32, 0x76, 0x2f, 0x42, 0x2b, 0xcb, 0xd3, 0x94, 0x71, 0x51, 0x4e, 0x01,
	0x2b, 0x80, 0xfb, 0x11, 0xac, 0x14, 0xc1, 0x53, 0xae, 0xce, 0x61, 0x8c, 0x3a, 0xb5, 0x46, 0x7e,
	0xa9, 0xd0, 0xfb, 0x83, 0x63, 0x8f, 0x75, 0xf2, 0x72, 0x78, 0x37, 0xa2, 0x91, 0x20, 0xdc, 0xfd,
	0x99, 0x03, 0x9b, 0x79, 0x42, 0x4b, 0xb0, 0x19, 0xe3, 0x11, 0x99, 0x3a, 0xf2, 0xe4, 0xfa, 0xee,
	0x17, 0x6a, 0x69, 0x6d, 0xd0, 0xe8, 0xaf, 0x1b, 0xc5, 0xf7, 0xca, 0x59, 0x21, 0xc9, 0xbc, 0x7f,
	0xd5, 0xec, 0x8d, 0xa7, 0xed, 0xbd, 0x01, 0x9b, 0x71, 0x1e, 0x09, 0x6d, 0x70, 0xca, 0x59, 0x4c,
	0xb3, 0x20, 0x67, 0x79, 0x66, 0x32, 0x6f, 0xa3, 0x44, 0x3e, 0xa8, 0x70, 0xee, 0x6f, 0x1c, 0xd8,
	0xae, 0xb8, 0xea, 0x6e, 0x2e, 0x28, 0x37, 0x87, 0x73, 0x58, 0x90, 0xa9, 0x41, 0xa9, 0x5f, 0x19,
	0x5e, 0x73, 0xf8, 0x77, 0x4e, 0xd1, 0xb5, 0x8d, 0x48, 0x50, 0x76, 0x6d, 0x66, 0x4e, 0xeb, 0x94,
	0x73, 0x5a, 0x59, 0x76, 0x01, 0xe3, 0x9c, 0x04, 0x82, 0x84, 0x28, 0x60, 0x21, 0x39, 0x62, 0x3c,
	0xd4, 0xf5, 0x6f, 0xaa, 0x77, 0xab, 0xc4, 0xdf, 0x32, 0xe8, 0x5b, 0x12, 0xeb, 0x7e, 0x03, 0x2e,
	0xe4, 0xc9, 0x4c, 0xde, 0x86, 0xe2, 0x1d, 0x58, 0x14, 0x35, 0x6e, 0xef, 0x2f, 0x0e, 0x6c, 0x99,
	0xae, 0x72, 0x54, 0xda, 0xa7, 0x27, 0xc5, 0xd7, 0x61, 0x23, 0xe5, 0x94, 0x71, 0x2a, 0x4e, 0x90,
	0x3d, 0xa0, 0xd6, 0x56, 0xaf, 0x17, 0xb8, 0x7d, 0x6b, 0x50, 0xfd, 0x2a, 0x6c, 0x97, 0x2c, 0x66,
	0x6c, 0x8e, 0x86, 0x54, 0xc4, 0x38, 0x35, 0xf3, 0xf1, 0xcd, 0x02, 0x6d, 0xc6, 0xe7, 0x37, 0x15,
	0xd2, 0x7d, 0x06, 0x5a, 0xfc, 0x18, 0x8d, 0x38, 0x8e, 0x49, 0x36, 0x68, 0xec, 0x34, 0xae, 0x35,
	0xfd, 0x15, 0x7e, 0xbc, 0xaf, 0xbe, 0x25, 0x52, 0x94, 0xc8, 0xa6, 0x46, 0x0a, 0x83, 0xf4, 0xfe,
	0xad, 0x77, 0xb1, 0xa9, 0x57, 0x16, 0xf7, 0x12, 0x80, 0x5e, 0x5d, 0xe9, 0x89, 0xb1, 0xb8, 0xa5,
	0x20, 0x07, 0xe6, 0xf1, 0x48, 0x92, 0xa6, 0x9c, 0x64, 0xc4, 0x04, 0xb8, 0xe5, 0x43, 0x3a, 0x39,
	0x79, 0xa0, 0x21, 0xee, 0xc7, 0x9a, 0xc0, 0xc4, 0x43, 0x45, 0x71, 0x0e, 0x8f, 0x33, 0xf5, 0x5e,
	0x5e, 0x19, 0x70, 0xdb, 0x64, 0xc8, 0x05, 0x58, 0x89, 0x18, 0x4b, 0x87, 0x38, 0x78, 0x64, 0xce,
	0xc1, 0xf2, 0x5b, 0x1a, 0x67, 0x25, 0x93, 0x19, 0x73, 0xce, 0xc3, 0x38, 0x4b, 0x8b, 0x0f, 0x23,
	0x12, 0x18, 0xe3, 0xbc, 0xbf, 0xeb, 0xab, 0x48, 0xfd, 0x6d, 0x49, 0xc6, 0x3c, 0xa2, 0xc9, 0x23,
	0xf3, 0x20, 0x67, 0x62, 0x2e, 0x21, 0xfa, 0x3d, 0xee, 0x19, 0x68, 0xc9, 0x74, 0xd0, 0xd8, 0x05,
	0xe3, 0x12, 0x09, 0x35, 0x32, 0x87, 0x65, 0xf3, 0xae, 0x62, 0x62, 0xfd, 0xbd, 0x39, 0xb8, 0x53,
	0x3c, 0xe8, 0xf8, 0x85, 0xae, 0xea, 0xa1, 0xa6, 0x79, 0xf6, 0x43, 0xcd, 0xe2, 0x79, 0x0f, 0x35,
	0x4b, 0xa7, 0x1f, 0x6a, 0x7a, 0xd0, 0xa0, 0xe9, 0xb8, 0x78, 0x7f, 0xa1, 0xe9, 0xd8, 0xfd, 0xc4,
	0x81, 0xae, 0x19, 0x86, 0x16, 0x9d, 0xe5, 0x8a, 0x72, 0xf0, 0xfb, 0x73, 0xea, 0x2c, 0x4d, 0x47,
	0xd9, 0x31, 0x4a, 0x4d, 0x3f, 0xf9, 0x63, 0x07, 0xd6, 0x52, 0x4e, 0x0e, 0x29, 0xcb, 0xb3, 0xc2,
	0x8e, 0xd6, 0xd3, 0xb0, 0xa3, 0x5b, 0x68, 0x35, 0x86, 0xfc, 0xc4, 0x81, 0x55, 0xab, 0xb7, 0xc9,
	0xcc, 0xad, 0x65, 0x5e, 0x7d, 0x76, 0xbd, 0x8d, 0xf2, 0xdb, 0xea, 0x5b, 0xed, 0x7c, 0x2a, 0x26,
	0xdd, 0xfa, 0x49, 0x6f, 0xae, 0x25, 0x5f, 0xfc, 0x33, 0x68, 0x5d, 0x8d, 0xdf, 0x19, 0x12, 0x7e,
	0xaf, 0xea, 0x2f, 0xf6, 0x8a, 0xc9, 0x57, 0xd1, 0x23, 0x16, 0x2f, 0x8e, 0xf6, 0x38, 0xea, 0xa1,
	0xc6, 0x15, 0xcf, 0x8e, 0x37, 0x60, 0x73, 0x88, 0x93, 0xf0, 0x88, 0x86, 0x62, 0x82, 0x72, 0x41,
	0x23, 0xd3, 0x95, 0x9a, 0x4b, 0xc2, 0x46, 0x89, 0x7c, 0xb7, 0xc2, 0xb9, 0x3f, 0x82, 0x15, 0xb9,
	0xcb, 0xab, 0xe7, 0xd6, 0xae, 0x72, 0x35, 0x98, 0xc7, 0x96, 0x36, 0x75, 0x90, 0xf8, 0xcb, 0xe9,
	0x48, 0xbf, 0xfa, 0x5e, 0x84, 0x56, 0x69, 0x97, 0x1a, 0x57, 0x35, 0xfd, 0x0a, 0xe0, 0xfd, 0xb9,
	0x69, 0x6f, 0xe5, 0xc5, 0x9b, 0xb1, 0xac, 0xa9, 0x58, 0xe4, 0xa6, 0x03, 0x90, 0x3f, 0x15, 0x84,
	0xe7, 0xe6, 0x44, 0x91, 0x3f, 0xdd, 0xeb, 0xb0, 0x39, 0xcc, 0x79, 0x42, 0x42, 0x44, 0x13, 0xbb,
	0x03, 0x28, 0x06, 0x18, 0x1a, 0xf9, 0x66, 0x52, 0x1d, 0xcd, 0xf2, 0xda, 0xb7, 0xcd, 0xd4, 0x54,
	0x82, 0x32, 0xd9, 0x21, 0xda, 0x5c, 0x4d, 0x15, 0x9b, 0x79, 0x36, 0x47, 0x9b, 0x96, 0x6a, 0xcb,
	0xa8, 0x4f, 0x1d, 0x58, 0xb7, 0xfb, 0x35, 0xdd, 0x16, 0x15, 0x5b, 0xfc, 0xbc, 0xe6, 0x0c, 0xd3,
	0x6d, 0xa3, 0xdf, 0xaf, 0x5a, 0xb7, 0x7d, 0x6d, 0x81, 0xfb, 0x5b, 0xc7, 0x6e, 0xcd, 0x6c, 0xdb,
	0x96, 0xe6, 0x6a, 0xdb, 0x74, 0x8b, 0xe8, 0xaf, 0xdb, 0x7d, 0x96, 0xb1, 0xce, 0xfb, 0x9b, 0x03,
	0xdb, 0x33, 0xde, 0xfa, 0x65, 0x67, 0x15, 0x63, 0x29, 0x3a, 0xc1, 0x49, 0x40, 0x50, 0xcc, 0x42,
	0x52, 0x7b, 0xd2, 0xef, 0xf8, 0x5b, 0x16, 0xfe, 0x1e, 0x0b, 0x49, 0x51, 0x63, 0x57, 0xa0, 0x8d,
	0x69, 0x92, 0xa9, 0x23, 0x2b, 0xcf, 0x8a, 0x2e, 0x41, 0x82, 0x1e, 0x2a, 0x88, 0xfb, 0x3c, 0x74,
	0x05, 0x13, 0xf2, 0xc2, 0x93, 0xeb, 0xc5, 0x34, 0x17, 0x97, 0x8e, 0x82, 0xde, 0x36, 0x40, 0xf7,
	0x2b, 0xea, 0x76, 0x8b, 0xa9, 0x9a, 0x1a, 0x96, 0xa4, 0xfa, 0x2d, 0xb3, 0x5f, 0x62, 0x0a, 0xf2,
	0xe1, 0x92, 0xfa, 0x77, 0x9d, 0x1b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x39, 0x01, 0x14, 0x3d,
	0xde, 0x23, 0x00, 0x00,
}
