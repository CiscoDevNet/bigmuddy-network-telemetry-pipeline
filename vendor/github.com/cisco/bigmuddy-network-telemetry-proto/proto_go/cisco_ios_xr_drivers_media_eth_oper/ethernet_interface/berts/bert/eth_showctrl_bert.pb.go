// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eth_showctrl_bert.proto

/*
Package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_berts_bert is a generated protocol buffer package.

It is generated from these files:
	eth_showctrl_bert.proto

It has these top-level messages:
	EthShowctrlBert_KEYS
	EthShowctrlBert
	EthernetBertStatus_
*/
package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_berts_bert

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Per port BERT test status information
type EthShowctrlBert_KEYS struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *EthShowctrlBert_KEYS) Reset()                    { *m = EthShowctrlBert_KEYS{} }
func (m *EthShowctrlBert_KEYS) String() string            { return proto.CompactTextString(m) }
func (*EthShowctrlBert_KEYS) ProtoMessage()               {}
func (*EthShowctrlBert_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EthShowctrlBert_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type EthShowctrlBert struct {
	// Current test status
	BertStatus *EthernetBertStatus_ `protobuf:"bytes,50,opt,name=bert_status,json=bertStatus" json:"bert_status,omitempty"`
	// Remaining time for this test in seconds
	TimeLeft uint32 `protobuf:"varint,51,opt,name=time_left,json=timeLeft" json:"time_left,omitempty"`
	// Port BERT interval
	PortBertInterval uint32 `protobuf:"varint,52,opt,name=port_bert_interval,json=portBertInterval" json:"port_bert_interval,omitempty"`
}

func (m *EthShowctrlBert) Reset()                    { *m = EthShowctrlBert{} }
func (m *EthShowctrlBert) String() string            { return proto.CompactTextString(m) }
func (*EthShowctrlBert) ProtoMessage()               {}
func (*EthShowctrlBert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EthShowctrlBert) GetBertStatus() *EthernetBertStatus_ {
	if m != nil {
		return m.BertStatus
	}
	return nil
}

func (m *EthShowctrlBert) GetTimeLeft() uint32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

func (m *EthShowctrlBert) GetPortBertInterval() uint32 {
	if m != nil {
		return m.PortBertInterval
	}
	return 0
}

type EthernetBertStatus_ struct {
	// State
	BertStateEnabled uint32 `protobuf:"varint,1,opt,name=bert_state_enabled,json=bertStateEnabled" json:"bert_state_enabled,omitempty"`
	// Flag indicating available data
	DataAvailability uint32 `protobuf:"varint,2,opt,name=data_availability,json=dataAvailability" json:"data_availability,omitempty"`
	// Receive count (if 0x1 set in flag)
	ReceiveCount uint64 `protobuf:"varint,3,opt,name=receive_count,json=receiveCount" json:"receive_count,omitempty"`
	// Transmit count (if 0x2 set in flag)
	TransmitCount uint64 `protobuf:"varint,4,opt,name=transmit_count,json=transmitCount" json:"transmit_count,omitempty"`
	// Received errors (if 0x4 set in flag)
	ReceiveErrors uint64 `protobuf:"varint,5,opt,name=receive_errors,json=receiveErrors" json:"receive_errors,omitempty"`
	// Bit, block or frame error
	ErrorType string `protobuf:"bytes,6,opt,name=error_type,json=errorType" json:"error_type,omitempty"`
	// Test pattern
	TestPattern string `protobuf:"bytes,7,opt,name=test_pattern,json=testPattern" json:"test_pattern,omitempty"`
	// Device being tested
	DeviceUnderTest string `protobuf:"bytes,8,opt,name=device_under_test,json=deviceUnderTest" json:"device_under_test,omitempty"`
	// Interface being tested
	InterfaceDevice string `protobuf:"bytes,9,opt,name=interface_device,json=interfaceDevice" json:"interface_device,omitempty"`
}

func (m *EthernetBertStatus_) Reset()                    { *m = EthernetBertStatus_{} }
func (m *EthernetBertStatus_) String() string            { return proto.CompactTextString(m) }
func (*EthernetBertStatus_) ProtoMessage()               {}
func (*EthernetBertStatus_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EthernetBertStatus_) GetBertStateEnabled() uint32 {
	if m != nil {
		return m.BertStateEnabled
	}
	return 0
}

func (m *EthernetBertStatus_) GetDataAvailability() uint32 {
	if m != nil {
		return m.DataAvailability
	}
	return 0
}

func (m *EthernetBertStatus_) GetReceiveCount() uint64 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *EthernetBertStatus_) GetTransmitCount() uint64 {
	if m != nil {
		return m.TransmitCount
	}
	return 0
}

func (m *EthernetBertStatus_) GetReceiveErrors() uint64 {
	if m != nil {
		return m.ReceiveErrors
	}
	return 0
}

func (m *EthernetBertStatus_) GetErrorType() string {
	if m != nil {
		return m.ErrorType
	}
	return ""
}

func (m *EthernetBertStatus_) GetTestPattern() string {
	if m != nil {
		return m.TestPattern
	}
	return ""
}

func (m *EthernetBertStatus_) GetDeviceUnderTest() string {
	if m != nil {
		return m.DeviceUnderTest
	}
	return ""
}

func (m *EthernetBertStatus_) GetInterfaceDevice() string {
	if m != nil {
		return m.InterfaceDevice
	}
	return ""
}

func init() {
	proto.RegisterType((*EthShowctrlBert_KEYS)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.berts.bert.eth_showctrl_bert_KEYS")
	proto.RegisterType((*EthShowctrlBert)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.berts.bert.eth_showctrl_bert")
	proto.RegisterType((*EthernetBertStatus_)(nil), "cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.berts.bert.ethernet_bert_status_")
}

func init() { proto.RegisterFile("eth_showctrl_bert.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x5d, 0x8b, 0xd4, 0x30,
	0x14, 0x86, 0xe9, 0xba, 0xae, 0x3b, 0x99, 0xad, 0xce, 0x04, 0xd4, 0x80, 0x08, 0xe3, 0x88, 0x30,
	0x7e, 0x30, 0x17, 0xbb, 0xde, 0xcb, 0xaa, 0x73, 0x21, 0x8a, 0x48, 0x77, 0x05, 0xbd, 0x3a, 0x64,
	0xda, 0x33, 0x4c, 0xa0, 0x4d, 0xca, 0xc9, 0x99, 0x6a, 0x7f, 0xaa, 0x7f, 0x46, 0x24, 0x69, 0xa7,
	0xbb, 0xb0, 0xde, 0xed, 0x4d, 0x21, 0xcf, 0xfb, 0x9c, 0x37, 0xa1, 0x89, 0x78, 0x8c, 0xbc, 0x05,
	0xbf, 0x75, 0xbf, 0x72, 0xa6, 0x12, 0xd6, 0x48, 0xbc, 0xac, 0xc9, 0xb1, 0x93, 0xe7, 0xb9, 0xf1,
	0xb9, 0x03, 0xe3, 0x3c, 0xfc, 0x26, 0x28, 0xc8, 0x34, 0x48, 0x1e, 0x2a, 0x2c, 0x8c, 0x86, 0x30,
	0xe3, 0x6a, 0xa4, 0x25, 0xf2, 0x16, 0xc9, 0x22, 0x83, 0xb1, 0x8c, 0xb4, 0xd1, 0x39, 0x2e, 0x43,
	0x85, 0x8f, 0xdf, 0xf9, 0x3b, 0xf1, 0xe8, 0x46, 0x3b, 0x7c, 0x5e, 0xfd, 0xbc, 0x90, 0x2f, 0xc4,
	0xfd, 0x61, 0x02, 0xac, 0xae, 0x50, 0x25, 0xb3, 0x64, 0x31, 0xca, 0xd2, 0x81, 0x7e, 0xd5, 0x15,
	0xce, 0xff, 0x24, 0x62, 0x7a, 0xa3, 0x41, 0xb6, 0x62, 0x1c, 0x9b, 0x3c, 0x6b, 0xde, 0x79, 0x75,
	0x3a, 0x4b, 0x16, 0xe3, 0xd3, 0x1f, 0xcb, 0x5b, 0x9f, 0xf7, 0x2a, 0xbd, 0x56, 0x0f, 0x99, 0x08,
	0xab, 0x8b, 0xb8, 0x90, 0x4f, 0xc4, 0x88, 0x4d, 0x85, 0x50, 0xe2, 0x86, 0xd5, 0xd9, 0x2c, 0x59,
	0xa4, 0xd9, 0x71, 0x00, 0x5f, 0x70, 0xc3, 0xf2, 0x8d, 0x90, 0xb5, 0xa3, 0x7e, 0x3a, 0x6e, 0xd0,
	0xe8, 0x52, 0xbd, 0x8d, 0xd6, 0x24, 0x24, 0xef, 0x91, 0xf8, 0x53, 0xcf, 0xe7, 0x7f, 0x0f, 0xc4,
	0xc3, 0xff, 0x6e, 0x18, 0x7a, 0x86, 0x35, 0x02, 0x5a, 0xbd, 0x2e, 0xb1, 0x88, 0x3f, 0x28, 0xcd,
	0x26, 0xfb, 0xc3, 0xe0, 0xaa, 0xe3, 0xf2, 0xb5, 0x98, 0x16, 0x9a, 0x35, 0xe8, 0x46, 0x9b, 0x52,
	0xaf, 0x4d, 0x69, 0xb8, 0x55, 0x07, 0x9d, 0x1c, 0x82, 0xf3, 0x6b, 0x5c, 0x3e, 0x17, 0x29, 0x61,
	0x8e, 0xa6, 0x41, 0xc8, 0xdd, 0xce, 0xb2, 0xba, 0x33, 0x4b, 0x16, 0x87, 0xd9, 0x49, 0x0f, 0x3f,
	0x04, 0x16, 0x2e, 0x87, 0x49, 0x5b, 0x5f, 0x19, 0xee, 0xad, 0xc3, 0x68, 0xa5, 0x7b, 0x3a, 0x68,
	0xfb, 0x2e, 0x24, 0x72, 0xe4, 0xd5, 0xdd, 0x4e, 0xeb, 0xe9, 0x2a, 0x42, 0xf9, 0x54, 0x88, 0x18,
	0x03, 0xb7, 0x35, 0xaa, 0xa3, 0x78, 0xcd, 0xa3, 0x48, 0x2e, 0xdb, 0x1a, 0xe5, 0x33, 0x71, 0xc2,
	0xe8, 0x19, 0x6a, 0xcd, 0x8c, 0x64, 0xd5, 0xbd, 0x28, 0x8c, 0x03, 0xfb, 0xd6, 0x21, 0xf9, 0x4a,
	0x4c, 0x0b, 0x6c, 0x4c, 0x8e, 0xb0, 0xb3, 0x05, 0x12, 0x84, 0x4c, 0x1d, 0x47, 0xef, 0x41, 0x17,
	0x7c, 0x0f, 0xfc, 0x12, 0x3d, 0xcb, 0x97, 0x62, 0x72, 0xf5, 0xb0, 0xba, 0x50, 0x8d, 0x3a, 0x75,
	0xe0, 0x1f, 0x23, 0x5e, 0x1f, 0xc5, 0x77, 0x7e, 0xf6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x0b,
	0x75, 0x22, 0x02, 0x03, 0x00, 0x00,
}
