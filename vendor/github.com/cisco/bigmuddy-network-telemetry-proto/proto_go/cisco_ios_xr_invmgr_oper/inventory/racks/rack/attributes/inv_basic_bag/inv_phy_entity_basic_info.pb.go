// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inv_phy_entity_basic_info.proto

/*
Package cisco_ios_xr_invmgr_oper_inventory_racks_rack_attributes_inv_basic_bag is a generated protocol buffer package.

It is generated from these files:
	inv_phy_entity_basic_info.proto

It has these top-level messages:
	InvPhyEntityBasicInfo_KEYS
	InvPhyEntityBasicInfo
*/
package cisco_ios_xr_invmgr_oper_inventory_racks_rack_attributes_inv_basic_bag

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Bag contains all the basic inventory information for each entity
type InvPhyEntityBasicInfo_KEYS struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *InvPhyEntityBasicInfo_KEYS) Reset()                    { *m = InvPhyEntityBasicInfo_KEYS{} }
func (m *InvPhyEntityBasicInfo_KEYS) String() string            { return proto.CompactTextString(m) }
func (*InvPhyEntityBasicInfo_KEYS) ProtoMessage()               {}
func (*InvPhyEntityBasicInfo_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InvPhyEntityBasicInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InvPhyEntityBasicInfo struct {
	// describes in user-readable terms what the entity in question does
	Description string `protobuf:"bytes,50,opt,name=description" json:"description,omitempty"`
	// maps to the vendor OID string
	VendorType string `protobuf:"bytes,51,opt,name=vendor_type,json=vendorType" json:"vendor_type,omitempty"`
	// name string for the entity
	Name string `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	// hw revision string
	HardwareRevision string `protobuf:"bytes,53,opt,name=hardware_revision,json=hardwareRevision" json:"hardware_revision,omitempty"`
	// firmware revision string
	FirmwareRevision string `protobuf:"bytes,54,opt,name=firmware_revision,json=firmwareRevision" json:"firmware_revision,omitempty"`
	// software revision string
	SoftwareRevision string `protobuf:"bytes,55,opt,name=software_revision,json=softwareRevision" json:"software_revision,omitempty"`
	// chip module hw revision string
	ChipHardwareRevision string `protobuf:"bytes,56,opt,name=chip_hardware_revision,json=chipHardwareRevision" json:"chip_hardware_revision,omitempty"`
	// serial number
	SerialNumber string `protobuf:"bytes,57,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	// manufacturer's name
	ManufacturerName string `protobuf:"bytes,58,opt,name=manufacturer_name,json=manufacturerName" json:"manufacturer_name,omitempty"`
	// model name
	ModelName string `protobuf:"bytes,59,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	// asset Identification string
	AssetIdStr string `protobuf:"bytes,60,opt,name=asset_id_str,json=assetIdStr" json:"asset_id_str,omitempty"`
	// asset Identification
	AssetIdentification int32 `protobuf:"zigzag32,61,opt,name=asset_identification,json=assetIdentification" json:"asset_identification,omitempty"`
	// 1 if Field Replaceable Unit 0, if not
	IsFieldReplaceableUnit bool `protobuf:"varint,62,opt,name=is_field_replaceable_unit,json=isFieldReplaceableUnit" json:"is_field_replaceable_unit,omitempty"`
	// Manufacture Asset Tags
	ManufacturerAssetTags int32 `protobuf:"zigzag32,63,opt,name=manufacturer_asset_tags,json=manufacturerAssetTags" json:"manufacturer_asset_tags,omitempty"`
	// Major&minor class of the entity
	CompositeClassCode int32 `protobuf:"zigzag32,64,opt,name=composite_class_code,json=compositeClassCode" json:"composite_class_code,omitempty"`
	// Size of memory associated with the entity where applicable
	MemorySize int32 `protobuf:"zigzag32,65,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	// sysdb name of sensor in the envmon EDM
	EnvironmentalMonitorPath string `protobuf:"bytes,66,opt,name=environmental_monitor_path,json=environmentalMonitorPath" json:"environmental_monitor_path,omitempty"`
	// useful for storing an entity alias
	Alias string `protobuf:"bytes,67,opt,name=alias" json:"alias,omitempty"`
	// indicates if this entity is group or not
	GroupFlag bool `protobuf:"varint,68,opt,name=group_flag,json=groupFlag" json:"group_flag,omitempty"`
	// integer value for New Deviation Number 0x88
	NewDeviationNumber int32 `protobuf:"zigzag32,69,opt,name=new_deviation_number,json=newDeviationNumber" json:"new_deviation_number,omitempty"`
	// integer value for plim type if applicable to this entity
	PhysicalLayerInterfaceModuleType int32 `protobuf:"zigzag32,70,opt,name=physical_layer_interface_module_type,json=physicalLayerInterfaceModuleType" json:"physical_layer_interface_module_type,omitempty"`
	// 1 if UnrecognizedFRU and 0 for recognizedFRU
	UnrecognizedFru bool `protobuf:"varint,71,opt,name=unrecognized_fru,json=unrecognizedFru" json:"unrecognized_fru,omitempty"`
	// integer value for Redundancy State if applicable to this entity
	Redundancystate int32 `protobuf:"zigzag32,72,opt,name=redundancystate" json:"redundancystate,omitempty"`
	// 1 if ce port found, 0 if not
	CEport bool `protobuf:"varint,73,opt,name=c_eport,json=cEport" json:"c_eport,omitempty"`
	// 1 if xr scoped, 0 if not
	XrScoped bool `protobuf:"varint,74,opt,name=xr_scoped,json=xrScoped" json:"xr_scoped,omitempty"`
	// Unique id for an entity
	UniqueId int32 `protobuf:"zigzag32,75,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
}

func (m *InvPhyEntityBasicInfo) Reset()                    { *m = InvPhyEntityBasicInfo{} }
func (m *InvPhyEntityBasicInfo) String() string            { return proto.CompactTextString(m) }
func (*InvPhyEntityBasicInfo) ProtoMessage()               {}
func (*InvPhyEntityBasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InvPhyEntityBasicInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetVendorType() string {
	if m != nil {
		return m.VendorType
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetHardwareRevision() string {
	if m != nil {
		return m.HardwareRevision
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetFirmwareRevision() string {
	if m != nil {
		return m.FirmwareRevision
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetSoftwareRevision() string {
	if m != nil {
		return m.SoftwareRevision
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetChipHardwareRevision() string {
	if m != nil {
		return m.ChipHardwareRevision
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetManufacturerName() string {
	if m != nil {
		return m.ManufacturerName
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetAssetIdStr() string {
	if m != nil {
		return m.AssetIdStr
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetAssetIdentification() int32 {
	if m != nil {
		return m.AssetIdentification
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetIsFieldReplaceableUnit() bool {
	if m != nil {
		return m.IsFieldReplaceableUnit
	}
	return false
}

func (m *InvPhyEntityBasicInfo) GetManufacturerAssetTags() int32 {
	if m != nil {
		return m.ManufacturerAssetTags
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetCompositeClassCode() int32 {
	if m != nil {
		return m.CompositeClassCode
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetMemorySize() int32 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetEnvironmentalMonitorPath() string {
	if m != nil {
		return m.EnvironmentalMonitorPath
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *InvPhyEntityBasicInfo) GetGroupFlag() bool {
	if m != nil {
		return m.GroupFlag
	}
	return false
}

func (m *InvPhyEntityBasicInfo) GetNewDeviationNumber() int32 {
	if m != nil {
		return m.NewDeviationNumber
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetPhysicalLayerInterfaceModuleType() int32 {
	if m != nil {
		return m.PhysicalLayerInterfaceModuleType
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetUnrecognizedFru() bool {
	if m != nil {
		return m.UnrecognizedFru
	}
	return false
}

func (m *InvPhyEntityBasicInfo) GetRedundancystate() int32 {
	if m != nil {
		return m.Redundancystate
	}
	return 0
}

func (m *InvPhyEntityBasicInfo) GetCEport() bool {
	if m != nil {
		return m.CEport
	}
	return false
}

func (m *InvPhyEntityBasicInfo) GetXrScoped() bool {
	if m != nil {
		return m.XrScoped
	}
	return false
}

func (m *InvPhyEntityBasicInfo) GetUniqueId() int32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func init() {
	proto.RegisterType((*InvPhyEntityBasicInfo_KEYS)(nil), "cisco_ios_xr_invmgr_oper.inventory.racks.rack.attributes.inv_basic_bag.inv_phy_entity_basic_info_KEYS")
	proto.RegisterType((*InvPhyEntityBasicInfo)(nil), "cisco_ios_xr_invmgr_oper.inventory.racks.rack.attributes.inv_basic_bag.inv_phy_entity_basic_info")
}

func init() { proto.RegisterFile("inv_phy_entity_basic_info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdf, 0x6f, 0x1c, 0x35,
	0x10, 0xc7, 0x15, 0x09, 0x4a, 0xe2, 0x16, 0xb5, 0x35, 0xa1, 0x75, 0x41, 0xd0, 0x53, 0xe1, 0x21,
	0x08, 0x29, 0x02, 0x1a, 0x0a, 0x85, 0xf2, 0xa3, 0xa4, 0x39, 0x1a, 0x4a, 0x23, 0x74, 0x29, 0x0f,
	0x3c, 0x8d, 0x7c, 0xf6, 0xec, 0xdd, 0x88, 0x5d, 0x7b, 0x19, 0x7b, 0x2f, 0xd9, 0xfc, 0xa5, 0xfc,
	0x39, 0xc8, 0xb3, 0xd9, 0xf4, 0x52, 0x94, 0x97, 0xd3, 0xf9, 0xfb, 0xfd, 0xcc, 0x0f, 0x8f, 0xed,
	0x55, 0xf7, 0x29, 0xac, 0xa0, 0x5d, 0xf6, 0x80, 0x21, 0x53, 0xee, 0x61, 0x6e, 0x13, 0x39, 0xa0,
	0x50, 0xc5, 0xdd, 0x96, 0x63, 0x8e, 0x7a, 0xea, 0x28, 0xb9, 0x08, 0x14, 0x13, 0x9c, 0x32, 0x50,
	0x58, 0x35, 0x0b, 0x86, 0xd8, 0x22, 0xef, 0x52, 0x58, 0x61, 0xc8, 0x91, 0xfb, 0x5d, 0xb6, 0xee,
	0xef, 0x24, 0xbf, 0xbb, 0x36, 0x67, 0xa6, 0x79, 0x97, 0x31, 0x15, 0xff, 0x3c, 0xdd, 0xdc, 0x2e,
	0x1e, 0xec, 0xa9, 0x8f, 0xaf, 0x2c, 0x05, 0x2f, 0x0e, 0xfe, 0x3a, 0xd6, 0x5a, 0xbd, 0x15, 0x6c,
	0x83, 0x66, 0x63, 0xb2, 0xb1, 0xb3, 0x35, 0x93, 0xff, 0x0f, 0xfe, 0xdd, 0x54, 0xf7, 0xae, 0x0c,
	0xd3, 0x13, 0x75, 0xdd, 0x63, 0x72, 0x4c, 0x6d, 0xa6, 0x18, 0xcc, 0x57, 0x12, 0xb8, 0x2e, 0xe9,
	0xfb, 0xea, 0xfa, 0x0a, 0x83, 0x8f, 0x0c, 0xb9, 0x6f, 0xd1, 0x3c, 0x14, 0x42, 0x0d, 0xd2, 0xab,
	0xbe, 0xc5, 0x8b, 0xa2, 0x7b, 0xaf, 0x8b, 0xea, 0xcf, 0xd5, 0xed, 0xa5, 0x65, 0x7f, 0x62, 0x19,
	0x81, 0x71, 0x45, 0xa9, 0x24, 0xff, 0x5a, 0x80, 0x5b, 0xa3, 0x31, 0x3b, 0xd7, 0x0b, 0x5c, 0x11,
	0x37, 0x97, 0xe1, 0x47, 0x03, 0x3c, 0x1a, 0xeb, 0x70, 0x8a, 0x55, 0xbe, 0x0c, 0x7f, 0x33, 0xc0,
	0xa3, 0x71, 0x01, 0xef, 0xa9, 0x3b, 0x6e, 0x49, 0x2d, 0xfc, 0xbf, 0x97, 0x6f, 0x25, 0x62, 0xbb,
	0xb8, 0xcf, 0xdf, 0xec, 0xe7, 0x13, 0xf5, 0x6e, 0x42, 0x26, 0x5b, 0x43, 0xe8, 0x9a, 0x39, 0xb2,
	0x79, 0x2c, 0xf0, 0x8d, 0x41, 0x3c, 0x12, 0xad, 0xf4, 0xd1, 0xd8, 0xd0, 0x55, 0xd6, 0xe5, 0x8e,
	0x91, 0x41, 0x46, 0xf0, 0xdd, 0xd0, 0xc7, 0xba, 0x71, 0x54, 0xc6, 0xf1, 0x91, 0x52, 0x4d, 0xf4,
	0x58, 0x0f, 0xd4, 0xf7, 0x42, 0x6d, 0x89, 0x22, 0xf6, 0x44, 0xdd, 0xb0, 0x29, 0x61, 0x06, 0xf2,
	0x90, 0x32, 0x9b, 0x27, 0xc3, 0x8c, 0x45, 0x3b, 0xf4, 0xc7, 0x99, 0xf5, 0x97, 0x6a, 0x7b, 0x24,
	0xca, 0x19, 0x56, 0xe4, 0xac, 0x9c, 0xd7, 0x0f, 0x93, 0x8d, 0x9d, 0xdb, 0xb3, 0xf7, 0xce, 0xc9,
	0x75, 0x4b, 0x3f, 0x56, 0xf7, 0x28, 0x41, 0x45, 0x58, 0x7b, 0x60, 0x6c, 0x6b, 0xeb, 0xd0, 0xce,
	0x6b, 0x84, 0x2e, 0x50, 0x36, 0x3f, 0x4e, 0x36, 0x76, 0x36, 0x67, 0x77, 0x28, 0x4d, 0x8b, 0x3f,
	0x7b, 0x6d, 0xff, 0x19, 0x28, 0xeb, 0x47, 0xea, 0xee, 0xa5, 0xbd, 0x0d, 0xa5, 0xb3, 0x5d, 0x24,
	0xf3, 0x93, 0x14, 0x7c, 0x7f, 0xdd, 0x7e, 0x5a, 0xdc, 0x57, 0x76, 0x91, 0xf4, 0x17, 0x6a, 0xdb,
	0xc5, 0xa6, 0x8d, 0x89, 0x32, 0x82, 0xab, 0x6d, 0x4a, 0xe0, 0xa2, 0x47, 0xf3, 0xb3, 0x04, 0xe9,
	0x0b, 0x6f, 0xbf, 0x58, 0xfb, 0xd1, 0x63, 0xb9, 0x5c, 0x0d, 0x36, 0x91, 0x7b, 0x48, 0x74, 0x86,
	0xe6, 0xa9, 0x80, 0x6a, 0x90, 0x8e, 0xe9, 0x0c, 0xf5, 0x13, 0xf5, 0x01, 0x86, 0x15, 0x71, 0x0c,
	0x0d, 0x86, 0x6c, 0x6b, 0x68, 0x62, 0xa0, 0x1c, 0x19, 0x5a, 0x9b, 0x97, 0xe6, 0x17, 0x19, 0x94,
	0xb9, 0x44, 0xbc, 0x1c, 0x80, 0x3f, 0x6c, 0x5e, 0xea, 0x6d, 0xf5, 0xb6, 0xad, 0xc9, 0x26, 0xb3,
	0x2f, 0xe0, 0xb0, 0x28, 0xa7, 0xb1, 0xe0, 0xd8, 0xb5, 0x50, 0xd5, 0x76, 0x61, 0x9e, 0xc9, 0x28,
	0xb6, 0x44, 0x99, 0xd6, 0x76, 0x51, 0x76, 0x11, 0xf0, 0x04, 0x3c, 0xae, 0x48, 0x26, 0x39, 0xde,
	0x82, 0x83, 0x61, 0x17, 0x01, 0x4f, 0x9e, 0x8d, 0xd6, 0xf9, 0x5d, 0x38, 0x52, 0x9f, 0xb6, 0xcb,
	0x3e, 0x91, 0xb3, 0x35, 0xd4, 0xb6, 0xc7, 0xf2, 0xc8, 0x33, 0x72, 0x65, 0x1d, 0x42, 0x13, 0x7d,
	0x57, 0xe3, 0xf0, 0x76, 0xa6, 0x92, 0x61, 0x32, 0xb2, 0xbf, 0x17, 0xf4, 0x70, 0x24, 0x5f, 0x0a,
	0x28, 0x2f, 0xea, 0x33, 0x75, 0xab, 0x0b, 0x8c, 0x2e, 0x2e, 0x02, 0x9d, 0xa1, 0x87, 0x8a, 0x3b,
	0xf3, 0xab, 0xb4, 0x79, 0x73, 0x5d, 0x9f, 0x72, 0xa7, 0x77, 0xd4, 0x4d, 0x46, 0xdf, 0x05, 0x6f,
	0x83, 0xeb, 0x53, 0xb6, 0x19, 0xcd, 0x73, 0xa9, 0xf2, 0xa6, 0xac, 0xef, 0xaa, 0x77, 0x1c, 0x60,
	0x1b, 0x39, 0x9b, 0x43, 0xc9, 0x75, 0xcd, 0x1d, 0x94, 0x95, 0xfe, 0x50, 0x6d, 0x9d, 0x32, 0x24,
	0x17, 0x5b, 0xf4, 0xe6, 0x37, 0xb1, 0x36, 0x4f, 0xf9, 0x58, 0xd6, 0xc5, 0xec, 0x02, 0xfd, 0xd3,
	0x21, 0x90, 0x37, 0x2f, 0x24, 0xf3, 0xe6, 0x20, 0x1c, 0xfa, 0xf9, 0x35, 0xf9, 0xbe, 0x3d, 0xfc,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x10, 0x48, 0x16, 0x02, 0x05, 0x00, 0x00,
}
