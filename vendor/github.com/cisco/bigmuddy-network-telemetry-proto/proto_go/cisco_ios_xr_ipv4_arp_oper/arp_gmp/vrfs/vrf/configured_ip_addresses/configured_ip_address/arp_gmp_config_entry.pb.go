// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arp_gmp_config_entry.proto

/*
Package cisco_ios_xr_ipv4_arp_oper_arp_gmp_vrfs_vrf_configured_ip_addresses_configured_ip_address is a generated protocol buffer package.

It is generated from these files:
	arp_gmp_config_entry.proto

It has these top-level messages:
	ArpGmpConfigEntry_KEYS
	ArpGmpConfigEntry
*/
package cisco_ios_xr_ipv4_arp_oper_arp_gmp_vrfs_vrf_configured_ip_addresses_configured_ip_address

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ARP GMP configuration entry
type ArpGmpConfigEntry_KEYS struct {
	VrfName string `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *ArpGmpConfigEntry_KEYS) Reset()                    { *m = ArpGmpConfigEntry_KEYS{} }
func (m *ArpGmpConfigEntry_KEYS) String() string            { return proto.CompactTextString(m) }
func (*ArpGmpConfigEntry_KEYS) ProtoMessage()               {}
func (*ArpGmpConfigEntry_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArpGmpConfigEntry_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *ArpGmpConfigEntry_KEYS) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ArpGmpConfigEntry struct {
	// IP address
	IpAddress string `protobuf:"bytes,50,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// Hardware address
	HardwareAddress string `protobuf:"bytes,51,opt,name=hardware_address,json=hardwareAddress" json:"hardware_address,omitempty"`
	// Encap type
	EncapsulationType string `protobuf:"bytes,52,opt,name=encapsulation_type,json=encapsulationType" json:"encapsulation_type,omitempty"`
	// Entry type static/alias
	EntryType string `protobuf:"bytes,53,opt,name=entry_type,json=entryType" json:"entry_type,omitempty"`
}

func (m *ArpGmpConfigEntry) Reset()                    { *m = ArpGmpConfigEntry{} }
func (m *ArpGmpConfigEntry) String() string            { return proto.CompactTextString(m) }
func (*ArpGmpConfigEntry) ProtoMessage()               {}
func (*ArpGmpConfigEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArpGmpConfigEntry) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ArpGmpConfigEntry) GetHardwareAddress() string {
	if m != nil {
		return m.HardwareAddress
	}
	return ""
}

func (m *ArpGmpConfigEntry) GetEncapsulationType() string {
	if m != nil {
		return m.EncapsulationType
	}
	return ""
}

func (m *ArpGmpConfigEntry) GetEntryType() string {
	if m != nil {
		return m.EntryType
	}
	return ""
}

func init() {
	proto.RegisterType((*ArpGmpConfigEntry_KEYS)(nil), "cisco_ios_xr_ipv4_arp_oper.arp_gmp.vrfs.vrf.configured_ip_addresses.configured_ip_address.arp_gmp_config_entry_KEYS")
	proto.RegisterType((*ArpGmpConfigEntry)(nil), "cisco_ios_xr_ipv4_arp_oper.arp_gmp.vrfs.vrf.configured_ip_addresses.configured_ip_address.arp_gmp_config_entry")
}

func init() { proto.RegisterFile("arp_gmp_config_entry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0x04, 0x31,
	0x10, 0x85, 0x59, 0x0b, 0xcf, 0x9b, 0x46, 0x0d, 0x16, 0x39, 0x41, 0x10, 0x2b, 0x2d, 0xdc, 0xc2,
	0x3b, 0x7f, 0x80, 0x85, 0x95, 0x20, 0xa2, 0x36, 0x57, 0x0d, 0x71, 0x77, 0xf6, 0x0c, 0xb8, 0xc9,
	0x30, 0xd9, 0x5b, 0xdd, 0x3f, 0xe5, 0x6f, 0x94, 0x24, 0xb7, 0x8a, 0xb0, 0x4d, 0x8a, 0xf7, 0xbe,
	0xf7, 0x1e, 0x19, 0x38, 0x35, 0xc2, 0xb8, 0x69, 0x19, 0x2b, 0xef, 0x1a, 0xbb, 0x41, 0x72, 0x9d,
	0x0c, 0x25, 0x8b, 0xef, 0xbc, 0x5a, 0x57, 0x36, 0x54, 0x1e, 0xad, 0x0f, 0xf8, 0x25, 0x68, 0xb9,
	0x5f, 0x61, 0xa4, 0x3d, 0x93, 0x94, 0xbb, 0x58, 0xd9, 0x4b, 0x13, 0xe2, 0x53, 0xe6, 0xfc, 0x56,
	0xa8, 0x46, 0xcb, 0x68, 0xea, 0x5a, 0x28, 0x04, 0x0a, 0xd3, 0xfa, 0xc5, 0x13, 0x2c, 0xa6, 0x86,
	0xf1, 0xe1, 0x7e, 0xfd, 0xa2, 0x16, 0x70, 0xd0, 0x4b, 0x83, 0xce, 0xb4, 0xa4, 0x8b, 0xf3, 0xe2,
	0x72, 0xfe, 0x3c, 0xeb, 0xa5, 0x79, 0x34, 0x2d, 0x29, 0x0d, 0xb3, 0x5d, 0x85, 0xde, 0xcb, 0xce,
	0xd8, 0xf8, 0x5d, 0xc0, 0xc9, 0x54, 0xa5, 0x3a, 0x03, 0xf8, 0x1b, 0xd6, 0x37, 0x29, 0x35, 0xb7,
	0x7c, 0x97, 0x05, 0x75, 0x05, 0x47, 0xef, 0x46, 0xea, 0x4f, 0x23, 0xf4, 0x0b, 0x2d, 0x13, 0x74,
	0x38, 0xea, 0x23, 0x7a, 0x0d, 0x8a, 0x5c, 0x65, 0x38, 0x6c, 0x3f, 0x4c, 0x67, 0xbd, 0xc3, 0x6e,
	0x60, 0xd2, 0xab, 0x04, 0x1f, 0xff, 0x73, 0x5e, 0x07, 0xa6, 0x38, 0x9c, 0x3f, 0x95, 0xb0, 0xdb,
	0x3c, 0x9c, 0x94, 0x68, 0xbf, 0xed, 0xa7, 0x23, 0x2f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x86, 0xd1, 0x9d, 0x82, 0x01, 0x00, 0x00,
}
