// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fib_sh_tbl_fib.proto

/*
Package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_details_ip_prefix_detail is a generated protocol buffer package.

It is generated from these files:
	fib_sh_tbl_fib.proto

It has these top-level messages:
	FibShTblFib_KEYS
	FibShTblFib
	FibAddrStr
	FibShTblMplsLabelStack
	FibShTblPathMplsInfo
	FibShIpencapHdrDet
	FibShIpencapDet
	FibShTblPathDet
	FibShTblPath
	FibShTblPathItem
	FibShTblLoadinfoInt
	FibShTblLoadinfoDet
	FibShTblFibDet
*/
package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_details_ip_prefix_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Basic FIB table information
type FibShTblFib_KEYS struct {
	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	VrfName      string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	Prefix       string `protobuf:"bytes,4,opt,name=prefix" json:"prefix,omitempty"`
	PrefixLength uint32 `protobuf:"varint,5,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *FibShTblFib_KEYS) Reset()                    { *m = FibShTblFib_KEYS{} }
func (m *FibShTblFib_KEYS) String() string            { return proto.CompactTextString(m) }
func (*FibShTblFib_KEYS) ProtoMessage()               {}
func (*FibShTblFib_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FibShTblFib_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *FibShTblFib_KEYS) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *FibShTblFib_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *FibShTblFib_KEYS) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *FibShTblFib_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type FibShTblFib struct {
	// Proto type for this entry
	ProtocolTypeFibEntry uint32 `protobuf:"varint,50,opt,name=protocol_type_fib_entry,json=protocolTypeFibEntry" json:"protocol_type_fib_entry,omitempty"`
	// Detailed FIB entry information
	DetailFibEntryInformation *FibShTblFibDet `protobuf:"bytes,51,opt,name=detail_fib_entry_information,json=detailFibEntryInformation" json:"detail_fib_entry_information,omitempty"`
	// FIB entry path details
	FibEntryPath *FibShTblPath `protobuf:"bytes,52,opt,name=fib_entry_path,json=fibEntryPath" json:"fib_entry_path,omitempty"`
	// Platform Hardware info
	PlatformHardware []byte `protobuf:"bytes,53,opt,name=platform_hardware,json=platformHardware,proto3" json:"platform_hardware,omitempty"`
	// Number of references to the pathlist
	NumberOfReferancesToPathList uint32 `protobuf:"varint,54,opt,name=number_of_referances_to_path_list,json=numberOfReferancesToPathList" json:"number_of_referances_to_path_list,omitempty"`
	// The pathlist flags
	PathListFlags uint32 `protobuf:"varint,55,opt,name=path_list_flags,json=pathListFlags" json:"path_list_flags,omitempty"`
	// The pathlist source
	PathListSource uint32 `protobuf:"varint,56,opt,name=path_list_source,json=pathListSource" json:"path_list_source,omitempty"`
	// Number of references to the LDI
	NumberOfReferancesToLdi uint32 `protobuf:"varint,57,opt,name=number_of_referances_to_ldi,json=numberOfReferancesToLdi" json:"number_of_referances_to_ldi,omitempty"`
	// The LDI flags
	LdiFlags uint32 `protobuf:"varint,58,opt,name=ldi_flags,json=ldiFlags" json:"ldi_flags,omitempty"`
	// The flags of ext assocaited with LDI
	FlagsExternalLdi uint32 `protobuf:"varint,59,opt,name=flags_external_ldi,json=flagsExternalLdi" json:"flags_external_ldi,omitempty"`
	// exact-route result
	ExactRouteResult bool `protobuf:"varint,60,opt,name=exact_route_result,json=exactRouteResult" json:"exact_route_result,omitempty"`
	// Prefix is static or connected
	PrefixIsStaticOrConnected bool `protobuf:"varint,61,opt,name=prefix_is_static_or_connected,json=prefixIsStaticOrConnected" json:"prefix_is_static_or_connected,omitempty"`
	// Packet should always be received
	PacketShouldRecieve bool `protobuf:"varint,62,opt,name=packet_should_recieve,json=packetShouldRecieve" json:"packet_should_recieve,omitempty"`
	// Prefix is connected
	PrefixConnected bool `protobuf:"varint,63,opt,name=prefix_connected,json=prefixConnected" json:"prefix_connected,omitempty"`
	// Prefix is for an adjacency
	PrefixForAdjancency bool `protobuf:"varint,64,opt,name=prefix_for_adjancency,json=prefixForAdjancency" json:"prefix_for_adjancency,omitempty"`
	// Prefix is for a PIC nexthop
	PrefixForPicNextHop bool `protobuf:"varint,65,opt,name=prefix_for_pic_next_hop,json=prefixForPicNextHop" json:"prefix_for_pic_next_hop,omitempty"`
	// Purgable after the purge interval
	PurgableAfterPurgeInterval bool `protobuf:"varint,66,opt,name=purgable_after_purge_interval,json=purgableAfterPurgeInterval" json:"purgable_after_purge_interval,omitempty"`
	// Broadcast receive flag
	BroadcastReciveFlag bool `protobuf:"varint,67,opt,name=broadcast_recive_flag,json=broadcastReciveFlag" json:"broadcast_recive_flag,omitempty"`
	// Broadcast forward flag
	BroadcastForwardFlag bool `protobuf:"varint,68,opt,name=broadcast_forward_flag,json=broadcastForwardFlag" json:"broadcast_forward_flag,omitempty"`
	// 0/0 route added as default route
	ZeroByZeroRouteAsDefault bool `protobuf:"varint,69,opt,name=zero_by_zero_route_as_default,json=zeroByZeroRouteAsDefault" json:"zero_by_zero_route_as_default,omitempty"`
	// External switch function triggered
	ExternalSwitchTriggered bool `protobuf:"varint,70,opt,name=external_switch_triggered,json=externalSwitchTriggered" json:"external_switch_triggered,omitempty"`
	// Route attributes summary flag
	RouteAttributeFlag bool `protobuf:"varint,71,opt,name=route_attribute_flag,json=routeAttributeFlag" json:"route_attribute_flag,omitempty"`
	// Dummy real zero route
	DummyRealZeroRoute bool `protobuf:"varint,72,opt,name=dummy_real_zero_route,json=dummyRealZeroRoute" json:"dummy_real_zero_route,omitempty"`
	// The LDI LW flags
	LdiLwFlag uint32 `protobuf:"varint,73,opt,name=ldi_lw_flag,json=ldiLwFlag" json:"ldi_lw_flag,omitempty"`
	// The refcounter of LDI LW LDI
	RefCounterOfLdiLwLdi uint32 `protobuf:"varint,74,opt,name=ref_counter_of_ldi_lw_ldi,json=refCounterOfLdiLwLdi" json:"ref_counter_of_ldi_lw_ldi,omitempty"`
	// The type of LDI LW LDI
	TypeOfLdiLwLdi uint32 `protobuf:"varint,75,opt,name=type_of_ldi_lw_ldi,json=typeOfLdiLwLdi" json:"type_of_ldi_lw_ldi,omitempty"`
	// The LSPA flags
	LspaFlags uint32 `protobuf:"varint,76,opt,name=lspa_flags,json=lspaFlags" json:"lspa_flags,omitempty"`
	// The version of the route
	VersionOfRoute uint64 `protobuf:"varint,77,opt,name=version_of_route,json=versionOfRoute" json:"version_of_route,omitempty"`
	// Priority at which the route was downloaded
	FibRouteDownloadPriority uint32 `protobuf:"varint,78,opt,name=fib_route_download_priority,json=fibRouteDownloadPriority" json:"fib_route_download_priority,omitempty"`
	// The time of last update in msec
	TimeOfLastUpdateInMsec uint64 `protobuf:"varint,79,opt,name=time_of_last_update_in_msec,json=timeOfLastUpdateInMsec" json:"time_of_last_update_in_msec,omitempty"`
	// Is L2 Subscriber route
	L2SubscriberRoute bool `protobuf:"varint,80,opt,name=l2_subscriber_route,json=l2SubscriberRoute" json:"l2_subscriber_route,omitempty"`
	// XConnect-id associated with L2 subscriber
	L2SubscriberXConnectId uint32 `protobuf:"varint,81,opt,name=l2_subscriber_x_connect_id,json=l2SubscriberXConnectId" json:"l2_subscriber_x_connect_id,omitempty"`
	// IP protocol associated with L2 subscriber
	L2SubscriberIpProtocol uint32 `protobuf:"varint,82,opt,name=l2_subscriber_ip_protocol,json=l2SubscriberIpProtocol" json:"l2_subscriber_ip_protocol,omitempty"`
	// L2TPv3 cookie length for L2 subscriber
	L2Tpv3CookieLengthBits uint32 `protobuf:"varint,83,opt,name=l2_tpv3_cookie_length_bits,json=l2Tpv3CookieLengthBits" json:"l2_tpv3_cookie_length_bits,omitempty"`
	// Route destined for Line Card that support External Reach only
	RouteForExternalReachLinecardFlag bool `protobuf:"varint,84,opt,name=route_for_external_reach_linecard_flag,json=routeForExternalReachLinecardFlag" json:"route_for_external_reach_linecard_flag,omitempty"`
}

func (m *FibShTblFib) Reset()                    { *m = FibShTblFib{} }
func (m *FibShTblFib) String() string            { return proto.CompactTextString(m) }
func (*FibShTblFib) ProtoMessage()               {}
func (*FibShTblFib) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FibShTblFib) GetProtocolTypeFibEntry() uint32 {
	if m != nil {
		return m.ProtocolTypeFibEntry
	}
	return 0
}

func (m *FibShTblFib) GetDetailFibEntryInformation() *FibShTblFibDet {
	if m != nil {
		return m.DetailFibEntryInformation
	}
	return nil
}

func (m *FibShTblFib) GetFibEntryPath() *FibShTblPath {
	if m != nil {
		return m.FibEntryPath
	}
	return nil
}

func (m *FibShTblFib) GetPlatformHardware() []byte {
	if m != nil {
		return m.PlatformHardware
	}
	return nil
}

func (m *FibShTblFib) GetNumberOfReferancesToPathList() uint32 {
	if m != nil {
		return m.NumberOfReferancesToPathList
	}
	return 0
}

func (m *FibShTblFib) GetPathListFlags() uint32 {
	if m != nil {
		return m.PathListFlags
	}
	return 0
}

func (m *FibShTblFib) GetPathListSource() uint32 {
	if m != nil {
		return m.PathListSource
	}
	return 0
}

func (m *FibShTblFib) GetNumberOfReferancesToLdi() uint32 {
	if m != nil {
		return m.NumberOfReferancesToLdi
	}
	return 0
}

func (m *FibShTblFib) GetLdiFlags() uint32 {
	if m != nil {
		return m.LdiFlags
	}
	return 0
}

func (m *FibShTblFib) GetFlagsExternalLdi() uint32 {
	if m != nil {
		return m.FlagsExternalLdi
	}
	return 0
}

func (m *FibShTblFib) GetExactRouteResult() bool {
	if m != nil {
		return m.ExactRouteResult
	}
	return false
}

func (m *FibShTblFib) GetPrefixIsStaticOrConnected() bool {
	if m != nil {
		return m.PrefixIsStaticOrConnected
	}
	return false
}

func (m *FibShTblFib) GetPacketShouldRecieve() bool {
	if m != nil {
		return m.PacketShouldRecieve
	}
	return false
}

func (m *FibShTblFib) GetPrefixConnected() bool {
	if m != nil {
		return m.PrefixConnected
	}
	return false
}

func (m *FibShTblFib) GetPrefixForAdjancency() bool {
	if m != nil {
		return m.PrefixForAdjancency
	}
	return false
}

func (m *FibShTblFib) GetPrefixForPicNextHop() bool {
	if m != nil {
		return m.PrefixForPicNextHop
	}
	return false
}

func (m *FibShTblFib) GetPurgableAfterPurgeInterval() bool {
	if m != nil {
		return m.PurgableAfterPurgeInterval
	}
	return false
}

func (m *FibShTblFib) GetBroadcastReciveFlag() bool {
	if m != nil {
		return m.BroadcastReciveFlag
	}
	return false
}

func (m *FibShTblFib) GetBroadcastForwardFlag() bool {
	if m != nil {
		return m.BroadcastForwardFlag
	}
	return false
}

func (m *FibShTblFib) GetZeroByZeroRouteAsDefault() bool {
	if m != nil {
		return m.ZeroByZeroRouteAsDefault
	}
	return false
}

func (m *FibShTblFib) GetExternalSwitchTriggered() bool {
	if m != nil {
		return m.ExternalSwitchTriggered
	}
	return false
}

func (m *FibShTblFib) GetRouteAttributeFlag() bool {
	if m != nil {
		return m.RouteAttributeFlag
	}
	return false
}

func (m *FibShTblFib) GetDummyRealZeroRoute() bool {
	if m != nil {
		return m.DummyRealZeroRoute
	}
	return false
}

func (m *FibShTblFib) GetLdiLwFlag() uint32 {
	if m != nil {
		return m.LdiLwFlag
	}
	return 0
}

func (m *FibShTblFib) GetRefCounterOfLdiLwLdi() uint32 {
	if m != nil {
		return m.RefCounterOfLdiLwLdi
	}
	return 0
}

func (m *FibShTblFib) GetTypeOfLdiLwLdi() uint32 {
	if m != nil {
		return m.TypeOfLdiLwLdi
	}
	return 0
}

func (m *FibShTblFib) GetLspaFlags() uint32 {
	if m != nil {
		return m.LspaFlags
	}
	return 0
}

func (m *FibShTblFib) GetVersionOfRoute() uint64 {
	if m != nil {
		return m.VersionOfRoute
	}
	return 0
}

func (m *FibShTblFib) GetFibRouteDownloadPriority() uint32 {
	if m != nil {
		return m.FibRouteDownloadPriority
	}
	return 0
}

func (m *FibShTblFib) GetTimeOfLastUpdateInMsec() uint64 {
	if m != nil {
		return m.TimeOfLastUpdateInMsec
	}
	return 0
}

func (m *FibShTblFib) GetL2SubscriberRoute() bool {
	if m != nil {
		return m.L2SubscriberRoute
	}
	return false
}

func (m *FibShTblFib) GetL2SubscriberXConnectId() uint32 {
	if m != nil {
		return m.L2SubscriberXConnectId
	}
	return 0
}

func (m *FibShTblFib) GetL2SubscriberIpProtocol() uint32 {
	if m != nil {
		return m.L2SubscriberIpProtocol
	}
	return 0
}

func (m *FibShTblFib) GetL2Tpv3CookieLengthBits() uint32 {
	if m != nil {
		return m.L2Tpv3CookieLengthBits
	}
	return 0
}

func (m *FibShTblFib) GetRouteForExternalReachLinecardFlag() bool {
	if m != nil {
		return m.RouteForExternalReachLinecardFlag
	}
	return false
}

// FIB address
type FibAddrStr struct {
	// address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *FibAddrStr) Reset()                    { *m = FibAddrStr{} }
func (m *FibAddrStr) String() string            { return proto.CompactTextString(m) }
func (*FibAddrStr) ProtoMessage()               {}
func (*FibAddrStr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FibAddrStr) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// mpls label stack information for FIB table entries
type FibShTblMplsLabelStack struct {
	NumberOfLabels uint32   `protobuf:"varint,1,opt,name=number_of_labels,json=numberOfLabels" json:"number_of_labels,omitempty"`
	LStack         []uint32 `protobuf:"varint,2,rep,packed,name=l_stack,json=lStack" json:"l_stack,omitempty"`
	OutInterface   string   `protobuf:"bytes,3,opt,name=out_interface,json=outInterface" json:"out_interface,omitempty"`
	NhAddress      string   `protobuf:"bytes,4,opt,name=nh_address,json=nhAddress" json:"nh_address,omitempty"`
}

func (m *FibShTblMplsLabelStack) Reset()                    { *m = FibShTblMplsLabelStack{} }
func (m *FibShTblMplsLabelStack) String() string            { return proto.CompactTextString(m) }
func (*FibShTblMplsLabelStack) ProtoMessage()               {}
func (*FibShTblMplsLabelStack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FibShTblMplsLabelStack) GetNumberOfLabels() uint32 {
	if m != nil {
		return m.NumberOfLabels
	}
	return 0
}

func (m *FibShTblMplsLabelStack) GetLStack() []uint32 {
	if m != nil {
		return m.LStack
	}
	return nil
}

func (m *FibShTblMplsLabelStack) GetOutInterface() string {
	if m != nil {
		return m.OutInterface
	}
	return ""
}

func (m *FibShTblMplsLabelStack) GetNhAddress() string {
	if m != nil {
		return m.NhAddress
	}
	return ""
}

// mpls path information for FIB table entries
type FibShTblPathMplsInfo struct {
	LocalLable             uint32 `protobuf:"varint,1,opt,name=local_lable,json=localLable" json:"local_lable,omitempty"`
	RecursiveFwdChain      bool   `protobuf:"varint,2,opt,name=recursive_fwd_chain,json=recursiveFwdChain" json:"recursive_fwd_chain,omitempty"`
	RecursiveOutLabelValid bool   `protobuf:"varint,3,opt,name=recursive_out_label_valid,json=recursiveOutLabelValid" json:"recursive_out_label_valid,omitempty"`
	RecursiveOutLable      uint32 `protobuf:"varint,4,opt,name=recursive_out_lable,json=recursiveOutLable" json:"recursive_out_lable,omitempty"`
	NumberOfIgpPaths       uint32 `protobuf:"varint,5,opt,name=number_of_igp_paths,json=numberOfIgpPaths" json:"number_of_igp_paths,omitempty"`
	// RemoteBackupPath
	RemoteBackup       bool                      `protobuf:"varint,6,opt,name=remote_backup,json=remoteBackup" json:"remote_backup,omitempty"`
	IgpLabelStackArray []*FibShTblMplsLabelStack `protobuf:"bytes,7,rep,name=igp_label_stack_array,json=igpLabelStackArray" json:"igp_label_stack_array,omitempty"`
}

func (m *FibShTblPathMplsInfo) Reset()                    { *m = FibShTblPathMplsInfo{} }
func (m *FibShTblPathMplsInfo) String() string            { return proto.CompactTextString(m) }
func (*FibShTblPathMplsInfo) ProtoMessage()               {}
func (*FibShTblPathMplsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FibShTblPathMplsInfo) GetLocalLable() uint32 {
	if m != nil {
		return m.LocalLable
	}
	return 0
}

func (m *FibShTblPathMplsInfo) GetRecursiveFwdChain() bool {
	if m != nil {
		return m.RecursiveFwdChain
	}
	return false
}

func (m *FibShTblPathMplsInfo) GetRecursiveOutLabelValid() bool {
	if m != nil {
		return m.RecursiveOutLabelValid
	}
	return false
}

func (m *FibShTblPathMplsInfo) GetRecursiveOutLable() uint32 {
	if m != nil {
		return m.RecursiveOutLable
	}
	return 0
}

func (m *FibShTblPathMplsInfo) GetNumberOfIgpPaths() uint32 {
	if m != nil {
		return m.NumberOfIgpPaths
	}
	return 0
}

func (m *FibShTblPathMplsInfo) GetRemoteBackup() bool {
	if m != nil {
		return m.RemoteBackup
	}
	return false
}

func (m *FibShTblPathMplsInfo) GetIgpLabelStackArray() []*FibShTblMplsLabelStack {
	if m != nil {
		return m.IgpLabelStackArray
	}
	return nil
}

// Detailed IP Encap Header Description
type FibShIpencapHdrDet struct {
	// Header Type
	IpEncapHdrType string `protobuf:"bytes,1,opt,name=ip_encap_hdr_type,json=ipEncapHdrType" json:"ip_encap_hdr_type,omitempty"`
	// Static Header
	IpEncapHdrp []byte `protobuf:"bytes,2,opt,name=ip_encap_hdrp,json=ipEncapHdrp,proto3" json:"ip_encap_hdrp,omitempty"`
	// Dynamic Header Fields
	IpEncapHdrDyn uint32 `protobuf:"varint,3,opt,name=ip_encap_hdr_dyn,json=ipEncapHdrDyn" json:"ip_encap_hdr_dyn,omitempty"`
}

func (m *FibShIpencapHdrDet) Reset()                    { *m = FibShIpencapHdrDet{} }
func (m *FibShIpencapHdrDet) String() string            { return proto.CompactTextString(m) }
func (*FibShIpencapHdrDet) ProtoMessage()               {}
func (*FibShIpencapHdrDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FibShIpencapHdrDet) GetIpEncapHdrType() string {
	if m != nil {
		return m.IpEncapHdrType
	}
	return ""
}

func (m *FibShIpencapHdrDet) GetIpEncapHdrp() []byte {
	if m != nil {
		return m.IpEncapHdrp
	}
	return nil
}

func (m *FibShIpencapHdrDet) GetIpEncapHdrDyn() uint32 {
	if m != nil {
		return m.IpEncapHdrDyn
	}
	return 0
}

// Detailed IP Encap Description
type FibShIpencapDet struct {
	// Header Count
	IpEncapHdrCount uint32 `protobuf:"varint,1,opt,name=ip_encap_hdr_count,json=ipEncapHdrCount" json:"ip_encap_hdr_count,omitempty"`
	// IPEncap Object Locks
	IpEncapLocks uint32 `protobuf:"varint,2,opt,name=ip_encap_locks,json=ipEncapLocks" json:"ip_encap_locks,omitempty"`
	// Transport Table
	IpEncapTransportTbl uint32 `protobuf:"varint,3,opt,name=ip_encap_transport_tbl,json=ipEncapTransportTbl" json:"ip_encap_transport_tbl,omitempty"`
	// Transport VRF name
	IpeTransportVrfName string `protobuf:"bytes,4,opt,name=ipe_transport_vrf_name,json=ipeTransportVrfName" json:"ipe_transport_vrf_name,omitempty"`
	// Transport AF
	IpEncapTransportAf uint32 `protobuf:"varint,5,opt,name=ip_encap_transport_af,json=ipEncapTransportAf" json:"ip_encap_transport_af,omitempty"`
	// Payload AF
	IpEncapPayloadAf uint32 `protobuf:"varint,6,opt,name=ip_encap_payload_af,json=ipEncapPayloadAf" json:"ip_encap_payload_af,omitempty"`
	// Payload MTU
	IpEncapPayloadMtu uint32 `protobuf:"varint,7,opt,name=ip_encap_payload_mtu,json=ipEncapPayloadMtu" json:"ip_encap_payload_mtu,omitempty"`
	// Pointer to parent
	IpEncapParent uint32 `protobuf:"varint,8,opt,name=ip_encap_parent,json=ipEncapParent" json:"ip_encap_parent,omitempty"`
	// Parent type enumeration
	IpEncapParentType uint32 `protobuf:"varint,9,opt,name=ip_encap_parent_type,json=ipEncapParentType" json:"ip_encap_parent_type,omitempty"`
	// Headers
	IpEncapHdrs []*FibShIpencapHdrDet `protobuf:"bytes,10,rep,name=ip_encap_hdrs,json=ipEncapHdrs" json:"ip_encap_hdrs,omitempty"`
}

func (m *FibShIpencapDet) Reset()                    { *m = FibShIpencapDet{} }
func (m *FibShIpencapDet) String() string            { return proto.CompactTextString(m) }
func (*FibShIpencapDet) ProtoMessage()               {}
func (*FibShIpencapDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FibShIpencapDet) GetIpEncapHdrCount() uint32 {
	if m != nil {
		return m.IpEncapHdrCount
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapLocks() uint32 {
	if m != nil {
		return m.IpEncapLocks
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapTransportTbl() uint32 {
	if m != nil {
		return m.IpEncapTransportTbl
	}
	return 0
}

func (m *FibShIpencapDet) GetIpeTransportVrfName() string {
	if m != nil {
		return m.IpeTransportVrfName
	}
	return ""
}

func (m *FibShIpencapDet) GetIpEncapTransportAf() uint32 {
	if m != nil {
		return m.IpEncapTransportAf
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapPayloadAf() uint32 {
	if m != nil {
		return m.IpEncapPayloadAf
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapPayloadMtu() uint32 {
	if m != nil {
		return m.IpEncapPayloadMtu
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapParent() uint32 {
	if m != nil {
		return m.IpEncapParent
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapParentType() uint32 {
	if m != nil {
		return m.IpEncapParentType
	}
	return 0
}

func (m *FibShIpencapDet) GetIpEncapHdrs() []*FibShIpencapHdrDet {
	if m != nil {
		return m.IpEncapHdrs
	}
	return nil
}

// Detailed path information for FIB table entries
type FibShTblPathDet struct {
	// IP address to recurse to
	IpAddressToRecurse string `protobuf:"bytes,1,opt,name=ip_address_to_recurse,json=ipAddressToRecurse" json:"ip_address_to_recurse,omitempty"`
	// Local label to recurse over
	LabelToRecurse uint32 `protobuf:"varint,2,opt,name=label_to_recurse,json=labelToRecurse" json:"label_to_recurse,omitempty"`
	// Next hop prefix
	DetailNextHopPrefix string `protobuf:"bytes,3,opt,name=detail_next_hop_prefix,json=detailNextHopPrefix" json:"detail_next_hop_prefix,omitempty"`
	// Next hop mask length
	NextHopMaskLength uint32 `protobuf:"varint,4,opt,name=next_hop_mask_length,json=nextHopMaskLength" json:"next_hop_mask_length,omitempty"`
	// Interface associated with this path
	InterfaceAssociatedPath string `protobuf:"bytes,5,opt,name=interface_associated_path,json=interfaceAssociatedPath" json:"interface_associated_path,omitempty"`
	// Next hop interface
	NextHopInterface string `protobuf:"bytes,6,opt,name=next_hop_interface,json=nextHopInterface" json:"next_hop_interface,omitempty"`
	// Next hop VRF
	NextHopVrf []byte `protobuf:"bytes,7,opt,name=next_hop_vrf,json=nextHopVrf,proto3" json:"next_hop_vrf,omitempty"`
	// Tunnel endpoint id
	TunnleEndpointId uint32 `protobuf:"varint,8,opt,name=tunnle_endpoint_id,json=tunnleEndpointId" json:"tunnle_endpoint_id,omitempty"`
	// LISP RLOC ID
	Lisprlocid uint32 `protobuf:"varint,9,opt,name=lisprlocid" json:"lisprlocid,omitempty"`
	// No. of dependents for this path
	NumberOfDependenciesThisPath uint32 `protobuf:"varint,10,opt,name=number_of_dependencies_this_path,json=numberOfDependenciesThisPath" json:"number_of_dependencies_this_path,omitempty"`
	// Round robin reset value
	RobinResetValue uint32 `protobuf:"varint,11,opt,name=robin_reset_value,json=robinResetValue" json:"robin_reset_value,omitempty"`
	// Is recursion object a leaf?
	RecursePrefixObject bool `protobuf:"varint,12,opt,name=recurse_prefix_object,json=recursePrefixObject" json:"recurse_prefix_object,omitempty"`
	// Next prefix recursion in the path
	NextPrefixRecursion []byte `protobuf:"bytes,13,opt,name=next_prefix_recursion,json=nextPrefixRecursion,proto3" json:"next_prefix_recursion,omitempty"`
	// Next prefix length
	NextPrefixLength uint32 `protobuf:"varint,14,opt,name=next_prefix_length,json=nextPrefixLength" json:"next_prefix_length,omitempty"`
	// Recursion has two leaves (e.g. implicit-null path)
	RecursePrefixObject2 bool `protobuf:"varint,15,opt,name=recurse_prefix_object2,json=recursePrefixObject2" json:"recurse_prefix_object2,omitempty"`
	// Next prefix2 recursion in the path
	NextPrefixRecursion2 []byte `protobuf:"bytes,16,opt,name=next_prefix_recursion2,json=nextPrefixRecursion2,proto3" json:"next_prefix_recursion2,omitempty"`
	// Next prefix2 length
	NextPrefixLength2 uint32 `protobuf:"varint,17,opt,name=next_prefix_length2,json=nextPrefixLength2" json:"next_prefix_length2,omitempty"`
	// FIB entry adjacency type
	DetailFibAdjacencyType string `protobuf:"bytes,18,opt,name=detail_fib_adjacency_type,json=detailFibAdjacencyType" json:"detail_fib_adjacency_type,omitempty"`
	// Current path flag
	CurrentPathFlag bool `protobuf:"varint,19,opt,name=current_path_flag,json=currentPathFlag" json:"current_path_flag,omitempty"`
	// Recursive path information is available
	RecursivePathInformation bool `protobuf:"varint,20,opt,name=recursive_path_information,json=recursivePathInformation" json:"recursive_path_information,omitempty"`
	// Path is an external adjacency
	ExternalAdjacency bool `protobuf:"varint,21,opt,name=external_adjacency,json=externalAdjacency" json:"external_adjacency,omitempty"`
	// FIB Nhinfo type
	FibPathNhInformationType string `protobuf:"bytes,22,opt,name=fib_path_nh_information_type,json=fibPathNhInformationType" json:"fib_path_nh_information_type,omitempty"`
	// FIB Nhinfo type special
	FibPathNhInformationTypeSpecial string `protobuf:"bytes,23,opt,name=fib_path_nh_information_type_special,json=fibPathNhInformationTypeSpecial" json:"fib_path_nh_information_type_special,omitempty"`
	// Weight of the path
	WeightOfPath uint32 `protobuf:"varint,24,opt,name=weight_of_path,json=weightOfPath" json:"weight_of_path,omitempty"`
	// Tunnel class of the path
	TunnelClass uint32 `protobuf:"varint,25,opt,name=tunnel_class,json=tunnelClass" json:"tunnel_class,omitempty"`
	// IP Encap
	SpdIpencap []*FibShIpencapDet `protobuf:"bytes,26,rep,name=spd_ipencap,json=spdIpencap" json:"spd_ipencap,omitempty"`
	// Tunnel is forward class
	TunnelIsForwardClass bool `protobuf:"varint,27,opt,name=tunnel_is_forward_class,json=tunnelIsForwardClass" json:"tunnel_is_forward_class,omitempty"`
}

func (m *FibShTblPathDet) Reset()                    { *m = FibShTblPathDet{} }
func (m *FibShTblPathDet) String() string            { return proto.CompactTextString(m) }
func (*FibShTblPathDet) ProtoMessage()               {}
func (*FibShTblPathDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FibShTblPathDet) GetIpAddressToRecurse() string {
	if m != nil {
		return m.IpAddressToRecurse
	}
	return ""
}

func (m *FibShTblPathDet) GetLabelToRecurse() uint32 {
	if m != nil {
		return m.LabelToRecurse
	}
	return 0
}

func (m *FibShTblPathDet) GetDetailNextHopPrefix() string {
	if m != nil {
		return m.DetailNextHopPrefix
	}
	return ""
}

func (m *FibShTblPathDet) GetNextHopMaskLength() uint32 {
	if m != nil {
		return m.NextHopMaskLength
	}
	return 0
}

func (m *FibShTblPathDet) GetInterfaceAssociatedPath() string {
	if m != nil {
		return m.InterfaceAssociatedPath
	}
	return ""
}

func (m *FibShTblPathDet) GetNextHopInterface() string {
	if m != nil {
		return m.NextHopInterface
	}
	return ""
}

func (m *FibShTblPathDet) GetNextHopVrf() []byte {
	if m != nil {
		return m.NextHopVrf
	}
	return nil
}

func (m *FibShTblPathDet) GetTunnleEndpointId() uint32 {
	if m != nil {
		return m.TunnleEndpointId
	}
	return 0
}

func (m *FibShTblPathDet) GetLisprlocid() uint32 {
	if m != nil {
		return m.Lisprlocid
	}
	return 0
}

func (m *FibShTblPathDet) GetNumberOfDependenciesThisPath() uint32 {
	if m != nil {
		return m.NumberOfDependenciesThisPath
	}
	return 0
}

func (m *FibShTblPathDet) GetRobinResetValue() uint32 {
	if m != nil {
		return m.RobinResetValue
	}
	return 0
}

func (m *FibShTblPathDet) GetRecursePrefixObject() bool {
	if m != nil {
		return m.RecursePrefixObject
	}
	return false
}

func (m *FibShTblPathDet) GetNextPrefixRecursion() []byte {
	if m != nil {
		return m.NextPrefixRecursion
	}
	return nil
}

func (m *FibShTblPathDet) GetNextPrefixLength() uint32 {
	if m != nil {
		return m.NextPrefixLength
	}
	return 0
}

func (m *FibShTblPathDet) GetRecursePrefixObject2() bool {
	if m != nil {
		return m.RecursePrefixObject2
	}
	return false
}

func (m *FibShTblPathDet) GetNextPrefixRecursion2() []byte {
	if m != nil {
		return m.NextPrefixRecursion2
	}
	return nil
}

func (m *FibShTblPathDet) GetNextPrefixLength2() uint32 {
	if m != nil {
		return m.NextPrefixLength2
	}
	return 0
}

func (m *FibShTblPathDet) GetDetailFibAdjacencyType() string {
	if m != nil {
		return m.DetailFibAdjacencyType
	}
	return ""
}

func (m *FibShTblPathDet) GetCurrentPathFlag() bool {
	if m != nil {
		return m.CurrentPathFlag
	}
	return false
}

func (m *FibShTblPathDet) GetRecursivePathInformation() bool {
	if m != nil {
		return m.RecursivePathInformation
	}
	return false
}

func (m *FibShTblPathDet) GetExternalAdjacency() bool {
	if m != nil {
		return m.ExternalAdjacency
	}
	return false
}

func (m *FibShTblPathDet) GetFibPathNhInformationType() string {
	if m != nil {
		return m.FibPathNhInformationType
	}
	return ""
}

func (m *FibShTblPathDet) GetFibPathNhInformationTypeSpecial() string {
	if m != nil {
		return m.FibPathNhInformationTypeSpecial
	}
	return ""
}

func (m *FibShTblPathDet) GetWeightOfPath() uint32 {
	if m != nil {
		return m.WeightOfPath
	}
	return 0
}

func (m *FibShTblPathDet) GetTunnelClass() uint32 {
	if m != nil {
		return m.TunnelClass
	}
	return 0
}

func (m *FibShTblPathDet) GetSpdIpencap() []*FibShIpencapDet {
	if m != nil {
		return m.SpdIpencap
	}
	return nil
}

func (m *FibShTblPathDet) GetTunnelIsForwardClass() bool {
	if m != nil {
		return m.TunnelIsForwardClass
	}
	return false
}

// Brief path information for FIB table entries
type FibShTblPath struct {
	// Next entry in the path
	FibShTblPath []*FibShTblPathItem `protobuf:"bytes,1,rep,name=fib_sh_tbl_path,json=fibShTblPath" json:"fib_sh_tbl_path,omitempty"`
}

func (m *FibShTblPath) Reset()                    { *m = FibShTblPath{} }
func (m *FibShTblPath) String() string            { return proto.CompactTextString(m) }
func (*FibShTblPath) ProtoMessage()               {}
func (*FibShTblPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FibShTblPath) GetFibShTblPath() []*FibShTblPathItem {
	if m != nil {
		return m.FibShTblPath
	}
	return nil
}

type FibShTblPathItem struct {
	// More detail about this path entry
	MoreDetailAboutPath *FibShTblPathDet `protobuf:"bytes,1,opt,name=more_detail_about_path,json=moreDetailAboutPath" json:"more_detail_about_path,omitempty"`
	// mpls info for this path entry
	MplsInformationForPath *FibShTblPathMplsInfo `protobuf:"bytes,2,opt,name=mpls_information_for_path,json=mplsInformationForPath" json:"mpls_information_for_path,omitempty"`
	// Hardware info
	HardwareInformation []byte `protobuf:"bytes,3,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty"`
	// Interface handle
	BriefInterfaceHandle string `protobuf:"bytes,4,opt,name=brief_interface_handle,json=briefInterfaceHandle" json:"brief_interface_handle,omitempty"`
	// Next hop prefix
	BriefNextHopPrefix string `protobuf:"bytes,5,opt,name=brief_next_hop_prefix,json=briefNextHopPrefix" json:"brief_next_hop_prefix,omitempty"`
	// Local label to recurse over
	ViaLabelToRecurse uint32 `protobuf:"varint,6,opt,name=via_label_to_recurse,json=viaLabelToRecurse" json:"via_label_to_recurse,omitempty"`
	// P-node address
	BriefPnodeAddress string `protobuf:"bytes,7,opt,name=brief_pnode_address,json=briefPnodeAddress" json:"brief_pnode_address,omitempty"`
	// Q-node address
	BriefQnodeAddress string `protobuf:"bytes,8,opt,name=brief_qnode_address,json=briefQnodeAddress" json:"brief_qnode_address,omitempty"`
	// Resolved path
	ResolvedPath bool `protobuf:"varint,9,opt,name=resolved_path,json=resolvedPath" json:"resolved_path,omitempty"`
	// Recursive path
	RecursivePath bool `protobuf:"varint,10,opt,name=recursive_path,json=recursivePath" json:"recursive_path,omitempty"`
	// Packets received on this path
	PacketsReceivedPath bool `protobuf:"varint,11,opt,name=packets_received_path,json=packetsReceivedPath" json:"packets_received_path,omitempty"`
	// Attached path
	AttachedPath bool `protobuf:"varint,12,opt,name=attached_path,json=attachedPath" json:"attached_path,omitempty"`
	// Backup path
	BackupPath bool `protobuf:"varint,13,opt,name=backup_path,json=backupPath" json:"backup_path,omitempty"`
	// Best external path
	BestExternalPath bool `protobuf:"varint,14,opt,name=best_external_path,json=bestExternalPath" json:"best_external_path,omitempty"`
	// Is protection ignored
	ProtectIgnore bool `protobuf:"varint,15,opt,name=protect_ignore,json=protectIgnore" json:"protect_ignore,omitempty"`
	// Is this the path used for DLB
	PathDlb bool `protobuf:"varint,16,opt,name=path_dlb,json=pathDlb" json:"path_dlb,omitempty"`
	// Path flags
	PathFlags uint32 `protobuf:"varint,17,opt,name=path_flags,json=pathFlags" json:"path_flags,omitempty"`
	// Path Info flags
	PathInfoFlags uint32 `protobuf:"varint,18,opt,name=path_info_flags,json=pathInfoFlags" json:"path_info_flags,omitempty"`
	// Path index
	PathIndex uint32 `protobuf:"varint,19,opt,name=path_index,json=pathIndex" json:"path_index,omitempty"`
	// Backup path index
	BackupIndex uint32 `protobuf:"varint,20,opt,name=backup_index,json=backupIndex" json:"backup_index,omitempty"`
	// Next Hop Index
	NextHopIndex uint32 `protobuf:"varint,21,opt,name=next_hop_index,json=nextHopIndex" json:"next_hop_index,omitempty"`
	// Parent Interface Handle
	ParentInterfaceHandle string `protobuf:"bytes,22,opt,name=parent_interface_handle,json=parentInterfaceHandle" json:"parent_interface_handle,omitempty"`
	// recursion via /N constraint
	RecursionViaLen uint32 `protobuf:"varint,23,opt,name=recursion_via_len,json=recursionViaLen" json:"recursion_via_len,omitempty"`
}

func (m *FibShTblPathItem) Reset()                    { *m = FibShTblPathItem{} }
func (m *FibShTblPathItem) String() string            { return proto.CompactTextString(m) }
func (*FibShTblPathItem) ProtoMessage()               {}
func (*FibShTblPathItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FibShTblPathItem) GetMoreDetailAboutPath() *FibShTblPathDet {
	if m != nil {
		return m.MoreDetailAboutPath
	}
	return nil
}

func (m *FibShTblPathItem) GetMplsInformationForPath() *FibShTblPathMplsInfo {
	if m != nil {
		return m.MplsInformationForPath
	}
	return nil
}

func (m *FibShTblPathItem) GetHardwareInformation() []byte {
	if m != nil {
		return m.HardwareInformation
	}
	return nil
}

func (m *FibShTblPathItem) GetBriefInterfaceHandle() string {
	if m != nil {
		return m.BriefInterfaceHandle
	}
	return ""
}

func (m *FibShTblPathItem) GetBriefNextHopPrefix() string {
	if m != nil {
		return m.BriefNextHopPrefix
	}
	return ""
}

func (m *FibShTblPathItem) GetViaLabelToRecurse() uint32 {
	if m != nil {
		return m.ViaLabelToRecurse
	}
	return 0
}

func (m *FibShTblPathItem) GetBriefPnodeAddress() string {
	if m != nil {
		return m.BriefPnodeAddress
	}
	return ""
}

func (m *FibShTblPathItem) GetBriefQnodeAddress() string {
	if m != nil {
		return m.BriefQnodeAddress
	}
	return ""
}

func (m *FibShTblPathItem) GetResolvedPath() bool {
	if m != nil {
		return m.ResolvedPath
	}
	return false
}

func (m *FibShTblPathItem) GetRecursivePath() bool {
	if m != nil {
		return m.RecursivePath
	}
	return false
}

func (m *FibShTblPathItem) GetPacketsReceivedPath() bool {
	if m != nil {
		return m.PacketsReceivedPath
	}
	return false
}

func (m *FibShTblPathItem) GetAttachedPath() bool {
	if m != nil {
		return m.AttachedPath
	}
	return false
}

func (m *FibShTblPathItem) GetBackupPath() bool {
	if m != nil {
		return m.BackupPath
	}
	return false
}

func (m *FibShTblPathItem) GetBestExternalPath() bool {
	if m != nil {
		return m.BestExternalPath
	}
	return false
}

func (m *FibShTblPathItem) GetProtectIgnore() bool {
	if m != nil {
		return m.ProtectIgnore
	}
	return false
}

func (m *FibShTblPathItem) GetPathDlb() bool {
	if m != nil {
		return m.PathDlb
	}
	return false
}

func (m *FibShTblPathItem) GetPathFlags() uint32 {
	if m != nil {
		return m.PathFlags
	}
	return 0
}

func (m *FibShTblPathItem) GetPathInfoFlags() uint32 {
	if m != nil {
		return m.PathInfoFlags
	}
	return 0
}

func (m *FibShTblPathItem) GetPathIndex() uint32 {
	if m != nil {
		return m.PathIndex
	}
	return 0
}

func (m *FibShTblPathItem) GetBackupIndex() uint32 {
	if m != nil {
		return m.BackupIndex
	}
	return 0
}

func (m *FibShTblPathItem) GetNextHopIndex() uint32 {
	if m != nil {
		return m.NextHopIndex
	}
	return 0
}

func (m *FibShTblPathItem) GetParentInterfaceHandle() string {
	if m != nil {
		return m.ParentInterfaceHandle
	}
	return ""
}

func (m *FibShTblPathItem) GetRecursionViaLen() uint32 {
	if m != nil {
		return m.RecursionViaLen
	}
	return 0
}

// Internal load sharing information arrays for FIB table entries
type FibShTblLoadinfoInt struct {
	// level of ldis
	LevelOfldis uint32 `protobuf:"varint,1,opt,name=level_ofldis,json=levelOfldis" json:"level_ofldis,omitempty"`
	// no. of ldis
	NumberOfLdis uint32 `protobuf:"varint,2,opt,name=number_of_ldis,json=numberOfLdis" json:"number_of_ldis,omitempty"`
	// Maximum index of the arrays
	MaximumIndexArrays uint32 `protobuf:"varint,3,opt,name=maximum_index_arrays,json=maximumIndexArrays" json:"maximum_index_arrays,omitempty"`
	// Path indices
	PathIndices []byte `protobuf:"bytes,4,opt,name=path_indices,json=pathIndices,proto3" json:"path_indices,omitempty"`
	// Path indices
	PathLdiNumbers []byte `protobuf:"bytes,5,opt,name=path_ldi_numbers,json=pathLdiNumbers,proto3" json:"path_ldi_numbers,omitempty"`
	// Sanity flag
	SanityFlag []bool `protobuf:"varint,6,rep,packed,name=sanity_flag,json=sanityFlag" json:"sanity_flag,omitempty"`
	// Adjacency address
	AdjacencyAddress []*FibAddrStr `protobuf:"bytes,7,rep,name=adjacency_address,json=adjacencyAddress" json:"adjacency_address,omitempty"`
	// Interface handle
	InterfaceHandle []string `protobuf:"bytes,8,rep,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// Maximum slots
	MaximumSlots uint32 `protobuf:"varint,9,opt,name=maximum_slots,json=maximumSlots" json:"maximum_slots,omitempty"`
	// Weights of paths
	WeightsOfPaths []uint32 `protobuf:"varint,10,rep,packed,name=weights_of_paths,json=weightsOfPaths" json:"weights_of_paths,omitempty"`
	// Normalized weights
	NormalizedWeights []byte `protobuf:"bytes,11,opt,name=normalized_weights,json=normalizedWeights,proto3" json:"normalized_weights,omitempty"`
	// Tunnel class value
	TunnelClassValue []byte `protobuf:"bytes,12,opt,name=tunnel_class_value,json=tunnelClassValue,proto3" json:"tunnel_class_value,omitempty"`
	// PBTS info valid flag
	IsPbtsInfoValid bool `protobuf:"varint,13,opt,name=is_pbts_info_valid,json=isPbtsInfoValid" json:"is_pbts_info_valid,omitempty"`
	// PBTS class offset
	PbtsClassOffset []byte `protobuf:"bytes,14,opt,name=pbts_class_offset,json=pbtsClassOffset,proto3" json:"pbts_class_offset,omitempty"`
	// PBTS class num paths
	PbtsClassNumPaths []byte `protobuf:"bytes,15,opt,name=pbts_class_num_paths,json=pbtsClassNumPaths,proto3" json:"pbts_class_num_paths,omitempty"`
	// Does PBTS class fall back to drop or any class
	PbtsClassIsFallbackMapped []bool `protobuf:"varint,16,rep,packed,name=pbts_class_is_fallback_mapped,json=pbtsClassIsFallbackMapped" json:"pbts_class_is_fallback_mapped,omitempty"`
	// PBTS class falls back to class
	PbtsFallbackMappedClass []byte `protobuf:"bytes,17,opt,name=pbts_fallback_mapped_class,json=pbtsFallbackMappedClass,proto3" json:"pbts_fallback_mapped_class,omitempty"`
	// PBTS class falls back to drop
	PbtsFallbackToDrop []bool `protobuf:"varint,18,rep,packed,name=pbts_fallback_to_drop,json=pbtsFallbackToDrop" json:"pbts_fallback_to_drop,omitempty"`
	// Round Robin Disable
	RoundRobinDisable bool `protobuf:"varint,19,opt,name=round_robin_disable,json=roundRobinDisable" json:"round_robin_disable,omitempty"`
	// Number of LDI next hop buckets
	LdiNextHopBuckets uint32 `protobuf:"varint,20,opt,name=ldi_next_hop_buckets,json=ldiNextHopBuckets" json:"ldi_next_hop_buckets,omitempty"`
	// Platform Hardware info
	PlatformHardwareInformation []byte `protobuf:"bytes,21,opt,name=platform_hardware_information,json=platformHardwareInformation,proto3" json:"platform_hardware_information,omitempty"`
	// Tunnel is forward class
	TunnelIsForwardClass []bool `protobuf:"varint,22,rep,packed,name=tunnel_is_forward_class,json=tunnelIsForwardClass" json:"tunnel_is_forward_class,omitempty"`
}

func (m *FibShTblLoadinfoInt) Reset()                    { *m = FibShTblLoadinfoInt{} }
func (m *FibShTblLoadinfoInt) String() string            { return proto.CompactTextString(m) }
func (*FibShTblLoadinfoInt) ProtoMessage()               {}
func (*FibShTblLoadinfoInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FibShTblLoadinfoInt) GetLevelOfldis() uint32 {
	if m != nil {
		return m.LevelOfldis
	}
	return 0
}

func (m *FibShTblLoadinfoInt) GetNumberOfLdis() uint32 {
	if m != nil {
		return m.NumberOfLdis
	}
	return 0
}

func (m *FibShTblLoadinfoInt) GetMaximumIndexArrays() uint32 {
	if m != nil {
		return m.MaximumIndexArrays
	}
	return 0
}

func (m *FibShTblLoadinfoInt) GetPathIndices() []byte {
	if m != nil {
		return m.PathIndices
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetPathLdiNumbers() []byte {
	if m != nil {
		return m.PathLdiNumbers
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetSanityFlag() []bool {
	if m != nil {
		return m.SanityFlag
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetAdjacencyAddress() []*FibAddrStr {
	if m != nil {
		return m.AdjacencyAddress
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetInterfaceHandle() []string {
	if m != nil {
		return m.InterfaceHandle
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetMaximumSlots() uint32 {
	if m != nil {
		return m.MaximumSlots
	}
	return 0
}

func (m *FibShTblLoadinfoInt) GetWeightsOfPaths() []uint32 {
	if m != nil {
		return m.WeightsOfPaths
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetNormalizedWeights() []byte {
	if m != nil {
		return m.NormalizedWeights
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetTunnelClassValue() []byte {
	if m != nil {
		return m.TunnelClassValue
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetIsPbtsInfoValid() bool {
	if m != nil {
		return m.IsPbtsInfoValid
	}
	return false
}

func (m *FibShTblLoadinfoInt) GetPbtsClassOffset() []byte {
	if m != nil {
		return m.PbtsClassOffset
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetPbtsClassNumPaths() []byte {
	if m != nil {
		return m.PbtsClassNumPaths
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetPbtsClassIsFallbackMapped() []bool {
	if m != nil {
		return m.PbtsClassIsFallbackMapped
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetPbtsFallbackMappedClass() []byte {
	if m != nil {
		return m.PbtsFallbackMappedClass
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetPbtsFallbackToDrop() []bool {
	if m != nil {
		return m.PbtsFallbackToDrop
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetRoundRobinDisable() bool {
	if m != nil {
		return m.RoundRobinDisable
	}
	return false
}

func (m *FibShTblLoadinfoInt) GetLdiNextHopBuckets() uint32 {
	if m != nil {
		return m.LdiNextHopBuckets
	}
	return 0
}

func (m *FibShTblLoadinfoInt) GetPlatformHardwareInformation() []byte {
	if m != nil {
		return m.PlatformHardwareInformation
	}
	return nil
}

func (m *FibShTblLoadinfoInt) GetTunnelIsForwardClass() []bool {
	if m != nil {
		return m.TunnelIsForwardClass
	}
	return nil
}

// Detailed load sharing information for FIB table entries
type FibShTblLoadinfoDet struct {
	// Packets through this loadinfo
	PacketsThroughLoadInformation uint64 `protobuf:"varint,1,opt,name=packets_through_load_information,json=packetsThroughLoadInformation" json:"packets_through_load_information,omitempty"`
	// Bytes through this loadinfo
	BytesThroughLoadInformation uint64 `protobuf:"varint,2,opt,name=bytes_through_load_information,json=bytesThroughLoadInformation" json:"bytes_through_load_information,omitempty"`
	// Total packets through this loadinfo
	TotalPacketsThroughLoadInformation uint64 `protobuf:"varint,3,opt,name=total_packets_through_load_information,json=totalPacketsThroughLoadInformation" json:"total_packets_through_load_information,omitempty"`
	// Total bytes through this loadinfo
	TotalBytesThroughLoadInformation uint64 `protobuf:"varint,4,opt,name=total_bytes_through_load_information,json=totalBytesThroughLoadInformation" json:"total_bytes_through_load_information,omitempty"`
	// Prefix of the owner
	PrefixOfOwner uint32 `protobuf:"varint,5,opt,name=prefix_of_owner,json=prefixOfOwner" json:"prefix_of_owner,omitempty"`
	// Mask length of the owner
	MaskLengthOfOwner uint32 `protobuf:"varint,6,opt,name=mask_length_of_owner,json=maskLengthOfOwner" json:"mask_length_of_owner,omitempty"`
	// Loadinfo reference count
	LoadInformationReferenceCount uint32 `protobuf:"varint,7,opt,name=load_information_reference_count,json=loadInformationReferenceCount" json:"load_information_reference_count,omitempty"`
	// Per destination load sharing flag
	PerDestLoadSharingFlag bool `protobuf:"varint,8,opt,name=per_dest_load_sharing_flag,json=perDestLoadSharingFlag" json:"per_dest_load_sharing_flag,omitempty"`
	// Loadinfo owner deleted flag
	LoadInformationOwnerDeletedFlag bool `protobuf:"varint,9,opt,name=load_information_owner_deleted_flag,json=loadInformationOwnerDeletedFlag" json:"load_information_owner_deleted_flag,omitempty"`
	// Loadinfo sanity flag
	LoadinfoSanityFlag bool `protobuf:"varint,10,opt,name=loadinfo_sanity_flag,json=loadinfoSanityFlag" json:"loadinfo_sanity_flag,omitempty"`
	// Owner flag
	IsOwner bool `protobuf:"varint,11,opt,name=is_owner,json=isOwner" json:"is_owner,omitempty"`
	// Loadinfo internal data
	LoadInformtionInternalData *FibShTblLoadinfoInt `protobuf:"bytes,12,opt,name=load_informtion_internal_data,json=loadInformtionInternalData" json:"load_informtion_internal_data,omitempty"`
}

func (m *FibShTblLoadinfoDet) Reset()                    { *m = FibShTblLoadinfoDet{} }
func (m *FibShTblLoadinfoDet) String() string            { return proto.CompactTextString(m) }
func (*FibShTblLoadinfoDet) ProtoMessage()               {}
func (*FibShTblLoadinfoDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FibShTblLoadinfoDet) GetPacketsThroughLoadInformation() uint64 {
	if m != nil {
		return m.PacketsThroughLoadInformation
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetBytesThroughLoadInformation() uint64 {
	if m != nil {
		return m.BytesThroughLoadInformation
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetTotalPacketsThroughLoadInformation() uint64 {
	if m != nil {
		return m.TotalPacketsThroughLoadInformation
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetTotalBytesThroughLoadInformation() uint64 {
	if m != nil {
		return m.TotalBytesThroughLoadInformation
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetPrefixOfOwner() uint32 {
	if m != nil {
		return m.PrefixOfOwner
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetMaskLengthOfOwner() uint32 {
	if m != nil {
		return m.MaskLengthOfOwner
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetLoadInformationReferenceCount() uint32 {
	if m != nil {
		return m.LoadInformationReferenceCount
	}
	return 0
}

func (m *FibShTblLoadinfoDet) GetPerDestLoadSharingFlag() bool {
	if m != nil {
		return m.PerDestLoadSharingFlag
	}
	return false
}

func (m *FibShTblLoadinfoDet) GetLoadInformationOwnerDeletedFlag() bool {
	if m != nil {
		return m.LoadInformationOwnerDeletedFlag
	}
	return false
}

func (m *FibShTblLoadinfoDet) GetLoadinfoSanityFlag() bool {
	if m != nil {
		return m.LoadinfoSanityFlag
	}
	return false
}

func (m *FibShTblLoadinfoDet) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *FibShTblLoadinfoDet) GetLoadInformtionInternalData() *FibShTblLoadinfoInt {
	if m != nil {
		return m.LoadInformtionInternalData
	}
	return nil
}

// Detailed FIB table entry information
type FibShTblFibDet struct {
	// FIB entry version number
	FibEntryVersion uint32 `protobuf:"varint,1,opt,name=fib_entry_version,json=fibEntryVersion" json:"fib_entry_version,omitempty"`
	// Per Prefix Accounting
	PerPrefixAccounting uint32 `protobuf:"varint,2,opt,name=per_prefix_accounting,json=perPrefixAccounting" json:"per_prefix_accounting,omitempty"`
	// Load sharing type
	LoadSharingType string `protobuf:"bytes,3,opt,name=load_sharing_type,json=loadSharingType" json:"load_sharing_type,omitempty"`
	// FIB entry adjacency type
	FibEntryAdjacencyType string `protobuf:"bytes,4,opt,name=fib_entry_adjacency_type,json=fibEntryAdjacencyType" json:"fib_entry_adjacency_type,omitempty"`
	// FIB Protocol type
	FibProtocolType uint32 `protobuf:"varint,5,opt,name=fib_protocol_type,json=fibProtocolType" json:"fib_protocol_type,omitempty"`
	// AFI FIB protocol type
	AfiFibProtocolType uint32 `protobuf:"varint,6,opt,name=afi_fib_protocol_type,json=afiFibProtocolType" json:"afi_fib_protocol_type,omitempty"`
	// AIB L3 Address
	AibL3Address []byte `protobuf:"bytes,7,opt,name=aib_l3_address,json=aibL3Address,proto3" json:"aib_l3_address,omitempty"`
	// ADJ ADDR LEN
	AdjacencyAddressLength uint32 `protobuf:"varint,8,opt,name=adjacency_address_length,json=adjacencyAddressLength" json:"adjacency_address_length,omitempty"`
	// ADJ IFH
	AdjacencyInterface uint32 `protobuf:"varint,9,opt,name=adjacency_interface,json=adjacencyInterface" json:"adjacency_interface,omitempty"`
	// FIB Special NHINFO Type
	FibSpecialNhInformationType uint32 `protobuf:"varint,10,opt,name=fib_special_nh_information_type,json=fibSpecialNhInformationType" json:"fib_special_nh_information_type,omitempty"`
	// FIB entry adj address
	FibEntryAdjacencyAddress []byte `protobuf:"bytes,11,opt,name=fib_entry_adjacency_address,json=fibEntryAdjacencyAddress,proto3" json:"fib_entry_adjacency_address,omitempty"`
	// FIB entry adjacency interface
	FibEntryAdjacencyInterface uint32 `protobuf:"varint,12,opt,name=fib_entry_adjacency_interface,json=fibEntryAdjacencyInterface" json:"fib_entry_adjacency_interface,omitempty"`
	// Packets through this FIB entry
	PacketsThroughFibEntry uint64 `protobuf:"varint,13,opt,name=packets_through_fib_entry,json=packetsThroughFibEntry" json:"packets_through_fib_entry,omitempty"`
	// Bytes through this FIB entry
	BytesThroughFibEntry uint64 `protobuf:"varint,14,opt,name=bytes_through_fib_entry,json=bytesThroughFibEntry" json:"bytes_through_fib_entry,omitempty"`
	// Prefix length
	DetailedPrefixLength uint32 `protobuf:"varint,15,opt,name=detailed_prefix_length,json=detailedPrefixLength" json:"detailed_prefix_length,omitempty"`
	// Prefix protocol
	PrefixProtocol uint32 `protobuf:"varint,16,opt,name=prefix_protocol,json=prefixProtocol" json:"prefix_protocol,omitempty"`
	// Precedence for packets to this entry
	PrecedenceForpackets uint32 `protobuf:"varint,17,opt,name=precedence_forpackets,json=precedenceForpackets" json:"precedence_forpackets,omitempty"`
	// Traffic index for packets to this entry
	TrafficIndexForPackets uint32 `protobuf:"varint,18,opt,name=traffic_index_for_packets,json=trafficIndexForPackets" json:"traffic_index_for_packets,omitempty"`
	// Switch function compontent ID
	SwitchCompontentId uint32 `protobuf:"varint,19,opt,name=switch_compontent_id,json=switchCompontentId" json:"switch_compontent_id,omitempty"`
	// Fast adjacency flag
	FastAdjacencyFlag bool `protobuf:"varint,20,opt,name=fast_adjacency_flag,json=fastAdjacencyFlag" json:"fast_adjacency_flag,omitempty"`
	// Illegal fast adjacency flag
	IllegalFastAdjacencyFlag bool `protobuf:"varint,21,opt,name=illegal_fast_adjacency_flag,json=illegalFastAdjacencyFlag" json:"illegal_fast_adjacency_flag,omitempty"`
	// Remote adjacency flag
	RemoteAdjacencyFlag bool `protobuf:"varint,22,opt,name=remote_adjacency_flag,json=remoteAdjacencyFlag" json:"remote_adjacency_flag,omitempty"`
	// Detailed Loadshare info
	LoadshareInformation *FibShTblLoadinfoDet `protobuf:"bytes,23,opt,name=loadshare_information,json=loadshareInformation" json:"loadshare_information,omitempty"`
	// BGP attribute id
	BgpAttributeId uint32 `protobuf:"varint,24,opt,name=bgp_attribute_id,json=bgpAttributeId" json:"bgp_attribute_id,omitempty"`
	// BGP local attribute id
	BgpLocalAttributeId uint32 `protobuf:"varint,25,opt,name=bgp_local_attribute_id,json=bgpLocalAttributeId" json:"bgp_local_attribute_id,omitempty"`
	// BGP attribute origin as
	BgpAttributeOriginAs uint32 `protobuf:"varint,26,opt,name=bgp_attribute_origin_as,json=bgpAttributeOriginAs" json:"bgp_attribute_origin_as,omitempty"`
	// BGP attribute next hop as
	BgpAttributeNextHopAs uint32 `protobuf:"varint,27,opt,name=bgp_attribute_next_hop_as,json=bgpAttributeNextHopAs" json:"bgp_attribute_next_hop_as,omitempty"`
	// As path string
	PathString []byte `protobuf:"bytes,28,opt,name=path_string,json=pathString,proto3" json:"path_string,omitempty"`
	// extcom st
	ExtcomString []byte `protobuf:"bytes,29,opt,name=extcom_string,json=extcomString,proto3" json:"extcom_string,omitempty"`
	// com st
	ComString []byte `protobuf:"bytes,30,opt,name=com_string,json=comString,proto3" json:"com_string,omitempty"`
	// extended community
	ExtendedCommunity uint32 `protobuf:"varint,31,opt,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
	// qos group
	QosGroup uint32 `protobuf:"varint,32,opt,name=qos_group,json=qosGroup" json:"qos_group,omitempty"`
	// mpls fec
	MplsFec uint32 `protobuf:"varint,33,opt,name=mpls_fec,json=mplsFec" json:"mpls_fec,omitempty"`
	// qppb QOS group and IP precedence
	QppbQosGroupAndIpPrecedence uint32 `protobuf:"varint,34,opt,name=qppb_qos_group_and_ip_precedence,json=qppbQosGroupAndIpPrecedence" json:"qppb_qos_group_and_ip_precedence,omitempty"`
	// PBR flow-tag
	FlowTag uint32 `protobuf:"varint,35,opt,name=flow_tag,json=flowTag" json:"flow_tag,omitempty"`
	// SPP forwarding class ID
	ForwardClass uint32 `protobuf:"varint,36,opt,name=forward_class,json=forwardClass" json:"forward_class,omitempty"`
	// The time of last update for PL in msec
	PlTimeOfLastUpdateInMsec uint64 `protobuf:"varint,37,opt,name=pl_time_of_last_update_in_msec,json=plTimeOfLastUpdateInMsec" json:"pl_time_of_last_update_in_msec,omitempty"`
	// The time of last update for LDI in msec
	LdiTimeOfLastUpdateInMsec uint64 `protobuf:"varint,38,opt,name=ldi_time_of_last_update_in_msec,json=ldiTimeOfLastUpdateInMsec" json:"ldi_time_of_last_update_in_msec,omitempty"`
	// The time of last update for LW-LDI in msec
	LwldiTimeOfLastUpdateInMsec uint64 `protobuf:"varint,39,opt,name=lwldi_time_of_last_update_in_msec,json=lwldiTimeOfLastUpdateInMsec" json:"lwldi_time_of_last_update_in_msec,omitempty"`
	// The type of time-stamp on PL
	PlTimeStampType uint32 `protobuf:"varint,40,opt,name=pl_time_stamp_type,json=plTimeStampType" json:"pl_time_stamp_type,omitempty"`
}

func (m *FibShTblFibDet) Reset()                    { *m = FibShTblFibDet{} }
func (m *FibShTblFibDet) String() string            { return proto.CompactTextString(m) }
func (*FibShTblFibDet) ProtoMessage()               {}
func (*FibShTblFibDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FibShTblFibDet) GetFibEntryVersion() uint32 {
	if m != nil {
		return m.FibEntryVersion
	}
	return 0
}

func (m *FibShTblFibDet) GetPerPrefixAccounting() uint32 {
	if m != nil {
		return m.PerPrefixAccounting
	}
	return 0
}

func (m *FibShTblFibDet) GetLoadSharingType() string {
	if m != nil {
		return m.LoadSharingType
	}
	return ""
}

func (m *FibShTblFibDet) GetFibEntryAdjacencyType() string {
	if m != nil {
		return m.FibEntryAdjacencyType
	}
	return ""
}

func (m *FibShTblFibDet) GetFibProtocolType() uint32 {
	if m != nil {
		return m.FibProtocolType
	}
	return 0
}

func (m *FibShTblFibDet) GetAfiFibProtocolType() uint32 {
	if m != nil {
		return m.AfiFibProtocolType
	}
	return 0
}

func (m *FibShTblFibDet) GetAibL3Address() []byte {
	if m != nil {
		return m.AibL3Address
	}
	return nil
}

func (m *FibShTblFibDet) GetAdjacencyAddressLength() uint32 {
	if m != nil {
		return m.AdjacencyAddressLength
	}
	return 0
}

func (m *FibShTblFibDet) GetAdjacencyInterface() uint32 {
	if m != nil {
		return m.AdjacencyInterface
	}
	return 0
}

func (m *FibShTblFibDet) GetFibSpecialNhInformationType() uint32 {
	if m != nil {
		return m.FibSpecialNhInformationType
	}
	return 0
}

func (m *FibShTblFibDet) GetFibEntryAdjacencyAddress() []byte {
	if m != nil {
		return m.FibEntryAdjacencyAddress
	}
	return nil
}

func (m *FibShTblFibDet) GetFibEntryAdjacencyInterface() uint32 {
	if m != nil {
		return m.FibEntryAdjacencyInterface
	}
	return 0
}

func (m *FibShTblFibDet) GetPacketsThroughFibEntry() uint64 {
	if m != nil {
		return m.PacketsThroughFibEntry
	}
	return 0
}

func (m *FibShTblFibDet) GetBytesThroughFibEntry() uint64 {
	if m != nil {
		return m.BytesThroughFibEntry
	}
	return 0
}

func (m *FibShTblFibDet) GetDetailedPrefixLength() uint32 {
	if m != nil {
		return m.DetailedPrefixLength
	}
	return 0
}

func (m *FibShTblFibDet) GetPrefixProtocol() uint32 {
	if m != nil {
		return m.PrefixProtocol
	}
	return 0
}

func (m *FibShTblFibDet) GetPrecedenceForpackets() uint32 {
	if m != nil {
		return m.PrecedenceForpackets
	}
	return 0
}

func (m *FibShTblFibDet) GetTrafficIndexForPackets() uint32 {
	if m != nil {
		return m.TrafficIndexForPackets
	}
	return 0
}

func (m *FibShTblFibDet) GetSwitchCompontentId() uint32 {
	if m != nil {
		return m.SwitchCompontentId
	}
	return 0
}

func (m *FibShTblFibDet) GetFastAdjacencyFlag() bool {
	if m != nil {
		return m.FastAdjacencyFlag
	}
	return false
}

func (m *FibShTblFibDet) GetIllegalFastAdjacencyFlag() bool {
	if m != nil {
		return m.IllegalFastAdjacencyFlag
	}
	return false
}

func (m *FibShTblFibDet) GetRemoteAdjacencyFlag() bool {
	if m != nil {
		return m.RemoteAdjacencyFlag
	}
	return false
}

func (m *FibShTblFibDet) GetLoadshareInformation() *FibShTblLoadinfoDet {
	if m != nil {
		return m.LoadshareInformation
	}
	return nil
}

func (m *FibShTblFibDet) GetBgpAttributeId() uint32 {
	if m != nil {
		return m.BgpAttributeId
	}
	return 0
}

func (m *FibShTblFibDet) GetBgpLocalAttributeId() uint32 {
	if m != nil {
		return m.BgpLocalAttributeId
	}
	return 0
}

func (m *FibShTblFibDet) GetBgpAttributeOriginAs() uint32 {
	if m != nil {
		return m.BgpAttributeOriginAs
	}
	return 0
}

func (m *FibShTblFibDet) GetBgpAttributeNextHopAs() uint32 {
	if m != nil {
		return m.BgpAttributeNextHopAs
	}
	return 0
}

func (m *FibShTblFibDet) GetPathString() []byte {
	if m != nil {
		return m.PathString
	}
	return nil
}

func (m *FibShTblFibDet) GetExtcomString() []byte {
	if m != nil {
		return m.ExtcomString
	}
	return nil
}

func (m *FibShTblFibDet) GetComString() []byte {
	if m != nil {
		return m.ComString
	}
	return nil
}

func (m *FibShTblFibDet) GetExtendedCommunity() uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return 0
}

func (m *FibShTblFibDet) GetQosGroup() uint32 {
	if m != nil {
		return m.QosGroup
	}
	return 0
}

func (m *FibShTblFibDet) GetMplsFec() uint32 {
	if m != nil {
		return m.MplsFec
	}
	return 0
}

func (m *FibShTblFibDet) GetQppbQosGroupAndIpPrecedence() uint32 {
	if m != nil {
		return m.QppbQosGroupAndIpPrecedence
	}
	return 0
}

func (m *FibShTblFibDet) GetFlowTag() uint32 {
	if m != nil {
		return m.FlowTag
	}
	return 0
}

func (m *FibShTblFibDet) GetForwardClass() uint32 {
	if m != nil {
		return m.ForwardClass
	}
	return 0
}

func (m *FibShTblFibDet) GetPlTimeOfLastUpdateInMsec() uint64 {
	if m != nil {
		return m.PlTimeOfLastUpdateInMsec
	}
	return 0
}

func (m *FibShTblFibDet) GetLdiTimeOfLastUpdateInMsec() uint64 {
	if m != nil {
		return m.LdiTimeOfLastUpdateInMsec
	}
	return 0
}

func (m *FibShTblFibDet) GetLwldiTimeOfLastUpdateInMsec() uint64 {
	if m != nil {
		return m.LwldiTimeOfLastUpdateInMsec
	}
	return 0
}

func (m *FibShTblFibDet) GetPlTimeStampType() uint32 {
	if m != nil {
		return m.PlTimeStampType
	}
	return 0
}

func init() {
	proto.RegisterType((*FibShTblFib_KEYS)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_fib_KEYS")
	proto.RegisterType((*FibShTblFib)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_fib")
	proto.RegisterType((*FibAddrStr)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_addr_str")
	proto.RegisterType((*FibShTblMplsLabelStack)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_mpls_label_stack")
	proto.RegisterType((*FibShTblPathMplsInfo)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_path_mpls_info")
	proto.RegisterType((*FibShIpencapHdrDet)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_ipencap_hdr_det")
	proto.RegisterType((*FibShIpencapDet)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_ipencap_det")
	proto.RegisterType((*FibShTblPathDet)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_path_det")
	proto.RegisterType((*FibShTblPath)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_path")
	proto.RegisterType((*FibShTblPathItem)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_path_item")
	proto.RegisterType((*FibShTblLoadinfoInt)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_loadinfo_int")
	proto.RegisterType((*FibShTblLoadinfoDet)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_loadinfo_det")
	proto.RegisterType((*FibShTblFibDet)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail.fib_sh_tbl_fib_det")
}

func init() { proto.RegisterFile("fib_sh_tbl_fib.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4054 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x73, 0x1c, 0x47,
	0x72, 0x8e, 0x11, 0xb5, 0x04, 0x50, 0x98, 0xc1, 0xa3, 0xf1, 0x6a, 0x10, 0x82, 0x08, 0x82, 0x5c,
	0x09, 0x7a, 0x2c, 0x25, 0x01, 0xd4, 0x6a, 0xf5, 0xda, 0x15, 0x08, 0x10, 0xe4, 0x78, 0x41, 0x02,
	0x6a, 0xc0, 0xf4, 0xe3, 0x52, 0x51, 0xd3, 0x5d, 0x3d, 0x53, 0x62, 0x4f, 0x77, 0xab, 0xaa, 0x06,
	0x8f, 0x75, 0xc4, 0xfa, 0x15, 0x8e, 0xbd, 0x39, 0x7c, 0xf5, 0xc9, 0xe1, 0x08, 0x3b, 0xec, 0x9b,
	0x2f, 0xbe, 0x38, 0xec, 0x08, 0x87, 0x2f, 0xf6, 0xaf, 0xf0, 0xd9, 0xe1, 0x7f, 0xe1, 0xc8, 0xcc,
	0xea, 0xd7, 0x00, 0xa4, 0x6e, 0x4b, 0x5f, 0x48, 0x4c, 0xe6, 0x97, 0x59, 0x59, 0xd5, 0x59, 0xf9,
	0xea, 0x66, 0x8b, 0xb1, 0xea, 0x71, 0x33, 0xe0, 0xb6, 0x97, 0xf0, 0x58, 0xf5, 0xee, 0xe7, 0x3a,
	0xb3, 0x99, 0xf7, 0x5d, 0xa8, 0x4c, 0x98, 0x71, 0x95, 0x19, 0x7e, 0xa1, 0x81, 0xce, 0xc3, 0x6c,
	0x38, 0xcc, 0x52, 0x9e, 0xe5, 0x52, 0xdf, 0x07, 0x5c, 0x9a, 0x45, 0xd2, 0xe0, 0xbf, 0x24, 0x12,
	0x66, 0x89, 0x29, 0xff, 0xba, 0x7f, 0xa6, 0x63, 0x03, 0xff, 0xdc, 0x57, 0x39, 0xcf, 0xb5, 0x8c,
	0xd5, 0x05, 0x8f, 0xa4, 0x15, 0x2a, 0x31, 0x57, 0x28, 0x9b, 0xff, 0xd4, 0x62, 0x0b, 0x4d, 0x23,
	0xf8, 0x2f, 0x1f, 0xfd, 0xc1, 0x89, 0xb7, 0xc6, 0xa6, 0x40, 0x3d, 0x4f, 0xc5, 0x50, 0xfa, 0xad,
	0x8d, 0xd6, 0xd6, 0x54, 0x30, 0x09, 0x84, 0x67, 0x62, 0x28, 0xbd, 0xbb, 0xac, 0x53, 0x2c, 0x46,
	0x80, 0x37, 0x10, 0xd0, 0x2e, 0x88, 0x08, 0x5a, 0x65, 0x93, 0x67, 0x3a, 0x26, 0xfe, 0x0d, 0xe4,
	0x4f, 0x9c, 0xe9, 0x18, 0x59, 0xcb, 0xec, 0x26, 0x59, 0xe1, 0xbf, 0x89, 0x0c, 0xf7, 0x8b, 0xf4,
	0xa2, 0x75, 0x89, 0x4c, 0xfb, 0x76, 0xe0, 0xff, 0x68, 0xa3, 0xb5, 0xd5, 0x01, 0xbd, 0x40, 0x3c,
	0x44, 0xda, 0xe6, 0x7f, 0xce, 0xb1, 0x99, 0xa6, 0xc5, 0xde, 0xa7, 0x6c, 0xa5, 0xb4, 0xc7, 0x5e,
	0xe6, 0x12, 0xb7, 0x21, 0x53, 0xab, 0x2f, 0xfd, 0x6d, 0xd4, 0xb0, 0x58, 0xb0, 0x4f, 0x2f, 0x73,
	0x79, 0xa0, 0x7a, 0x8f, 0x80, 0xe7, 0xfd, 0x7b, 0x8b, 0xbd, 0x45, 0xc7, 0x50, 0x09, 0x70, 0x95,
	0xc6, 0x99, 0x1e, 0x0a, 0xab, 0xb2, 0xd4, 0xdf, 0xd9, 0x68, 0x6d, 0x4d, 0x6f, 0xff, 0xfa, 0xfe,
	0x6f, 0xef, 0x79, 0xdc, 0x1f, 0x7b, 0x16, 0x91, 0xb4, 0xc1, 0x2a, 0xb1, 0x0a, 0xb3, 0xbb, 0x95,
	0x81, 0xde, 0xdf, 0xb6, 0xe8, 0x2c, 0xc8, 0xf4, 0x5c, 0xd8, 0x81, 0xff, 0x00, 0x6d, 0xfe, 0xa3,
	0xd7, 0x64, 0x33, 0x98, 0x10, 0xb4, 0x63, 0x67, 0xea, 0xb1, 0xb0, 0x03, 0xef, 0x03, 0x36, 0x9f,
	0x27, 0xc2, 0x82, 0xd1, 0x7c, 0x20, 0x74, 0x74, 0x2e, 0xb4, 0xf4, 0x3f, 0xdd, 0x68, 0x6d, 0xb5,
	0x83, 0xb9, 0x82, 0xf1, 0xc4, 0xd1, 0xbd, 0xc7, 0xec, 0x4e, 0x3a, 0x1a, 0xf6, 0xa4, 0xe6, 0x59,
	0xcc, 0xb5, 0x8c, 0xa5, 0x16, 0x69, 0x28, 0x0d, 0xb7, 0x19, 0xaa, 0xe6, 0x89, 0x32, 0xd6, 0xff,
	0x29, 0x3e, 0xd3, 0xb7, 0x08, 0x78, 0x14, 0x07, 0x25, 0xec, 0x34, 0x83, 0x15, 0x0f, 0x95, 0xb1,
	0xde, 0x3b, 0x6c, 0xb6, 0x14, 0xe0, 0x71, 0x22, 0xfa, 0xc6, 0xff, 0x0c, 0xc5, 0x3a, 0xb9, 0x83,
	0x1c, 0x00, 0xd1, 0xdb, 0x62, 0x73, 0x15, 0xce, 0x64, 0x23, 0x1d, 0x4a, 0xff, 0x67, 0x08, 0x9c,
	0x29, 0x80, 0x27, 0x48, 0xf5, 0xbe, 0x62, 0x6b, 0x2f, 0x33, 0x2d, 0x89, 0x94, 0xff, 0x39, 0x0a,
	0xad, 0x5c, 0x67, 0xd4, 0x61, 0xa4, 0xe0, 0x3e, 0x25, 0x91, 0x72, 0x96, 0x7c, 0x81, 0xd8, 0xc9,
	0x24, 0x52, 0x64, 0xc4, 0x87, 0xcc, 0x43, 0x06, 0x97, 0x17, 0x56, 0xea, 0x54, 0x24, 0xa8, 0xf1,
	0x4b, 0x44, 0xcd, 0x21, 0xe7, 0x91, 0x63, 0x80, 0xaa, 0x0f, 0x99, 0x27, 0x2f, 0x44, 0x68, 0xb9,
	0xce, 0x46, 0x56, 0x72, 0x2d, 0xcd, 0x28, 0xb1, 0xfe, 0x57, 0x1b, 0xad, 0xad, 0xc9, 0x60, 0x0e,
	0x39, 0x01, 0x30, 0x02, 0xa4, 0x7b, 0xdf, 0xb0, 0x75, 0xf7, 0xb4, 0x94, 0xe1, 0xc6, 0x0a, 0xab,
	0x42, 0x9e, 0x69, 0x1e, 0x66, 0x69, 0x2a, 0x43, 0x2b, 0x23, 0xff, 0x6b, 0x14, 0x5c, 0x25, 0x50,
	0xd7, 0x9c, 0x20, 0xe4, 0x48, 0xef, 0x15, 0x00, 0x6f, 0x9b, 0x2d, 0xe5, 0x22, 0x7c, 0x21, 0x2d,
	0x37, 0x83, 0x6c, 0x94, 0x44, 0x5c, 0xcb, 0x50, 0xc9, 0x33, 0xe9, 0xff, 0x1c, 0x25, 0x17, 0x88,
	0x79, 0x82, 0xbc, 0x80, 0x58, 0xde, 0x7b, 0x6c, 0xce, 0xad, 0x5a, 0x2d, 0xf4, 0x0b, 0x84, 0xcf,
	0x12, 0xbd, 0xa9, 0x9e, 0xa0, 0x71, 0xa6, 0xb9, 0x88, 0xbe, 0x83, 0x53, 0x4b, 0xc3, 0x4b, 0xff,
	0x1b, 0xa7, 0x1e, 0x99, 0x07, 0x99, 0xde, 0x2d, 0x59, 0xde, 0x03, 0xb8, 0xf0, 0xa5, 0x4c, 0xae,
	0x42, 0x9e, 0xca, 0x0b, 0xcb, 0x07, 0x59, 0xee, 0xef, 0x8e, 0x49, 0x1d, 0xab, 0xf0, 0x99, 0xbc,
	0xb0, 0x4f, 0xb2, 0xdc, 0xdb, 0x65, 0xeb, 0xf9, 0x48, 0xf7, 0x45, 0x2f, 0x91, 0x5c, 0xc4, 0x56,
	0x6a, 0x0e, 0x3f, 0x25, 0x57, 0xa9, 0x95, 0xfa, 0x4c, 0x24, 0xfe, 0x43, 0x94, 0xbd, 0x55, 0x80,
	0x76, 0x01, 0x73, 0x0c, 0x90, 0xae, 0x43, 0x80, 0xb1, 0x3d, 0x9d, 0x89, 0x28, 0x14, 0xc6, 0xe2,
	0x39, 0x9c, 0x49, 0x7c, 0xa6, 0xfe, 0x1e, 0x2d, 0x5b, 0x32, 0x03, 0xe4, 0xc1, 0xe3, 0xf5, 0x1e,
	0xb0, 0xe5, 0x4a, 0x26, 0xce, 0xf4, 0xb9, 0xd0, 0x11, 0x09, 0xed, 0xa3, 0xd0, 0x62, 0xc9, 0x3d,
	0x20, 0x26, 0x4a, 0xfd, 0x82, 0xad, 0xff, 0x4a, 0xea, 0x8c, 0xf7, 0x2e, 0x39, 0xfe, 0x4f, 0x0f,
	0x5b, 0x18, 0x1e, 0xc9, 0x58, 0xc0, 0x03, 0x7f, 0x84, 0xc2, 0x3e, 0x30, 0x1f, 0x5e, 0xfe, 0xa1,
	0xd4, 0x19, 0x3e, 0xf5, 0x5d, 0xb3, 0x4f, 0x7c, 0xef, 0x0b, 0xb6, 0x5a, 0xba, 0x93, 0x39, 0x57,
	0x36, 0x1c, 0x70, 0xab, 0x55, 0xbf, 0x2f, 0xb5, 0x8c, 0xfc, 0x03, 0x14, 0x5e, 0x29, 0x00, 0x27,
	0xc8, 0x3f, 0x2d, 0xd8, 0xde, 0xc7, 0x6c, 0xd1, 0xad, 0x67, 0xad, 0x56, 0x3d, 0xf8, 0x0b, 0x0d,
	0x7e, 0x8c, 0x62, 0x1e, 0xf2, 0x76, 0x0b, 0x16, 0x9a, 0xfb, 0x09, 0x5b, 0x8a, 0x46, 0xc3, 0xe1,
	0x25, 0xd7, 0x52, 0x24, 0x35, 0x8b, 0xfd, 0x27, 0x24, 0x82, 0xcc, 0x40, 0x8a, 0xa4, 0xb4, 0xd4,
	0x7b, 0x9b, 0x4d, 0xc3, 0x95, 0x48, 0xce, 0x49, 0x77, 0x17, 0xdd, 0x1d, 0x6e, 0xc9, 0xe1, 0x39,
	0xaa, 0xfc, 0x8c, 0xad, 0x6a, 0x19, 0xf3, 0x30, 0x1b, 0xc1, 0xe9, 0xc3, 0xad, 0x73, 0x70, 0xb8,
	0x1c, 0xbf, 0x43, 0x71, 0x5d, 0xcb, 0x78, 0x8f, 0xf8, 0x47, 0xf1, 0x21, 0x48, 0xc2, 0x05, 0x79,
	0x9f, 0x79, 0x98, 0x05, 0x9a, 0x12, 0xbf, 0xa4, 0x5b, 0x0d, 0x9c, 0x1a, 0x76, 0x9d, 0xb1, 0xc4,
	0xe4, 0xc2, 0x5d, 0xcc, 0x43, 0x67, 0x83, 0xc9, 0x45, 0x19, 0x1e, 0xce, 0xa4, 0x36, 0x0a, 0x02,
	0x67, 0xec, 0x76, 0xf4, 0x74, 0xa3, 0xb5, 0xf5, 0x66, 0x30, 0xe3, 0xe8, 0x47, 0x31, 0xed, 0xe6,
	0x6b, 0xb6, 0x06, 0x71, 0x90, 0x8e, 0x2d, 0xca, 0xce, 0xd3, 0x24, 0x13, 0x11, 0xcf, 0xb5, 0xca,
	0xb4, 0xb2, 0x97, 0xfe, 0x33, 0xd4, 0xec, 0xc7, 0xaa, 0x87, 0xf0, 0x7d, 0x07, 0x38, 0x76, 0x7c,
	0xef, 0x4b, 0xb6, 0x66, 0xd5, 0x90, 0x6c, 0x06, 0x3f, 0x19, 0xe5, 0x91, 0xb0, 0xe0, 0x9a, 0x7c,
	0x68, 0x64, 0xe8, 0x1f, 0xe1, 0x9a, 0xcb, 0x00, 0x39, 0x8a, 0x0f, 0x85, 0xb1, 0xbf, 0x8b, 0xfc,
	0x6e, 0xfa, 0xd4, 0xc8, 0xd0, 0xbb, 0xcf, 0x16, 0x92, 0x6d, 0x6e, 0x46, 0x3d, 0x13, 0x6a, 0x05,
	0x11, 0x8a, 0x0c, 0x3d, 0xc6, 0xa3, 0x9f, 0x4f, 0xb6, 0x4f, 0x4a, 0x0e, 0xd9, 0xfa, 0x05, 0xbb,
	0xd5, 0xc4, 0x97, 0xd7, 0x94, 0xab, 0xc8, 0xff, 0x16, 0x4d, 0x5d, 0xae, 0x8b, 0xfd, 0xbe, 0xbb,
	0xae, 0xdd, 0xc8, 0xfb, 0x9c, 0xad, 0x36, 0x65, 0x31, 0x1d, 0x50, 0xd6, 0xf0, 0x83, 0xab, 0xa2,
	0xdd, 0xfc, 0xd8, 0x71, 0xdd, 0xb2, 0x36, 0x3f, 0xdb, 0xe1, 0x61, 0x96, 0xbd, 0x50, 0xd2, 0xa5,
	0x79, 0xde, 0x53, 0xd6, 0xf8, 0x27, 0x85, 0xec, 0x69, 0x7e, 0xb6, 0xb3, 0x87, 0x7c, 0xca, 0xf8,
	0x0f, 0x95, 0x35, 0xde, 0xb7, 0xec, 0x1d, 0x3a, 0x5a, 0xb8, 0xf0, 0xa5, 0x5f, 0x6b, 0x29, 0x42,
	0x88, 0xdd, 0xa9, 0x0c, 0xcb, 0x4b, 0x75, 0x8a, 0xbb, 0xbe, 0x83, 0xe8, 0x83, 0x4c, 0x17, 0x91,
	0x33, 0x00, 0xe8, 0xa1, 0x43, 0xc2, 0xc3, 0xdd, 0xdc, 0x62, 0x90, 0xa8, 0xb8, 0x88, 0x22, 0xcd,
	0x8d, 0xd5, 0x9e, 0xcf, 0x26, 0xe0, 0x6f, 0x69, 0x8c, 0x2b, 0x78, 0x8a, 0x9f, 0x9b, 0x7f, 0xd7,
	0xa2, 0x87, 0xeb, 0x92, 0xdc, 0x30, 0x4f, 0x0c, 0x4f, 0x44, 0x4f, 0x26, 0x10, 0x50, 0xc3, 0x17,
	0xe0, 0x25, 0x55, 0x6a, 0x40, 0x06, 0xa9, 0xe8, 0x04, 0x33, 0x45, 0x3e, 0x38, 0x44, 0xaa, 0xb7,
	0xc2, 0x26, 0x9c, 0x90, 0xff, 0xc6, 0xc6, 0x8d, 0xad, 0x4e, 0x70, 0x33, 0x39, 0x41, 0x15, 0x77,
	0x59, 0x27, 0x1b, 0x59, 0x0a, 0x45, 0xb1, 0x08, 0x8b, 0x92, 0xa9, 0x9d, 0x8d, 0x6c, 0xb7, 0xa0,
	0x81, 0xb3, 0xa6, 0x03, 0x5e, 0x18, 0x49, 0xb5, 0xd3, 0x54, 0x3a, 0xd8, 0x75, 0x66, 0xfe, 0xef,
	0x0d, 0xb6, 0x3a, 0x96, 0x8b, 0xc9, 0x56, 0xa8, 0x69, 0xbc, 0xdb, 0x6c, 0x3a, 0xc9, 0x42, 0xc8,
	0x2d, 0x10, 0xdb, 0x9c, 0x7d, 0x0c, 0x49, 0x87, 0x40, 0x01, 0x2f, 0xd2, 0x32, 0x1c, 0x69, 0x83,
	0x41, 0xed, 0x3c, 0xe2, 0xe1, 0x40, 0xa8, 0x14, 0x6b, 0xbb, 0xc9, 0x60, 0xbe, 0x64, 0x1d, 0x9c,
	0x47, 0x7b, 0xc0, 0x00, 0x4f, 0xa8, 0xf0, 0x60, 0x3c, 0x1d, 0xc9, 0x99, 0x48, 0x54, 0x84, 0xe6,
	0x4f, 0x06, 0xcb, 0x25, 0xe0, 0x68, 0x64, 0xf1, 0x08, 0x9e, 0x03, 0xb7, 0xb9, 0x94, 0x13, 0x4d,
	0x24, 0xee, 0xa8, 0x53, 0x5b, 0x8a, 0x84, 0x12, 0xe9, 0xfd, 0x84, 0x2d, 0x54, 0x07, 0xac, 0xfa,
	0x39, 0xee, 0xcd, 0xb8, 0xf2, 0x70, 0xae, 0x38, 0xe3, 0x6e, 0x3f, 0x87, 0xfc, 0x6f, 0xe0, 0x30,
	0xb5, 0x1c, 0x66, 0x56, 0xf2, 0x9e, 0x08, 0x5f, 0x8c, 0x72, 0xff, 0x26, 0x5a, 0xd3, 0x26, 0xe2,
	0x43, 0xa4, 0x79, 0xff, 0xda, 0x62, 0x4b, 0xa0, 0xaa, 0xf6, 0x20, 0xb9, 0xd0, 0x5a, 0x5c, 0xfa,
	0x13, 0x1b, 0x37, 0xb6, 0xa6, 0xb7, 0x7f, 0xd3, 0x7a, 0x4d, 0x35, 0xd4, 0xb8, 0x7b, 0x05, 0x9e,
	0xea, 0xe7, 0x78, 0x78, 0xe8, 0x2a, 0xbb, 0x60, 0xe3, 0xe6, 0x5f, 0xb5, 0xd8, 0xb2, 0x93, 0x51,
	0xb9, 0x4c, 0x43, 0x91, 0xf3, 0x41, 0xa4, 0x41, 0x9b, 0xf7, 0x1e, 0x9b, 0x57, 0x39, 0xaf, 0x68,
	0x10, 0xf1, 0x9c, 0x47, 0xcf, 0xa8, 0xfc, 0x11, 0xd0, 0x9f, 0x44, 0x1a, 0x2a, 0x61, 0x6f, 0x93,
	0x75, 0xea, 0xd0, 0x1c, 0x1f, 0x76, 0x3b, 0x98, 0xae, 0x60, 0xb9, 0xf7, 0x2e, 0x9b, 0x6b, 0xa8,
	0x8b, 0x2e, 0x53, 0x7c, 0xba, 0x9d, 0xa0, 0x53, 0xc1, 0xf6, 0x2f, 0xd3, 0xcd, 0xff, 0x79, 0x93,
	0x79, 0x63, 0x26, 0x81, 0x39, 0x1f, 0x30, 0xaf, 0x21, 0x8f, 0xf1, 0xdc, 0xb9, 0xdf, 0x6c, 0xa5,
	0x01, 0xc3, 0xb8, 0x77, 0x8f, 0xcd, 0x94, 0xe0, 0x24, 0x0b, 0x5f, 0x18, 0xb4, 0xa8, 0x13, 0xb4,
	0x1d, 0xf0, 0x10, 0x68, 0xde, 0x0e, 0x5b, 0x2e, 0x51, 0x56, 0x8b, 0xd4, 0xe4, 0x99, 0xb6, 0x70,
	0x76, 0xce, 0xb0, 0x05, 0x87, 0x3e, 0x2d, 0x78, 0xa7, 0xbd, 0x84, 0x84, 0x64, 0x0d, 0x5f, 0x76,
	0x27, 0x74, 0x91, 0x16, 0x54, 0x2e, 0x4b, 0x81, 0xe7, 0xae, 0x53, 0xf9, 0x84, 0x2d, 0x5d, 0xb3,
	0x92, 0x88, 0x9d, 0xeb, 0x79, 0xe3, 0x0b, 0xed, 0xc6, 0xe0, 0xab, 0xa5, 0x48, 0x2e, 0x2e, 0x31,
	0x0d, 0x88, 0x18, 0x5d, 0xb0, 0x13, 0xcc, 0x39, 0x81, 0x63, 0x62, 0xec, 0xc6, 0xde, 0x47, 0x6c,
	0xf1, 0x0a, 0x7c, 0x68, 0x47, 0xfe, 0x04, 0xdd, 0x85, 0x26, 0xfe, 0xa9, 0x1d, 0x41, 0x65, 0x5b,
	0x13, 0xd0, 0x32, 0xb5, 0xfe, 0x64, 0xe3, 0x71, 0x1c, 0x23, 0x71, 0x4c, 0x31, 0x90, 0xc8, 0x13,
	0xa6, 0xc6, 0x14, 0x03, 0x07, 0x9d, 0xe1, 0x1f, 0x5a, 0x4d, 0x6f, 0x30, 0x3e, 0xc3, 0x8b, 0xf0,
	0x67, 0xaf, 0xe3, 0x22, 0x8c, 0x39, 0x75, 0xdd, 0x25, 0xcd, 0xe6, 0x7f, 0x4f, 0x37, 0x9a, 0x56,
	0x0c, 0x74, 0xe0, 0x6a, 0xf4, 0xb4, 0x5c, 0x7c, 0x84, 0xc2, 0x9c, 0x22, 0x49, 0xe1, 0xfd, 0x9e,
	0xca, 0x5d, 0xa8, 0x3c, 0xcd, 0x02, 0xe2, 0x40, 0xe8, 0xa6, 0xab, 0x56, 0x43, 0x93, 0xcb, 0xcd,
	0x20, 0xbd, 0x42, 0xee, 0xb0, 0x65, 0xd7, 0x2c, 0x16, 0xb5, 0xa6, 0xb3, 0xdc, 0x85, 0xea, 0x05,
	0xe2, 0xba, 0x62, 0xf3, 0x98, 0x3a, 0xda, 0x8f, 0xd8, 0x62, 0x89, 0x1e, 0x0a, 0xf3, 0xa2, 0x68,
	0x6c, 0x5d, 0xa4, 0x4b, 0x09, 0xfc, 0x54, 0x98, 0x17, 0x94, 0xeb, 0xa0, 0x6a, 0x2b, 0x73, 0x00,
	0x17, 0xc6, 0x64, 0xa1, 0x12, 0x56, 0x46, 0xd4, 0xdb, 0xfd, 0x08, 0x17, 0x5a, 0x29, 0x01, 0xbb,
	0x25, 0x1f, 0x3b, 0xad, 0x0f, 0x99, 0x57, 0x2e, 0x56, 0x25, 0x92, 0x9b, 0x28, 0x34, 0xe7, 0x96,
	0xaa, 0x92, 0xc9, 0x06, 0x6b, 0x97, 0xe8, 0x33, 0x1d, 0xa3, 0xc3, 0xb5, 0x03, 0xe6, 0x70, 0xcf,
	0x75, 0x0c, 0xfa, 0xec, 0x28, 0x4d, 0x13, 0xc9, 0x65, 0x1a, 0xe5, 0x99, 0x4a, 0xb1, 0x3c, 0x20,
	0x67, 0x9b, 0x23, 0xce, 0x23, 0xc7, 0xe8, 0x46, 0xde, 0xdb, 0x8c, 0x25, 0xca, 0xe4, 0x3a, 0xc9,
	0x42, 0x15, 0x39, 0x2f, 0xab, 0x51, 0xbc, 0x03, 0xb6, 0x51, 0xc5, 0xf0, 0x48, 0xe6, 0x32, 0x8d,
	0x64, 0x1a, 0x2a, 0xe8, 0xa0, 0x06, 0xca, 0xd0, 0x06, 0x59, 0xb3, 0xb3, 0xdb, 0xaf, 0xa1, 0x4e,
	0x07, 0xca, 0xe0, 0x2e, 0xdf, 0x67, 0xf3, 0x3a, 0xeb, 0xa9, 0x14, 0x1a, 0x1f, 0x69, 0x21, 0xdd,
	0x8c, 0xa4, 0x3f, 0x4d, 0xe1, 0x04, 0x19, 0x01, 0xd0, 0x9f, 0x03, 0x19, 0xca, 0x75, 0xf7, 0x50,
	0x0b, 0x2f, 0xcb, 0x7a, 0xdf, 0xc9, 0xd0, 0xfa, 0x6d, 0x2a, 0xd7, 0x1d, 0x93, 0x1e, 0xd6, 0x11,
	0xb2, 0x40, 0x06, 0xcf, 0xc5, 0x09, 0xb8, 0x64, 0x94, 0xa5, 0x7e, 0x07, 0x0f, 0x68, 0x01, 0x98,
	0x24, 0x10, 0x14, 0xac, 0xf2, 0xe4, 0x9b, 0xd3, 0x8b, 0x19, 0x97, 0x9e, 0x4a, 0x01, 0xf7, 0x8c,
	0x1f, 0xb0, 0xe5, 0x6b, 0xad, 0xda, 0xf6, 0x67, 0xa9, 0x21, 0xb8, 0xc6, 0xac, 0x6d, 0x90, 0xba,
	0xd6, 0xae, 0x6d, 0x7f, 0x0e, 0x0d, 0x5b, 0xbc, 0xc6, 0xb0, 0x6d, 0xc8, 0xb4, 0x57, 0x2d, 0xdb,
	0xf6, 0xe7, 0x2b, 0xff, 0xab, 0x9b, 0xb6, 0x0d, 0x49, 0xbd, 0x36, 0x12, 0x81, 0x6e, 0x0c, 0x3b,
	0x2e, 0x0a, 0x1d, 0x1e, 0xba, 0xd2, 0x72, 0x39, 0x8f, 0xd8, 0x2d, 0xd8, 0x18, 0x3f, 0xde, 0x67,
	0xf3, 0xe1, 0x48, 0x63, 0xa0, 0xc1, 0x1b, 0x89, 0xd5, 0xd8, 0x02, 0x35, 0x7d, 0x8e, 0x01, 0x0f,
	0x10, 0x6b, 0xfb, 0xaf, 0xd8, 0xad, 0xaa, 0x00, 0x40, 0x74, 0x7d, 0xee, 0xb2, 0x48, 0xad, 0x4d,
	0x89, 0x00, 0xb1, 0xfa, 0xd8, 0xe3, 0x27, 0xd0, 0x01, 0xbb, 0x12, 0xb0, 0x34, 0xd1, 0x5f, 0xa2,
	0x42, 0xa5, 0xe0, 0x94, 0xc6, 0x79, 0x3f, 0x67, 0x6f, 0xc1, 0x66, 0x70, 0x99, 0xb4, 0xb1, 0x12,
	0x6d, 0x6b, 0x19, 0xb7, 0x05, 0xb5, 0x39, 0x2c, 0xf4, 0xac, 0xbe, 0x14, 0x6e, 0xec, 0x29, 0xbb,
	0xf7, 0x2a, 0x79, 0x6e, 0x72, 0x19, 0x2a, 0x91, 0xf8, 0x2b, 0xa8, 0xe7, 0xf6, 0xcb, 0xf4, 0x9c,
	0x10, 0x0c, 0x72, 0xdc, 0xb9, 0x54, 0xfd, 0x81, 0x85, 0x8b, 0x80, 0x6e, 0xef, 0x53, 0x8e, 0x23,
	0xea, 0x51, 0x8c, 0x6e, 0x7e, 0x87, 0xb5, 0xe1, 0x8a, 0xc9, 0x84, 0x87, 0x89, 0x30, 0xc6, 0x5f,
	0x45, 0xcc, 0x34, 0xd1, 0xf6, 0x80, 0xe4, 0xfd, 0x4d, 0x8b, 0x4d, 0x9b, 0x3c, 0x2a, 0x62, 0xa5,
	0x7f, 0x0b, 0xc3, 0xf5, 0xaf, 0x5f, 0x63, 0xb4, 0x86, 0x48, 0xcd, 0x4c, 0x1e, 0x75, 0xe9, 0xb7,
	0xf7, 0x29, 0x5b, 0x71, 0x9b, 0x50, 0xa6, 0x6c, 0x7d, 0x69, 0x3f, 0x6b, 0xe4, 0xea, 0xc4, 0xee,
	0x1a, 0xd7, 0xfa, 0xe2, 0xc6, 0x36, 0xff, 0xad, 0xc5, 0x66, 0xc7, 0xe2, 0xbb, 0xf7, 0x8f, 0x57,
	0x69, 0x7e, 0x0b, 0x37, 0xfc, 0x27, 0xad, 0xd7, 0x38, 0xec, 0xe2, 0xca, 0xca, 0x21, 0x4e, 0xbc,
	0x4e, 0x06, 0xa7, 0xbd, 0x04, 0x1e, 0xdd, 0xe6, 0x6f, 0x58, 0x63, 0xb0, 0x5b, 0xc2, 0xbc, 0x7f,
	0x6e, 0xb1, 0xe5, 0x61, 0xa6, 0xa5, 0xd3, 0xc5, 0x45, 0x0f, 0x6a, 0x5f, 0xb7, 0x95, 0xd6, 0xd6,
	0xf4, 0xf6, 0x1f, 0xbf, 0xce, 0x9d, 0xc0, 0xc3, 0x5b, 0x00, 0xf3, 0xf6, 0x91, 0xbf, 0x0b, 0xc6,
	0xa1, 0x2b, 0xfe, 0x47, 0x8b, 0xad, 0x96, 0x7d, 0x44, 0xe1, 0xf9, 0x38, 0x78, 0x01, 0xcb, 0xdf,
	0x40, 0xcb, 0xff, 0xe2, 0xb5, 0x3e, 0x84, 0xd2, 0xba, 0x60, 0x19, 0xfe, 0xac, 0x5d, 0xbc, 0x83,
	0x4c, 0xe3, 0x1e, 0x3e, 0x61, 0x8b, 0xc5, 0xf0, 0xb1, 0x11, 0x6a, 0x6e, 0x50, 0x50, 0x2f, 0x78,
	0xf5, 0x28, 0x83, 0x73, 0x1b, 0x25, 0xe3, 0x2a, 0x97, 0xf2, 0x81, 0x48, 0xa3, 0xa4, 0x28, 0x18,
	0x17, 0x91, 0x5b, 0x26, 0xd4, 0x27, 0xc8, 0x83, 0x1a, 0x84, 0xa4, 0xc6, 0xab, 0x04, 0x4a, 0xde,
	0x1e, 0x32, 0xaf, 0x14, 0x09, 0x67, 0x4a, 0xf0, 0x2b, 0x75, 0x08, 0x95, 0x8c, 0xf3, 0x67, 0x4a,
	0x1c, 0x36, 0x4b, 0x91, 0xfb, 0x6c, 0x81, 0xd6, 0xc8, 0x71, 0x46, 0x5f, 0x34, 0x84, 0x13, 0xb8,
	0xc2, 0x3c, 0xb2, 0x8e, 0x81, 0xe3, 0xaa, 0x9d, 0x0a, 0xff, 0x7d, 0x03, 0x3f, 0x59, 0xc3, 0x7f,
	0x5b, 0xc7, 0x63, 0xff, 0x64, 0xb2, 0xe4, 0xac, 0x28, 0x3c, 0xa6, 0x8a, 0xfe, 0x89, 0x88, 0x78,
	0xa2, 0x3f, 0x66, 0x33, 0xcd, 0x10, 0x8e, 0xd9, 0x7b, 0x32, 0xe8, 0x34, 0xc2, 0x76, 0x35, 0x3d,
	0x34, 0xb0, 0x2f, 0xa9, 0x4a, 0x9d, 0xd3, 0xf5, 0xe9, 0xa1, 0x09, 0x1c, 0x0f, 0x65, 0xee, 0xb2,
	0x8e, 0xb0, 0x56, 0x84, 0x83, 0x02, 0x4b, 0xe9, 0xba, 0x5d, 0x10, 0x11, 0x74, 0x9b, 0x4d, 0x53,
	0x77, 0x47, 0x90, 0x0e, 0x42, 0x18, 0x91, 0x8a, 0x72, 0xa8, 0x27, 0x8d, 0xad, 0xa6, 0x05, 0x88,
	0x9b, 0xa1, 0x39, 0x29, 0x70, 0x8a, 0xd1, 0x40, 0xb1, 0x1d, 0x70, 0x45, 0x9c, 0x81, 0xf4, 0xd3,
	0x4c, 0x4b, 0x97, 0x8c, 0x3b, 0x8e, 0xda, 0x45, 0xa2, 0xb7, 0xca, 0x26, 0xe9, 0xb2, 0x24, 0x3d,
	0xcc, 0xbb, 0x93, 0xc1, 0x04, 0xfc, 0xde, 0x4f, 0x7a, 0xd0, 0x9d, 0x97, 0x79, 0xcf, 0xb8, 0x0c,
	0x3b, 0x95, 0xbb, 0x8c, 0x67, 0xca, 0x89, 0x34, 0x78, 0x9f, 0xc3, 0x78, 0xd5, 0x44, 0x1a, 0x1c,
	0x8f, 0x70, 0x85, 0x1a, 0x95, 0x46, 0xf2, 0x02, 0xf3, 0xa7, 0x53, 0xd3, 0x05, 0x02, 0xe4, 0x05,
	0xb7, 0x6d, 0x02, 0x2c, 0x52, 0x5e, 0x20, 0x1a, 0x41, 0xee, 0xb1, 0x99, 0x5a, 0x1d, 0x08, 0xa0,
	0x25, 0x4a, 0x30, 0x65, 0x0d, 0x08, 0xa8, 0x9f, 0xb2, 0x15, 0xd7, 0x16, 0x5c, 0xf1, 0x6f, 0x4a,
	0x88, 0x4b, 0xc4, 0x1e, 0x77, 0x70, 0xa8, 0xbf, 0x8a, 0xfa, 0x82, 0xa3, 0xdf, 0xca, 0x14, 0x53,
	0x1f, 0xd4, 0x5f, 0x05, 0xe3, 0xb9, 0x12, 0x87, 0x32, 0xdd, 0xfc, 0xeb, 0x29, 0xb6, 0x52, 0xbb,
	0xab, 0xd0, 0xc2, 0xe0, 0xf6, 0x55, 0x6a, 0x61, 0x23, 0x89, 0x3c, 0x93, 0x09, 0xcf, 0xe2, 0x24,
	0x52, 0xc5, 0xc0, 0x64, 0x1a, 0x69, 0x47, 0x48, 0xc2, 0x8d, 0x54, 0x73, 0x15, 0x00, 0xb9, 0x6e,
	0xb0, 0x9c, 0xaa, 0x00, 0xea, 0x63, 0xb6, 0x38, 0x14, 0x17, 0x6a, 0x38, 0x1a, 0xd2, 0x6e, 0xa9,
	0x8b, 0x37, 0xae, 0x17, 0xf4, 0x1c, 0x0f, 0x37, 0x8d, 0xbd, 0xb3, 0x81, 0xa5, 0x8b, 0x23, 0x56,
	0xa1, 0xa4, 0x49, 0x4a, 0x3b, 0x98, 0x76, 0x87, 0x0c, 0xa4, 0xea, 0xbd, 0x40, 0xa4, 0x38, 0xad,
	0x46, 0xe3, 0x86, 0xb6, 0x7b, 0x2f, 0x10, 0xa9, 0x67, 0x44, 0x05, 0x3f, 0x34, 0x22, 0x55, 0xf6,
	0x92, 0x0a, 0x9e, 0x9b, 0x1b, 0x37, 0xc0, 0x0f, 0x89, 0x84, 0xb5, 0xce, 0xdf, 0xb7, 0xd8, 0x7c,
	0x55, 0x48, 0x55, 0x97, 0x15, 0x72, 0xd7, 0xc5, 0x6f, 0x3b, 0x6a, 0x16, 0xd3, 0xae, 0x60, 0xae,
	0x34, 0xa9, 0xb8, 0xf5, 0xef, 0xb1, 0xb9, 0x2b, 0x9e, 0x30, 0xb9, 0x71, 0x63, 0x6b, 0x2a, 0x98,
	0x55, 0x63, 0x3e, 0x70, 0x97, 0x75, 0x8a, 0x23, 0x37, 0x49, 0x66, 0x8d, 0x2b, 0xf7, 0xdb, 0x8e,
	0x78, 0x02, 0x34, 0x38, 0x42, 0xaa, 0x68, 0x4c, 0x51, 0xe8, 0x50, 0x47, 0xd9, 0x09, 0x5c, 0xfd,
	0x63, 0xa8, 0xd4, 0x31, 0x50, 0xcf, 0xa5, 0x10, 0x76, 0x13, 0xf5, 0x2b, 0x19, 0x71, 0xc7, 0xc4,
	0x00, 0xd1, 0x0e, 0xe6, 0x2b, 0xce, 0xef, 0x11, 0xa3, 0xe8, 0x4b, 0x8a, 0xd2, 0xc8, 0xb5, 0x00,
	0x6d, 0x7a, 0xa5, 0x54, 0x2b, 0x90, 0xa8, 0x07, 0xf8, 0x80, 0x79, 0xd0, 0x5e, 0xf4, 0x2c, 0x65,
	0x08, 0x37, 0x9f, 0xa2, 0x70, 0x31, 0xab, 0xcc, 0x71, 0xcf, 0x62, 0xbe, 0xa0, 0xc1, 0xd4, 0xfb,
	0x6c, 0x1e, 0x91, 0xa4, 0x38, 0x8b, 0x63, 0x23, 0x2d, 0x86, 0x8c, 0x76, 0x30, 0x0b, 0x0c, 0xd4,
	0x7b, 0x84, 0x64, 0x08, 0xdb, 0x35, 0x6c, 0x3a, 0x1a, 0xba, 0x3d, 0xce, 0x92, 0xdd, 0x25, 0xfc,
	0xd9, 0x68, 0x48, 0xdb, 0xfc, 0x86, 0xad, 0xd7, 0x04, 0xa0, 0x22, 0x12, 0x49, 0x02, 0x17, 0x97,
	0x0f, 0x45, 0x9e, 0xcb, 0xc8, 0x9f, 0x43, 0xdf, 0x59, 0x2d, 0x25, 0xbb, 0xe6, 0xc0, 0x21, 0x9e,
	0x22, 0xc0, 0xfb, 0x92, 0xdd, 0x42, 0x0d, 0x63, 0x82, 0xae, 0xa4, 0x9a, 0xc7, 0x85, 0x57, 0x00,
	0xd1, 0x94, 0xa3, 0x72, 0xf1, 0x13, 0xb6, 0xd4, 0x14, 0xb6, 0x19, 0x8f, 0x74, 0x96, 0xfb, 0x1e,
	0x2e, 0xeb, 0xd5, 0xe5, 0x4e, 0xb3, 0x7d, 0x9d, 0xe5, 0x38, 0xa7, 0xcb, 0x46, 0x69, 0xc4, 0xa9,
	0xe3, 0x8a, 0x94, 0xc1, 0x39, 0xdd, 0x82, 0x1b, 0x09, 0x02, 0x2b, 0x00, 0xce, 0x3e, 0x31, 0xe0,
	0x48, 0xf0, 0xc2, 0x14, 0xd1, 0xa7, 0x37, 0xc2, 0xe0, 0xee, 0x82, 0xd4, 0x7c, 0x12, 0x29, 0x97,
	0xf9, 0x1e, 0x12, 0xc3, 0x7b, 0xc8, 0xd6, 0xaf, 0xbc, 0x1c, 0x6c, 0xe4, 0xe7, 0x25, 0xdc, 0xd3,
	0xda, 0xf8, 0x8b, 0xc2, 0x7a, 0x9e, 0x7e, 0x45, 0x91, 0xb9, 0x8c, 0x3b, 0xbb, 0xbe, 0xc8, 0xfc,
	0xcb, 0x89, 0xeb, 0x63, 0x53, 0x24, 0xad, 0xf7, 0x98, 0x6d, 0x14, 0x49, 0xcb, 0x0e, 0x74, 0x36,
	0xea, 0x0f, 0x90, 0xdf, 0xb0, 0xac, 0x85, 0x23, 0xf9, 0x75, 0x87, 0x3b, 0x25, 0xd8, 0x61, 0x26,
	0xa2, 0xba, 0x6d, 0x7b, 0xec, 0xed, 0xde, 0xa5, 0x95, 0xaf, 0x50, 0xf3, 0x06, 0xaa, 0x59, 0x43,
	0xd4, 0x4b, 0x94, 0x04, 0xec, 0x1d, 0x9b, 0x59, 0x4c, 0x60, 0x3f, 0x60, 0xd3, 0x0d, 0x54, 0xb6,
	0x89, 0xe8, 0xe3, 0x57, 0x1a, 0xf6, 0x8c, 0xdd, 0x23, 0x9d, 0x3f, 0x60, 0xde, 0x9b, 0xa8, 0x71,
	0x03, 0xb1, 0x0f, 0x5f, 0x61, 0x23, 0x64, 0x37, 0xd7, 0xcb, 0xc6, 0x3c, 0x3b, 0x4f, 0xa5, 0x76,
	0x23, 0x32, 0xf7, 0x46, 0xff, 0x28, 0x3e, 0x02, 0x22, 0x78, 0x48, 0x6d, 0x0e, 0x52, 0x81, 0x5d,
	0xad, 0x33, 0x2c, 0x27, 0x21, 0x85, 0xc0, 0x63, 0xb6, 0x31, 0x6e, 0x14, 0xbd, 0x7d, 0x95, 0x69,
	0x28, 0xdd, 0x30, 0x91, 0x66, 0x65, 0xeb, 0x49, 0xd3, 0xa6, 0xa0, 0x40, 0xd1, 0x68, 0xf1, 0x0b,
	0x76, 0x2b, 0x97, 0x9a, 0x47, 0x50, 0x12, 0xa0, 0x46, 0x33, 0x10, 0x5a, 0xa5, 0x7d, 0x0a, 0xdb,
	0x93, 0x34, 0xaf, 0xce, 0xa5, 0xde, 0x97, 0xc6, 0xc2, 0xee, 0x4e, 0x88, 0x8d, 0x21, 0xfc, 0x90,
	0xdd, 0xbd, 0x62, 0x04, 0xda, 0xcd, 0x23, 0x99, 0x48, 0x2b, 0xdd, 0xab, 0x07, 0x2a, 0x93, 0x6e,
	0x8f, 0xd9, 0x81, 0xfb, 0xd8, 0x27, 0x1c, 0x6a, 0xfb, 0x98, 0x2d, 0x96, 0xde, 0x56, 0x4f, 0x1d,
	0x54, 0x3f, 0x79, 0x05, 0xef, 0xa4, 0x4a, 0x21, 0xab, 0x6c, 0x52, 0x19, 0x77, 0x52, 0x54, 0x37,
	0x4d, 0x28, 0x43, 0xe7, 0xf3, 0x5f, 0x2d, 0xb6, 0x5e, 0xb3, 0x0d, 0x4d, 0xc3, 0x70, 0x0d, 0x15,
	0x4f, 0x24, 0xac, 0xc0, 0xc0, 0x38, 0xbd, 0xfd, 0xe7, 0xaf, 0xab, 0x40, 0xaf, 0x27, 0xfd, 0xe0,
	0x56, 0x75, 0x36, 0x60, 0x69, 0xd7, 0x19, 0xba, 0x2f, 0xac, 0xd8, 0xfc, 0xd3, 0xf9, 0x72, 0x7e,
	0x5c, 0xfb, 0xfc, 0x01, 0x42, 0x72, 0xf5, 0x89, 0x83, 0x7b, 0xe9, 0x56, 0x8c, 0x8f, 0x8b, 0x0f,
	0x0d, 0x9e, 0x13, 0x19, 0x8b, 0x4d, 0xa9, 0x0b, 0x5b, 0x44, 0x88, 0xee, 0xa1, 0xd2, 0xbe, 0xab,
	0x1b, 0x16, 0x72, 0xa9, 0xa9, 0xe6, 0xde, 0x2d, 0x59, 0xa0, 0xbf, 0xe1, 0x0e, 0x38, 0x12, 0xa0,
	0x91, 0xde, 0x6c, 0x52, 0xf9, 0x01, 0x4e, 0x02, 0x3e, 0x63, 0x7e, 0x65, 0xcb, 0xd8, 0x70, 0x84,
	0x9a, 0x82, 0xa5, 0xc2, 0xa4, 0x2b, 0xb3, 0x11, 0x1c, 0x21, 0xd4, 0xbf, 0x52, 0x71, 0x17, 0x04,
	0x36, 0x71, 0x5c, 0xfb, 0x3c, 0x05, 0xe2, 0xb4, 0x88, 0x15, 0xbf, 0x8a, 0xa7, 0x3b, 0xe2, 0x89,
	0x58, 0x1d, 0x8c, 0x89, 0xdc, 0x63, 0x33, 0x42, 0xf5, 0x78, 0xb2, 0xd3, 0xe8, 0x05, 0xda, 0x41,
	0x5b, 0xa8, 0xde, 0xe1, 0x4e, 0x91, 0xe0, 0x7f, 0xc6, 0xfc, 0x2b, 0x75, 0x48, 0x31, 0xab, 0xa2,
	0xa9, 0xde, 0xf2, 0x78, 0x51, 0xe0, 0x26, 0x56, 0x1f, 0xb1, 0x85, 0x4a, 0xb2, 0x1a, 0x2d, 0x4e,
	0x39, 0x83, 0x0a, 0x56, 0x35, 0x5c, 0xdc, 0x67, 0xb7, 0xf1, 0x51, 0xd2, 0xc8, 0xe3, 0xda, 0xa9,
	0x0b, 0xcd, 0xfa, 0xd6, 0xa0, 0x73, 0x26, 0xd4, 0xd5, 0xc1, 0x8b, 0x7b, 0xa7, 0x3a, 0x7e, 0xdc,
	0xc5, 0x1e, 0xa9, 0x40, 0xf0, 0xaf, 0x9c, 0x78, 0xb1, 0xdf, 0x5d, 0xb6, 0x7e, 0x9d, 0x78, 0x65,
	0x7f, 0x1b, 0x4d, 0xb8, 0x75, 0x45, 0x41, 0xb5, 0x8f, 0xcf, 0xd9, 0xea, 0x78, 0xd0, 0xad, 0xbe,
	0x2d, 0xea, 0xd0, 0x4b, 0xd9, 0x66, 0x06, 0x28, 0xbf, 0x2e, 0xfa, 0x94, 0xad, 0x34, 0x63, 0x6b,
	0x25, 0x38, 0x83, 0x82, 0x8b, 0xf5, 0x98, 0x5f, 0x8a, 0x3d, 0x28, 0xc6, 0xcc, 0xd0, 0xfb, 0x34,
	0xc6, 0x89, 0xb3, 0xf4, 0xca, 0xbb, 0xe0, 0x36, 0x46, 0x8a, 0xef, 0x96, 0xe1, 0xb7, 0x7c, 0x17,
	0x3b, 0xe7, 0xbe, 0x62, 0x41, 0x72, 0xf9, 0x0e, 0x76, 0x07, 0xbf, 0xb6, 0x08, 0x65, 0x84, 0xe1,
	0x33, 0xce, 0xb4, 0xb3, 0xde, 0xf5, 0x2b, 0x8b, 0x15, 0xf3, 0xa0, 0xe4, 0xc1, 0x29, 0x58, 0x2d,
	0xe2, 0x58, 0x85, 0xae, 0xc2, 0xa6, 0xe6, 0x9f, 0x04, 0xa9, 0x89, 0x59, 0x76, 0x00, 0x2c, 0xb3,
	0xb1, 0xe9, 0x26, 0xd1, 0x8f, 0xd9, 0xa2, 0xfb, 0xf8, 0x20, 0xcc, 0x86, 0x79, 0x96, 0x5a, 0x49,
	0x53, 0x64, 0xea, 0x6b, 0x3c, 0xe2, 0xed, 0x95, 0xac, 0x2e, 0xbe, 0x1b, 0x8c, 0x85, 0xb1, 0xb5,
	0x07, 0x86, 0xc1, 0x91, 0x66, 0x82, 0xf3, 0xc0, 0x2a, 0x9f, 0x13, 0xc6, 0xc6, 0xaf, 0xd9, 0x9a,
	0x4a, 0x12, 0xd9, 0x17, 0x09, 0xbf, 0x4e, 0x8e, 0xa6, 0x82, 0xbe, 0x83, 0x1c, 0x5c, 0x11, 0xc7,
	0x11, 0x31, 0xbe, 0x2b, 0x1c, 0x13, 0x5c, 0x2e, 0x46, 0xc4, 0xc0, 0x6c, 0xca, 0xfc, 0x4b, 0x8b,
	0x2d, 0x41, 0x68, 0x80, 0x90, 0xd1, 0x2c, 0x57, 0x56, 0xfe, 0x9f, 0xc4, 0xda, 0x48, 0xda, 0x60,
	0xb1, 0x34, 0xb1, 0x9e, 0xa8, 0xb7, 0xd8, 0x5c, 0xaf, 0x9f, 0xd7, 0x3e, 0xec, 0x50, 0x91, 0x9b,
	0x3f, 0xce, 0xf4, 0xfa, 0x79, 0xf9, 0x51, 0x47, 0x37, 0xf2, 0x76, 0xd8, 0x32, 0x20, 0xe9, 0xa5,
	0x71, 0x03, 0x4f, 0xb3, 0xc8, 0x85, 0x5e, 0x3f, 0x3f, 0x04, 0x66, 0x5d, 0x08, 0xbc, 0xbe, 0xa1,
	0x3e, 0xd3, 0xaa, 0xaf, 0x52, 0x2e, 0x8c, 0x7f, 0x8b, 0x3c, 0xac, 0xbe, 0xca, 0x11, 0x32, 0x77,
	0x21, 0x34, 0xad, 0x36, 0xc5, 0xca, 0x12, 0x52, 0xd0, 0xa8, 0xb0, 0x13, 0x2c, 0xd5, 0x05, 0x5d,
	0x19, 0xb9, 0x8b, 0xed, 0x17, 0x36, 0x6a, 0xc6, 0x42, 0x94, 0xf6, 0xdf, 0xa2, 0xb7, 0x18, 0x40,
	0x3a, 0x41, 0x0a, 0xf4, 0x2a, 0xf2, 0xc2, 0x86, 0xd9, 0xb0, 0x80, 0xac, 0x53, 0x68, 0x24, 0xa2,
	0x03, 0xad, 0x33, 0x56, 0x43, 0xbc, 0x8d, 0x88, 0xa9, 0x8a, 0xed, 0x06, 0xce, 0x69, 0x04, 0xb5,
	0x76, 0x36, 0x1c, 0x8e, 0x20, 0x33, 0xfb, 0xb7, 0xa9, 0x66, 0x29, 0x38, 0x7b, 0x05, 0xc3, 0x5b,
	0x63, 0x53, 0xdf, 0x67, 0x86, 0xf7, 0x75, 0x36, 0xca, 0xfd, 0x0d, 0xfa, 0xd8, 0xeb, 0xfb, 0xcc,
	0x3c, 0x86, 0xdf, 0x90, 0xcb, 0x71, 0x5c, 0x15, 0xcb, 0xd0, 0xbf, 0x83, 0xbc, 0x09, 0xf8, 0x7d,
	0x20, 0x43, 0xef, 0x11, 0xdb, 0xf8, 0x3e, 0xcf, 0x7b, 0xbc, 0x14, 0xe6, 0x22, 0x8d, 0xe8, 0x03,
	0x8b, 0xe2, 0x56, 0xfa, 0x9b, 0x14, 0x36, 0x01, 0xf7, 0xad, 0x53, 0xb9, 0x9b, 0x46, 0xdd, 0xfc,
	0xb8, 0x84, 0xc0, 0x0a, 0x71, 0x92, 0x9d, 0x73, 0x2b, 0xfa, 0xfe, 0x5d, 0x5a, 0x01, 0x7e, 0x9f,
	0x0a, 0x3c, 0x8c, 0x66, 0x85, 0x7c, 0x8f, 0x1a, 0xb7, 0xb8, 0x56, 0x19, 0x7b, 0xdf, 0xb0, 0xb7,
	0xf3, 0x84, 0xbf, 0xea, 0x73, 0x94, 0x1f, 0x63, 0x00, 0xf3, 0xf3, 0xe4, 0xf4, 0xfa, 0x0f, 0x52,
	0x1e, 0xb2, 0xdb, 0xd0, 0x07, 0xbc, 0x4a, 0xc5, 0x3b, 0xa8, 0x62, 0x35, 0x89, 0xd4, 0x4b, 0x74,
	0x1c, 0xb0, 0x3b, 0xc9, 0xf9, 0x0f, 0x69, 0x79, 0x97, 0xaa, 0x67, 0x04, 0xbe, 0x44, 0xcf, 0x07,
	0xcc, 0x2b, 0x76, 0x63, 0xac, 0x18, 0xe6, 0x94, 0x7d, 0xb6, 0x28, 0xf7, 0xd2, 0x0e, 0x4e, 0x80,
	0x0e, 0x19, 0xa7, 0x77, 0x13, 0x6f, 0xe0, 0xce, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x91,
	0x82, 0xbb, 0x99, 0x2b, 0x00, 0x00,
}
