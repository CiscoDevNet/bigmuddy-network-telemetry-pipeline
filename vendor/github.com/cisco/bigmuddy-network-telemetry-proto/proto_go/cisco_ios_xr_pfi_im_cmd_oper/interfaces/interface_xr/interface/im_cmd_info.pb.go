// Code generated by protoc-gen-go. DO NOT EDIT.
// source: im_cmd_info.proto

/*
Package cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface is a generated protocol buffer package.

It is generated from these files:
	im_cmd_info.proto

It has these top-level messages:
	ImCmdInfo_KEYS
	ImCmdInfo
	IfstatsbagGeneric
	IfstatsbagBasic
	StatsdbagDatarate
	IfstatsSrpPerSideErrorsSt
	IfstatsSrpPerSideDataRateSt
	IfstatsbagSrp
	StatsBagIdTd
	StatsBagBlockSt
	StatsBagElementSt
	StatsData
	PppShowIntNcpInfo
	PppShowIntInfo
	BmMbrStateReasonDataType
	BmMacAddrSt
	BmMuxData
	BmLacpCounters
	BmLacpLinkData
	BmMemberData
	VlanDoubleTagStack
	EfpRange
	EfpTagMatch
	EfpVlanTag
	EfpTagLocalTrafficStack
	MacAddressType
	EfpDescription
	EfpDescriptionPType
	VlanTagStackType
	VlanIntfGeneric
	SrpTopologyNodeData
	SrpTopologyMap
	SrpTopologyInfo
	SrpFailureInfo
	SrpIpsSideDetail
	SrpIpsDetail
	SrpIpsInfo
	SrrNodeData
	SrpSrrDetail
	SrpSrrInfo
	SrpRateLimitDetail
	SrpRateLimitInfo
	SrpAllInfo
	TunlPfiIn6AddrT
	PfiIpAddrUnion
	ImCmdTunlGreInfo
	SerialInterface
	ImSonetPosInfoInterface
	PwheEtherInterfaceInfo
	CemInterface
	NvOpticalInterfaceInfo
	ImCmdGccPerPortInfo
	ImCmdDampSt
	ImCmdArpInfoSt
	ImCmdIpInfoSt
	ImCmdMacAddrSt
	ImCmdIfStats
	ImCmdCarrierDelaySt
	ImCmdFrInfo
	ImCmdEncapsInfo
	ImCmdSrpInfo
	ImCmdTunnelInfo
	ImCmdBundleInfo
	ImCmdIntfTypeInfo
*/
package cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Full interface information
type ImCmdInfo_KEYS struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *ImCmdInfo_KEYS) Reset()                    { *m = ImCmdInfo_KEYS{} }
func (m *ImCmdInfo_KEYS) String() string            { return proto.CompactTextString(m) }
func (*ImCmdInfo_KEYS) ProtoMessage()               {}
func (*ImCmdInfo_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ImCmdInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type ImCmdInfo struct {
	// Interface
	InterfaceHandle string `protobuf:"bytes,50,opt,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// Interface type
	InterfaceType string `protobuf:"bytes,51,opt,name=interface_type,json=interfaceType" json:"interface_type,omitempty"`
	// Hardware type description string
	HardwareTypeString string `protobuf:"bytes,52,opt,name=hardware_type_string,json=hardwareTypeString" json:"hardware_type_string,omitempty"`
	// Interface state
	State string `protobuf:"bytes,53,opt,name=state" json:"state,omitempty"`
	// Line protocol state
	LineState string `protobuf:"bytes,54,opt,name=line_state,json=lineState" json:"line_state,omitempty"`
	// Interface encapsulation
	Encapsulation string `protobuf:"bytes,55,opt,name=encapsulation" json:"encapsulation,omitempty"`
	// Interface encapsulation description string
	EncapsulationTypeString string `protobuf:"bytes,56,opt,name=encapsulation_type_string,json=encapsulationTypeString" json:"encapsulation_type_string,omitempty"`
	// MTU in bytes
	Mtu uint32 `protobuf:"varint,57,opt,name=mtu" json:"mtu,omitempty"`
	// L2 transport flag
	IsL2TransportEnabled bool `protobuf:"varint,58,opt,name=is_l2_transport_enabled,json=isL2TransportEnabled" json:"is_l2_transport_enabled,omitempty"`
	// The number of times the state has changed
	StateTransitionCount uint32 `protobuf:"varint,59,opt,name=state_transition_count,json=stateTransitionCount" json:"state_transition_count,omitempty"`
	// The time elasped after the last state transition
	LastStateTransitionTime uint32 `protobuf:"varint,60,opt,name=last_state_transition_time,json=lastStateTransitionTime" json:"last_state_transition_time,omitempty"`
	// Dampening enabled flag
	IsDampeningEnabled bool `protobuf:"varint,61,opt,name=is_dampening_enabled,json=isDampeningEnabled" json:"is_dampening_enabled,omitempty"`
	// State dampening information
	DampeningInformation *ImCmdDampSt `protobuf:"bytes,62,opt,name=dampening_information,json=dampeningInformation" json:"dampening_information,omitempty"`
	// Interface speed (Kb/s)
	Speed uint32 `protobuf:"varint,63,opt,name=speed" json:"speed,omitempty"`
	// Cyclic Redundancy Check length
	CrcLength uint32 `protobuf:"varint,64,opt,name=crc_length,json=crcLength" json:"crc_length,omitempty"`
	// Interface scramble config
	IsScrambleEnabled bool `protobuf:"varint,65,opt,name=is_scramble_enabled,json=isScrambleEnabled" json:"is_scramble_enabled,omitempty"`
	// Interface duplexity
	Duplexity string `protobuf:"bytes,66,opt,name=duplexity" json:"duplexity,omitempty"`
	// Interface media type
	MediaType string `protobuf:"bytes,67,opt,name=media_type,json=mediaType" json:"media_type,omitempty"`
	// Interface link type
	LinkType string `protobuf:"bytes,68,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// Input flow control configuration
	InFlowControl string `protobuf:"bytes,69,opt,name=in_flow_control,json=inFlowControl" json:"in_flow_control,omitempty"`
	// Output flow control configuration
	OutFlowControl string `protobuf:"bytes,70,opt,name=out_flow_control,json=outFlowControl" json:"out_flow_control,omitempty"`
	// Interface MAC address
	MacAddress *ImCmdMacAddrSt `protobuf:"bytes,71,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Interface burned in address
	BurnedInAddress *ImCmdMacAddrSt `protobuf:"bytes,72,opt,name=burned_in_address,json=burnedInAddress" json:"burned_in_address,omitempty"`
	// Carrier Delay
	CarrierDelay *ImCmdCarrierDelaySt `protobuf:"bytes,73,opt,name=carrier_delay,json=carrierDelay" json:"carrier_delay,omitempty"`
	// Interface bandwidth (Kb/s)
	Bandwidth uint32 `protobuf:"varint,74,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Maximum Interface bandwidth (Kb/s)
	MaxBandwidth uint32 `protobuf:"varint,75,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	// Interface keepalive time (s)
	Keepalive uint32 `protobuf:"varint,76,opt,name=keepalive" json:"keepalive,omitempty"`
	// Loopback detected by layer 2
	IsL2Looped bool `protobuf:"varint,77,opt,name=is_l2_looped,json=isL2Looped" json:"is_l2_looped,omitempty"`
	// Parent interface
	ParentInterfaceName string `protobuf:"bytes,78,opt,name=parent_interface_name,json=parentInterfaceName" json:"parent_interface_name,omitempty"`
	// Interface loopback configuration
	LoopbackConfiguration string `protobuf:"bytes,79,opt,name=loopback_configuration,json=loopbackConfiguration" json:"loopback_configuration,omitempty"`
	// Interface description string
	Description string `protobuf:"bytes,80,opt,name=description" json:"description,omitempty"`
	// Interface ARP type and timeout
	ArpInformation *ImCmdArpInfoSt `protobuf:"bytes,81,opt,name=arp_information,json=arpInformation" json:"arp_information,omitempty"`
	// Interface IP address info
	IpInformation *ImCmdIpInfoSt `protobuf:"bytes,82,opt,name=ip_information,json=ipInformation" json:"ip_information,omitempty"`
	// Maintenance embargo flag
	IsMaintenanceEnabled bool `protobuf:"varint,83,opt,name=is_maintenance_enabled,json=isMaintenanceEnabled" json:"is_maintenance_enabled,omitempty"`
	// Data invert flag
	IsDataInverted bool `protobuf:"varint,84,opt,name=is_data_inverted,json=isDataInverted" json:"is_data_inverted,omitempty"`
	// Interface transport mode
	TransportMode string `protobuf:"bytes,85,opt,name=transport_mode,json=transportMode" json:"transport_mode,omitempty"`
	// Information specific to the encapsulation
	EncapsulationInformation *ImCmdEncapsInfo `protobuf:"bytes,86,opt,name=encapsulation_information,json=encapsulationInformation" json:"encapsulation_information,omitempty"`
	// Information specific to the interface type
	InterfaceTypeInformation *ImCmdIntfTypeInfo `protobuf:"bytes,87,opt,name=interface_type_information,json=interfaceTypeInformation" json:"interface_type_information,omitempty"`
	// Packet and byte rates
	DataRates *StatsdbagDatarate `protobuf:"bytes,88,opt,name=data_rates,json=dataRates" json:"data_rates,omitempty"`
	// Packet, byte and error counters
	InterfaceStatistics *ImCmdIfStats `protobuf:"bytes,89,opt,name=interface_statistics,json=interfaceStatistics" json:"interface_statistics,omitempty"`
	// L2 Protocol Statistics
	L2InterfaceStatistics *StatsData `protobuf:"bytes,90,opt,name=l2_interface_statistics,json=l2InterfaceStatistics" json:"l2_interface_statistics,omitempty"`
	// nV Optical Controller Information
	NvOptical *NvOpticalInterfaceInfo `protobuf:"bytes,91,opt,name=nv_optical,json=nvOptical" json:"nv_optical,omitempty"`
	// This is not supposed to be used. It is a dummy attribute to support ifindex for OC model
	IfIndex uint32 `protobuf:"varint,92,opt,name=if_index,json=ifIndex" json:"if_index,omitempty"`
}

func (m *ImCmdInfo) Reset()                    { *m = ImCmdInfo{} }
func (m *ImCmdInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdInfo) ProtoMessage()               {}
func (*ImCmdInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ImCmdInfo) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *ImCmdInfo) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *ImCmdInfo) GetHardwareTypeString() string {
	if m != nil {
		return m.HardwareTypeString
	}
	return ""
}

func (m *ImCmdInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ImCmdInfo) GetLineState() string {
	if m != nil {
		return m.LineState
	}
	return ""
}

func (m *ImCmdInfo) GetEncapsulation() string {
	if m != nil {
		return m.Encapsulation
	}
	return ""
}

func (m *ImCmdInfo) GetEncapsulationTypeString() string {
	if m != nil {
		return m.EncapsulationTypeString
	}
	return ""
}

func (m *ImCmdInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *ImCmdInfo) GetIsL2TransportEnabled() bool {
	if m != nil {
		return m.IsL2TransportEnabled
	}
	return false
}

func (m *ImCmdInfo) GetStateTransitionCount() uint32 {
	if m != nil {
		return m.StateTransitionCount
	}
	return 0
}

func (m *ImCmdInfo) GetLastStateTransitionTime() uint32 {
	if m != nil {
		return m.LastStateTransitionTime
	}
	return 0
}

func (m *ImCmdInfo) GetIsDampeningEnabled() bool {
	if m != nil {
		return m.IsDampeningEnabled
	}
	return false
}

func (m *ImCmdInfo) GetDampeningInformation() *ImCmdDampSt {
	if m != nil {
		return m.DampeningInformation
	}
	return nil
}

func (m *ImCmdInfo) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *ImCmdInfo) GetCrcLength() uint32 {
	if m != nil {
		return m.CrcLength
	}
	return 0
}

func (m *ImCmdInfo) GetIsScrambleEnabled() bool {
	if m != nil {
		return m.IsScrambleEnabled
	}
	return false
}

func (m *ImCmdInfo) GetDuplexity() string {
	if m != nil {
		return m.Duplexity
	}
	return ""
}

func (m *ImCmdInfo) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *ImCmdInfo) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *ImCmdInfo) GetInFlowControl() string {
	if m != nil {
		return m.InFlowControl
	}
	return ""
}

func (m *ImCmdInfo) GetOutFlowControl() string {
	if m != nil {
		return m.OutFlowControl
	}
	return ""
}

func (m *ImCmdInfo) GetMacAddress() *ImCmdMacAddrSt {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *ImCmdInfo) GetBurnedInAddress() *ImCmdMacAddrSt {
	if m != nil {
		return m.BurnedInAddress
	}
	return nil
}

func (m *ImCmdInfo) GetCarrierDelay() *ImCmdCarrierDelaySt {
	if m != nil {
		return m.CarrierDelay
	}
	return nil
}

func (m *ImCmdInfo) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *ImCmdInfo) GetMaxBandwidth() uint32 {
	if m != nil {
		return m.MaxBandwidth
	}
	return 0
}

func (m *ImCmdInfo) GetKeepalive() uint32 {
	if m != nil {
		return m.Keepalive
	}
	return 0
}

func (m *ImCmdInfo) GetIsL2Looped() bool {
	if m != nil {
		return m.IsL2Looped
	}
	return false
}

func (m *ImCmdInfo) GetParentInterfaceName() string {
	if m != nil {
		return m.ParentInterfaceName
	}
	return ""
}

func (m *ImCmdInfo) GetLoopbackConfiguration() string {
	if m != nil {
		return m.LoopbackConfiguration
	}
	return ""
}

func (m *ImCmdInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ImCmdInfo) GetArpInformation() *ImCmdArpInfoSt {
	if m != nil {
		return m.ArpInformation
	}
	return nil
}

func (m *ImCmdInfo) GetIpInformation() *ImCmdIpInfoSt {
	if m != nil {
		return m.IpInformation
	}
	return nil
}

func (m *ImCmdInfo) GetIsMaintenanceEnabled() bool {
	if m != nil {
		return m.IsMaintenanceEnabled
	}
	return false
}

func (m *ImCmdInfo) GetIsDataInverted() bool {
	if m != nil {
		return m.IsDataInverted
	}
	return false
}

func (m *ImCmdInfo) GetTransportMode() string {
	if m != nil {
		return m.TransportMode
	}
	return ""
}

func (m *ImCmdInfo) GetEncapsulationInformation() *ImCmdEncapsInfo {
	if m != nil {
		return m.EncapsulationInformation
	}
	return nil
}

func (m *ImCmdInfo) GetInterfaceTypeInformation() *ImCmdIntfTypeInfo {
	if m != nil {
		return m.InterfaceTypeInformation
	}
	return nil
}

func (m *ImCmdInfo) GetDataRates() *StatsdbagDatarate {
	if m != nil {
		return m.DataRates
	}
	return nil
}

func (m *ImCmdInfo) GetInterfaceStatistics() *ImCmdIfStats {
	if m != nil {
		return m.InterfaceStatistics
	}
	return nil
}

func (m *ImCmdInfo) GetL2InterfaceStatistics() *StatsData {
	if m != nil {
		return m.L2InterfaceStatistics
	}
	return nil
}

func (m *ImCmdInfo) GetNvOptical() *NvOpticalInterfaceInfo {
	if m != nil {
		return m.NvOptical
	}
	return nil
}

func (m *ImCmdInfo) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

// Generic set of interface counters
type IfstatsbagGeneric struct {
	// Packets received
	PacketsReceived uint64 `protobuf:"varint,1,opt,name=packets_received,json=packetsReceived" json:"packets_received,omitempty"`
	// Bytes received
	BytesReceived uint64 `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived" json:"bytes_received,omitempty"`
	// Packets sent
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	// Bytes sent
	BytesSent uint64 `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	// Multicast packets received
	MulticastPacketsReceived uint64 `protobuf:"varint,5,opt,name=multicast_packets_received,json=multicastPacketsReceived" json:"multicast_packets_received,omitempty"`
	// Broadcast packets received
	BroadcastPacketsReceived uint64 `protobuf:"varint,6,opt,name=broadcast_packets_received,json=broadcastPacketsReceived" json:"broadcast_packets_received,omitempty"`
	// Multicast packets sent
	MulticastPacketsSent uint64 `protobuf:"varint,7,opt,name=multicast_packets_sent,json=multicastPacketsSent" json:"multicast_packets_sent,omitempty"`
	// Broadcast packets sent
	BroadcastPacketsSent uint64 `protobuf:"varint,8,opt,name=broadcast_packets_sent,json=broadcastPacketsSent" json:"broadcast_packets_sent,omitempty"`
	// Total output drops
	OutputDrops uint32 `protobuf:"varint,9,opt,name=output_drops,json=outputDrops" json:"output_drops,omitempty"`
	// Output queue drops
	OutputQueueDrops uint32 `protobuf:"varint,10,opt,name=output_queue_drops,json=outputQueueDrops" json:"output_queue_drops,omitempty"`
	// Total input drops
	InputDrops uint32 `protobuf:"varint,11,opt,name=input_drops,json=inputDrops" json:"input_drops,omitempty"`
	// Input queue drops
	InputQueueDrops uint32 `protobuf:"varint,12,opt,name=input_queue_drops,json=inputQueueDrops" json:"input_queue_drops,omitempty"`
	// Received runt packets
	RuntPacketsReceived uint32 `protobuf:"varint,13,opt,name=runt_packets_received,json=runtPacketsReceived" json:"runt_packets_received,omitempty"`
	// Received giant packets
	GiantPacketsReceived uint32 `protobuf:"varint,14,opt,name=giant_packets_received,json=giantPacketsReceived" json:"giant_packets_received,omitempty"`
	// Received throttled packets
	ThrottledPacketsReceived uint32 `protobuf:"varint,15,opt,name=throttled_packets_received,json=throttledPacketsReceived" json:"throttled_packets_received,omitempty"`
	// Received parity packets
	ParityPacketsReceived uint32 `protobuf:"varint,16,opt,name=parity_packets_received,json=parityPacketsReceived" json:"parity_packets_received,omitempty"`
	// Unknown protocol packets received
	UnknownProtocolPacketsReceived uint32 `protobuf:"varint,17,opt,name=unknown_protocol_packets_received,json=unknownProtocolPacketsReceived" json:"unknown_protocol_packets_received,omitempty"`
	// Total input errors
	InputErrors uint32 `protobuf:"varint,18,opt,name=input_errors,json=inputErrors" json:"input_errors,omitempty"`
	// Input CRC errors
	CrcErrors uint32 `protobuf:"varint,19,opt,name=crc_errors,json=crcErrors" json:"crc_errors,omitempty"`
	// Input overruns
	InputOverruns uint32 `protobuf:"varint,20,opt,name=input_overruns,json=inputOverruns" json:"input_overruns,omitempty"`
	// Framing-errors received
	FramingErrorsReceived uint32 `protobuf:"varint,21,opt,name=framing_errors_received,json=framingErrorsReceived" json:"framing_errors_received,omitempty"`
	// Input ignored packets
	InputIgnoredPackets uint32 `protobuf:"varint,22,opt,name=input_ignored_packets,json=inputIgnoredPackets" json:"input_ignored_packets,omitempty"`
	// Input aborts
	InputAborts uint32 `protobuf:"varint,23,opt,name=input_aborts,json=inputAborts" json:"input_aborts,omitempty"`
	// Total output errors
	OutputErrors uint32 `protobuf:"varint,24,opt,name=output_errors,json=outputErrors" json:"output_errors,omitempty"`
	// Output underruns
	OutputUnderruns uint32 `protobuf:"varint,25,opt,name=output_underruns,json=outputUnderruns" json:"output_underruns,omitempty"`
	// Output buffer failures
	OutputBufferFailures uint32 `protobuf:"varint,26,opt,name=output_buffer_failures,json=outputBufferFailures" json:"output_buffer_failures,omitempty"`
	// Output buffers swapped out
	OutputBuffersSwappedOut uint32 `protobuf:"varint,27,opt,name=output_buffers_swapped_out,json=outputBuffersSwappedOut" json:"output_buffers_swapped_out,omitempty"`
	// Applique
	Applique uint32 `protobuf:"varint,28,opt,name=applique" json:"applique,omitempty"`
	// Number of board resets
	Resets uint32 `protobuf:"varint,29,opt,name=resets" json:"resets,omitempty"`
	// Carrier transitions
	CarrierTransitions uint32 `protobuf:"varint,30,opt,name=carrier_transitions,json=carrierTransitions" json:"carrier_transitions,omitempty"`
	// Availability bit mask
	AvailabilityFlag uint32 `protobuf:"varint,31,opt,name=availability_flag,json=availabilityFlag" json:"availability_flag,omitempty"`
	// Time when counters were last written (in seconds)
	LastDataTime uint32 `protobuf:"varint,32,opt,name=last_data_time,json=lastDataTime" json:"last_data_time,omitempty"`
	// Number of seconds since last clear counters
	SecondsSinceLastClearCounters uint32 `protobuf:"varint,33,opt,name=seconds_since_last_clear_counters,json=secondsSinceLastClearCounters" json:"seconds_since_last_clear_counters,omitempty"`
	// SysUpTime when counters were last reset (in seconds)
	LastDiscontinuityTime uint32 `protobuf:"varint,34,opt,name=last_discontinuity_time,json=lastDiscontinuityTime" json:"last_discontinuity_time,omitempty"`
	// Seconds since packet received
	SecondsSincePacketReceived uint32 `protobuf:"varint,35,opt,name=seconds_since_packet_received,json=secondsSincePacketReceived" json:"seconds_since_packet_received,omitempty"`
	// Seconds since packet sent
	SecondsSincePacketSent uint32 `protobuf:"varint,36,opt,name=seconds_since_packet_sent,json=secondsSincePacketSent" json:"seconds_since_packet_sent,omitempty"`
}

func (m *IfstatsbagGeneric) Reset()                    { *m = IfstatsbagGeneric{} }
func (m *IfstatsbagGeneric) String() string            { return proto.CompactTextString(m) }
func (*IfstatsbagGeneric) ProtoMessage()               {}
func (*IfstatsbagGeneric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IfstatsbagGeneric) GetPacketsReceived() uint64 {
	if m != nil {
		return m.PacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetBytesReceived() uint64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *IfstatsbagGeneric) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *IfstatsbagGeneric) GetMulticastPacketsReceived() uint64 {
	if m != nil {
		return m.MulticastPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetBroadcastPacketsReceived() uint64 {
	if m != nil {
		return m.BroadcastPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetMulticastPacketsSent() uint64 {
	if m != nil {
		return m.MulticastPacketsSent
	}
	return 0
}

func (m *IfstatsbagGeneric) GetBroadcastPacketsSent() uint64 {
	if m != nil {
		return m.BroadcastPacketsSent
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputDrops() uint32 {
	if m != nil {
		return m.OutputDrops
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputQueueDrops() uint32 {
	if m != nil {
		return m.OutputQueueDrops
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputDrops() uint32 {
	if m != nil {
		return m.InputDrops
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputQueueDrops() uint32 {
	if m != nil {
		return m.InputQueueDrops
	}
	return 0
}

func (m *IfstatsbagGeneric) GetRuntPacketsReceived() uint32 {
	if m != nil {
		return m.RuntPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetGiantPacketsReceived() uint32 {
	if m != nil {
		return m.GiantPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetThrottledPacketsReceived() uint32 {
	if m != nil {
		return m.ThrottledPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetParityPacketsReceived() uint32 {
	if m != nil {
		return m.ParityPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetUnknownProtocolPacketsReceived() uint32 {
	if m != nil {
		return m.UnknownProtocolPacketsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputErrors() uint32 {
	if m != nil {
		return m.InputErrors
	}
	return 0
}

func (m *IfstatsbagGeneric) GetCrcErrors() uint32 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputOverruns() uint32 {
	if m != nil {
		return m.InputOverruns
	}
	return 0
}

func (m *IfstatsbagGeneric) GetFramingErrorsReceived() uint32 {
	if m != nil {
		return m.FramingErrorsReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputIgnoredPackets() uint32 {
	if m != nil {
		return m.InputIgnoredPackets
	}
	return 0
}

func (m *IfstatsbagGeneric) GetInputAborts() uint32 {
	if m != nil {
		return m.InputAborts
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputErrors() uint32 {
	if m != nil {
		return m.OutputErrors
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputUnderruns() uint32 {
	if m != nil {
		return m.OutputUnderruns
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputBufferFailures() uint32 {
	if m != nil {
		return m.OutputBufferFailures
	}
	return 0
}

func (m *IfstatsbagGeneric) GetOutputBuffersSwappedOut() uint32 {
	if m != nil {
		return m.OutputBuffersSwappedOut
	}
	return 0
}

func (m *IfstatsbagGeneric) GetApplique() uint32 {
	if m != nil {
		return m.Applique
	}
	return 0
}

func (m *IfstatsbagGeneric) GetResets() uint32 {
	if m != nil {
		return m.Resets
	}
	return 0
}

func (m *IfstatsbagGeneric) GetCarrierTransitions() uint32 {
	if m != nil {
		return m.CarrierTransitions
	}
	return 0
}

func (m *IfstatsbagGeneric) GetAvailabilityFlag() uint32 {
	if m != nil {
		return m.AvailabilityFlag
	}
	return 0
}

func (m *IfstatsbagGeneric) GetLastDataTime() uint32 {
	if m != nil {
		return m.LastDataTime
	}
	return 0
}

func (m *IfstatsbagGeneric) GetSecondsSinceLastClearCounters() uint32 {
	if m != nil {
		return m.SecondsSinceLastClearCounters
	}
	return 0
}

func (m *IfstatsbagGeneric) GetLastDiscontinuityTime() uint32 {
	if m != nil {
		return m.LastDiscontinuityTime
	}
	return 0
}

func (m *IfstatsbagGeneric) GetSecondsSincePacketReceived() uint32 {
	if m != nil {
		return m.SecondsSincePacketReceived
	}
	return 0
}

func (m *IfstatsbagGeneric) GetSecondsSincePacketSent() uint32 {
	if m != nil {
		return m.SecondsSincePacketSent
	}
	return 0
}

// Basic set of interface counters
type IfstatsbagBasic struct {
	// Packets received
	PacketsReceived uint64 `protobuf:"varint,1,opt,name=packets_received,json=packetsReceived" json:"packets_received,omitempty"`
	// Bytes received
	BytesReceived uint64 `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived" json:"bytes_received,omitempty"`
	// Packets sent
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	// Bytes sent
	BytesSent uint64 `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	// Total input drops
	InputDrops uint32 `protobuf:"varint,5,opt,name=input_drops,json=inputDrops" json:"input_drops,omitempty"`
	// Input queue drops
	InputQueueDrops uint32 `protobuf:"varint,6,opt,name=input_queue_drops,json=inputQueueDrops" json:"input_queue_drops,omitempty"`
	// Total input errors
	InputErrors uint32 `protobuf:"varint,7,opt,name=input_errors,json=inputErrors" json:"input_errors,omitempty"`
	// Unknown protocol packets received
	UnknownProtocolPacketsReceived uint32 `protobuf:"varint,8,opt,name=unknown_protocol_packets_received,json=unknownProtocolPacketsReceived" json:"unknown_protocol_packets_received,omitempty"`
	// Total output drops
	OutputDrops uint32 `protobuf:"varint,9,opt,name=output_drops,json=outputDrops" json:"output_drops,omitempty"`
	// Output queue drops
	OutputQueueDrops uint32 `protobuf:"varint,10,opt,name=output_queue_drops,json=outputQueueDrops" json:"output_queue_drops,omitempty"`
	// Total output errors
	OutputErrors uint32 `protobuf:"varint,11,opt,name=output_errors,json=outputErrors" json:"output_errors,omitempty"`
	// Time when counters were last written (in seconds)
	LastDataTime uint32 `protobuf:"varint,12,opt,name=last_data_time,json=lastDataTime" json:"last_data_time,omitempty"`
	// Number of seconds since last clear counters
	SecondsSinceLastClearCounters uint32 `protobuf:"varint,13,opt,name=seconds_since_last_clear_counters,json=secondsSinceLastClearCounters" json:"seconds_since_last_clear_counters,omitempty"`
	// SysUpTime when counters were last reset (in seconds)
	LastDiscontinuityTime uint32 `protobuf:"varint,14,opt,name=last_discontinuity_time,json=lastDiscontinuityTime" json:"last_discontinuity_time,omitempty"`
	// Seconds since packet received
	SecondsSincePacketReceived uint32 `protobuf:"varint,15,opt,name=seconds_since_packet_received,json=secondsSincePacketReceived" json:"seconds_since_packet_received,omitempty"`
	// Seconds since packet sent
	SecondsSincePacketSent uint32 `protobuf:"varint,16,opt,name=seconds_since_packet_sent,json=secondsSincePacketSent" json:"seconds_since_packet_sent,omitempty"`
}

func (m *IfstatsbagBasic) Reset()                    { *m = IfstatsbagBasic{} }
func (m *IfstatsbagBasic) String() string            { return proto.CompactTextString(m) }
func (*IfstatsbagBasic) ProtoMessage()               {}
func (*IfstatsbagBasic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IfstatsbagBasic) GetPacketsReceived() uint64 {
	if m != nil {
		return m.PacketsReceived
	}
	return 0
}

func (m *IfstatsbagBasic) GetBytesReceived() uint64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *IfstatsbagBasic) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *IfstatsbagBasic) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *IfstatsbagBasic) GetInputDrops() uint32 {
	if m != nil {
		return m.InputDrops
	}
	return 0
}

func (m *IfstatsbagBasic) GetInputQueueDrops() uint32 {
	if m != nil {
		return m.InputQueueDrops
	}
	return 0
}

func (m *IfstatsbagBasic) GetInputErrors() uint32 {
	if m != nil {
		return m.InputErrors
	}
	return 0
}

func (m *IfstatsbagBasic) GetUnknownProtocolPacketsReceived() uint32 {
	if m != nil {
		return m.UnknownProtocolPacketsReceived
	}
	return 0
}

func (m *IfstatsbagBasic) GetOutputDrops() uint32 {
	if m != nil {
		return m.OutputDrops
	}
	return 0
}

func (m *IfstatsbagBasic) GetOutputQueueDrops() uint32 {
	if m != nil {
		return m.OutputQueueDrops
	}
	return 0
}

func (m *IfstatsbagBasic) GetOutputErrors() uint32 {
	if m != nil {
		return m.OutputErrors
	}
	return 0
}

func (m *IfstatsbagBasic) GetLastDataTime() uint32 {
	if m != nil {
		return m.LastDataTime
	}
	return 0
}

func (m *IfstatsbagBasic) GetSecondsSinceLastClearCounters() uint32 {
	if m != nil {
		return m.SecondsSinceLastClearCounters
	}
	return 0
}

func (m *IfstatsbagBasic) GetLastDiscontinuityTime() uint32 {
	if m != nil {
		return m.LastDiscontinuityTime
	}
	return 0
}

func (m *IfstatsbagBasic) GetSecondsSincePacketReceived() uint32 {
	if m != nil {
		return m.SecondsSincePacketReceived
	}
	return 0
}

func (m *IfstatsbagBasic) GetSecondsSincePacketSent() uint32 {
	if m != nil {
		return m.SecondsSincePacketSent
	}
	return 0
}

// Datarate information
type StatsdbagDatarate struct {
	// Input data rate in 1000's of bps
	InputDataRate uint64 `protobuf:"varint,1,opt,name=input_data_rate,json=inputDataRate" json:"input_data_rate,omitempty"`
	// Input packets per second
	InputPacketRate uint64 `protobuf:"varint,2,opt,name=input_packet_rate,json=inputPacketRate" json:"input_packet_rate,omitempty"`
	// Output data rate in 1000's of bps
	OutputDataRate uint64 `protobuf:"varint,3,opt,name=output_data_rate,json=outputDataRate" json:"output_data_rate,omitempty"`
	// Output packets per second
	OutputPacketRate uint64 `protobuf:"varint,4,opt,name=output_packet_rate,json=outputPacketRate" json:"output_packet_rate,omitempty"`
	// Peak input data rate
	PeakInputDataRate uint64 `protobuf:"varint,5,opt,name=peak_input_data_rate,json=peakInputDataRate" json:"peak_input_data_rate,omitempty"`
	// Peak input packet rate
	PeakInputPacketRate uint64 `protobuf:"varint,6,opt,name=peak_input_packet_rate,json=peakInputPacketRate" json:"peak_input_packet_rate,omitempty"`
	// Peak output data rate
	PeakOutputDataRate uint64 `protobuf:"varint,7,opt,name=peak_output_data_rate,json=peakOutputDataRate" json:"peak_output_data_rate,omitempty"`
	// Peak output packet rate
	PeakOutputPacketRate uint64 `protobuf:"varint,8,opt,name=peak_output_packet_rate,json=peakOutputPacketRate" json:"peak_output_packet_rate,omitempty"`
	// Bandwidth (in kbps)
	Bandwidth uint32 `protobuf:"varint,9,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Number of 30-sec intervals less one
	LoadInterval uint32 `protobuf:"varint,10,opt,name=load_interval,json=loadInterval" json:"load_interval,omitempty"`
	// Output load as fraction of 255
	OutputLoad uint32 `protobuf:"varint,11,opt,name=output_load,json=outputLoad" json:"output_load,omitempty"`
	// Input load as fraction of 255
	InputLoad uint32 `protobuf:"varint,12,opt,name=input_load,json=inputLoad" json:"input_load,omitempty"`
	// Reliability coefficient
	Reliability uint32 `protobuf:"varint,13,opt,name=reliability" json:"reliability,omitempty"`
}

func (m *StatsdbagDatarate) Reset()                    { *m = StatsdbagDatarate{} }
func (m *StatsdbagDatarate) String() string            { return proto.CompactTextString(m) }
func (*StatsdbagDatarate) ProtoMessage()               {}
func (*StatsdbagDatarate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatsdbagDatarate) GetInputDataRate() uint64 {
	if m != nil {
		return m.InputDataRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetInputPacketRate() uint64 {
	if m != nil {
		return m.InputPacketRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetOutputDataRate() uint64 {
	if m != nil {
		return m.OutputDataRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetOutputPacketRate() uint64 {
	if m != nil {
		return m.OutputPacketRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetPeakInputDataRate() uint64 {
	if m != nil {
		return m.PeakInputDataRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetPeakInputPacketRate() uint64 {
	if m != nil {
		return m.PeakInputPacketRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetPeakOutputDataRate() uint64 {
	if m != nil {
		return m.PeakOutputDataRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetPeakOutputPacketRate() uint64 {
	if m != nil {
		return m.PeakOutputPacketRate
	}
	return 0
}

func (m *StatsdbagDatarate) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *StatsdbagDatarate) GetLoadInterval() uint32 {
	if m != nil {
		return m.LoadInterval
	}
	return 0
}

func (m *StatsdbagDatarate) GetOutputLoad() uint32 {
	if m != nil {
		return m.OutputLoad
	}
	return 0
}

func (m *StatsdbagDatarate) GetInputLoad() uint32 {
	if m != nil {
		return m.InputLoad
	}
	return 0
}

func (m *StatsdbagDatarate) GetReliability() uint32 {
	if m != nil {
		return m.Reliability
	}
	return 0
}

type IfstatsSrpPerSideErrorsSt struct {
	// Error packets received
	ErrorPacketsReceived uint32 `protobuf:"varint,1,opt,name=error_packets_received,json=errorPacketsReceived" json:"error_packets_received,omitempty"`
	// Input CRC errors
	CrcErrors uint32 `protobuf:"varint,2,opt,name=crc_errors,json=crcErrors" json:"crc_errors,omitempty"`
	// Input insufficient resources events
	InputInsufficientResourceEvents uint32 `protobuf:"varint,3,opt,name=input_insufficient_resource_events,json=inputInsufficientResourceEvents" json:"input_insufficient_resource_events,omitempty"`
	// Aborts received at MAC/RAC
	MacAbortsReceived uint32 `protobuf:"varint,4,opt,name=mac_aborts_received,json=macAbortsReceived" json:"mac_aborts_received,omitempty"`
	// Too small packets received at MAC/RAC
	MacRuntPacketsReceived uint32 `protobuf:"varint,5,opt,name=mac_runt_packets_received,json=macRuntPacketsReceived" json:"mac_runt_packets_received,omitempty"`
	// Too large packets received at MAC/RAC
	MacGiantPacketsReceived uint32 `protobuf:"varint,6,opt,name=mac_giant_packets_received,json=macGiantPacketsReceived" json:"mac_giant_packets_received,omitempty"`
	// Too small packets received at framer
	FramerRuntPacketsReceived uint32 `protobuf:"varint,7,opt,name=framer_runt_packets_received,json=framerRuntPacketsReceived" json:"framer_runt_packets_received,omitempty"`
	// Too large packets received at framer
	FramerGiantPacketsReceived uint32 `protobuf:"varint,8,opt,name=framer_giant_packets_received,json=framerGiantPacketsReceived" json:"framer_giant_packets_received,omitempty"`
	// Aborts received at framer
	FramerAbortsReceived uint32 `protobuf:"varint,9,opt,name=framer_aborts_received,json=framerAbortsReceived" json:"framer_aborts_received,omitempty"`
}

func (m *IfstatsSrpPerSideErrorsSt) Reset()                    { *m = IfstatsSrpPerSideErrorsSt{} }
func (m *IfstatsSrpPerSideErrorsSt) String() string            { return proto.CompactTextString(m) }
func (*IfstatsSrpPerSideErrorsSt) ProtoMessage()               {}
func (*IfstatsSrpPerSideErrorsSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IfstatsSrpPerSideErrorsSt) GetErrorPacketsReceived() uint32 {
	if m != nil {
		return m.ErrorPacketsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetCrcErrors() uint32 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetInputInsufficientResourceEvents() uint32 {
	if m != nil {
		return m.InputInsufficientResourceEvents
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetMacAbortsReceived() uint32 {
	if m != nil {
		return m.MacAbortsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetMacRuntPacketsReceived() uint32 {
	if m != nil {
		return m.MacRuntPacketsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetMacGiantPacketsReceived() uint32 {
	if m != nil {
		return m.MacGiantPacketsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetFramerRuntPacketsReceived() uint32 {
	if m != nil {
		return m.FramerRuntPacketsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetFramerGiantPacketsReceived() uint32 {
	if m != nil {
		return m.FramerGiantPacketsReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideErrorsSt) GetFramerAbortsReceived() uint32 {
	if m != nil {
		return m.FramerAbortsReceived
	}
	return 0
}

type IfstatsSrpPerSideDataRateSt struct {
	// Sent bit rate
	BitRateSent uint32 `protobuf:"varint,1,opt,name=bit_rate_sent,json=bitRateSent" json:"bit_rate_sent,omitempty"`
	// Sent packet rate
	PacketRateSent uint32 `protobuf:"varint,2,opt,name=packet_rate_sent,json=packetRateSent" json:"packet_rate_sent,omitempty"`
	// Received bit rate
	BitRateReceived uint32 `protobuf:"varint,3,opt,name=bit_rate_received,json=bitRateReceived" json:"bit_rate_received,omitempty"`
	// Received packet rate
	PacketRateReceived uint32 `protobuf:"varint,4,opt,name=packet_rate_received,json=packetRateReceived" json:"packet_rate_received,omitempty"`
}

func (m *IfstatsSrpPerSideDataRateSt) Reset()                    { *m = IfstatsSrpPerSideDataRateSt{} }
func (m *IfstatsSrpPerSideDataRateSt) String() string            { return proto.CompactTextString(m) }
func (*IfstatsSrpPerSideDataRateSt) ProtoMessage()               {}
func (*IfstatsSrpPerSideDataRateSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IfstatsSrpPerSideDataRateSt) GetBitRateSent() uint32 {
	if m != nil {
		return m.BitRateSent
	}
	return 0
}

func (m *IfstatsSrpPerSideDataRateSt) GetPacketRateSent() uint32 {
	if m != nil {
		return m.PacketRateSent
	}
	return 0
}

func (m *IfstatsSrpPerSideDataRateSt) GetBitRateReceived() uint32 {
	if m != nil {
		return m.BitRateReceived
	}
	return 0
}

func (m *IfstatsSrpPerSideDataRateSt) GetPacketRateReceived() uint32 {
	if m != nil {
		return m.PacketRateReceived
	}
	return 0
}

// SRP interface statistics
type IfstatsbagSrp struct {
	// Data rate interval (5 mins or 30 seconds)
	DataRateInterval uint32 `protobuf:"varint,1,opt,name=data_rate_interval,json=dataRateInterval" json:"data_rate_interval,omitempty"`
	// Data rates for side A interface
	SideADataRate *IfstatsSrpPerSideDataRateSt `protobuf:"bytes,2,opt,name=side_a_data_rate,json=sideADataRate" json:"side_a_data_rate,omitempty"`
	// Data rates for side B interface
	SideBDataRate *IfstatsSrpPerSideDataRateSt `protobuf:"bytes,3,opt,name=side_b_data_rate,json=sideBDataRate" json:"side_b_data_rate,omitempty"`
	// Errors for side A interface
	SideAErrors *IfstatsSrpPerSideErrorsSt `protobuf:"bytes,4,opt,name=side_a_errors,json=sideAErrors" json:"side_a_errors,omitempty"`
	// Errors for side B interface
	SideBErrors *IfstatsSrpPerSideErrorsSt `protobuf:"bytes,5,opt,name=side_b_errors,json=sideBErrors" json:"side_b_errors,omitempty"`
}

func (m *IfstatsbagSrp) Reset()                    { *m = IfstatsbagSrp{} }
func (m *IfstatsbagSrp) String() string            { return proto.CompactTextString(m) }
func (*IfstatsbagSrp) ProtoMessage()               {}
func (*IfstatsbagSrp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IfstatsbagSrp) GetDataRateInterval() uint32 {
	if m != nil {
		return m.DataRateInterval
	}
	return 0
}

func (m *IfstatsbagSrp) GetSideADataRate() *IfstatsSrpPerSideDataRateSt {
	if m != nil {
		return m.SideADataRate
	}
	return nil
}

func (m *IfstatsbagSrp) GetSideBDataRate() *IfstatsSrpPerSideDataRateSt {
	if m != nil {
		return m.SideBDataRate
	}
	return nil
}

func (m *IfstatsbagSrp) GetSideAErrors() *IfstatsSrpPerSideErrorsSt {
	if m != nil {
		return m.SideAErrors
	}
	return nil
}

func (m *IfstatsbagSrp) GetSideBErrors() *IfstatsSrpPerSideErrorsSt {
	if m != nil {
		return m.SideBErrors
	}
	return nil
}

type StatsBagIdTd struct {
	IdType string `protobuf:"bytes,1,opt,name=id_type,json=idType" json:"id_type,omitempty"`
	// Unused
	Unused uint32 `protobuf:"varint,2,opt,name=unused" json:"unused,omitempty"`
	// Interface Handle
	InterfaceHandle string `protobuf:"bytes,3,opt,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// Node ID
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Feature ID
	FeatureId uint32 `protobuf:"varint,5,opt,name=feature_id,json=featureId" json:"feature_id,omitempty"`
	// ID
	Id uint32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
}

func (m *StatsBagIdTd) Reset()                    { *m = StatsBagIdTd{} }
func (m *StatsBagIdTd) String() string            { return proto.CompactTextString(m) }
func (*StatsBagIdTd) ProtoMessage()               {}
func (*StatsBagIdTd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatsBagIdTd) GetIdType() string {
	if m != nil {
		return m.IdType
	}
	return ""
}

func (m *StatsBagIdTd) GetUnused() uint32 {
	if m != nil {
		return m.Unused
	}
	return 0
}

func (m *StatsBagIdTd) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *StatsBagIdTd) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *StatsBagIdTd) GetFeatureId() uint32 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *StatsBagIdTd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StatsBagBlockSt struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StatsBagBlockSt) Reset()                    { *m = StatsBagBlockSt{} }
func (m *StatsBagBlockSt) String() string            { return proto.CompactTextString(m) }
func (*StatsBagBlockSt) ProtoMessage()               {}
func (*StatsBagBlockSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StatsBagBlockSt) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StatsBagBlockSt) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StatsBagBlockSt) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StatsBagElementSt struct {
	Key        []byte             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	BlockArray []*StatsBagBlockSt `protobuf:"bytes,2,rep,name=block_array,json=blockArray" json:"block_array,omitempty"`
}

func (m *StatsBagElementSt) Reset()                    { *m = StatsBagElementSt{} }
func (m *StatsBagElementSt) String() string            { return proto.CompactTextString(m) }
func (*StatsBagElementSt) ProtoMessage()               {}
func (*StatsBagElementSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StatsBagElementSt) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StatsBagElementSt) GetBlockArray() []*StatsBagBlockSt {
	if m != nil {
		return m.BlockArray
	}
	return nil
}

// Stats Data
type StatsData struct {
	// Stats type value
	StatsType uint32 `protobuf:"varint,1,opt,name=stats_type,json=statsType" json:"stats_type,omitempty"`
	// Identifier
	StatsId *StatsBagIdTd `protobuf:"bytes,2,opt,name=stats_id,json=statsId" json:"stats_id,omitempty"`
	// Bag contents
	Contents string `protobuf:"bytes,3,opt,name=contents" json:"contents,omitempty"`
	// Block Array
	BlockArray []*StatsBagBlockSt `protobuf:"bytes,4,rep,name=block_array,json=blockArray" json:"block_array,omitempty"`
	// Element Array
	ElementArray []*StatsBagElementSt `protobuf:"bytes,5,rep,name=element_array,json=elementArray" json:"element_array,omitempty"`
}

func (m *StatsData) Reset()                    { *m = StatsData{} }
func (m *StatsData) String() string            { return proto.CompactTextString(m) }
func (*StatsData) ProtoMessage()               {}
func (*StatsData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StatsData) GetStatsType() uint32 {
	if m != nil {
		return m.StatsType
	}
	return 0
}

func (m *StatsData) GetStatsId() *StatsBagIdTd {
	if m != nil {
		return m.StatsId
	}
	return nil
}

func (m *StatsData) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *StatsData) GetBlockArray() []*StatsBagBlockSt {
	if m != nil {
		return m.BlockArray
	}
	return nil
}

func (m *StatsData) GetElementArray() []*StatsBagElementSt {
	if m != nil {
		return m.ElementArray
	}
	return nil
}

// NCP state information
type PppShowIntNcpInfo struct {
	// NCP state value
	NcpState string `protobuf:"bytes,1,opt,name=ncp_state,json=ncpState" json:"ncp_state,omitempty"`
	// NCP state identifier
	NcpIdentifier string `protobuf:"bytes,2,opt,name=ncp_identifier,json=ncpIdentifier" json:"ncp_identifier,omitempty"`
}

func (m *PppShowIntNcpInfo) Reset()                    { *m = PppShowIntNcpInfo{} }
func (m *PppShowIntNcpInfo) String() string            { return proto.CompactTextString(m) }
func (*PppShowIntNcpInfo) ProtoMessage()               {}
func (*PppShowIntNcpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PppShowIntNcpInfo) GetNcpState() string {
	if m != nil {
		return m.NcpState
	}
	return ""
}

func (m *PppShowIntNcpInfo) GetNcpIdentifier() string {
	if m != nil {
		return m.NcpIdentifier
	}
	return ""
}

// PPP state information
type PppShowIntInfo struct {
	// LCP State
	LcpState string `protobuf:"bytes,1,opt,name=lcp_state,json=lcpState" json:"lcp_state,omitempty"`
	// Loopback detected
	IsLoopbackDetected int32 `protobuf:"zigzag32,2,opt,name=is_loopback_detected,json=isLoopbackDetected" json:"is_loopback_detected,omitempty"`
	// Keepalive value
	KeepalivePeriod uint32 `protobuf:"varint,3,opt,name=keepalive_period,json=keepalivePeriod" json:"keepalive_period,omitempty"`
	// MP Bundle Member
	IsMpBundleMember int32 `protobuf:"zigzag32,4,opt,name=is_mp_bundle_member,json=isMpBundleMember" json:"is_mp_bundle_member,omitempty"`
	// Is Multilink Open
	IsMultilinkOpen int32 `protobuf:"zigzag32,5,opt,name=is_multilink_open,json=isMultilinkOpen" json:"is_multilink_open,omitempty"`
	// Array of per-NCP data
	NcpInfoArray []*PppShowIntNcpInfo `protobuf:"bytes,6,rep,name=ncp_info_array,json=ncpInfoArray" json:"ncp_info_array,omitempty"`
}

func (m *PppShowIntInfo) Reset()                    { *m = PppShowIntInfo{} }
func (m *PppShowIntInfo) String() string            { return proto.CompactTextString(m) }
func (*PppShowIntInfo) ProtoMessage()               {}
func (*PppShowIntInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PppShowIntInfo) GetLcpState() string {
	if m != nil {
		return m.LcpState
	}
	return ""
}

func (m *PppShowIntInfo) GetIsLoopbackDetected() int32 {
	if m != nil {
		return m.IsLoopbackDetected
	}
	return 0
}

func (m *PppShowIntInfo) GetKeepalivePeriod() uint32 {
	if m != nil {
		return m.KeepalivePeriod
	}
	return 0
}

func (m *PppShowIntInfo) GetIsMpBundleMember() int32 {
	if m != nil {
		return m.IsMpBundleMember
	}
	return 0
}

func (m *PppShowIntInfo) GetIsMultilinkOpen() int32 {
	if m != nil {
		return m.IsMultilinkOpen
	}
	return 0
}

func (m *PppShowIntInfo) GetNcpInfoArray() []*PppShowIntNcpInfo {
	if m != nil {
		return m.NcpInfoArray
	}
	return nil
}

// Additional member state reason data
type BmMbrStateReasonDataType struct {
	// The item the reason applies to
	ReasonType string `protobuf:"bytes,1,opt,name=reason_type,json=reasonType" json:"reason_type,omitempty"`
	// The severity of the reason
	Severity string `protobuf:"bytes,2,opt,name=severity" json:"severity,omitempty"`
}

func (m *BmMbrStateReasonDataType) Reset()                    { *m = BmMbrStateReasonDataType{} }
func (m *BmMbrStateReasonDataType) String() string            { return proto.CompactTextString(m) }
func (*BmMbrStateReasonDataType) ProtoMessage()               {}
func (*BmMbrStateReasonDataType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BmMbrStateReasonDataType) GetReasonType() string {
	if m != nil {
		return m.ReasonType
	}
	return ""
}

func (m *BmMbrStateReasonDataType) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

type BmMacAddrSt struct {
	// MAC address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *BmMacAddrSt) Reset()                    { *m = BmMacAddrSt{} }
func (m *BmMacAddrSt) String() string            { return proto.CompactTextString(m) }
func (*BmMacAddrSt) ProtoMessage()               {}
func (*BmMacAddrSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BmMacAddrSt) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BmMuxData struct {
	// Current state of this bundle member
	MuxState string `protobuf:"bytes,1,opt,name=mux_state,json=muxState" json:"mux_state,omitempty"`
	// Internal value indicating if an error occurred trying to put a link into the desired state
	Error uint32 `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	// Reason for last Mux state change
	MemberMuxStateReason string `protobuf:"bytes,3,opt,name=member_mux_state_reason,json=memberMuxStateReason" json:"member_mux_state_reason,omitempty"`
	// Data regarding the reason for last Mux state change
	MemberMuxStateReasonData *BmMbrStateReasonDataType `protobuf:"bytes,4,opt,name=member_mux_state_reason_data,json=memberMuxStateReasonData" json:"member_mux_state_reason_data,omitempty"`
	// Current internal state of this bundle member
	MemberState string `protobuf:"bytes,5,opt,name=member_state,json=memberState" json:"member_state,omitempty"`
	// Reason for last Mux state change (Deprecated)
	MuxStateReason string `protobuf:"bytes,6,opt,name=mux_state_reason,json=muxStateReason" json:"mux_state_reason,omitempty"`
}

func (m *BmMuxData) Reset()                    { *m = BmMuxData{} }
func (m *BmMuxData) String() string            { return proto.CompactTextString(m) }
func (*BmMuxData) ProtoMessage()               {}
func (*BmMuxData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BmMuxData) GetMuxState() string {
	if m != nil {
		return m.MuxState
	}
	return ""
}

func (m *BmMuxData) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *BmMuxData) GetMemberMuxStateReason() string {
	if m != nil {
		return m.MemberMuxStateReason
	}
	return ""
}

func (m *BmMuxData) GetMemberMuxStateReasonData() *BmMbrStateReasonDataType {
	if m != nil {
		return m.MemberMuxStateReasonData
	}
	return nil
}

func (m *BmMuxData) GetMemberState() string {
	if m != nil {
		return m.MemberState
	}
	return ""
}

func (m *BmMuxData) GetMuxStateReason() string {
	if m != nil {
		return m.MuxStateReason
	}
	return ""
}

// Statistics for a port using using LACP
type BmLacpCounters struct {
	// LACPDUs received
	LacpdUsReceived uint32 `protobuf:"varint,1,opt,name=lacpd_us_received,json=lacpdUsReceived" json:"lacpd_us_received,omitempty"`
	// LACPDUs transmitted
	LacpdUsTransmitted uint32 `protobuf:"varint,2,opt,name=lacpd_us_transmitted,json=lacpdUsTransmitted" json:"lacpd_us_transmitted,omitempty"`
	// Marker packets received
	MarkerPacketsReceived uint32 `protobuf:"varint,3,opt,name=marker_packets_received,json=markerPacketsReceived" json:"marker_packets_received,omitempty"`
	// Marker response packets transmitted
	MarkerResponsesTransmitted uint32 `protobuf:"varint,4,opt,name=marker_responses_transmitted,json=markerResponsesTransmitted" json:"marker_responses_transmitted,omitempty"`
	// Illegal and unknown packets received
	IllegalPacketsReceived uint32 `protobuf:"varint,5,opt,name=illegal_packets_received,json=illegalPacketsReceived" json:"illegal_packets_received,omitempty"`
	// LACPDUs received that exceed the rate limit
	ExcessLacpdUsReceived uint32 `protobuf:"varint,6,opt,name=excess_lacpd_us_received,json=excessLacpdUsReceived" json:"excess_lacpd_us_received,omitempty"`
	// Marker packets received that exceed the rate limit
	ExcessMarkerPacketsReceived uint32 `protobuf:"varint,7,opt,name=excess_marker_packets_received,json=excessMarkerPacketsReceived" json:"excess_marker_packets_received,omitempty"`
	// State flag set to Defaulted
	Defaulted uint32 `protobuf:"varint,8,opt,name=defaulted" json:"defaulted,omitempty"`
	// State flag set to Expired
	Expired uint32 `protobuf:"varint,9,opt,name=expired" json:"expired,omitempty"`
	// Last time counters cleared (s) (deprecated)
	LastClearedSec uint32 `protobuf:"varint,10,opt,name=last_cleared_sec,json=lastClearedSec" json:"last_cleared_sec,omitempty"`
	// Last time counters cleared (nsec) (deprecated)
	LastClearedNsec uint32 `protobuf:"varint,11,opt,name=last_cleared_nsec,json=lastClearedNsec" json:"last_cleared_nsec,omitempty"`
}

func (m *BmLacpCounters) Reset()                    { *m = BmLacpCounters{} }
func (m *BmLacpCounters) String() string            { return proto.CompactTextString(m) }
func (*BmLacpCounters) ProtoMessage()               {}
func (*BmLacpCounters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BmLacpCounters) GetLacpdUsReceived() uint32 {
	if m != nil {
		return m.LacpdUsReceived
	}
	return 0
}

func (m *BmLacpCounters) GetLacpdUsTransmitted() uint32 {
	if m != nil {
		return m.LacpdUsTransmitted
	}
	return 0
}

func (m *BmLacpCounters) GetMarkerPacketsReceived() uint32 {
	if m != nil {
		return m.MarkerPacketsReceived
	}
	return 0
}

func (m *BmLacpCounters) GetMarkerResponsesTransmitted() uint32 {
	if m != nil {
		return m.MarkerResponsesTransmitted
	}
	return 0
}

func (m *BmLacpCounters) GetIllegalPacketsReceived() uint32 {
	if m != nil {
		return m.IllegalPacketsReceived
	}
	return 0
}

func (m *BmLacpCounters) GetExcessLacpdUsReceived() uint32 {
	if m != nil {
		return m.ExcessLacpdUsReceived
	}
	return 0
}

func (m *BmLacpCounters) GetExcessMarkerPacketsReceived() uint32 {
	if m != nil {
		return m.ExcessMarkerPacketsReceived
	}
	return 0
}

func (m *BmLacpCounters) GetDefaulted() uint32 {
	if m != nil {
		return m.Defaulted
	}
	return 0
}

func (m *BmLacpCounters) GetExpired() uint32 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *BmLacpCounters) GetLastClearedSec() uint32 {
	if m != nil {
		return m.LastClearedSec
	}
	return 0
}

func (m *BmLacpCounters) GetLastClearedNsec() uint32 {
	if m != nil {
		return m.LastClearedNsec
	}
	return 0
}

// Link properties for a port using LACP (Deprecated)
type BmLacpLinkData struct {
	// Member's interface handle
	InterfaceHandle string `protobuf:"bytes,1,opt,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// System priority of actor system
	ActorSystemPriority uint32 `protobuf:"varint,2,opt,name=actor_system_priority,json=actorSystemPriority" json:"actor_system_priority,omitempty"`
	// MAC Address of the actor system
	ActorSystemMacAddress string `protobuf:"bytes,3,opt,name=actor_system_mac_address,json=actorSystemMacAddress" json:"actor_system_mac_address,omitempty"`
	// Operational key for this port
	ActorOperationalKey uint32 `protobuf:"varint,4,opt,name=actor_operational_key,json=actorOperationalKey" json:"actor_operational_key,omitempty"`
	// System priority of partner system
	PartnerSystemPriority uint32 `protobuf:"varint,5,opt,name=partner_system_priority,json=partnerSystemPriority" json:"partner_system_priority,omitempty"`
	// MAC Address used to identify the partner system
	PartnerSystemMacAddress string `protobuf:"bytes,6,opt,name=partner_system_mac_address,json=partnerSystemMacAddress" json:"partner_system_mac_address,omitempty"`
	// Operational key for partner port
	PartnerOperationalKey uint32 `protobuf:"varint,7,opt,name=partner_operational_key,json=partnerOperationalKey" json:"partner_operational_key,omitempty"`
	// MIB ifindex of selected bundle
	SelectedAggregatorId uint32 `protobuf:"varint,8,opt,name=selected_aggregator_id,json=selectedAggregatorId" json:"selected_aggregator_id,omitempty"`
	// MIB ifindex of attached bundle
	AttachedAggregatorId uint32 `protobuf:"varint,9,opt,name=attached_aggregator_id,json=attachedAggregatorId" json:"attached_aggregator_id,omitempty"`
	// Port number of this port
	ActorPortId uint32 `protobuf:"varint,10,opt,name=actor_port_id,json=actorPortId" json:"actor_port_id,omitempty"`
	// Priority of this port
	ActorPortPriority uint32 `protobuf:"varint,11,opt,name=actor_port_priority,json=actorPortPriority" json:"actor_port_priority,omitempty"`
	// Port number of the partner's port
	PartnerPortId uint32 `protobuf:"varint,12,opt,name=partner_port_id,json=partnerPortId" json:"partner_port_id,omitempty"`
	// Priority of the partner's port
	PartnerPortPriority uint32 `protobuf:"varint,13,opt,name=partner_port_priority,json=partnerPortPriority" json:"partner_port_priority,omitempty"`
	// LACP state of this port
	ActorPortState uint32 `protobuf:"varint,14,opt,name=actor_port_state,json=actorPortState" json:"actor_port_state,omitempty"`
	// LACP state of the partner's port
	PartnerPortState uint32 `protobuf:"varint,15,opt,name=partner_port_state,json=partnerPortState" json:"partner_port_state,omitempty"`
}

func (m *BmLacpLinkData) Reset()                    { *m = BmLacpLinkData{} }
func (m *BmLacpLinkData) String() string            { return proto.CompactTextString(m) }
func (*BmLacpLinkData) ProtoMessage()               {}
func (*BmLacpLinkData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BmLacpLinkData) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *BmLacpLinkData) GetActorSystemPriority() uint32 {
	if m != nil {
		return m.ActorSystemPriority
	}
	return 0
}

func (m *BmLacpLinkData) GetActorSystemMacAddress() string {
	if m != nil {
		return m.ActorSystemMacAddress
	}
	return ""
}

func (m *BmLacpLinkData) GetActorOperationalKey() uint32 {
	if m != nil {
		return m.ActorOperationalKey
	}
	return 0
}

func (m *BmLacpLinkData) GetPartnerSystemPriority() uint32 {
	if m != nil {
		return m.PartnerSystemPriority
	}
	return 0
}

func (m *BmLacpLinkData) GetPartnerSystemMacAddress() string {
	if m != nil {
		return m.PartnerSystemMacAddress
	}
	return ""
}

func (m *BmLacpLinkData) GetPartnerOperationalKey() uint32 {
	if m != nil {
		return m.PartnerOperationalKey
	}
	return 0
}

func (m *BmLacpLinkData) GetSelectedAggregatorId() uint32 {
	if m != nil {
		return m.SelectedAggregatorId
	}
	return 0
}

func (m *BmLacpLinkData) GetAttachedAggregatorId() uint32 {
	if m != nil {
		return m.AttachedAggregatorId
	}
	return 0
}

func (m *BmLacpLinkData) GetActorPortId() uint32 {
	if m != nil {
		return m.ActorPortId
	}
	return 0
}

func (m *BmLacpLinkData) GetActorPortPriority() uint32 {
	if m != nil {
		return m.ActorPortPriority
	}
	return 0
}

func (m *BmLacpLinkData) GetPartnerPortId() uint32 {
	if m != nil {
		return m.PartnerPortId
	}
	return 0
}

func (m *BmLacpLinkData) GetPartnerPortPriority() uint32 {
	if m != nil {
		return m.PartnerPortPriority
	}
	return 0
}

func (m *BmLacpLinkData) GetActorPortState() uint32 {
	if m != nil {
		return m.ActorPortState
	}
	return 0
}

func (m *BmLacpLinkData) GetPartnerPortState() uint32 {
	if m != nil {
		return m.PartnerPortState
	}
	return 0
}

// Bundle member data for any member
type BmMemberData struct {
	// Bandwidth of this member (kbps)
	Bandwidth uint32 `protobuf:"varint,1,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Counters data about member link
	Counters *BmLacpCounters `protobuf:"bytes,2,opt,name=counters" json:"counters,omitempty"`
	// Lacp data about member link
	LinkData *BmLacpLinkData `protobuf:"bytes,3,opt,name=link_data,json=linkData" json:"link_data,omitempty"`
	// Mux state machine data
	MemberMuxData *BmMuxData `protobuf:"bytes,4,opt,name=member_mux_data,json=memberMuxData" json:"member_mux_data,omitempty"`
	// The priority of this member
	PortPriority uint32 `protobuf:"varint,5,opt,name=port_priority,json=portPriority" json:"port_priority,omitempty"`
	// Member's link number
	PortNumber uint32 `protobuf:"varint,6,opt,name=port_number,json=portNumber" json:"port_number,omitempty"`
	// Member's underlying link ID
	UnderlyingLinkId uint32 `protobuf:"varint,7,opt,name=underlying_link_id,json=underlyingLinkId" json:"underlying_link_id,omitempty"`
	// Member's link order number
	LinkOrderNumber uint32 `protobuf:"varint,8,opt,name=link_order_number,json=linkOrderNumber" json:"link_order_number,omitempty"`
	// Member's interface name
	InterfaceName string `protobuf:"bytes,9,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Location of member
	IccpNode uint32 `protobuf:"varint,10,opt,name=iccp_node,json=iccpNode" json:"iccp_node,omitempty"`
	// Member's type (local/foreign)
	MemberType string `protobuf:"bytes,11,opt,name=member_type,json=memberType" json:"member_type,omitempty"`
	// Member's (short form) name
	MemberName string `protobuf:"bytes,12,opt,name=member_name,json=memberName" json:"member_name,omitempty"`
	// MAC address of this member (deprecated)
	MacAddress *BmMacAddrSt `protobuf:"bytes,13,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *BmMemberData) Reset()                    { *m = BmMemberData{} }
func (m *BmMemberData) String() string            { return proto.CompactTextString(m) }
func (*BmMemberData) ProtoMessage()               {}
func (*BmMemberData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BmMemberData) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *BmMemberData) GetCounters() *BmLacpCounters {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *BmMemberData) GetLinkData() *BmLacpLinkData {
	if m != nil {
		return m.LinkData
	}
	return nil
}

func (m *BmMemberData) GetMemberMuxData() *BmMuxData {
	if m != nil {
		return m.MemberMuxData
	}
	return nil
}

func (m *BmMemberData) GetPortPriority() uint32 {
	if m != nil {
		return m.PortPriority
	}
	return 0
}

func (m *BmMemberData) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *BmMemberData) GetUnderlyingLinkId() uint32 {
	if m != nil {
		return m.UnderlyingLinkId
	}
	return 0
}

func (m *BmMemberData) GetLinkOrderNumber() uint32 {
	if m != nil {
		return m.LinkOrderNumber
	}
	return 0
}

func (m *BmMemberData) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *BmMemberData) GetIccpNode() uint32 {
	if m != nil {
		return m.IccpNode
	}
	return 0
}

func (m *BmMemberData) GetMemberType() string {
	if m != nil {
		return m.MemberType
	}
	return ""
}

func (m *BmMemberData) GetMemberName() string {
	if m != nil {
		return m.MemberName
	}
	return ""
}

func (m *BmMemberData) GetMacAddress() *BmMacAddrSt {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

// VLAN double tag stack
type VlanDoubleTagStack struct {
	// Outer tag value
	OuterTag uint32 `protobuf:"varint,1,opt,name=outer_tag,json=outerTag" json:"outer_tag,omitempty"`
	// Second tag value
	SecondTag uint32 `protobuf:"varint,2,opt,name=second_tag,json=secondTag" json:"second_tag,omitempty"`
}

func (m *VlanDoubleTagStack) Reset()                    { *m = VlanDoubleTagStack{} }
func (m *VlanDoubleTagStack) String() string            { return proto.CompactTextString(m) }
func (*VlanDoubleTagStack) ProtoMessage()               {}
func (*VlanDoubleTagStack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *VlanDoubleTagStack) GetOuterTag() uint32 {
	if m != nil {
		return m.OuterTag
	}
	return 0
}

func (m *VlanDoubleTagStack) GetSecondTag() uint32 {
	if m != nil {
		return m.SecondTag
	}
	return 0
}

type EfpRange struct {
	VlanIdLow  uint32 `protobuf:"varint,1,opt,name=vlan_id_low,json=vlanIdLow" json:"vlan_id_low,omitempty"`
	VlanIdHigh uint32 `protobuf:"varint,2,opt,name=vlan_id_high,json=vlanIdHigh" json:"vlan_id_high,omitempty"`
}

func (m *EfpRange) Reset()                    { *m = EfpRange{} }
func (m *EfpRange) String() string            { return proto.CompactTextString(m) }
func (*EfpRange) ProtoMessage()               {}
func (*EfpRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EfpRange) GetVlanIdLow() uint32 {
	if m != nil {
		return m.VlanIdLow
	}
	return 0
}

func (m *EfpRange) GetVlanIdHigh() uint32 {
	if m != nil {
		return m.VlanIdHigh
	}
	return 0
}

type EfpTagMatch struct {
	Ethertype  string      `protobuf:"bytes,1,opt,name=ethertype" json:"ethertype,omitempty"`
	VlanRanges []*EfpRange `protobuf:"bytes,2,rep,name=vlan_ranges,json=vlanRanges" json:"vlan_ranges,omitempty"`
	Priority   string      `protobuf:"bytes,3,opt,name=priority" json:"priority,omitempty"`
}

func (m *EfpTagMatch) Reset()                    { *m = EfpTagMatch{} }
func (m *EfpTagMatch) String() string            { return proto.CompactTextString(m) }
func (*EfpTagMatch) ProtoMessage()               {}
func (*EfpTagMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EfpTagMatch) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *EfpTagMatch) GetVlanRanges() []*EfpRange {
	if m != nil {
		return m.VlanRanges
	}
	return nil
}

func (m *EfpTagMatch) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

type EfpVlanTag struct {
	Ethertype string `protobuf:"bytes,1,opt,name=ethertype" json:"ethertype,omitempty"`
	VlanId    uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
}

func (m *EfpVlanTag) Reset()                    { *m = EfpVlanTag{} }
func (m *EfpVlanTag) String() string            { return proto.CompactTextString(m) }
func (*EfpVlanTag) ProtoMessage()               {}
func (*EfpVlanTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EfpVlanTag) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *EfpVlanTag) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

type EfpTagLocalTrafficStack struct {
	LocalTrafficTags []*EfpVlanTag `protobuf:"bytes,1,rep,name=local_traffic_tags,json=localTrafficTags" json:"local_traffic_tags,omitempty"`
}

func (m *EfpTagLocalTrafficStack) Reset()                    { *m = EfpTagLocalTrafficStack{} }
func (m *EfpTagLocalTrafficStack) String() string            { return proto.CompactTextString(m) }
func (*EfpTagLocalTrafficStack) ProtoMessage()               {}
func (*EfpTagLocalTrafficStack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *EfpTagLocalTrafficStack) GetLocalTrafficTags() []*EfpVlanTag {
	if m != nil {
		return m.LocalTrafficTags
	}
	return nil
}

type MacAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *MacAddressType) Reset()                    { *m = MacAddressType{} }
func (m *MacAddressType) String() string            { return proto.CompactTextString(m) }
func (*MacAddressType) ProtoMessage()               {}
func (*MacAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MacAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EfpDescription struct {
	TagsToMatch         []*EfpTagMatch           `protobuf:"bytes,1,rep,name=tags_to_match,json=tagsToMatch" json:"tags_to_match,omitempty"`
	PayloadEthertype    string                   `protobuf:"bytes,2,opt,name=payload_ethertype,json=payloadEthertype" json:"payload_ethertype,omitempty"`
	TagsPopped          uint32                   `protobuf:"varint,3,opt,name=tags_popped,json=tagsPopped" json:"tags_popped,omitempty"`
	Pushes              []*EfpVlanTag            `protobuf:"bytes,4,rep,name=pushes" json:"pushes,omitempty"`
	LocalTrafficStack   *EfpTagLocalTrafficStack `protobuf:"bytes,5,opt,name=local_traffic_stack,json=localTrafficStack" json:"local_traffic_stack,omitempty"`
	IsExactMatch        int32                    `protobuf:"zigzag32,6,opt,name=is_exact_match,json=isExactMatch" json:"is_exact_match,omitempty"`
	IsNativeVlan        int32                    `protobuf:"zigzag32,7,opt,name=is_native_vlan,json=isNativeVlan" json:"is_native_vlan,omitempty"`
	IsNativePreserving  int32                    `protobuf:"zigzag32,8,opt,name=is_native_preserving,json=isNativePreserving" json:"is_native_preserving,omitempty"`
	SourceMacMatch      *MacAddressType          `protobuf:"bytes,9,opt,name=source_mac_match,json=sourceMacMatch" json:"source_mac_match,omitempty"`
	DestinationMacMatch *MacAddressType          `protobuf:"bytes,10,opt,name=destination_mac_match,json=destinationMacMatch" json:"destination_mac_match,omitempty"`
}

func (m *EfpDescription) Reset()                    { *m = EfpDescription{} }
func (m *EfpDescription) String() string            { return proto.CompactTextString(m) }
func (*EfpDescription) ProtoMessage()               {}
func (*EfpDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *EfpDescription) GetTagsToMatch() []*EfpTagMatch {
	if m != nil {
		return m.TagsToMatch
	}
	return nil
}

func (m *EfpDescription) GetPayloadEthertype() string {
	if m != nil {
		return m.PayloadEthertype
	}
	return ""
}

func (m *EfpDescription) GetTagsPopped() uint32 {
	if m != nil {
		return m.TagsPopped
	}
	return 0
}

func (m *EfpDescription) GetPushes() []*EfpVlanTag {
	if m != nil {
		return m.Pushes
	}
	return nil
}

func (m *EfpDescription) GetLocalTrafficStack() *EfpTagLocalTrafficStack {
	if m != nil {
		return m.LocalTrafficStack
	}
	return nil
}

func (m *EfpDescription) GetIsExactMatch() int32 {
	if m != nil {
		return m.IsExactMatch
	}
	return 0
}

func (m *EfpDescription) GetIsNativeVlan() int32 {
	if m != nil {
		return m.IsNativeVlan
	}
	return 0
}

func (m *EfpDescription) GetIsNativePreserving() int32 {
	if m != nil {
		return m.IsNativePreserving
	}
	return 0
}

func (m *EfpDescription) GetSourceMacMatch() *MacAddressType {
	if m != nil {
		return m.SourceMacMatch
	}
	return nil
}

func (m *EfpDescription) GetDestinationMacMatch() *MacAddressType {
	if m != nil {
		return m.DestinationMacMatch
	}
	return nil
}

type EfpDescriptionPType struct {
	Value *EfpDescription `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *EfpDescriptionPType) Reset()                    { *m = EfpDescriptionPType{} }
func (m *EfpDescriptionPType) String() string            { return proto.CompactTextString(m) }
func (*EfpDescriptionPType) ProtoMessage()               {}
func (*EfpDescriptionPType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *EfpDescriptionPType) GetValue() *EfpDescription {
	if m != nil {
		return m.Value
	}
	return nil
}

// VLAN encapsulation and tag stack
type VlanTagStackType struct {
	VlanEncapsulation string `protobuf:"bytes,1,opt,name=vlan_encapsulation,json=vlanEncapsulation" json:"vlan_encapsulation,omitempty"`
	// Tag value
	Tag uint32 `protobuf:"varint,2,opt,name=tag" json:"tag,omitempty"`
	// Stack value
	Stack *VlanDoubleTagStack `protobuf:"bytes,3,opt,name=stack" json:"stack,omitempty"`
	// Outer tag value
	OuterTag uint32 `protobuf:"varint,4,opt,name=outer_tag,json=outerTag" json:"outer_tag,omitempty"`
	// Native tag value
	NativeTag uint32 `protobuf:"varint,5,opt,name=native_tag,json=nativeTag" json:"native_tag,omitempty"`
	// 802.1ad tag value
	Dot1AdTag uint32 `protobuf:"varint,6,opt,name=dot1ad_tag,json=dot1adTag" json:"dot1ad_tag,omitempty"`
	// 802.1ad native tag value
	Dot1AdNativeTag uint32 `protobuf:"varint,7,opt,name=dot1ad_native_tag,json=dot1adNativeTag" json:"dot1ad_native_tag,omitempty"`
	// Service Instance encapsulation
	ServiceInstanceDetails *EfpDescriptionPType `protobuf:"bytes,8,opt,name=service_instance_details,json=serviceInstanceDetails" json:"service_instance_details,omitempty"`
	// 802.1ad 802.1Q stack value
	Dot1AdDot1QStack *VlanDoubleTagStack `protobuf:"bytes,9,opt,name=dot1ad_dot1q_stack,json=dot1adDot1qStack" json:"dot1ad_dot1q_stack,omitempty"`
	// 802.1ad Outer tag value
	Dot1AdOuterTag uint32 `protobuf:"varint,10,opt,name=dot1ad_outer_tag,json=dot1adOuterTag" json:"dot1ad_outer_tag,omitempty"`
}

func (m *VlanTagStackType) Reset()                    { *m = VlanTagStackType{} }
func (m *VlanTagStackType) String() string            { return proto.CompactTextString(m) }
func (*VlanTagStackType) ProtoMessage()               {}
func (*VlanTagStackType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *VlanTagStackType) GetVlanEncapsulation() string {
	if m != nil {
		return m.VlanEncapsulation
	}
	return ""
}

func (m *VlanTagStackType) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *VlanTagStackType) GetStack() *VlanDoubleTagStack {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *VlanTagStackType) GetOuterTag() uint32 {
	if m != nil {
		return m.OuterTag
	}
	return 0
}

func (m *VlanTagStackType) GetNativeTag() uint32 {
	if m != nil {
		return m.NativeTag
	}
	return 0
}

func (m *VlanTagStackType) GetDot1AdTag() uint32 {
	if m != nil {
		return m.Dot1AdTag
	}
	return 0
}

func (m *VlanTagStackType) GetDot1AdNativeTag() uint32 {
	if m != nil {
		return m.Dot1AdNativeTag
	}
	return 0
}

func (m *VlanTagStackType) GetServiceInstanceDetails() *EfpDescriptionPType {
	if m != nil {
		return m.ServiceInstanceDetails
	}
	return nil
}

func (m *VlanTagStackType) GetDot1AdDot1QStack() *VlanDoubleTagStack {
	if m != nil {
		return m.Dot1AdDot1QStack
	}
	return nil
}

func (m *VlanTagStackType) GetDot1AdOuterTag() uint32 {
	if m != nil {
		return m.Dot1AdOuterTag
	}
	return 0
}

type VlanIntfGeneric struct {
	// Encapsulation type and tag stack
	EncapsulationDetails *VlanTagStackType `protobuf:"bytes,1,opt,name=encapsulation_details,json=encapsulationDetails" json:"encapsulation_details,omitempty"`
}

func (m *VlanIntfGeneric) Reset()                    { *m = VlanIntfGeneric{} }
func (m *VlanIntfGeneric) String() string            { return proto.CompactTextString(m) }
func (*VlanIntfGeneric) ProtoMessage()               {}
func (*VlanIntfGeneric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *VlanIntfGeneric) GetEncapsulationDetails() *VlanTagStackType {
	if m != nil {
		return m.EncapsulationDetails
	}
	return nil
}

type SrpTopologyNodeData struct {
	// Outer-ring hops to reach this node
	HopCount uint32 `protobuf:"varint,1,opt,name=hop_count,json=hopCount" json:"hop_count,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// Wrap state
	IsWrapped int32 `protobuf:"zigzag32,4,opt,name=is_wrapped,json=isWrapped" json:"is_wrapped,omitempty"`
	// SRR protocol supported
	IsSrrSupported int32 `protobuf:"zigzag32,5,opt,name=is_srr_supported,json=isSrrSupported" json:"is_srr_supported,omitempty"`
	// Node name
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
}

func (m *SrpTopologyNodeData) Reset()                    { *m = SrpTopologyNodeData{} }
func (m *SrpTopologyNodeData) String() string            { return proto.CompactTextString(m) }
func (*SrpTopologyNodeData) ProtoMessage()               {}
func (*SrpTopologyNodeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SrpTopologyNodeData) GetHopCount() uint32 {
	if m != nil {
		return m.HopCount
	}
	return 0
}

func (m *SrpTopologyNodeData) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *SrpTopologyNodeData) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrpTopologyNodeData) GetIsWrapped() int32 {
	if m != nil {
		return m.IsWrapped
	}
	return 0
}

func (m *SrpTopologyNodeData) GetIsSrrSupported() int32 {
	if m != nil {
		return m.IsSrrSupported
	}
	return 0
}

func (m *SrpTopologyNodeData) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type SrpTopologyMap struct {
	// How often a topology pkt is sent
	TopologyTimer uint32 `protobuf:"varint,1,opt,name=topology_timer,json=topologyTimer" json:"topology_timer,omitempty"`
	// Time remaining until next topo pkt sent
	NextTopologyPacketDelay uint32 `protobuf:"varint,2,opt,name=next_topology_packet_delay,json=nextTopologyPacketDelay" json:"next_topology_packet_delay,omitempty"`
	// Time since last topo pkt was received
	TimeSinceLastTopologyPacketReceived uint32 `protobuf:"varint,3,opt,name=time_since_last_topology_packet_received,json=timeSinceLastTopologyPacketReceived" json:"time_since_last_topology_packet_received,omitempty"`
	// Time since last topology change
	TimeSinceLastTopologyChange uint32 `protobuf:"varint,4,opt,name=time_since_last_topology_change,json=timeSinceLastTopologyChange" json:"time_since_last_topology_change,omitempty"`
	// Number of nodes on ring
	NumberOfNodesOnRing uint32 `protobuf:"varint,5,opt,name=number_of_nodes_on_ring,json=numberOfNodesOnRing" json:"number_of_nodes_on_ring,omitempty"`
	// List of nodes on the ring info
	RingNodeList []*SrpTopologyNodeData `protobuf:"bytes,6,rep,name=ring_node_list,json=ringNodeList" json:"ring_node_list,omitempty"`
}

func (m *SrpTopologyMap) Reset()                    { *m = SrpTopologyMap{} }
func (m *SrpTopologyMap) String() string            { return proto.CompactTextString(m) }
func (*SrpTopologyMap) ProtoMessage()               {}
func (*SrpTopologyMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SrpTopologyMap) GetTopologyTimer() uint32 {
	if m != nil {
		return m.TopologyTimer
	}
	return 0
}

func (m *SrpTopologyMap) GetNextTopologyPacketDelay() uint32 {
	if m != nil {
		return m.NextTopologyPacketDelay
	}
	return 0
}

func (m *SrpTopologyMap) GetTimeSinceLastTopologyPacketReceived() uint32 {
	if m != nil {
		return m.TimeSinceLastTopologyPacketReceived
	}
	return 0
}

func (m *SrpTopologyMap) GetTimeSinceLastTopologyChange() uint32 {
	if m != nil {
		return m.TimeSinceLastTopologyChange
	}
	return 0
}

func (m *SrpTopologyMap) GetNumberOfNodesOnRing() uint32 {
	if m != nil {
		return m.NumberOfNodesOnRing
	}
	return 0
}

func (m *SrpTopologyMap) GetRingNodeList() []*SrpTopologyNodeData {
	if m != nil {
		return m.RingNodeList
	}
	return nil
}

type SrpTopologyInfo struct {
	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown" json:"is_admin_down,omitempty"`
	// Detailed SRP topology information
	LocalInformation []*SrpTopologyMap `protobuf:"bytes,2,rep,name=local_information,json=localInformation" json:"local_information,omitempty"`
}

func (m *SrpTopologyInfo) Reset()                    { *m = SrpTopologyInfo{} }
func (m *SrpTopologyInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpTopologyInfo) ProtoMessage()               {}
func (*SrpTopologyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SrpTopologyInfo) GetIsAdminDown() int32 {
	if m != nil {
		return m.IsAdminDown
	}
	return 0
}

func (m *SrpTopologyInfo) GetLocalInformation() []*SrpTopologyMap {
	if m != nil {
		return m.LocalInformation
	}
	return nil
}

// SRP failure info
type SrpFailureInfo struct {
	// Failure type
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Reported state
	ReportedState string `protobuf:"bytes,2,opt,name=reported_state,json=reportedState" json:"reported_state,omitempty"`
	// Debounced state
	DebouncedState string `protobuf:"bytes,3,opt,name=debounced_state,json=debouncedState" json:"debounced_state,omitempty"`
	// Current state
	CurrentState string `protobuf:"bytes,4,opt,name=current_state,json=currentState" json:"current_state,omitempty"`
	// Stable time
	StableTime uint64 `protobuf:"varint,5,opt,name=stable_time,json=stableTime" json:"stable_time,omitempty"`
	// Debounce delay
	DebouncedDelay uint32 `protobuf:"varint,6,opt,name=debounced_delay,json=debouncedDelay" json:"debounced_delay,omitempty"`
}

func (m *SrpFailureInfo) Reset()                    { *m = SrpFailureInfo{} }
func (m *SrpFailureInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpFailureInfo) ProtoMessage()               {}
func (*SrpFailureInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SrpFailureInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrpFailureInfo) GetReportedState() string {
	if m != nil {
		return m.ReportedState
	}
	return ""
}

func (m *SrpFailureInfo) GetDebouncedState() string {
	if m != nil {
		return m.DebouncedState
	}
	return ""
}

func (m *SrpFailureInfo) GetCurrentState() string {
	if m != nil {
		return m.CurrentState
	}
	return ""
}

func (m *SrpFailureInfo) GetStableTime() uint64 {
	if m != nil {
		return m.StableTime
	}
	return 0
}

func (m *SrpFailureInfo) GetDebouncedDelay() uint32 {
	if m != nil {
		return m.DebouncedDelay
	}
	return 0
}

type SrpIpsSideDetail struct {
	// MAC address
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Wrap state
	WrapState string `protobuf:"bytes,2,opt,name=wrap_state,json=wrapState" json:"wrap_state,omitempty"`
	// SRP IPS packet send interval in seconds
	PacketSentTimer uint32 `protobuf:"varint,3,opt,name=packet_sent_timer,json=packetSentTimer" json:"packet_sent_timer,omitempty"`
	// Time in seconds remaining until next send of an IPS request
	SendTimerTimeRemaining uint32 `protobuf:"varint,4,opt,name=send_timer_time_remaining,json=sendTimerTimeRemaining" json:"send_timer_time_remaining,omitempty"`
	// Time in seconds until wrap removal
	WtrTimerRemaining uint32 `protobuf:"varint,5,opt,name=wtr_timer_remaining,json=wtrTimerRemaining" json:"wtr_timer_remaining,omitempty"`
	// Self Detected Requests
	SelfDetectedRequest string `protobuf:"bytes,6,opt,name=self_detected_request,json=selfDetectedRequest" json:"self_detected_request,omitempty"`
	// Remote Requests
	RemoteRequest string `protobuf:"bytes,7,opt,name=remote_request,json=remoteRequest" json:"remote_request,omitempty"`
	// Failures presently asserted
	AssertedFailures []*SrpFailureInfo `protobuf:"bytes,8,rep,name=asserted_failures,json=assertedFailures" json:"asserted_failures,omitempty"`
	// Neighbour mac address for received message
	RxNeighborMacAddress string `protobuf:"bytes,9,opt,name=rx_neighbor_mac_address,json=rxNeighborMacAddress" json:"rx_neighbor_mac_address,omitempty"`
	// Type of message received
	RxMessageType string `protobuf:"bytes,10,opt,name=rx_message_type,json=rxMessageType" json:"rx_message_type,omitempty"`
	// Short/long path for received message
	RxPathType string `protobuf:"bytes,11,opt,name=rx_path_type,json=rxPathType" json:"rx_path_type,omitempty"`
	// Time to live for received message
	RxTtl uint32 `protobuf:"varint,12,opt,name=rx_ttl,json=rxTtl" json:"rx_ttl,omitempty"`
	// Test for existence of an RX packet
	RxPacketTest int32 `protobuf:"zigzag32,13,opt,name=rx_packet_test,json=rxPacketTest" json:"rx_packet_test,omitempty"`
	// Mac address of node receiving TXed messages
	TxNeighborMacAddress string `protobuf:"bytes,14,opt,name=tx_neighbor_mac_address,json=txNeighborMacAddress" json:"tx_neighbor_mac_address,omitempty"`
	// Type of message transmitted
	TxMessageType string `protobuf:"bytes,15,opt,name=tx_message_type,json=txMessageType" json:"tx_message_type,omitempty"`
	// Short/long path of transmitted message
	TxPathType string `protobuf:"bytes,16,opt,name=tx_path_type,json=txPathType" json:"tx_path_type,omitempty"`
	// Time to live for transmitted message
	TxTtl uint32 `protobuf:"varint,17,opt,name=tx_ttl,json=txTtl" json:"tx_ttl,omitempty"`
	// Test for existence of a TX packet
	TxPacketTest int32 `protobuf:"zigzag32,18,opt,name=tx_packet_test,json=txPacketTest" json:"tx_packet_test,omitempty"`
	// Number of milliseconds to wait after an L1 failure is detected before triggering an L2 wrap
	DelayKeepAliveTrigger uint32 `protobuf:"varint,19,opt,name=delay_keep_alive_trigger,json=delayKeepAliveTrigger" json:"delay_keep_alive_trigger,omitempty"`
}

func (m *SrpIpsSideDetail) Reset()                    { *m = SrpIpsSideDetail{} }
func (m *SrpIpsSideDetail) String() string            { return proto.CompactTextString(m) }
func (*SrpIpsSideDetail) ProtoMessage()               {}
func (*SrpIpsSideDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *SrpIpsSideDetail) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *SrpIpsSideDetail) GetWrapState() string {
	if m != nil {
		return m.WrapState
	}
	return ""
}

func (m *SrpIpsSideDetail) GetPacketSentTimer() uint32 {
	if m != nil {
		return m.PacketSentTimer
	}
	return 0
}

func (m *SrpIpsSideDetail) GetSendTimerTimeRemaining() uint32 {
	if m != nil {
		return m.SendTimerTimeRemaining
	}
	return 0
}

func (m *SrpIpsSideDetail) GetWtrTimerRemaining() uint32 {
	if m != nil {
		return m.WtrTimerRemaining
	}
	return 0
}

func (m *SrpIpsSideDetail) GetSelfDetectedRequest() string {
	if m != nil {
		return m.SelfDetectedRequest
	}
	return ""
}

func (m *SrpIpsSideDetail) GetRemoteRequest() string {
	if m != nil {
		return m.RemoteRequest
	}
	return ""
}

func (m *SrpIpsSideDetail) GetAssertedFailures() []*SrpFailureInfo {
	if m != nil {
		return m.AssertedFailures
	}
	return nil
}

func (m *SrpIpsSideDetail) GetRxNeighborMacAddress() string {
	if m != nil {
		return m.RxNeighborMacAddress
	}
	return ""
}

func (m *SrpIpsSideDetail) GetRxMessageType() string {
	if m != nil {
		return m.RxMessageType
	}
	return ""
}

func (m *SrpIpsSideDetail) GetRxPathType() string {
	if m != nil {
		return m.RxPathType
	}
	return ""
}

func (m *SrpIpsSideDetail) GetRxTtl() uint32 {
	if m != nil {
		return m.RxTtl
	}
	return 0
}

func (m *SrpIpsSideDetail) GetRxPacketTest() int32 {
	if m != nil {
		return m.RxPacketTest
	}
	return 0
}

func (m *SrpIpsSideDetail) GetTxNeighborMacAddress() string {
	if m != nil {
		return m.TxNeighborMacAddress
	}
	return ""
}

func (m *SrpIpsSideDetail) GetTxMessageType() string {
	if m != nil {
		return m.TxMessageType
	}
	return ""
}

func (m *SrpIpsSideDetail) GetTxPathType() string {
	if m != nil {
		return m.TxPathType
	}
	return ""
}

func (m *SrpIpsSideDetail) GetTxTtl() uint32 {
	if m != nil {
		return m.TxTtl
	}
	return 0
}

func (m *SrpIpsSideDetail) GetTxPacketTest() int32 {
	if m != nil {
		return m.TxPacketTest
	}
	return 0
}

func (m *SrpIpsSideDetail) GetDelayKeepAliveTrigger() uint32 {
	if m != nil {
		return m.DelayKeepAliveTrigger
	}
	return 0
}

type SrpIpsDetail struct {
	// MAC address for node
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Inter card bus enabled
	IsInterCardBusEnabled int32 `protobuf:"zigzag32,2,opt,name=is_inter_card_bus_enabled,json=isInterCardBusEnabled" json:"is_inter_card_bus_enabled,omitempty"`
	// IPS Wait To Restore period in seconds
	WtrTimerPeriod uint32 `protobuf:"varint,3,opt,name=wtr_timer_period,json=wtrTimerPeriod" json:"wtr_timer_period,omitempty"`
	// Side A IPS details
	SideA *SrpIpsSideDetail `protobuf:"bytes,4,opt,name=side_a,json=sideA" json:"side_a,omitempty"`
	// Side B IPS details
	SideB *SrpIpsSideDetail `protobuf:"bytes,5,opt,name=side_b,json=sideB" json:"side_b,omitempty"`
}

func (m *SrpIpsDetail) Reset()                    { *m = SrpIpsDetail{} }
func (m *SrpIpsDetail) String() string            { return proto.CompactTextString(m) }
func (*SrpIpsDetail) ProtoMessage()               {}
func (*SrpIpsDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SrpIpsDetail) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *SrpIpsDetail) GetIsInterCardBusEnabled() int32 {
	if m != nil {
		return m.IsInterCardBusEnabled
	}
	return 0
}

func (m *SrpIpsDetail) GetWtrTimerPeriod() uint32 {
	if m != nil {
		return m.WtrTimerPeriod
	}
	return 0
}

func (m *SrpIpsDetail) GetSideA() *SrpIpsSideDetail {
	if m != nil {
		return m.SideA
	}
	return nil
}

func (m *SrpIpsDetail) GetSideB() *SrpIpsSideDetail {
	if m != nil {
		return m.SideB
	}
	return nil
}

type SrpIpsInfo struct {
	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown" json:"is_admin_down,omitempty"`
	// IPS information
	LocalInformation []*SrpIpsDetail `protobuf:"bytes,2,rep,name=local_information,json=localInformation" json:"local_information,omitempty"`
}

func (m *SrpIpsInfo) Reset()                    { *m = SrpIpsInfo{} }
func (m *SrpIpsInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpIpsInfo) ProtoMessage()               {}
func (*SrpIpsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *SrpIpsInfo) GetIsAdminDown() int32 {
	if m != nil {
		return m.IsAdminDown
	}
	return 0
}

func (m *SrpIpsInfo) GetLocalInformation() []*SrpIpsDetail {
	if m != nil {
		return m.LocalInformation
	}
	return nil
}

type SrrNodeData struct {
	// Node name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	// Does the SRR information exist for this node
	SrrEntryExits int32 `protobuf:"zigzag32,2,opt,name=srr_entry_exits,json=srrEntryExits" json:"srr_entry_exits,omitempty"`
	// node mac address
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Outer failure
	OuterFailure string `protobuf:"bytes,4,opt,name=outer_failure,json=outerFailure" json:"outer_failure,omitempty"`
	// Inner failure
	InnerFailure string `protobuf:"bytes,5,opt,name=inner_failure,json=innerFailure" json:"inner_failure,omitempty"`
	// Announce last received ?
	IsLastAnnounceReceived int32 `protobuf:"zigzag32,6,opt,name=is_last_announce_received,json=isLastAnnounceReceived" json:"is_last_announce_received,omitempty"`
	// Announce last received
	LastAnnounceReceivedTime uint32 `protobuf:"varint,7,opt,name=last_announce_received_time,json=lastAnnounceReceivedTime" json:"last_announce_received_time,omitempty"`
}

func (m *SrrNodeData) Reset()                    { *m = SrrNodeData{} }
func (m *SrrNodeData) String() string            { return proto.CompactTextString(m) }
func (*SrrNodeData) ProtoMessage()               {}
func (*SrrNodeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SrrNodeData) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *SrrNodeData) GetSrrEntryExits() int32 {
	if m != nil {
		return m.SrrEntryExits
	}
	return 0
}

func (m *SrrNodeData) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *SrrNodeData) GetOuterFailure() string {
	if m != nil {
		return m.OuterFailure
	}
	return ""
}

func (m *SrrNodeData) GetInnerFailure() string {
	if m != nil {
		return m.InnerFailure
	}
	return ""
}

func (m *SrrNodeData) GetIsLastAnnounceReceived() int32 {
	if m != nil {
		return m.IsLastAnnounceReceived
	}
	return 0
}

func (m *SrrNodeData) GetLastAnnounceReceivedTime() uint32 {
	if m != nil {
		return m.LastAnnounceReceivedTime
	}
	return 0
}

type SrpSrrDetail struct {
	// Version number
	VersionNumber uint32 `protobuf:"varint,1,opt,name=version_number,json=versionNumber" json:"version_number,omitempty"`
	// Wrong version recieved
	IsWrongVersionReceived int32 `protobuf:"zigzag32,2,opt,name=is_wrong_version_received,json=isWrongVersionReceived" json:"is_wrong_version_received,omitempty"`
	// Time that last wrong version message recieved
	LastWrongVersionReceiveTime uint32 `protobuf:"varint,3,opt,name=last_wrong_version_receive_time,json=lastWrongVersionReceiveTime" json:"last_wrong_version_receive_time,omitempty"`
	// SRR node mac address
	MacAddress string `protobuf:"bytes,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// SRR node state
	NodeState string `protobuf:"bytes,5,opt,name=node_state,json=nodeState" json:"node_state,omitempty"`
	// Is the outer ring in use
	IsOuterRingInUse int32 `protobuf:"zigzag32,6,opt,name=is_outer_ring_in_use,json=isOuterRingInUse" json:"is_outer_ring_in_use,omitempty"`
	//  Is the inner ring in use
	IsInnerRingInUse int32 `protobuf:"zigzag32,7,opt,name=is_inner_ring_in_use,json=isInnerRingInUse" json:"is_inner_ring_in_use,omitempty"`
	// Is announcing enabled
	IsAnnounce int32 `protobuf:"zigzag32,8,opt,name=is_announce,json=isAnnounce" json:"is_announce,omitempty"`
	// Outer fail type
	OuterFailType string `protobuf:"bytes,9,opt,name=outer_fail_type,json=outerFailType" json:"outer_fail_type,omitempty"`
	// Inner fail type
	InnerFailType string `protobuf:"bytes,10,opt,name=inner_fail_type,json=innerFailType" json:"inner_fail_type,omitempty"`
	// SRR packet send timer interval in seconds
	PacketSendTimer uint32 `protobuf:"varint,11,opt,name=packet_send_timer,json=packetSendTimer" json:"packet_send_timer,omitempty"`
	// Time remaining in seconds to next SRR packet send
	NextSrrPacketSendTime uint32 `protobuf:"varint,12,opt,name=next_srr_packet_send_time,json=nextSrrPacketSendTime" json:"next_srr_packet_send_time,omitempty"`
	// Single ring bandwidth Mbps
	SingleRingBw uint32 `protobuf:"varint,13,opt,name=single_ring_bw,json=singleRingBw" json:"single_ring_bw,omitempty"`
	// SRR Wait To Restore interval delay in seconds
	WtrTime uint32 `protobuf:"varint,14,opt,name=wtr_time,json=wtrTime" json:"wtr_time,omitempty"`
	// Time remaining in seconds until next outer ring wrap removal
	WtrTimerRemainingOuterRing uint32 `protobuf:"varint,15,opt,name=wtr_timer_remaining_outer_ring,json=wtrTimerRemainingOuterRing" json:"wtr_timer_remaining_outer_ring,omitempty"`
	// Time remaining in seconds until next inner ring wrap removal
	WtrTimerRemainingInnerRing uint32 `protobuf:"varint,16,opt,name=wtr_timer_remaining_inner_ring,json=wtrTimerRemainingInnerRing" json:"wtr_timer_remaining_inner_ring,omitempty"`
	// List of nodes on the ring info
	NodesOnRing []*SrrNodeData `protobuf:"bytes,17,rep,name=nodes_on_ring,json=nodesOnRing" json:"nodes_on_ring,omitempty"`
	// nodes not in topology map
	NodesNotOnRing []*SrrNodeData `protobuf:"bytes,18,rep,name=nodes_not_on_ring,json=nodesNotOnRing" json:"nodes_not_on_ring,omitempty"`
}

func (m *SrpSrrDetail) Reset()                    { *m = SrpSrrDetail{} }
func (m *SrpSrrDetail) String() string            { return proto.CompactTextString(m) }
func (*SrpSrrDetail) ProtoMessage()               {}
func (*SrpSrrDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *SrpSrrDetail) GetVersionNumber() uint32 {
	if m != nil {
		return m.VersionNumber
	}
	return 0
}

func (m *SrpSrrDetail) GetIsWrongVersionReceived() int32 {
	if m != nil {
		return m.IsWrongVersionReceived
	}
	return 0
}

func (m *SrpSrrDetail) GetLastWrongVersionReceiveTime() uint32 {
	if m != nil {
		return m.LastWrongVersionReceiveTime
	}
	return 0
}

func (m *SrpSrrDetail) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *SrpSrrDetail) GetNodeState() string {
	if m != nil {
		return m.NodeState
	}
	return ""
}

func (m *SrpSrrDetail) GetIsOuterRingInUse() int32 {
	if m != nil {
		return m.IsOuterRingInUse
	}
	return 0
}

func (m *SrpSrrDetail) GetIsInnerRingInUse() int32 {
	if m != nil {
		return m.IsInnerRingInUse
	}
	return 0
}

func (m *SrpSrrDetail) GetIsAnnounce() int32 {
	if m != nil {
		return m.IsAnnounce
	}
	return 0
}

func (m *SrpSrrDetail) GetOuterFailType() string {
	if m != nil {
		return m.OuterFailType
	}
	return ""
}

func (m *SrpSrrDetail) GetInnerFailType() string {
	if m != nil {
		return m.InnerFailType
	}
	return ""
}

func (m *SrpSrrDetail) GetPacketSendTimer() uint32 {
	if m != nil {
		return m.PacketSendTimer
	}
	return 0
}

func (m *SrpSrrDetail) GetNextSrrPacketSendTime() uint32 {
	if m != nil {
		return m.NextSrrPacketSendTime
	}
	return 0
}

func (m *SrpSrrDetail) GetSingleRingBw() uint32 {
	if m != nil {
		return m.SingleRingBw
	}
	return 0
}

func (m *SrpSrrDetail) GetWtrTime() uint32 {
	if m != nil {
		return m.WtrTime
	}
	return 0
}

func (m *SrpSrrDetail) GetWtrTimerRemainingOuterRing() uint32 {
	if m != nil {
		return m.WtrTimerRemainingOuterRing
	}
	return 0
}

func (m *SrpSrrDetail) GetWtrTimerRemainingInnerRing() uint32 {
	if m != nil {
		return m.WtrTimerRemainingInnerRing
	}
	return 0
}

func (m *SrpSrrDetail) GetNodesOnRing() []*SrrNodeData {
	if m != nil {
		return m.NodesOnRing
	}
	return nil
}

func (m *SrpSrrDetail) GetNodesNotOnRing() []*SrrNodeData {
	if m != nil {
		return m.NodesNotOnRing
	}
	return nil
}

type SrpSrrInfo struct {
	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown" json:"is_admin_down,omitempty"`
	// SRR enabled
	IsSrrEnabled int32 `protobuf:"zigzag32,2,opt,name=is_srr_enabled,json=isSrrEnabled" json:"is_srr_enabled,omitempty"`
	// SRP information
	SrrDetailedInfo []*SrpSrrDetail `protobuf:"bytes,3,rep,name=srr_detailed_info,json=srrDetailedInfo" json:"srr_detailed_info,omitempty"`
}

func (m *SrpSrrInfo) Reset()                    { *m = SrpSrrInfo{} }
func (m *SrpSrrInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpSrrInfo) ProtoMessage()               {}
func (*SrpSrrInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *SrpSrrInfo) GetIsAdminDown() int32 {
	if m != nil {
		return m.IsAdminDown
	}
	return 0
}

func (m *SrpSrrInfo) GetIsSrrEnabled() int32 {
	if m != nil {
		return m.IsSrrEnabled
	}
	return 0
}

func (m *SrpSrrInfo) GetSrrDetailedInfo() []*SrpSrrDetail {
	if m != nil {
		return m.SrrDetailedInfo
	}
	return nil
}

// Detailed SRP rate limit information
type SrpRateLimitDetail struct {
	// Minimum SRP priority for high-priority transmit queue
	MinPriorityValue uint32 `protobuf:"varint,1,opt,name=min_priority_value,json=minPriorityValue" json:"min_priority_value,omitempty"`
}

func (m *SrpRateLimitDetail) Reset()                    { *m = SrpRateLimitDetail{} }
func (m *SrpRateLimitDetail) String() string            { return proto.CompactTextString(m) }
func (*SrpRateLimitDetail) ProtoMessage()               {}
func (*SrpRateLimitDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SrpRateLimitDetail) GetMinPriorityValue() uint32 {
	if m != nil {
		return m.MinPriorityValue
	}
	return 0
}

// SRP rate limit information
type SrpRateLimitInfo struct {
	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown" json:"is_admin_down,omitempty"`
	// SRP rate limit information
	RateLimitDetailedInfo []*SrpRateLimitDetail `protobuf:"bytes,2,rep,name=rate_limit_detailed_info,json=rateLimitDetailedInfo" json:"rate_limit_detailed_info,omitempty"`
}

func (m *SrpRateLimitInfo) Reset()                    { *m = SrpRateLimitInfo{} }
func (m *SrpRateLimitInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpRateLimitInfo) ProtoMessage()               {}
func (*SrpRateLimitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SrpRateLimitInfo) GetIsAdminDown() int32 {
	if m != nil {
		return m.IsAdminDown
	}
	return 0
}

func (m *SrpRateLimitInfo) GetRateLimitDetailedInfo() []*SrpRateLimitDetail {
	if m != nil {
		return m.RateLimitDetailedInfo
	}
	return nil
}

// Complete SRP information
type SrpAllInfo struct {
	// SRP IPS information
	IpsInfo *SrpIpsInfo `protobuf:"bytes,1,opt,name=ips_info,json=ipsInfo" json:"ips_info,omitempty"`
	// SRP topology information
	TopologyInfo *SrpTopologyInfo `protobuf:"bytes,2,opt,name=topology_info,json=topologyInfo" json:"topology_info,omitempty"`
	// SRP SRR information
	SrrInfo *SrpSrrInfo `protobuf:"bytes,3,opt,name=srr_info,json=srrInfo" json:"srr_info,omitempty"`
	// SRP rate limit information
	RateLimitInfo *SrpRateLimitInfo `protobuf:"bytes,4,opt,name=rate_limit_info,json=rateLimitInfo" json:"rate_limit_info,omitempty"`
}

func (m *SrpAllInfo) Reset()                    { *m = SrpAllInfo{} }
func (m *SrpAllInfo) String() string            { return proto.CompactTextString(m) }
func (*SrpAllInfo) ProtoMessage()               {}
func (*SrpAllInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SrpAllInfo) GetIpsInfo() *SrpIpsInfo {
	if m != nil {
		return m.IpsInfo
	}
	return nil
}

func (m *SrpAllInfo) GetTopologyInfo() *SrpTopologyInfo {
	if m != nil {
		return m.TopologyInfo
	}
	return nil
}

func (m *SrpAllInfo) GetSrrInfo() *SrpSrrInfo {
	if m != nil {
		return m.SrrInfo
	}
	return nil
}

func (m *SrpAllInfo) GetRateLimitInfo() *SrpRateLimitInfo {
	if m != nil {
		return m.RateLimitInfo
	}
	return nil
}

type TunlPfiIn6AddrT struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *TunlPfiIn6AddrT) Reset()                    { *m = TunlPfiIn6AddrT{} }
func (m *TunlPfiIn6AddrT) String() string            { return proto.CompactTextString(m) }
func (*TunlPfiIn6AddrT) ProtoMessage()               {}
func (*TunlPfiIn6AddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *TunlPfiIn6AddrT) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PfiIpAddrUnion struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// IPv6 address type
	Ipv6 *TunlPfiIn6AddrT `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *PfiIpAddrUnion) Reset()                    { *m = PfiIpAddrUnion{} }
func (m *PfiIpAddrUnion) String() string            { return proto.CompactTextString(m) }
func (*PfiIpAddrUnion) ProtoMessage()               {}
func (*PfiIpAddrUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *PfiIpAddrUnion) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *PfiIpAddrUnion) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PfiIpAddrUnion) GetIpv6() *TunlPfiIn6AddrT {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

// Tunnel info
type ImCmdTunlGreInfo struct {
	// Tunnel source name
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	// Tunnel source IP address
	SourceIpAddress *PfiIpAddrUnion `protobuf:"bytes,2,opt,name=source_ip_address,json=sourceIpAddress" json:"source_ip_address,omitempty"`
	// Tunnel destination IP address
	DestinationIpAddress *PfiIpAddrUnion `protobuf:"bytes,3,opt,name=destination_ip_address,json=destinationIpAddress" json:"destination_ip_address,omitempty"`
	// GRE tunnel TOS
	TunnelTos uint32 `protobuf:"varint,4,opt,name=tunnel_tos,json=tunnelTos" json:"tunnel_tos,omitempty"`
	// GRE tunnel TTL
	TunnelTtl uint32 `protobuf:"varint,5,opt,name=tunnel_ttl,json=tunnelTtl" json:"tunnel_ttl,omitempty"`
	// Key value for GRE Packet
	Key uint32 `protobuf:"varint,6,opt,name=key" json:"key,omitempty"`
	// Keepalive period in seconds
	KeepalivePeriod uint32 `protobuf:"varint,7,opt,name=keepalive_period,json=keepalivePeriod" json:"keepalive_period,omitempty"`
	// Keepalive retry
	KeepaliveMaximumRetry uint32 `protobuf:"varint,8,opt,name=keepalive_maximum_retry,json=keepaliveMaximumRetry" json:"keepalive_maximum_retry,omitempty"`
	// Tunnel GRE Mode
	TunnelMode string `protobuf:"bytes,9,opt,name=tunnel_mode,json=tunnelMode" json:"tunnel_mode,omitempty"`
	// Keepalive State
	KeepaliveState string `protobuf:"bytes,10,opt,name=keepalive_state,json=keepaliveState" json:"keepalive_state,omitempty"`
	// DF Bit State
	DfBitState string `protobuf:"bytes,11,opt,name=df_bit_state,json=dfBitState" json:"df_bit_state,omitempty"`
	// Key Config State
	KeyBitState string `protobuf:"bytes,12,opt,name=key_bit_state,json=keyBitState" json:"key_bit_state,omitempty"`
}

func (m *ImCmdTunlGreInfo) Reset()                    { *m = ImCmdTunlGreInfo{} }
func (m *ImCmdTunlGreInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdTunlGreInfo) ProtoMessage()               {}
func (*ImCmdTunlGreInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ImCmdTunlGreInfo) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *ImCmdTunlGreInfo) GetSourceIpAddress() *PfiIpAddrUnion {
	if m != nil {
		return m.SourceIpAddress
	}
	return nil
}

func (m *ImCmdTunlGreInfo) GetDestinationIpAddress() *PfiIpAddrUnion {
	if m != nil {
		return m.DestinationIpAddress
	}
	return nil
}

func (m *ImCmdTunlGreInfo) GetTunnelTos() uint32 {
	if m != nil {
		return m.TunnelTos
	}
	return 0
}

func (m *ImCmdTunlGreInfo) GetTunnelTtl() uint32 {
	if m != nil {
		return m.TunnelTtl
	}
	return 0
}

func (m *ImCmdTunlGreInfo) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *ImCmdTunlGreInfo) GetKeepalivePeriod() uint32 {
	if m != nil {
		return m.KeepalivePeriod
	}
	return 0
}

func (m *ImCmdTunlGreInfo) GetKeepaliveMaximumRetry() uint32 {
	if m != nil {
		return m.KeepaliveMaximumRetry
	}
	return 0
}

func (m *ImCmdTunlGreInfo) GetTunnelMode() string {
	if m != nil {
		return m.TunnelMode
	}
	return ""
}

func (m *ImCmdTunlGreInfo) GetKeepaliveState() string {
	if m != nil {
		return m.KeepaliveState
	}
	return ""
}

func (m *ImCmdTunlGreInfo) GetDfBitState() string {
	if m != nil {
		return m.DfBitState
	}
	return ""
}

func (m *ImCmdTunlGreInfo) GetKeyBitState() string {
	if m != nil {
		return m.KeyBitState
	}
	return ""
}

// Serial interface information
type SerialInterface struct {
	// Timeslots separated by : or - from 1 to 31. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
	Timeslots string `protobuf:"bytes,1,opt,name=timeslots" json:"timeslots,omitempty"`
}

func (m *SerialInterface) Reset()                    { *m = SerialInterface{} }
func (m *SerialInterface) String() string            { return proto.CompactTextString(m) }
func (*SerialInterface) ProtoMessage()               {}
func (*SerialInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *SerialInterface) GetTimeslots() string {
	if m != nil {
		return m.Timeslots
	}
	return ""
}

// SONET POS interface information
type ImSonetPosInfoInterface struct {
	// APS state
	ApsState string `protobuf:"bytes,1,opt,name=aps_state,json=apsState" json:"aps_state,omitempty"`
}

func (m *ImSonetPosInfoInterface) Reset()                    { *m = ImSonetPosInfoInterface{} }
func (m *ImSonetPosInfoInterface) String() string            { return proto.CompactTextString(m) }
func (*ImSonetPosInfoInterface) ProtoMessage()               {}
func (*ImSonetPosInfoInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ImSonetPosInfoInterface) GetApsState() string {
	if m != nil {
		return m.ApsState
	}
	return ""
}

type PwheEtherInterfaceInfo struct {
	// Interface list Name
	InterfaceListName string `protobuf:"bytes,1,opt,name=interface_list_name,json=interfaceListName" json:"interface_list_name,omitempty"`
	// L2 Overhead
	L2Overhead uint32 `protobuf:"varint,2,opt,name=l2_overhead,json=l2Overhead" json:"l2_overhead,omitempty"`
	// Internal Label
	InternalLabel uint32 `protobuf:"varint,3,opt,name=internal_label,json=internalLabel" json:"internal_label,omitempty"`
}

func (m *PwheEtherInterfaceInfo) Reset()                    { *m = PwheEtherInterfaceInfo{} }
func (m *PwheEtherInterfaceInfo) String() string            { return proto.CompactTextString(m) }
func (*PwheEtherInterfaceInfo) ProtoMessage()               {}
func (*PwheEtherInterfaceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *PwheEtherInterfaceInfo) GetInterfaceListName() string {
	if m != nil {
		return m.InterfaceListName
	}
	return ""
}

func (m *PwheEtherInterfaceInfo) GetL2Overhead() uint32 {
	if m != nil {
		return m.L2Overhead
	}
	return 0
}

func (m *PwheEtherInterfaceInfo) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

// CEM interface information
type CemInterface struct {
	// Timeslots separated by : or - from 1 to 32. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
	Timeslots string `protobuf:"bytes,1,opt,name=timeslots" json:"timeslots,omitempty"`
	// Payload size in bytes configured on CEM interface
	Payload uint32 `protobuf:"varint,2,opt,name=payload" json:"payload,omitempty"`
	// Dejitter buffer length configuredin milliseconds
	DejitterBuffer uint32 `protobuf:"varint,3,opt,name=dejitter_buffer,json=dejitterBuffer" json:"dejitter_buffer,omitempty"`
	//  If framing is TRUE then the CEM  interface is structure aware ; otherwise it is structure agnostic
	Framing int32 `protobuf:"zigzag32,4,opt,name=framing" json:"framing,omitempty"`
}

func (m *CemInterface) Reset()                    { *m = CemInterface{} }
func (m *CemInterface) String() string            { return proto.CompactTextString(m) }
func (*CemInterface) ProtoMessage()               {}
func (*CemInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CemInterface) GetTimeslots() string {
	if m != nil {
		return m.Timeslots
	}
	return ""
}

func (m *CemInterface) GetPayload() uint32 {
	if m != nil {
		return m.Payload
	}
	return 0
}

func (m *CemInterface) GetDejitterBuffer() uint32 {
	if m != nil {
		return m.DejitterBuffer
	}
	return 0
}

func (m *CemInterface) GetFraming() int32 {
	if m != nil {
		return m.Framing
	}
	return 0
}

// nV Optical Controller information
type NvOpticalInterfaceInfo struct {
	// Controller that nV controller maps to
	Controller string `protobuf:"bytes,1,opt,name=controller" json:"controller,omitempty"`
}

func (m *NvOpticalInterfaceInfo) Reset()                    { *m = NvOpticalInterfaceInfo{} }
func (m *NvOpticalInterfaceInfo) String() string            { return proto.CompactTextString(m) }
func (*NvOpticalInterfaceInfo) ProtoMessage()               {}
func (*NvOpticalInterfaceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *NvOpticalInterfaceInfo) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

// GCC
type ImCmdGccPerPortInfo struct {
	// Derived State
	DerivedMode string `protobuf:"bytes,1,opt,name=derived_mode,json=derivedMode" json:"derived_mode,omitempty"`
	// Sec State
	SecState string `protobuf:"bytes,2,opt,name=sec_state,json=secState" json:"sec_state,omitempty"`
}

func (m *ImCmdGccPerPortInfo) Reset()                    { *m = ImCmdGccPerPortInfo{} }
func (m *ImCmdGccPerPortInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdGccPerPortInfo) ProtoMessage()               {}
func (*ImCmdGccPerPortInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ImCmdGccPerPortInfo) GetDerivedMode() string {
	if m != nil {
		return m.DerivedMode
	}
	return ""
}

func (m *ImCmdGccPerPortInfo) GetSecState() string {
	if m != nil {
		return m.SecState
	}
	return ""
}

type ImCmdDampSt struct {
	// Dampening penalty of the interface
	Penalty uint32 `protobuf:"varint,1,opt,name=penalty" json:"penalty,omitempty"`
	// Flag showing if state is suppressed
	IsSuppressedEnabled bool `protobuf:"varint,2,opt,name=is_suppressed_enabled,json=isSuppressedEnabled" json:"is_suppressed_enabled,omitempty"`
	// Remaining period of suppression in secs
	SecondsRemaining uint32 `protobuf:"varint,3,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	// Configured decay half life in mins
	HalfLife uint32 `protobuf:"varint,4,opt,name=half_life,json=halfLife" json:"half_life,omitempty"`
	// Configured reuse threshold
	ReuseThreshold uint32 `protobuf:"varint,5,opt,name=reuse_threshold,json=reuseThreshold" json:"reuse_threshold,omitempty"`
	// Value of suppress threshold
	SuppressThreshold uint32 `protobuf:"varint,6,opt,name=suppress_threshold,json=suppressThreshold" json:"suppress_threshold,omitempty"`
	// Maximum suppress time in mins
	MaximumSuppressTime uint32 `protobuf:"varint,7,opt,name=maximum_suppress_time,json=maximumSuppressTime" json:"maximum_suppress_time,omitempty"`
	// Configured restart penalty
	RestartPenalty uint32 `protobuf:"varint,8,opt,name=restart_penalty,json=restartPenalty" json:"restart_penalty,omitempty"`
}

func (m *ImCmdDampSt) Reset()                    { *m = ImCmdDampSt{} }
func (m *ImCmdDampSt) String() string            { return proto.CompactTextString(m) }
func (*ImCmdDampSt) ProtoMessage()               {}
func (*ImCmdDampSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ImCmdDampSt) GetPenalty() uint32 {
	if m != nil {
		return m.Penalty
	}
	return 0
}

func (m *ImCmdDampSt) GetIsSuppressedEnabled() bool {
	if m != nil {
		return m.IsSuppressedEnabled
	}
	return false
}

func (m *ImCmdDampSt) GetSecondsRemaining() uint32 {
	if m != nil {
		return m.SecondsRemaining
	}
	return 0
}

func (m *ImCmdDampSt) GetHalfLife() uint32 {
	if m != nil {
		return m.HalfLife
	}
	return 0
}

func (m *ImCmdDampSt) GetReuseThreshold() uint32 {
	if m != nil {
		return m.ReuseThreshold
	}
	return 0
}

func (m *ImCmdDampSt) GetSuppressThreshold() uint32 {
	if m != nil {
		return m.SuppressThreshold
	}
	return 0
}

func (m *ImCmdDampSt) GetMaximumSuppressTime() uint32 {
	if m != nil {
		return m.MaximumSuppressTime
	}
	return 0
}

func (m *ImCmdDampSt) GetRestartPenalty() uint32 {
	if m != nil {
		return m.RestartPenalty
	}
	return 0
}

type ImCmdArpInfoSt struct {
	// ARP timeout in seconds. Only valid if 'ARPIsLearningDisabled' is 'false'
	ArpTimeout uint32 `protobuf:"varint,1,opt,name=arp_timeout,json=arpTimeout" json:"arp_timeout,omitempty"`
	// ARP type name
	ArpTypeName string `protobuf:"bytes,2,opt,name=arp_type_name,json=arpTypeName" json:"arp_type_name,omitempty"`
	// Whether the interface has dynamic learning disabled
	ArpIsLearningDisabled bool `protobuf:"varint,3,opt,name=arp_is_learning_disabled,json=arpIsLearningDisabled" json:"arp_is_learning_disabled,omitempty"`
}

func (m *ImCmdArpInfoSt) Reset()                    { *m = ImCmdArpInfoSt{} }
func (m *ImCmdArpInfoSt) String() string            { return proto.CompactTextString(m) }
func (*ImCmdArpInfoSt) ProtoMessage()               {}
func (*ImCmdArpInfoSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ImCmdArpInfoSt) GetArpTimeout() uint32 {
	if m != nil {
		return m.ArpTimeout
	}
	return 0
}

func (m *ImCmdArpInfoSt) GetArpTypeName() string {
	if m != nil {
		return m.ArpTypeName
	}
	return ""
}

func (m *ImCmdArpInfoSt) GetArpIsLearningDisabled() bool {
	if m != nil {
		return m.ArpIsLearningDisabled
	}
	return false
}

type ImCmdIpInfoSt struct {
	// Interface IPv4 address
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// Interface subnet mask length
	SubnetMaskLength uint32 `protobuf:"varint,2,opt,name=subnet_mask_length,json=subnetMaskLength" json:"subnet_mask_length,omitempty"`
}

func (m *ImCmdIpInfoSt) Reset()                    { *m = ImCmdIpInfoSt{} }
func (m *ImCmdIpInfoSt) String() string            { return proto.CompactTextString(m) }
func (*ImCmdIpInfoSt) ProtoMessage()               {}
func (*ImCmdIpInfoSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *ImCmdIpInfoSt) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ImCmdIpInfoSt) GetSubnetMaskLength() uint32 {
	if m != nil {
		return m.SubnetMaskLength
	}
	return 0
}

type ImCmdMacAddrSt struct {
	// MAC Address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ImCmdMacAddrSt) Reset()                    { *m = ImCmdMacAddrSt{} }
func (m *ImCmdMacAddrSt) String() string            { return proto.CompactTextString(m) }
func (*ImCmdMacAddrSt) ProtoMessage()               {}
func (*ImCmdMacAddrSt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ImCmdMacAddrSt) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ImCmdIfStats struct {
	StatsType string `protobuf:"bytes,1,opt,name=stats_type,json=statsType" json:"stats_type,omitempty"`
	// Packet, byte and all error counters
	FullInterfaceStats *IfstatsbagGeneric `protobuf:"bytes,2,opt,name=full_interface_stats,json=fullInterfaceStats" json:"full_interface_stats,omitempty"`
	// Packet, byte and selected error counters
	BasicInterfaceStats *IfstatsbagBasic `protobuf:"bytes,3,opt,name=basic_interface_stats,json=basicInterfaceStats" json:"basic_interface_stats,omitempty"`
}

func (m *ImCmdIfStats) Reset()                    { *m = ImCmdIfStats{} }
func (m *ImCmdIfStats) String() string            { return proto.CompactTextString(m) }
func (*ImCmdIfStats) ProtoMessage()               {}
func (*ImCmdIfStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *ImCmdIfStats) GetStatsType() string {
	if m != nil {
		return m.StatsType
	}
	return ""
}

func (m *ImCmdIfStats) GetFullInterfaceStats() *IfstatsbagGeneric {
	if m != nil {
		return m.FullInterfaceStats
	}
	return nil
}

func (m *ImCmdIfStats) GetBasicInterfaceStats() *IfstatsbagBasic {
	if m != nil {
		return m.BasicInterfaceStats
	}
	return nil
}

type ImCmdCarrierDelaySt struct {
	// Carrier delay on state up (ms)
	CarrierDelayUp uint32 `protobuf:"varint,1,opt,name=carrier_delay_up,json=carrierDelayUp" json:"carrier_delay_up,omitempty"`
	// Carrier delay on state down (ms)
	CarrierDelayDown uint32 `protobuf:"varint,2,opt,name=carrier_delay_down,json=carrierDelayDown" json:"carrier_delay_down,omitempty"`
}

func (m *ImCmdCarrierDelaySt) Reset()                    { *m = ImCmdCarrierDelaySt{} }
func (m *ImCmdCarrierDelaySt) String() string            { return proto.CompactTextString(m) }
func (*ImCmdCarrierDelaySt) ProtoMessage()               {}
func (*ImCmdCarrierDelaySt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ImCmdCarrierDelaySt) GetCarrierDelayUp() uint32 {
	if m != nil {
		return m.CarrierDelayUp
	}
	return 0
}

func (m *ImCmdCarrierDelaySt) GetCarrierDelayDown() uint32 {
	if m != nil {
		return m.CarrierDelayDown
	}
	return 0
}

type ImCmdFrInfo struct {
	// Frame Relay encapsulation type
	FrEncapsulationType string `protobuf:"bytes,1,opt,name=fr_encapsulation_type,json=frEncapsulationType" json:"fr_encapsulation_type,omitempty"`
	// The LMI type: Autosense, ANSI, CCITT or CISCO
	LmiType string `protobuf:"bytes,2,opt,name=lmi_type,json=lmiType" json:"lmi_type,omitempty"`
	// LMI DLCI
	Lmidlci uint32 `protobuf:"varint,3,opt,name=lmidlci" json:"lmidlci,omitempty"`
	// The NNI LMI interface type
	IsNni bool `protobuf:"varint,4,opt,name=is_nni,json=isNni" json:"is_nni,omitempty"`
	// The DTE/DCE LMI interface type
	IsDte bool `protobuf:"varint,5,opt,name=is_dte,json=isDte" json:"is_dte,omitempty"`
	// Flag indicating whether the LMI  DTE/DCE/NNI-DTE state is UP
	IsLmiUp bool `protobuf:"varint,6,opt,name=is_lmi_up,json=isLmiUp" json:"is_lmi_up,omitempty"`
	// Flag indicating whether the LMI  NNI-DCE state is UP
	IsLmiNniDceUp bool `protobuf:"varint,7,opt,name=is_lmi_nni_dce_up,json=isLmiNniDceUp" json:"is_lmi_nni_dce_up,omitempty"`
	// The status of FR LMI for an interface
	IsLmiEnabled bool `protobuf:"varint,8,opt,name=is_lmi_enabled,json=isLmiEnabled" json:"is_lmi_enabled,omitempty"`
	// Number of enquiry messages received
	EnquiriesReceived uint32 `protobuf:"varint,9,opt,name=enquiries_received,json=enquiriesReceived" json:"enquiries_received,omitempty"`
	// Number of enquiry messages sent
	EnquiriesSent uint32 `protobuf:"varint,10,opt,name=enquiries_sent,json=enquiriesSent" json:"enquiries_sent,omitempty"`
	// Number of status messages received
	StatusReceived uint32 `protobuf:"varint,11,opt,name=status_received,json=statusReceived" json:"status_received,omitempty"`
	// Number of status messages sent
	StatusSent uint32 `protobuf:"varint,12,opt,name=status_sent,json=statusSent" json:"status_sent,omitempty"`
	// Number of update status messages received
	UpdateStatusReceived uint32 `protobuf:"varint,13,opt,name=update_status_received,json=updateStatusReceived" json:"update_status_received,omitempty"`
	// Number of update status messages sent
	UpdateStatusSent uint32 `protobuf:"varint,14,opt,name=update_status_sent,json=updateStatusSent" json:"update_status_sent,omitempty"`
}

func (m *ImCmdFrInfo) Reset()                    { *m = ImCmdFrInfo{} }
func (m *ImCmdFrInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdFrInfo) ProtoMessage()               {}
func (*ImCmdFrInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *ImCmdFrInfo) GetFrEncapsulationType() string {
	if m != nil {
		return m.FrEncapsulationType
	}
	return ""
}

func (m *ImCmdFrInfo) GetLmiType() string {
	if m != nil {
		return m.LmiType
	}
	return ""
}

func (m *ImCmdFrInfo) GetLmidlci() uint32 {
	if m != nil {
		return m.Lmidlci
	}
	return 0
}

func (m *ImCmdFrInfo) GetIsNni() bool {
	if m != nil {
		return m.IsNni
	}
	return false
}

func (m *ImCmdFrInfo) GetIsDte() bool {
	if m != nil {
		return m.IsDte
	}
	return false
}

func (m *ImCmdFrInfo) GetIsLmiUp() bool {
	if m != nil {
		return m.IsLmiUp
	}
	return false
}

func (m *ImCmdFrInfo) GetIsLmiNniDceUp() bool {
	if m != nil {
		return m.IsLmiNniDceUp
	}
	return false
}

func (m *ImCmdFrInfo) GetIsLmiEnabled() bool {
	if m != nil {
		return m.IsLmiEnabled
	}
	return false
}

func (m *ImCmdFrInfo) GetEnquiriesReceived() uint32 {
	if m != nil {
		return m.EnquiriesReceived
	}
	return 0
}

func (m *ImCmdFrInfo) GetEnquiriesSent() uint32 {
	if m != nil {
		return m.EnquiriesSent
	}
	return 0
}

func (m *ImCmdFrInfo) GetStatusReceived() uint32 {
	if m != nil {
		return m.StatusReceived
	}
	return 0
}

func (m *ImCmdFrInfo) GetStatusSent() uint32 {
	if m != nil {
		return m.StatusSent
	}
	return 0
}

func (m *ImCmdFrInfo) GetUpdateStatusReceived() uint32 {
	if m != nil {
		return m.UpdateStatusReceived
	}
	return 0
}

func (m *ImCmdFrInfo) GetUpdateStatusSent() uint32 {
	if m != nil {
		return m.UpdateStatusSent
	}
	return 0
}

// Encapsulation-specific information
type ImCmdEncapsInfo struct {
	EncapsulationType string `protobuf:"bytes,1,opt,name=encapsulation_type,json=encapsulationType" json:"encapsulation_type,omitempty"`
	// Frame Relay information
	FrameRelayInformation *ImCmdFrInfo `protobuf:"bytes,2,opt,name=frame_relay_information,json=frameRelayInformation" json:"frame_relay_information,omitempty"`
	// VLAN 802.1q information
	Dot1QInformation *VlanIntfGeneric `protobuf:"bytes,3,opt,name=dot1_q_information,json=dot1QInformation" json:"dot1_q_information,omitempty"`
	// PPP information
	PppInformation *PppShowIntInfo `protobuf:"bytes,4,opt,name=ppp_information,json=pppInformation" json:"ppp_information,omitempty"`
}

func (m *ImCmdEncapsInfo) Reset()                    { *m = ImCmdEncapsInfo{} }
func (m *ImCmdEncapsInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdEncapsInfo) ProtoMessage()               {}
func (*ImCmdEncapsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ImCmdEncapsInfo) GetEncapsulationType() string {
	if m != nil {
		return m.EncapsulationType
	}
	return ""
}

func (m *ImCmdEncapsInfo) GetFrameRelayInformation() *ImCmdFrInfo {
	if m != nil {
		return m.FrameRelayInformation
	}
	return nil
}

func (m *ImCmdEncapsInfo) GetDot1QInformation() *VlanIntfGeneric {
	if m != nil {
		return m.Dot1QInformation
	}
	return nil
}

func (m *ImCmdEncapsInfo) GetPppInformation() *PppShowIntInfo {
	if m != nil {
		return m.PppInformation
	}
	return nil
}

type ImCmdSrpInfo struct {
	// SRP-specific data
	SrpInformation *SrpAllInfo `protobuf:"bytes,1,opt,name=srp_information,json=srpInformation" json:"srp_information,omitempty"`
	// SRP-specific packet and byte counters
	SrpStatistics *IfstatsbagSrp `protobuf:"bytes,2,opt,name=srp_statistics,json=srpStatistics" json:"srp_statistics,omitempty"`
}

func (m *ImCmdSrpInfo) Reset()                    { *m = ImCmdSrpInfo{} }
func (m *ImCmdSrpInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdSrpInfo) ProtoMessage()               {}
func (*ImCmdSrpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *ImCmdSrpInfo) GetSrpInformation() *SrpAllInfo {
	if m != nil {
		return m.SrpInformation
	}
	return nil
}

func (m *ImCmdSrpInfo) GetSrpStatistics() *IfstatsbagSrp {
	if m != nil {
		return m.SrpStatistics
	}
	return nil
}

type ImCmdTunnelInfo struct {
	// Tunnel source name
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	// Tunnel source IP address
	SourceIpv4Address string `protobuf:"bytes,2,opt,name=source_ipv4_address,json=sourceIpv4Address" json:"source_ipv4_address,omitempty"`
	// Tunnel destination IP address
	DestinationIpv4Address string `protobuf:"bytes,3,opt,name=destination_ipv4_address,json=destinationIpv4Address" json:"destination_ipv4_address,omitempty"`
	// Tunnel protocol/transport
	TunnelType string `protobuf:"bytes,4,opt,name=tunnel_type,json=tunnelType" json:"tunnel_type,omitempty"`
	// GRE tunnel key
	Key uint32 `protobuf:"varint,5,opt,name=key" json:"key,omitempty"`
	// GRE tunnel TTL
	Ttl uint32 `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *ImCmdTunnelInfo) Reset()                    { *m = ImCmdTunnelInfo{} }
func (m *ImCmdTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdTunnelInfo) ProtoMessage()               {}
func (*ImCmdTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *ImCmdTunnelInfo) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *ImCmdTunnelInfo) GetSourceIpv4Address() string {
	if m != nil {
		return m.SourceIpv4Address
	}
	return ""
}

func (m *ImCmdTunnelInfo) GetDestinationIpv4Address() string {
	if m != nil {
		return m.DestinationIpv4Address
	}
	return ""
}

func (m *ImCmdTunnelInfo) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func (m *ImCmdTunnelInfo) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *ImCmdTunnelInfo) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type ImCmdBundleInfo struct {
	// List of bundle members and their properties
	MemberList []*BmMemberData `protobuf:"bytes,1,rep,name=member_list,json=memberList" json:"member_list,omitempty"`
}

func (m *ImCmdBundleInfo) Reset()                    { *m = ImCmdBundleInfo{} }
func (m *ImCmdBundleInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdBundleInfo) ProtoMessage()               {}
func (*ImCmdBundleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *ImCmdBundleInfo) GetMemberList() []*BmMemberData {
	if m != nil {
		return m.MemberList
	}
	return nil
}

// Interface-specific information
type ImCmdIntfTypeInfo struct {
	InterfaceTypeInfo string `protobuf:"bytes,1,opt,name=interface_type_info,json=interfaceTypeInfo" json:"interface_type_info,omitempty"`
	// SRP interface information
	SrpInformation *ImCmdSrpInfo `protobuf:"bytes,2,opt,name=srp_information,json=srpInformation" json:"srp_information,omitempty"`
	// Tunnel interface information
	TunnelInformation *ImCmdTunnelInfo `protobuf:"bytes,3,opt,name=tunnel_information,json=tunnelInformation" json:"tunnel_information,omitempty"`
	// Bundle interface information
	BundleInformation *ImCmdBundleInfo `protobuf:"bytes,4,opt,name=bundle_information,json=bundleInformation" json:"bundle_information,omitempty"`
	// Serial interface information
	SerialInformation *SerialInterface `protobuf:"bytes,5,opt,name=serial_information,json=serialInformation" json:"serial_information,omitempty"`
	// SONET POS interface information
	SonetPosInformation *ImSonetPosInfoInterface `protobuf:"bytes,6,opt,name=sonet_pos_information,json=sonetPosInformation" json:"sonet_pos_information,omitempty"`
	// Tunnel GRE interface information
	TunnelGreInformation *ImCmdTunlGreInfo `protobuf:"bytes,7,opt,name=tunnel_gre_information,json=tunnelGreInformation" json:"tunnel_gre_information,omitempty"`
	// PseudowireHeadEnd interface information
	PseudowireHeadEndInformation *PwheEtherInterfaceInfo `protobuf:"bytes,8,opt,name=pseudowire_head_end_information,json=pseudowireHeadEndInformation" json:"pseudowire_head_end_information,omitempty"`
	// Cem interface information
	CemInformation *CemInterface `protobuf:"bytes,9,opt,name=cem_information,json=cemInformation" json:"cem_information,omitempty"`
	// GCC interface information
	GccInformation *ImCmdGccPerPortInfo `protobuf:"bytes,10,opt,name=gcc_information,json=gccInformation" json:"gcc_information,omitempty"`
}

func (m *ImCmdIntfTypeInfo) Reset()                    { *m = ImCmdIntfTypeInfo{} }
func (m *ImCmdIntfTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*ImCmdIntfTypeInfo) ProtoMessage()               {}
func (*ImCmdIntfTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *ImCmdIntfTypeInfo) GetInterfaceTypeInfo() string {
	if m != nil {
		return m.InterfaceTypeInfo
	}
	return ""
}

func (m *ImCmdIntfTypeInfo) GetSrpInformation() *ImCmdSrpInfo {
	if m != nil {
		return m.SrpInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetTunnelInformation() *ImCmdTunnelInfo {
	if m != nil {
		return m.TunnelInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetBundleInformation() *ImCmdBundleInfo {
	if m != nil {
		return m.BundleInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetSerialInformation() *SerialInterface {
	if m != nil {
		return m.SerialInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetSonetPosInformation() *ImSonetPosInfoInterface {
	if m != nil {
		return m.SonetPosInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetTunnelGreInformation() *ImCmdTunlGreInfo {
	if m != nil {
		return m.TunnelGreInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetPseudowireHeadEndInformation() *PwheEtherInterfaceInfo {
	if m != nil {
		return m.PseudowireHeadEndInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetCemInformation() *CemInterface {
	if m != nil {
		return m.CemInformation
	}
	return nil
}

func (m *ImCmdIntfTypeInfo) GetGccInformation() *ImCmdGccPerPortInfo {
	if m != nil {
		return m.GccInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*ImCmdInfo_KEYS)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info_KEYS")
	proto.RegisterType((*ImCmdInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info")
	proto.RegisterType((*IfstatsbagGeneric)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_generic")
	proto.RegisterType((*IfstatsbagBasic)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_basic")
	proto.RegisterType((*StatsdbagDatarate)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.statsdbag_datarate")
	proto.RegisterType((*IfstatsSrpPerSideErrorsSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_errors_st")
	proto.RegisterType((*IfstatsSrpPerSideDataRateSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_data_rate_st")
	proto.RegisterType((*IfstatsbagSrp)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp")
	proto.RegisterType((*StatsBagIdTd)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_id_td")
	proto.RegisterType((*StatsBagBlockSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_block_st")
	proto.RegisterType((*StatsBagElementSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_element_st")
	proto.RegisterType((*StatsData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data")
	proto.RegisterType((*PppShowIntNcpInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_ncp_info")
	proto.RegisterType((*PppShowIntInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_info")
	proto.RegisterType((*BmMbrStateReasonDataType)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mbr_state_reason_data_type")
	proto.RegisterType((*BmMacAddrSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mac_addr_st")
	proto.RegisterType((*BmMuxData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mux_data")
	proto.RegisterType((*BmLacpCounters)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_counters")
	proto.RegisterType((*BmLacpLinkData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_link_data")
	proto.RegisterType((*BmMemberData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data")
	proto.RegisterType((*VlanDoubleTagStack)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_double_tag_stack")
	proto.RegisterType((*EfpRange)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_range")
	proto.RegisterType((*EfpTagMatch)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_match")
	proto.RegisterType((*EfpVlanTag)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_vlan_tag")
	proto.RegisterType((*EfpTagLocalTrafficStack)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_local_traffic_stack")
	proto.RegisterType((*MacAddressType)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.MacAddressType")
	proto.RegisterType((*EfpDescription)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description")
	proto.RegisterType((*EfpDescriptionPType)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description_p_type")
	proto.RegisterType((*VlanTagStackType)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type")
	proto.RegisterType((*VlanIntfGeneric)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_intf_generic")
	proto.RegisterType((*SrpTopologyNodeData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_node_data")
	proto.RegisterType((*SrpTopologyMap)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_map")
	proto.RegisterType((*SrpTopologyInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_info")
	proto.RegisterType((*SrpFailureInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_failure_info")
	proto.RegisterType((*SrpIpsSideDetail)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_side_detail")
	proto.RegisterType((*SrpIpsDetail)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_detail")
	proto.RegisterType((*SrpIpsInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_info")
	proto.RegisterType((*SrrNodeData)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srr_node_data")
	proto.RegisterType((*SrpSrrDetail)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_detail")
	proto.RegisterType((*SrpSrrInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_info")
	proto.RegisterType((*SrpRateLimitDetail)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_detail")
	proto.RegisterType((*SrpRateLimitInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_info")
	proto.RegisterType((*SrpAllInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info")
	proto.RegisterType((*TunlPfiIn6AddrT)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.tunl_pfi_in6_addr_t")
	proto.RegisterType((*PfiIpAddrUnion)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pfi_ip_addr_union")
	proto.RegisterType((*ImCmdTunlGreInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunl_gre_info")
	proto.RegisterType((*SerialInterface)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.serial_interface")
	proto.RegisterType((*ImSonetPosInfoInterface)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_sonet_pos_info_interface")
	proto.RegisterType((*PwheEtherInterfaceInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pwhe_ether_interface_info")
	proto.RegisterType((*CemInterface)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.cem_interface")
	proto.RegisterType((*NvOpticalInterfaceInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.nv_optical_interface_info")
	proto.RegisterType((*ImCmdGccPerPortInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_gcc_per_port_info")
	proto.RegisterType((*ImCmdDampSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_damp_st")
	proto.RegisterType((*ImCmdArpInfoSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_arp_info_st")
	proto.RegisterType((*ImCmdIpInfoSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_ip_info_st")
	proto.RegisterType((*ImCmdMacAddrSt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_mac_addr_st")
	proto.RegisterType((*ImCmdIfStats)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_if_stats")
	proto.RegisterType((*ImCmdCarrierDelaySt)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_carrier_delay_st")
	proto.RegisterType((*ImCmdFrInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_fr_info")
	proto.RegisterType((*ImCmdEncapsInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info")
	proto.RegisterType((*ImCmdSrpInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_srp_info")
	proto.RegisterType((*ImCmdTunnelInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunnel_info")
	proto.RegisterType((*ImCmdBundleInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_bundle_info")
	proto.RegisterType((*ImCmdIntfTypeInfo)(nil), "cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info")
}

func init() { proto.RegisterFile("im_cmd_info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 7035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0x4b, 0x6f, 0x24, 0xc9,
	0x71, 0x30, 0x9a, 0xef, 0x0e, 0xb2, 0x9b, 0xdd, 0x45, 0x36, 0xd9, 0xf3, 0xda, 0x99, 0xe9, 0x7d,
	0x68, 0xb4, 0x8f, 0x91, 0x44, 0xcd, 0xbe, 0xb4, 0x7a, 0xcd, 0x6b, 0xb5, 0xd4, 0x92, 0x33, 0xb3,
	0x45, 0xce, 0xae, 0x5e, 0xdf, 0x57, 0x5f, 0x75, 0x55, 0x76, 0x33, 0x97, 0xd5, 0x55, 0x35, 0x99,
	0xd9, 0x7c, 0x68, 0xa5, 0x4f, 0xdf, 0x27, 0xf9, 0x21, 0xc8, 0xb0, 0x65, 0x58, 0x07, 0xdb, 0x07,
	0x19, 0x86, 0xed, 0xbb, 0x7d, 0x91, 0x01, 0x5f, 0x7c, 0xf1, 0xc1, 0xb0, 0x61, 0xc0, 0x17, 0xfb,
	0x68, 0x18, 0x30, 0x24, 0xc0, 0x17, 0xff, 0x02, 0xc3, 0xb0, 0x91, 0x11, 0x99, 0xf5, 0xe8, 0x6e,
	0x4a, 0x03, 0x4f, 0x8f, 0xe0, 0x0b, 0xd9, 0x15, 0x11, 0x19, 0x11, 0x99, 0x19, 0x19, 0x19, 0x11,
	0x99, 0x55, 0xd0, 0xe4, 0x03, 0x2f, 0x18, 0x84, 0x1e, 0x8f, 0x7b, 0xc9, 0xf5, 0x54, 0x24, 0x2a,
	0x71, 0x3e, 0x1f, 0x70, 0x19, 0x24, 0x1e, 0x4f, 0xa4, 0x77, 0x22, 0xbc, 0xb4, 0xc7, 0x3d, 0x43,
	0x93, 0xa4, 0x4c, 0x5c, 0xe7, 0xb1, 0x62, 0xa2, 0xe7, 0x07, 0x4c, 0xe6, 0x3f, 0xbd, 0x93, 0x02,
	0xbc, 0xf3, 0x26, 0x34, 0x0a, 0x4c, 0xbd, 0x77, 0xef, 0x7e, 0x75, 0xcf, 0x79, 0x1e, 0xea, 0x39,
	0x75, 0xec, 0x0f, 0x58, 0xbb, 0x72, 0xa5, 0x72, 0xad, 0xea, 0xd6, 0x32, 0xe8, 0x3d, 0x7f, 0xc0,
	0x3a, 0xff, 0xda, 0x82, 0xe5, 0x42, 0x5b, 0xe7, 0xe3, 0xd0, 0xc8, 0x9b, 0x1d, 0xf8, 0x71, 0x18,
	0xb1, 0xf6, 0x16, 0x36, 0x5c, 0xcd, 0xe0, 0xef, 0x20, 0xb8, 0x2c, 0x41, 0x9d, 0xa6, 0xac, 0xfd,
	0xe9, 0x11, 0x09, 0xfb, 0xa7, 0x29, 0x73, 0x3e, 0x09, 0xeb, 0x07, 0xbe, 0x08, 0x8f, 0x7d, 0x41,
	0x54, 0x9e, 0x54, 0x82, 0xc7, 0xfd, 0xf6, 0x0d, 0x24, 0x76, 0x2c, 0x4e, 0xd3, 0xee, 0x21, 0xc6,
	0x59, 0x87, 0x79, 0xa9, 0x7c, 0xc5, 0xda, 0xaf, 0x22, 0x09, 0x3d, 0x38, 0x97, 0x00, 0x22, 0x1e,
	0xeb, 0xe6, 0x1a, 0xf5, 0x1a, 0xa2, 0xaa, 0x1a, 0xb2, 0x87, 0xe8, 0xe7, 0xa0, 0xc6, 0xe2, 0xc0,
	0x4f, 0xe5, 0x30, 0xf2, 0x15, 0x4f, 0xe2, 0xf6, 0xeb, 0xa4, 0x4c, 0x09, 0xe8, 0x7c, 0x06, 0xce,
	0x95, 0x00, 0x25, 0x8d, 0xde, 0xc0, 0x16, 0x9b, 0x25, 0x82, 0x82, 0x5a, 0x0d, 0x98, 0x1d, 0xa8,
	0x61, 0xfb, 0xcd, 0x2b, 0x95, 0x6b, 0x35, 0x57, 0xff, 0x74, 0x5e, 0x85, 0x4d, 0x2e, 0xbd, 0x68,
	0xcb, 0x53, 0xc2, 0x8f, 0x65, 0x9a, 0x08, 0xe5, 0xb1, 0xd8, 0xef, 0x46, 0x2c, 0x6c, 0x7f, 0xe6,
	0x4a, 0xe5, 0xda, 0x92, 0xbb, 0xce, 0xe5, 0xce, 0xd6, 0xbe, 0x45, 0xde, 0x25, 0x9c, 0x73, 0x03,
	0x36, 0xb0, 0x13, 0xd4, 0x8c, 0xa3, 0x1e, 0x41, 0x32, 0x8c, 0x55, 0xfb, 0x2d, 0xe4, 0xbd, 0x8e,
	0xd8, 0xfd, 0x0c, 0x79, 0x5b, 0xe3, 0x9c, 0xb7, 0xe0, 0x7c, 0xe4, 0x4b, 0xe5, 0x8d, 0x35, 0x55,
	0x7c, 0xc0, 0xda, 0x9f, 0xc5, 0x96, 0x9b, 0x9a, 0x62, 0xaf, 0xdc, 0x7a, 0x9f, 0x0f, 0x70, 0x12,
	0xb8, 0xf4, 0x42, 0x7f, 0x90, 0xb2, 0x98, 0xc7, 0xfd, 0x4c, 0xcd, 0xcf, 0xa1, 0x9a, 0x0e, 0x97,
	0x77, 0x2c, 0xca, 0x2a, 0xf9, 0xbd, 0x0a, 0xb4, 0x72, 0x7a, 0x6d, 0x1b, 0x62, 0x40, 0x03, 0xfb,
	0xf9, 0x2b, 0x95, 0x6b, 0xcb, 0x5b, 0xf7, 0xae, 0x3f, 0x99, 0xd1, 0x5e, 0x37, 0xd4, 0x5a, 0x86,
	0x27, 0x95, 0xbb, 0x9e, 0x09, 0xdb, 0xce, 0x65, 0xa1, 0x29, 0xa4, 0x8c, 0x85, 0xed, 0x2f, 0x60,
	0xff, 0xe8, 0x41, 0x9b, 0x42, 0x20, 0x02, 0x2f, 0x62, 0x71, 0x5f, 0x1d, 0xb4, 0xbf, 0x88, 0xa8,
	0x6a, 0x20, 0x82, 0x1d, 0x04, 0x38, 0xd7, 0x61, 0x8d, 0x4b, 0x4f, 0x06, 0xc2, 0x1f, 0x74, 0x23,
	0x96, 0xf5, 0xf5, 0x26, 0xf6, 0xb5, 0xc9, 0xe5, 0x9e, 0xc1, 0xd8, 0xae, 0x5e, 0x84, 0x6a, 0x38,
	0x4c, 0x23, 0x76, 0xc2, 0xd5, 0x69, 0xfb, 0x16, 0x19, 0x56, 0x06, 0xd0, 0xc2, 0x06, 0x2c, 0xe4,
	0x3e, 0x99, 0xf8, 0x6d, 0x42, 0x23, 0x04, 0xcd, 0xfb, 0x02, 0x68, 0x23, 0x3c, 0x24, 0xec, 0x1d,
	0xc4, 0x2e, 0x69, 0x00, 0x22, 0x5f, 0x80, 0x55, 0x1e, 0x7b, 0xbd, 0x28, 0x39, 0xf6, 0x82, 0x24,
	0x56, 0x22, 0x89, 0xda, 0x77, 0xed, 0x1a, 0x79, 0x3b, 0x4a, 0x8e, 0x6f, 0x13, 0xd0, 0xb9, 0x06,
	0x8d, 0x64, 0xa8, 0xca, 0x84, 0x6f, 0x23, 0x61, 0x3d, 0x19, 0xaa, 0x22, 0xa5, 0x84, 0xe5, 0x81,
	0x1f, 0x78, 0x7e, 0x18, 0x0a, 0x26, 0x65, 0xfb, 0x4b, 0x38, 0x17, 0xee, 0x94, 0xe6, 0xc2, 0x72,
	0xd6, 0xf3, 0x01, 0x03, 0x3f, 0xb8, 0x49, 0x52, 0x9c, 0xff, 0x0b, 0xcd, 0xee, 0x50, 0xc4, 0x4c,
	0xfb, 0x88, 0x4c, 0xf4, 0x3b, 0x4f, 0x4d, 0xf4, 0x2a, 0x09, 0xdb, 0x8e, 0xad, 0xfc, 0x6f, 0x41,
	0x2d, 0xf0, 0x85, 0xe0, 0x4c, 0x78, 0x21, 0x8b, 0xfc, 0xd3, 0xf6, 0x36, 0xca, 0xfe, 0x60, 0x4a,
	0xb2, 0x4b, 0xbc, 0xb5, 0x02, 0x2b, 0x06, 0x72, 0x47, 0x03, 0xb4, 0x79, 0x74, 0xfd, 0x38, 0x3c,
	0xe6, 0xa1, 0x3a, 0x68, 0x7f, 0x99, 0x8c, 0x2d, 0x03, 0x38, 0xcf, 0x42, 0x6d, 0xe0, 0x9f, 0x78,
	0x39, 0xc5, 0xbb, 0x48, 0xb1, 0x32, 0xf0, 0x4f, 0x6e, 0x65, 0x44, 0x17, 0xa1, 0x7a, 0xc8, 0x58,
	0xea, 0x47, 0xfc, 0x88, 0xb5, 0x77, 0x88, 0x45, 0x06, 0x70, 0xae, 0xc0, 0x0a, 0xb9, 0x91, 0x28,
	0x49, 0x52, 0x16, 0xb6, 0x77, 0xd1, 0x50, 0x41, 0xfb, 0x8e, 0x1d, 0x84, 0x38, 0x5b, 0xd0, 0x4a,
	0x7d, 0xc1, 0x62, 0xe5, 0x8d, 0xf8, 0xf4, 0x7b, 0x68, 0x24, 0x6b, 0x84, 0xdc, 0x2e, 0x7a, 0x76,
	0xe7, 0x55, 0xd8, 0xd0, 0xfc, 0xba, 0x7e, 0x70, 0xa8, 0x6d, 0xaa, 0xc7, 0xfb, 0x43, 0x41, 0x0b,
	0xf8, 0x3e, 0x36, 0x6a, 0x59, 0xec, 0xed, 0x22, 0xd2, 0xb9, 0x02, 0xcb, 0x21, 0x93, 0x81, 0xe0,
	0x29, 0xd2, 0x3e, 0x40, 0xda, 0x22, 0xc8, 0xf9, 0x08, 0x56, 0x7d, 0x91, 0x96, 0x5c, 0xc2, 0x7b,
	0x53, 0xb5, 0x05, 0xcb, 0x5d, 0x4f, 0x45, 0xdd, 0x17, 0x69, 0xd1, 0x21, 0x9c, 0x40, 0x9d, 0x97,
	0x65, 0xbb, 0x28, 0xfb, 0xbd, 0x29, 0xc9, 0xe6, 0xb9, 0xe8, 0x1a, 0x2f, 0x49, 0xbe, 0x01, 0x1b,
	0x5c, 0x7a, 0x03, 0x5f, 0x37, 0x89, 0xfd, 0x38, 0xc8, 0x1d, 0xcb, 0x9e, 0xf5, 0xf5, 0xbb, 0x39,
	0xd2, 0xfa, 0x96, 0x6b, 0xd0, 0x40, 0xc7, 0xab, 0x7c, 0x8f, 0xc7, 0x47, 0x4c, 0x28, 0x16, 0xb6,
	0xf7, 0x91, 0xbe, 0xae, 0x9d, 0xae, 0xf2, 0xb7, 0x0d, 0x54, 0x6f, 0xa7, 0xf9, 0x36, 0x32, 0x48,
	0x42, 0xd6, 0x7e, 0x48, 0xae, 0x22, 0x83, 0xee, 0x26, 0x21, 0x73, 0x7e, 0x58, 0x19, 0xdd, 0xc2,
	0x8a, 0x83, 0xf1, 0xfe, 0x54, 0x27, 0x82, 0xe4, 0xa0, 0x00, 0xb7, 0x5d, 0x12, 0x5a, 0x1c, 0x98,
	0x1f, 0x55, 0xe0, 0x7c, 0x39, 0x10, 0x28, 0xa9, 0xf4, 0x01, 0xaa, 0xf4, 0x70, 0x5a, 0xf3, 0x13,
	0xab, 0x5e, 0x2e, 0xc3, 0x6d, 0x97, 0x62, 0x8d, 0xa2, 0x56, 0x8f, 0x00, 0x70, 0xd4, 0x85, 0xaf,
	0x98, 0x6c, 0x7f, 0x65, 0x3a, 0xe3, 0xa2, 0xf7, 0x5e, 0x19, 0x76, 0xfd, 0x3e, 0xce, 0xa8, 0x66,
	0xed, 0x56, 0xf5, 0x2f, 0x57, 0x0b, 0x71, 0xbe, 0x5b, 0x81, 0xf5, 0xbc, 0xa1, 0xa6, 0xe5, 0x52,
	0xf1, 0x40, 0xb6, 0xbf, 0x8a, 0xd2, 0xef, 0x4f, 0x6b, 0x08, 0x7a, 0xc8, 0x5b, 0xba, 0x6b, 0x19,
	0x6a, 0x2f, 0x93, 0xa5, 0x95, 0xd8, 0x8c, 0xb6, 0xbc, 0x89, 0x7a, 0x7c, 0x0d, 0xf5, 0xf8, 0xf2,
	0x54, 0x46, 0x01, 0x47, 0xc0, 0x6d, 0x45, 0x5b, 0xdb, 0x13, 0x94, 0x38, 0x01, 0x88, 0x8f, 0xbc,
	0x24, 0x55, 0x3c, 0xf0, 0xa3, 0xf6, 0xd7, 0x51, 0xec, 0x57, 0x9f, 0x54, 0x6c, 0xce, 0xb1, 0xd0,
	0x3b, 0xb4, 0x82, 0x6a, 0x7c, 0x74, 0x9f, 0x30, 0xce, 0x39, 0x58, 0xe2, 0x3d, 0x8f, 0xc7, 0x21,
	0x3b, 0x69, 0x7f, 0x03, 0x1d, 0xed, 0x22, 0xef, 0x6d, 0xeb, 0xc7, 0xce, 0xdf, 0xd5, 0xc0, 0xe1,
	0x3d, 0x54, 0x5e, 0xcf, 0x60, 0x9f, 0xc5, 0x4c, 0xf0, 0x40, 0x47, 0xbc, 0xa9, 0x1f, 0x1c, 0x32,
	0x25, 0x3d, 0xc1, 0x02, 0xc6, 0x8f, 0x58, 0x88, 0xa1, 0xf2, 0x9c, 0xbb, 0x6a, 0xe0, 0xae, 0x01,
	0xeb, 0x25, 0xda, 0x3d, 0x55, 0xac, 0x40, 0x38, 0x83, 0x84, 0x35, 0x84, 0x66, 0x64, 0x57, 0x61,
	0xc5, 0x72, 0x94, 0x2c, 0x56, 0xed, 0x59, 0x24, 0x5a, 0x36, 0xb0, 0x3d, 0x16, 0x2b, 0x1d, 0x54,
	0x10, 0x27, 0x24, 0x98, 0x43, 0x82, 0x2a, 0x42, 0x10, 0xfd, 0x59, 0x38, 0x3f, 0x18, 0x46, 0xba,
	0x47, 0x52, 0x79, 0x63, 0xda, 0xcd, 0x23, 0x79, 0x3b, 0xa3, 0x78, 0x30, 0xa2, 0xe6, 0x67, 0xe1,
	0x7c, 0x57, 0x24, 0x7e, 0x38, 0xb9, 0xf5, 0x02, 0xb5, 0xce, 0x28, 0x46, 0x5b, 0xdf, 0x80, 0x8d,
	0x71, 0xd9, 0xa8, 0xe6, 0x22, 0xb6, 0x5c, 0x1f, 0x95, 0x8b, 0x1a, 0xdf, 0x80, 0x8d, 0x71, 0x99,
	0xd8, 0x6a, 0x89, 0x5a, 0x8d, 0xca, 0xc3, 0x56, 0x57, 0x61, 0x25, 0x19, 0xaa, 0x74, 0xa8, 0xbc,
	0x50, 0x24, 0xa9, 0x6c, 0x57, 0x71, 0xc6, 0x96, 0x09, 0x76, 0x47, 0x83, 0x9c, 0x97, 0xc1, 0x31,
	0x24, 0x8f, 0x86, 0x6c, 0xc8, 0x0c, 0x21, 0x20, 0x61, 0x83, 0x30, 0xef, 0x69, 0x04, 0x51, 0x5f,
	0x86, 0x65, 0x1e, 0xe7, 0xfc, 0x96, 0x91, 0x0c, 0x10, 0x44, 0x04, 0x2f, 0x42, 0x93, 0x08, 0x8a,
	0xdc, 0x56, 0x90, 0x6c, 0x15, 0x11, 0x05, 0x66, 0x5b, 0xd0, 0x12, 0xc3, 0x78, 0xc2, 0x10, 0xd6,
	0x90, 0x7e, 0x4d, 0x23, 0x27, 0x8c, 0x5e, 0x9f, 0xfb, 0x93, 0x1a, 0xd5, 0x29, 0xb6, 0x47, 0xec,
	0x84, 0x19, 0x53, 0x07, 0x22, 0x51, 0x2a, 0x62, 0xe1, 0x78, 0xcb, 0x55, 0x6c, 0xd9, 0xce, 0x28,
	0x46, 0x5b, 0xbf, 0x06, 0x9b, 0xa9, 0x2f, 0xb8, 0x3a, 0x1d, 0x6f, 0xda, 0xc0, 0xa6, 0x2d, 0x42,
	0x8f, 0xb6, 0xdb, 0x86, 0xab, 0xc3, 0xf8, 0x30, 0x4e, 0x8e, 0x63, 0x0f, 0xf3, 0xd0, 0x20, 0x89,
	0xc6, 0x39, 0x34, 0x91, 0xc3, 0x33, 0x86, 0xf0, 0x81, 0xa1, 0x1b, 0x65, 0x75, 0x15, 0x56, 0x68,
	0x58, 0x99, 0x10, 0x89, 0x90, 0x6d, 0x87, 0x26, 0x12, 0x61, 0x77, 0x11, 0x64, 0x83, 0x76, 0x43,
	0xb0, 0x96, 0x05, 0xed, 0x06, 0x8d, 0xd9, 0xa4, 0xe6, 0x90, 0x1c, 0x31, 0x21, 0x86, 0xb1, 0x6c,
	0xaf, 0x23, 0x49, 0x0d, 0xa1, 0xf7, 0x0d, 0x50, 0xf7, 0xb5, 0x27, 0xfc, 0x01, 0xe6, 0x30, 0xd8,
	0x30, 0xd7, 0xb4, 0x45, 0x7d, 0x35, 0x68, 0x62, 0x9b, 0x29, 0xb8, 0x05, 0x2d, 0x62, 0xcf, 0xfb,
	0x71, 0x22, 0xf2, 0x51, 0x6e, 0x6f, 0xd0, 0x5c, 0x22, 0x72, 0x9b, 0x70, 0xa6, 0x73, 0x79, 0xa7,
	0xfc, 0x6e, 0x22, 0x94, 0x6c, 0x6f, 0x16, 0x3a, 0x75, 0x13, 0x41, 0x3a, 0xfa, 0x33, 0xd6, 0x69,
	0xfa, 0xd5, 0xa6, 0xe8, 0x8f, 0x80, 0xa6, 0x6b, 0x1f, 0x07, 0x63, 0xa8, 0xde, 0x30, 0x0e, 0x4d,
	0xe7, 0xce, 0x91, 0xc9, 0x11, 0xfc, 0xa1, 0x05, 0x6b, 0xf3, 0x31, 0xa4, 0xdd, 0x61, 0xaf, 0xc7,
	0x84, 0xd7, 0xf3, 0x79, 0x34, 0x14, 0x4c, 0xb6, 0xcf, 0x93, 0xf9, 0x10, 0xf6, 0x16, 0x22, 0xdf,
	0x36, 0x38, 0x9d, 0x1a, 0x96, 0x5a, 0x49, 0x4f, 0x1e, 0xfb, 0x69, 0xca, 0x42, 0x2f, 0x19, 0xaa,
	0xf6, 0x05, 0x4a, 0x0d, 0x8b, 0x2d, 0xe5, 0x1e, 0xe1, 0xef, 0x0f, 0x95, 0x73, 0x1e, 0x96, 0xfc,
	0x34, 0x8d, 0xf8, 0xa3, 0x21, 0x6b, 0x5f, 0x44, 0xd2, 0xec, 0xd9, 0xd9, 0x80, 0x05, 0xc1, 0xa4,
	0x1e, 0xa6, 0x4b, 0x88, 0x31, 0x4f, 0xce, 0x27, 0x60, 0xcd, 0x06, 0xcd, 0x79, 0x22, 0x2a, 0xdb,
	0xcf, 0x20, 0x91, 0x63, 0x50, 0x79, 0x0a, 0x2a, 0x9d, 0x97, 0xa0, 0xe9, 0x1f, 0xf9, 0x3c, 0xf2,
	0xbb, 0x3c, 0xd2, 0x86, 0xda, 0x8b, 0xfc, 0x7e, 0xfb, 0x32, 0x2d, 0xe2, 0x22, 0xe2, 0xed, 0xc8,
	0xef, 0x3b, 0xcf, 0x41, 0x1d, 0x33, 0x5d, 0xdc, 0xbf, 0x31, 0xbb, 0xbd, 0x42, 0xa3, 0xaa, 0xa1,
	0x3a, 0x66, 0xc2, 0x94, 0xf6, 0x1d, 0xb8, 0x2a, 0x59, 0x90, 0xc4, 0xa1, 0xf4, 0x24, 0xd7, 0xe1,
	0x18, 0xb6, 0x09, 0x22, 0xe6, 0x0b, 0xca, 0xa6, 0x99, 0x90, 0xed, 0xab, 0xd8, 0xf0, 0x92, 0x21,
	0xdc, 0xd3, 0x74, 0x3b, 0xbe, 0x54, 0xb7, 0x35, 0xd5, 0x6d, 0x43, 0xa4, 0x6d, 0x8a, 0xe4, 0xe9,
	0xfd, 0x29, 0x56, 0x3c, 0x1e, 0x6a, 0x15, 0x51, 0x70, 0x87, 0x6c, 0x0a, 0x05, 0x17, 0xb1, 0xa8,
	0xc1, 0x4d, 0xb8, 0x54, 0xd6, 0x80, 0x6c, 0x2a, 0xb7, 0xc8, 0x67, 0xb1, 0xf5, 0xf9, 0xa2, 0x74,
	0xb2, 0xad, 0xcc, 0x2c, 0xdf, 0x84, 0x73, 0x13, 0x59, 0xa0, 0xe7, 0x7c, 0x0e, 0x9b, 0x6f, 0x8c,
	0x37, 0xd7, 0xbe, 0xb3, 0xf3, 0x1f, 0xf3, 0xd0, 0x28, 0x6c, 0x67, 0x5d, 0x5f, 0xfe, 0x0f, 0xdd,
	0xcc, 0x46, 0x7c, 0xf2, 0xfc, 0xe3, 0xf9, 0xe4, 0x85, 0xc9, 0x3e, 0x79, 0xd4, 0xd1, 0x2c, 0x8e,
	0x3b, 0x9a, 0xc7, 0x72, 0x6b, 0x4b, 0x8f, 0xeb, 0xd6, 0xa6, 0xbb, 0x3f, 0x8d, 0xf9, 0x8b, 0xe5,
	0x09, 0xfe, 0x62, 0xdc, 0xfe, 0x57, 0xfe, 0xbb, 0xf6, 0x5f, 0x7b, 0x42, 0xfb, 0xaf, 0x3f, 0x91,
	0xfd, 0xaf, 0x3e, 0x99, 0xfd, 0x37, 0x7e, 0xae, 0xfd, 0xff, 0x64, 0x0e, 0x9c, 0xf1, 0x78, 0x9c,
	0x4a, 0x2e, 0x38, 0x63, 0x36, 0xfa, 0x37, 0x0b, 0x80, 0x36, 0x92, 0x3b, 0x26, 0x5a, 0xcf, 0x8d,
	0xce, 0x2a, 0xad, 0x29, 0x69, 0x05, 0x10, 0x03, 0xa3, 0xa9, 0xa6, 0xbd, 0x96, 0x39, 0xf0, 0x9c,
	0x29, 0xad, 0x83, 0xba, 0x31, 0x05, 0xcb, 0x35, 0xb7, 0x86, 0x22, 0x5b, 0x5a, 0x12, 0x86, 0x47,
	0x81, 0xef, 0x27, 0x60, 0x3d, 0x65, 0xfe, 0xa1, 0x37, 0xaa, 0x30, 0x05, 0x78, 0x4d, 0x8d, 0xdb,
	0x2e, 0x29, 0xfd, 0x69, 0xd8, 0x28, 0x34, 0x28, 0x8a, 0xa0, 0xa8, 0x6e, 0x2d, 0x6b, 0x52, 0x90,
	0xf2, 0x29, 0x68, 0x61, 0xa3, 0xb1, 0x2e, 0x50, 0x3c, 0xe7, 0x68, 0xe4, 0xfd, 0x72, 0x37, 0x5e,
	0x85, 0xcd, 0x62, 0x93, 0xa2, 0x20, 0x13, 0xce, 0xe5, 0x8d, 0x0a, 0x92, 0x4a, 0x95, 0x92, 0xea,
	0x84, 0x4a, 0x49, 0x94, 0xf8, 0x21, 0x05, 0xef, 0x47, 0x7e, 0x64, 0x16, 0xc9, 0x8a, 0x06, 0x6e,
	0x1b, 0x98, 0x76, 0x16, 0x46, 0xa8, 0x06, 0xdb, 0x00, 0x8e, 0x40, 0x3b, 0x89, 0x8f, 0xb5, 0x3f,
	0xea, 0x3d, 0xe2, 0x69, 0x61, 0x54, 0x11, 0x82, 0xe8, 0x2b, 0xb0, 0x2c, 0x58, 0xc4, 0xcd, 0x76,
	0x62, 0xec, 0xbf, 0x08, 0xea, 0xfc, 0xc9, 0x1c, 0x3c, 0x63, 0xfc, 0xa6, 0x27, 0x45, 0xea, 0xa5,
	0x4c, 0x78, 0x92, 0x87, 0xcc, 0xc6, 0x13, 0x12, 0x83, 0x59, 0x7c, 0xf0, 0x26, 0xfa, 0xd2, 0x9a,
	0xbb, 0x8e, 0xd8, 0x51, 0x67, 0x51, 0x0e, 0x70, 0x66, 0x46, 0x03, 0x9c, 0x77, 0xa1, 0x63, 0x22,
	0x90, 0x58, 0x0e, 0x7b, 0x3d, 0x1e, 0x70, 0x16, 0xeb, 0xb5, 0x22, 0x93, 0xa1, 0x08, 0x98, 0xc7,
	0x8e, 0x58, 0xac, 0x24, 0x9a, 0x55, 0xcd, 0xbd, 0x4c, 0xe1, 0x48, 0x81, 0xd0, 0x35, 0x74, 0x77,
	0x91, 0xcc, 0xb9, 0x0e, 0x6b, 0x58, 0x31, 0xc3, 0x28, 0x24, 0x57, 0x6f, 0x0e, 0x5b, 0x37, 0x07,
	0x7e, 0x40, 0xf1, 0x49, 0x71, 0x9d, 0x69, 0xfa, 0xc9, 0xe1, 0x2c, 0x79, 0xe4, 0x8d, 0x81, 0x1f,
	0xb8, 0x13, 0x22, 0xda, 0xb7, 0xe0, 0xbc, 0x6e, 0x7a, 0x46, 0x54, 0x4b, 0x6e, 0x7a, 0x73, 0xe0,
	0x07, 0x5f, 0x9a, 0x14, 0xd8, 0x7e, 0x01, 0x2e, 0xea, 0x78, 0x8c, 0x89, 0x33, 0x44, 0x93, 0xfb,
	0x3e, 0x47, 0x34, 0x93, 0xa4, 0xdf, 0x84, 0x4b, 0x86, 0xc1, 0x19, 0x0a, 0x90, 0x23, 0x3f, 0x4f,
	0x44, 0x13, 0x75, 0xb8, 0x01, 0x1b, 0x86, 0xc5, 0xe8, 0x70, 0x91, 0x89, 0xae, 0x13, 0xb6, 0x3c,
	0x62, 0x9d, 0xbf, 0xaf, 0xc0, 0xd5, 0x89, 0x66, 0x92, 0xad, 0x1f, 0x6d, 0x29, 0x1d, 0xa8, 0x75,
	0xb9, 0x32, 0x8f, 0xda, 0x67, 0x91, 0x81, 0x2c, 0x77, 0x39, 0xae, 0x08, 0xdc, 0xff, 0xae, 0xd9,
	0x3d, 0xb9, 0x40, 0x46, 0xd6, 0x51, 0x4f, 0xb3, 0xb5, 0x83, 0x94, 0x2f, 0x42, 0x33, 0xe3, 0x96,
	0x29, 0x49, 0x16, 0xb1, 0x6a, 0x38, 0x66, 0xbd, 0xfa, 0x24, 0xac, 0x17, 0xb9, 0x8e, 0x98, 0x80,
	0x93, 0x73, 0xce, 0x7a, 0xf4, 0x2f, 0x73, 0x50, 0x2f, 0x04, 0x0c, 0x52, 0xa4, 0xda, 0x5d, 0xe5,
	0xdd, 0xc9, 0xd6, 0x25, 0xf5, 0xa1, 0x61, 0x0b, 0x1b, 0xd9, 0xda, 0xfc, 0x41, 0x05, 0x1a, 0x38,
	0x04, 0x7e, 0xc1, 0x89, 0xcc, 0x60, 0x72, 0xef, 0x3f, 0x71, 0x6d, 0xe3, 0x17, 0x0d, 0xb5, 0x5b,
	0xd3, 0xa0, 0x9b, 0x99, 0x8b, 0xca, 0x94, 0xe9, 0x8e, 0x38, 0xe5, 0x5f, 0x9e, 0x32, 0xb7, 0x32,
	0x65, 0xbe, 0x5b, 0x81, 0x9a, 0x19, 0x19, 0xb3, 0xfc, 0xe7, 0x50, 0x93, 0xff, 0xfd, 0x54, 0x34,
	0xc9, 0x1c, 0x95, 0xbb, 0x8c, 0x63, 0x62, 0x1c, 0x4c, 0xa6, 0x44, 0xd7, 0x2a, 0x31, 0xff, 0xcb,
	0x53, 0xe2, 0x16, 0x29, 0xd1, 0xf9, 0x49, 0x05, 0x56, 0x89, 0x5a, 0xdb, 0x18, 0x0f, 0x3d, 0x15,
	0x3a, 0x9b, 0xb0, 0xa8, 0x7f, 0x9c, 0xa6, 0xf6, 0x0c, 0x72, 0x81, 0x87, 0x78, 0x3c, 0xb2, 0x01,
	0x0b, 0xc3, 0x78, 0x28, 0x4d, 0xe8, 0x59, 0x73, 0xcd, 0xd3, 0xc4, 0x43, 0xc8, 0xd9, 0xc9, 0x87,
	0x90, 0x9b, 0xb0, 0x18, 0x27, 0x21, 0xf3, 0x38, 0x59, 0x7e, 0xd5, 0x5d, 0xd0, 0x8f, 0xdb, 0xe8,
	0x8d, 0x7b, 0xcc, 0x57, 0x43, 0x81, 0x38, 0x72, 0x71, 0x55, 0x03, 0xd9, 0x0e, 0x9d, 0x3a, 0xcc,
	0x70, 0xeb, 0xbd, 0x66, 0x78, 0xd8, 0x71, 0x4d, 0x30, 0x81, 0x6a, 0x77, 0xa3, 0x24, 0x38, 0xd4,
	0xcb, 0xdb, 0x81, 0xb9, 0x82, 0xda, 0xf8, 0xdb, 0x59, 0x87, 0x79, 0x3a, 0xac, 0x23, 0x9d, 0xe9,
	0x41, 0x53, 0x6a, 0x03, 0x41, 0x35, 0x57, 0x5c, 0xfc, 0xdd, 0xf9, 0x71, 0x05, 0xd6, 0x73, 0xa6,
	0x2c, 0x62, 0x03, 0xed, 0xf1, 0xa5, 0x72, 0x1a, 0x30, 0x7b, 0xc8, 0x4e, 0x91, 0xeb, 0x8a, 0xab,
	0x7f, 0x3a, 0x12, 0x96, 0x49, 0xa8, 0x2f, 0x84, 0x7f, 0xda, 0x9e, 0xb9, 0x32, 0x3b, 0xb5, 0x72,
	0x65, 0xa9, 0x47, 0x2e, 0xe0, 0xaf, 0x9b, 0x5a, 0x4a, 0xe7, 0x8f, 0x67, 0x01, 0xf2, 0x5a, 0x9e,
	0x1e, 0x31, 0x7a, 0xca, 0xba, 0x5c, 0x73, 0xab, 0x08, 0xc1, 0xc9, 0xfa, 0x10, 0x96, 0x08, 0xcd,
	0x43, 0xb3, 0xe8, 0xef, 0x4f, 0x4f, 0x3f, 0x34, 0x14, 0x77, 0x11, 0x01, 0xdb, 0xa1, 0xce, 0x49,
	0x75, 0xac, 0x99, 0xed, 0x88, 0x55, 0x37, 0x7b, 0x1e, 0x1d, 0xaa, 0xb9, 0x5f, 0xc6, 0x50, 0x39,
	0xa7, 0x50, 0xb3, 0xf3, 0x47, 0x62, 0xe7, 0x51, 0xec, 0xfe, 0xf4, 0xc4, 0xe6, 0xe6, 0xe1, 0xae,
	0x98, 0xdf, 0x34, 0x4b, 0x5f, 0x87, 0x56, 0x9a, 0xa6, 0x9e, 0x3c, 0x48, 0x8e, 0xb5, 0x8b, 0xf6,
	0xe2, 0x80, 0x8e, 0x28, 0x9c, 0x0b, 0x50, 0xd5, 0xbf, 0xe9, 0x3c, 0x9c, 0x2c, 0x74, 0x29, 0x0e,
	0x52, 0x3a, 0x0e, 0x7f, 0x1e, 0xea, 0x48, 0x18, 0xb2, 0x58, 0xf1, 0x1e, 0x67, 0x02, 0xe7, 0xac,
	0xea, 0xd6, 0xe2, 0x20, 0xdd, 0xce, 0x80, 0x9d, 0x9f, 0xcd, 0x40, 0xb3, 0xc4, 0xdd, 0x72, 0x8e,
	0x46, 0x39, 0x47, 0x96, 0x33, 0x1d, 0x25, 0x67, 0x47, 0x4b, 0x21, 0x53, 0x2c, 0x50, 0x66, 0x09,
	0x37, 0x5d, 0x87, 0xcb, 0x1d, 0x83, 0xba, 0x63, 0x30, 0x7a, 0x39, 0x67, 0x87, 0x5d, 0xda, 0x81,
	0xf0, 0x24, 0xdb, 0xd5, 0x32, 0xf8, 0x03, 0x04, 0x3b, 0xaf, 0xe0, 0xd1, 0xed, 0x20, 0xf5, 0xba,
	0x43, 0xbd, 0xbc, 0xbd, 0x01, 0x1b, 0x74, 0x99, 0xc0, 0xa5, 0xdd, 0x74, 0x1b, 0x5c, 0xee, 0xa6,
	0xb7, 0x10, 0xb1, 0x8b, 0x70, 0x0c, 0xe2, 0xa5, 0x87, 0x05, 0x49, 0x3c, 0x84, 0x4d, 0x52, 0x16,
	0xe3, 0x5a, 0x6f, 0xba, 0xab, 0x5c, 0xee, 0x5a, 0xf8, 0xfd, 0x94, 0xc5, 0xce, 0x47, 0x66, 0x44,
	0xe2, 0x5e, 0x62, 0xe6, 0x70, 0x01, 0xe7, 0xf0, 0x89, 0x4f, 0x26, 0x26, 0xce, 0x8e, 0xbb, 0xa2,
	0x07, 0x3a, 0xee, 0x25, 0x34, 0x89, 0xdf, 0x80, 0x4b, 0xdd, 0x81, 0x37, 0xe8, 0x0a, 0x73, 0x7c,
	0x2f, 0x98, 0x2f, 0x93, 0xd8, 0x64, 0x78, 0x7a, 0x75, 0x5d, 0xd6, 0x71, 0x2b, 0xc2, 0x0a, 0x0e,
	0x07, 0x08, 0x84, 0xcb, 0xef, 0x3c, 0x2c, 0x49, 0x76, 0xc4, 0x84, 0x8e, 0x6a, 0x69, 0x2a, 0xb3,
	0xe7, 0xce, 0x8b, 0x50, 0xd7, 0xdc, 0xf3, 0x23, 0x54, 0xa7, 0x0d, 0x8b, 0xf6, 0x9c, 0x96, 0x58,
	0xd9, 0xc7, 0xce, 0x4f, 0x67, 0x60, 0x59, 0x13, 0x0f, 0x4f, 0x68, 0xd5, 0x5f, 0x80, 0xaa, 0xfe,
	0x5d, 0x9a, 0xeb, 0xc1, 0xf0, 0x84, 0xe6, 0x7a, 0x1d, 0xe6, 0xd1, 0xcf, 0x5b, 0x5f, 0x87, 0x0f,
	0x3a, 0x3b, 0xa0, 0x79, 0xf1, 0xb2, 0x96, 0xa6, 0x43, 0x66, 0xb1, 0xae, 0x13, 0x7a, 0xd7, 0xb0,
	0x71, 0x11, 0xe7, 0xfc, 0xb8, 0x02, 0x17, 0xcf, 0x68, 0x87, 0xaa, 0x98, 0x3d, 0xf3, 0x7f, 0x3d,
	0xe9, 0x7c, 0xfc, 0xdc, 0x81, 0x76, 0xdb, 0x93, 0x74, 0xd3, 0x1b, 0xb9, 0x4e, 0xf6, 0x8d, 0x7a,
	0x34, 0x18, 0xf3, 0x74, 0xf4, 0x49, 0x30, 0x1a, 0x8f, 0x6b, 0xd0, 0x18, 0xeb, 0xf2, 0x02, 0x9d,
	0xd3, 0x0f, 0x4a, 0x0c, 0x3b, 0x7f, 0x36, 0x07, 0x8d, 0xee, 0xc0, 0x8b, 0xfc, 0x20, 0xcd, 0xb2,
	0x71, 0x6d, 0xae, 0x1a, 0x10, 0x7a, 0xc3, 0xb1, 0x94, 0x62, 0x15, 0x11, 0x0f, 0x65, 0x31, 0xbe,
	0xcb, 0x68, 0xb1, 0xc6, 0x36, 0xe0, 0x4a, 0x65, 0x3b, 0xa5, 0x63, 0xc8, 0xf7, 0x73, 0x8c, 0x4e,
	0xe3, 0x07, 0xbe, 0x38, 0x64, 0x13, 0xd2, 0x16, 0x5a, 0x6d, 0x2d, 0x42, 0x8f, 0xc6, 0xc7, 0x5f,
	0x84, 0x8b, 0xa6, 0x9d, 0x60, 0x32, 0x4d, 0x62, 0xc9, 0xca, 0x12, 0x29, 0xa2, 0x3c, 0x4f, 0x34,
	0xae, 0x25, 0x29, 0x4a, 0x7e, 0x03, 0xda, 0x3c, 0x8a, 0x58, 0xdf, 0x8f, 0xce, 0x4c, 0x2e, 0x0c,
	0x7e, 0x54, 0xf6, 0xeb, 0xd0, 0x66, 0x27, 0x01, 0x93, 0xd2, 0x1b, 0x1f, 0x18, 0xda, 0x9c, 0x5b,
	0x84, 0xdf, 0x19, 0x19, 0x9e, 0xdb, 0xf0, 0x8c, 0x69, 0x78, 0x56, 0x9f, 0x29, 0xb5, 0xb8, 0x40,
	0x54, 0xbb, 0x13, 0x7b, 0x7e, 0x11, 0xaa, 0x21, 0xeb, 0xf9, 0xc3, 0x48, 0x65, 0x89, 0x44, 0x0e,
	0xd0, 0x6b, 0x88, 0x9d, 0xa4, 0x5c, 0x64, 0x89, 0x82, 0x7d, 0xd4, 0x66, 0x90, 0x17, 0x5b, 0x58,
	0xe8, 0x49, 0x16, 0x98, 0x64, 0x16, 0x0b, 0x37, 0xb7, 0x09, 0xbc, 0xc7, 0x02, 0x9a, 0xf1, 0x02,
	0x65, 0xac, 0x49, 0x97, 0xed, 0x8c, 0x67, 0xa4, 0xf7, 0x24, 0x0b, 0x3a, 0xff, 0x6f, 0x01, 0x9a,
	0xd6, 0x64, 0xd0, 0x9b, 0xe1, 0xfa, 0x9c, 0x14, 0x0b, 0x55, 0x26, 0xc7, 0x42, 0x5b, 0xd0, 0xf2,
	0x03, 0x95, 0x08, 0x4f, 0x9e, 0x4a, 0xc5, 0x06, 0x5e, 0x2a, 0x78, 0x92, 0xf9, 0x8b, 0x9a, 0xbb,
	0x86, 0xc8, 0x3d, 0xc4, 0x3d, 0x30, 0x28, 0x3d, 0x01, 0xa5, 0x36, 0xc5, 0xcb, 0x25, 0xb4, 0x98,
	0x5b, 0x85, 0x66, 0xbb, 0xf9, 0x9d, 0x90, 0x4c, 0x98, 0x5e, 0x95, 0x78, 0xe4, 0xea, 0x47, 0x9e,
	0x8e, 0x6a, 0xe6, 0x0a, 0xc2, 0xee, 0xe7, 0xb8, 0x77, 0xd9, 0xa9, 0x39, 0xa8, 0x50, 0x31, 0x1b,
	0x57, 0x71, 0x3e, 0x3b, 0xa8, 0xd0, 0xe8, 0x11, 0x25, 0xdf, 0x82, 0xf3, 0x23, 0xed, 0x8a, 0x6a,
	0xd2, 0x02, 0xdc, 0x2c, 0x35, 0x2d, 0x28, 0x5a, 0x10, 0x3a, 0xaa, 0xea, 0x62, 0x49, 0xe8, 0x88,
	0xb2, 0x37, 0x60, 0x43, 0xb2, 0x08, 0x77, 0x30, 0xcf, 0xef, 0xf7, 0x05, 0xeb, 0xfb, 0xba, 0xbb,
	0xdc, 0x5a, 0xca, 0xba, 0xc5, 0xde, 0xcc, 0x90, 0xdb, 0x98, 0x6c, 0xfa, 0x4a, 0xf9, 0xc1, 0xc1,
	0x58, 0x2b, 0x93, 0x6c, 0x5a, 0x6c, 0xa9, 0x55, 0x07, 0x6a, 0x34, 0x98, 0x78, 0xf8, 0xcf, 0x43,
	0x63, 0x4d, 0xcb, 0x08, 0x7c, 0x90, 0x08, 0xb5, 0x1d, 0xea, 0x94, 0xbf, 0x40, 0x93, 0x0d, 0x1c,
	0x19, 0x53, 0x33, 0xa3, 0xcc, 0x06, 0xed, 0x05, 0x58, 0xb5, 0xfd, 0xb6, 0x5c, 0xa9, 0x5a, 0x52,
	0x33, 0x60, 0xc3, 0x97, 0xee, 0x96, 0xe4, 0x74, 0x19, 0x67, 0x73, 0xca, 0x55, 0xa0, 0xce, 0x78,
	0x5f, 0x83, 0x46, 0x41, 0x17, 0x72, 0x97, 0x54, 0x2a, 0xac, 0x67, 0x8a, 0x90, 0xc7, 0x7c, 0x19,
	0x9c, 0x12, 0x77, 0xa2, 0xa5, 0xc2, 0x60, 0xa3, 0xc0, 0x1a, 0xa9, 0x3b, 0xbf, 0xb7, 0x40, 0x3b,
	0x19, 0xb9, 0x61, 0xb4, 0xff, 0x52, 0x4d, 0xa9, 0x32, 0x5a, 0x53, 0x8a, 0x74, 0xa0, 0x68, 0x6a,
	0x9d, 0x14, 0x94, 0x3e, 0x98, 0xc2, 0xf6, 0x51, 0xf2, 0xda, 0x6e, 0x26, 0xc1, 0x89, 0xcd, 0x5d,
	0xaf, 0x2c, 0xd2, 0x9f, 0xc2, 0xbd, 0x93, 0xb1, 0x15, 0x4f, 0xd7, 0xc7, 0x70, 0x47, 0x92, 0xb0,
	0x5a, 0xd8, 0x30, 0x0b, 0x7b, 0xe4, 0xbb, 0xd3, 0xd8, 0x23, 0x0d, 0x4b, 0xb7, 0x96, 0xed, 0x88,
	0x28, 0xf4, 0x59, 0xa8, 0x95, 0xed, 0x80, 0x96, 0xe6, 0x4a, 0x5a, 0x34, 0x80, 0xcb, 0xb0, 0x8c,
	0x44, 0xf1, 0x10, 0xe3, 0x33, 0x72, 0xd5, 0xa0, 0x41, 0xf7, 0x10, 0xa2, 0xe7, 0x1d, 0x0f, 0xbb,
	0xa2, 0x53, 0x1e, 0xf7, 0xa9, 0x73, 0xdc, 0xfa, 0xe4, 0x46, 0x8e, 0xd9, 0xe1, 0xf1, 0xe1, 0x76,
	0x88, 0x6e, 0x12, 0xe3, 0x37, 0x11, 0x32, 0x61, 0x99, 0x2e, 0x19, 0x37, 0xa9, 0x03, 0x38, 0x0d,
	0x37, 0x9c, 0xc7, 0x2f, 0xb6, 0x56, 0x27, 0x5c, 0x6c, 0xd5, 0x71, 0x0d, 0x0f, 0x82, 0xd4, 0xd3,
	0xe9, 0xa0, 0x59, 0x4e, 0x4b, 0x1a, 0x70, 0x2f, 0x09, 0x31, 0xda, 0x32, 0x03, 0x8b, 0xd1, 0xd6,
	0x32, 0x45, 0x5b, 0x04, 0xda, 0x37, 0xe1, 0x98, 0x21, 0x40, 0x09, 0x2b, 0x45, 0x02, 0x64, 0x9f,
	0x94, 0xef, 0xe1, 0xd5, 0xa6, 0x73, 0x27, 0xb2, 0x1c, 0xc5, 0x15, 0xef, 0xe0, 0x75, 0xf6, 0xa0,
	0x75, 0x14, 0xf9, 0xb1, 0x17, 0x26, 0xc3, 0x6e, 0xc4, 0x3c, 0xe5, 0xf7, 0xf5, 0x5a, 0x0a, 0x0e,
	0x75, 0x47, 0x93, 0xa1, 0xd2, 0x5d, 0xf1, 0xfb, 0x66, 0x81, 0x2c, 0x21, 0x60, 0xdf, 0xef, 0x63,
	0x4e, 0x87, 0xe5, 0x73, 0xc4, 0x9a, 0x9a, 0x24, 0x41, 0xf6, 0xfd, 0x7e, 0x67, 0x17, 0xaa, 0xac,
	0x97, 0x7a, 0xc2, 0x8f, 0xfb, 0xcc, 0x79, 0x06, 0x96, 0x51, 0x02, 0x0f, 0xbd, 0x28, 0x39, 0xb6,
	0x6b, 0x4d, 0x83, 0xb6, 0xc3, 0x9d, 0xe4, 0xd8, 0xb9, 0x02, 0x2b, 0x16, 0x7f, 0xc0, 0xfb, 0x07,
	0x86, 0x1b, 0x10, 0xc1, 0x3b, 0xbc, 0x7f, 0xa0, 0x93, 0xff, 0x9a, 0xe6, 0xa7, 0x95, 0x1b, 0xf8,
	0x2a, 0xc0, 0x8b, 0x6f, 0x4c, 0x1d, 0x30, 0x51, 0x08, 0x6a, 0x73, 0x80, 0xf3, 0xa1, 0x91, 0x88,
	0xf2, 0xa5, 0xc9, 0x7a, 0xb7, 0x9f, 0x74, 0x10, 0xb3, 0x1e, 0x91, 0x6e, 0x2e, 0x32, 0xd7, 0xf1,
	0x73, 0x66, 0xd1, 0x26, 0xa5, 0xb4, 0xcf, 0x9d, 0xbb, 0xb0, 0xa2, 0x1b, 0xa1, 0x2e, 0xca, 0xef,
	0xff, 0x02, 0xad, 0x37, 0x61, 0xd1, 0x8c, 0x83, 0x2d, 0x5b, 0xd0, 0x10, 0x74, 0x7e, 0xbf, 0x02,
	0x17, 0x6c, 0xf7, 0xa3, 0x24, 0xf0, 0x23, 0x1d, 0x46, 0xf5, 0x7a, 0x3c, 0x30, 0x33, 0xf5, 0x4d,
	0x70, 0xca, 0x60, 0xe5, 0xf7, 0x75, 0x7c, 0xae, 0x7b, 0xbd, 0x33, 0x8d, 0x5e, 0xdb, 0x0e, 0xb8,
	0x0d, 0x94, 0xb3, 0x4f, 0x62, 0xf6, 0xfd, 0xbe, 0xec, 0xbc, 0x00, 0xf5, 0x7c, 0x4f, 0xdc, 0x37,
	0x75, 0x8c, 0x23, 0x3f, 0x1a, 0xda, 0x0e, 0xd2, 0x43, 0xe7, 0xaf, 0x16, 0x60, 0x55, 0xb3, 0x2a,
	0x5e, 0xf8, 0x7b, 0x04, 0x35, 0xad, 0xa9, 0xa7, 0x12, 0x9a, 0x55, 0xa3, 0xf2, 0xee, 0x34, 0x54,
	0xce, 0x4c, 0xc5, 0x5d, 0xd6, 0x32, 0xf6, 0x93, 0x5d, 0xb4, 0x9b, 0x97, 0xa0, 0x99, 0xfa, 0xa7,
	0x78, 0x5c, 0x90, 0xcf, 0x04, 0xa5, 0x3d, 0x0d, 0x83, 0xb8, 0x9b, 0x4d, 0xc8, 0x65, 0xc0, 0xb6,
	0x5e, 0x9a, 0xa4, 0x69, 0x16, 0xec, 0x82, 0x06, 0x3d, 0x40, 0x88, 0x13, 0xc2, 0x42, 0x3a, 0x94,
	0x07, 0x4c, 0x9a, 0x6a, 0xc1, 0x74, 0x07, 0xdb, 0xf0, 0x76, 0x7e, 0xa3, 0x02, 0x6b, 0x13, 0xa6,
	0xdd, 0x54, 0xe1, 0xbe, 0x3e, 0xad, 0xd1, 0x9a, 0x20, 0xc2, 0x6d, 0x16, 0xe7, 0x7b, 0x0f, 0x8d,
	0xed, 0x39, 0xa8, 0x73, 0xe9, 0xb1, 0x13, 0x3f, 0x50, 0x66, 0xd6, 0x16, 0x30, 0x2f, 0x5e, 0xe1,
	0xf2, 0xae, 0x06, 0xd2, 0x38, 0x13, 0x55, 0xec, 0x2b, 0x9d, 0x9a, 0xeb, 0x1e, 0xa1, 0x8b, 0x46,
	0xaa, 0x7b, 0x08, 0x7c, 0x3f, 0xf2, 0x63, 0x93, 0xf2, 0x1b, 0xaa, 0x54, 0x30, 0xc9, 0xc4, 0x11,
	0x8f, 0xfb, 0xe8, 0xa1, 0x31, 0xe5, 0x27, 0xda, 0x07, 0x19, 0xc6, 0x39, 0x81, 0x86, 0x39, 0xd7,
	0xd0, 0xfe, 0x8c, 0xe4, 0x57, 0xa7, 0xe3, 0x23, 0xcb, 0x66, 0xec, 0xd6, 0x49, 0xce, 0xae, 0x1f,
	0x50, 0x8f, 0xbe, 0x5b, 0x81, 0x56, 0xc8, 0xa4, 0xe2, 0x31, 0xdd, 0x8e, 0xcc, 0xe5, 0xc3, 0x53,
	0x91, 0xbf, 0x56, 0x10, 0x66, 0x95, 0xe8, 0x7c, 0x07, 0x36, 0x46, 0x16, 0x91, 0x97, 0x52, 0x9e,
	0xcf, 0x8a, 0xab, 0x6e, 0x0a, 0x25, 0xb4, 0x11, 0x31, 0x76, 0x19, 0xff, 0xe6, 0x3c, 0xac, 0x59,
	0x03, 0x25, 0x1b, 0x21, 0xf1, 0xaf, 0x80, 0x83, 0xe0, 0xf2, 0xab, 0x12, 0xe4, 0x01, 0x9a, 0x1a,
	0x73, 0xb7, 0xf4, 0xba, 0x44, 0x03, 0x66, 0xf3, 0x7d, 0x43, 0xff, 0x74, 0x0e, 0xf1, 0xdd, 0x8c,
	0xe0, 0xd0, 0x84, 0x3f, 0x4f, 0x5c, 0x3c, 0x99, 0xb8, 0xa7, 0xb9, 0xf3, 0x13, 0xb6, 0xb6, 0xb9,
	0xf1, 0xad, 0xcd, 0x58, 0xa4, 0xc6, 0x9a, 0x02, 0x2f, 0x41, 0x0c, 0x3a, 0x4c, 0xd4, 0xa7, 0x7c,
	0xda, 0xf9, 0x16, 0x4c, 0x72, 0x87, 0x10, 0x8d, 0x7e, 0x11, 0x9a, 0x06, 0x5d, 0x60, 0x42, 0xe1,
	0xc9, 0x2a, 0x21, 0xee, 0x65, 0xac, 0x7e, 0xbb, 0x02, 0x6d, 0x34, 0x6c, 0xbc, 0x6f, 0x28, 0x15,
	0x5e, 0xfe, 0x0d, 0x99, 0xf2, 0x79, 0x24, 0x71, 0x0d, 0x2c, 0x6f, 0xbd, 0x3f, 0xe5, 0x79, 0x34,
	0xe6, 0xe2, 0x6e, 0x18, 0xb9, 0xdb, 0x46, 0xec, 0x1d, 0x92, 0xea, 0x7c, 0xaf, 0x02, 0x8e, 0xd1,
	0x5f, 0xff, 0x7b, 0x64, 0x5c, 0x4d, 0xf5, 0x69, 0x4e, 0x4a, 0x83, 0x04, 0xde, 0xd1, 0xf2, 0xc8,
	0xc7, 0x5c, 0x03, 0x03, 0xf3, 0xf2, 0x69, 0x32, 0x79, 0x30, 0xc1, 0xef, 0x9b, 0xc9, 0xea, 0xfc,
	0x41, 0x05, 0x9a, 0xb4, 0x69, 0xc6, 0xaa, 0x97, 0x5d, 0xbd, 0xfc, 0x7e, 0x05, 0x5a, 0xe5, 0xbb,
	0xcc, 0x76, 0x54, 0x69, 0x75, 0xec, 0x4d, 0xa5, 0x23, 0xe5, 0x25, 0xe0, 0xae, 0x97, 0x24, 0x9a,
	0x01, 0xed, 0xfc, 0x73, 0x05, 0x36, 0xa4, 0x48, 0x3d, 0x95, 0xa4, 0x49, 0x94, 0xf4, 0x4f, 0x31,
	0x6e, 0xcc, 0x2a, 0x64, 0x07, 0x89, 0xc9, 0x07, 0x6c, 0x80, 0x75, 0x90, 0xa4, 0xf4, 0x56, 0xce,
	0xe5, 0x72, 0x1c, 0x38, 0x63, 0x02, 0xc5, 0x3c, 0xfd, 0xbc, 0x0a, 0x2b, 0x3c, 0x3d, 0xba, 0x31,
	0x92, 0x54, 0x2f, 0x6b, 0x98, 0x25, 0xb9, 0x04, 0xc0, 0xa5, 0x77, 0x2c, 0xf0, 0x4a, 0x96, 0xa9,
	0x75, 0x56, 0xb9, 0xfc, 0x80, 0x00, 0xe6, 0x0a, 0xb9, 0x14, 0xc2, 0x93, 0xc3, 0x54, 0x87, 0xd8,
	0xa6, 0xaa, 0xd2, 0x74, 0xeb, 0x5c, 0xee, 0x09, 0xb1, 0x67, 0xa1, 0x58, 0x11, 0xd6, 0x6a, 0x63,
	0xcc, 0xba, 0x60, 0x2a, 0xc2, 0x49, 0x48, 0x6f, 0x7a, 0xfd, 0xf5, 0x2c, 0x34, 0x4a, 0x3d, 0x1c,
	0xf8, 0x29, 0x5e, 0x3a, 0xb7, 0xcf, 0x8a, 0x0f, 0x98, 0x30, 0x1d, 0xac, 0x59, 0xe8, 0xbe, 0x06,
	0xea, 0x04, 0x3c, 0x66, 0x27, 0x2a, 0x6f, 0x6b, 0x8e, 0x1e, 0xe9, 0x6d, 0x0c, 0x72, 0x0f, 0x9b,
	0x9a, 0x62, 0xdf, 0x10, 0x50, 0xa5, 0x85, 0xde, 0x9f, 0x78, 0x08, 0xd7, 0x34, 0xeb, 0xe2, 0x2d,
	0x95, 0x51, 0x3e, 0x23, 0x85, 0xaa, 0x67, 0x35, 0x7d, 0x76, 0x59, 0xa5, 0xcc, 0x33, 0x2b, 0xde,
	0xdc, 0x81, 0xcb, 0x67, 0xb2, 0x0d, 0x0e, 0x74, 0xd0, 0x67, 0x5c, 0xc6, 0x85, 0x89, 0xdc, 0x6e,
	0x23, 0x89, 0x73, 0x03, 0x36, 0x29, 0xdd, 0xf0, 0x92, 0x1e, 0xce, 0xb9, 0xf4, 0x92, 0xd8, 0xc3,
	0xd7, 0xc1, 0xc8, 0xa5, 0xac, 0x11, 0xfa, 0x7e, 0x4f, 0x27, 0x0e, 0xf2, 0x7e, 0xec, 0xea, 0xed,
	0xed, 0x5b, 0x50, 0xd7, 0x24, 0x64, 0x24, 0x11, 0x97, 0xca, 0xd4, 0x92, 0x9f, 0xd8, 0x0d, 0x4c,
	0x36, 0x41, 0x77, 0x45, 0x4b, 0xd3, 0x0a, 0xec, 0x70, 0xa9, 0x3a, 0x7f, 0x5e, 0x81, 0x66, 0x89,
	0x10, 0x8b, 0xf6, 0x1d, 0xa8, 0x71, 0xe9, 0xf9, 0xe1, 0x80, 0xeb, 0xb5, 0x7b, 0x4c, 0x5e, 0xbd,
	0xe9, 0x2e, 0x73, 0x79, 0x53, 0xc3, 0xee, 0x24, 0xc7, 0xb1, 0xf3, 0x6d, 0xa0, 0x48, 0xa1, 0x74,
	0x41, 0x9f, 0xc2, 0xee, 0x07, 0x53, 0x55, 0x7d, 0xe0, 0xa7, 0x26, 0x08, 0x2d, 0xdc, 0xc9, 0xef,
	0xfc, 0xac, 0x42, 0x26, 0x68, 0x2e, 0x35, 0x92, 0xde, 0x93, 0xce, 0xd8, 0x9e, 0x87, 0xba, 0x60,
	0x64, 0xd4, 0xa6, 0x62, 0x60, 0x4e, 0x2f, 0x2c, 0x94, 0x8a, 0x0b, 0x1f, 0x83, 0xd5, 0x90, 0x75,
	0x93, 0x61, 0x1c, 0x64, 0x74, 0xb4, 0xbc, 0xea, 0x19, 0x98, 0x08, 0x9f, 0x85, 0x5a, 0x30, 0x14,
	0x82, 0xce, 0x57, 0xec, 0x8d, 0x9c, 0xaa, 0xbb, 0x62, 0x80, 0x44, 0x74, 0x19, 0x96, 0xa5, 0xf2,
	0xd1, 0xe7, 0xf1, 0x81, 0xbd, 0x84, 0x03, 0x04, 0xc2, 0xfb, 0x4e, 0x25, 0x71, 0x64, 0xfa, 0x0b,
	0xc6, 0xdb, 0x59, 0x30, 0x5a, 0x7c, 0xe7, 0xdf, 0x17, 0x60, 0x4d, 0xf7, 0x93, 0xa7, 0xd2, 0x9c,
	0x1d, 0xa3, 0x97, 0x19, 0x75, 0x16, 0x95, 0x31, 0x67, 0x71, 0x09, 0x40, 0xbb, 0x81, 0x52, 0x9f,
	0xab, 0x1a, 0x42, 0x1a, 0xbe, 0xa8, 0xa3, 0xe2, 0xec, 0x7e, 0x94, 0x59, 0xb0, 0xe6, 0x24, 0x25,
	0xcd, 0x6e, 0x46, 0xd1, 0x92, 0xc5, 0x9b, 0x55, 0x3a, 0xef, 0xd3, 0x4f, 0xf8, 0xd7, 0x13, 0x6c,
	0xe0, 0xf3, 0x58, 0x9b, 0xf6, 0x9c, 0xbd, 0x59, 0x15, 0x87, 0x48, 0xad, 0xff, 0xb8, 0x16, 0xeb,
	0x5c, 0x87, 0xb5, 0x63, 0x25, 0x4c, 0xcb, 0xbc, 0x11, 0xad, 0x87, 0xe6, 0xb1, 0x42, 0x72, 0x91,
	0xd3, 0x6f, 0x41, 0x4b, 0xb2, 0xa8, 0x97, 0x1d, 0x05, 0x79, 0x82, 0x3d, 0x1a, 0x32, 0x5c, 0x14,
	0xf8, 0x76, 0x92, 0x46, 0xda, 0xc3, 0x20, 0x97, 0x50, 0x34, 0xc3, 0x83, 0x04, 0xcb, 0xe8, 0x44,
	0xbc, 0x68, 0x67, 0x58, 0x43, 0x2d, 0xd9, 0xb7, 0xa1, 0xe9, 0x4b, 0x89, 0x2f, 0xc8, 0xe4, 0x57,
	0x61, 0x97, 0xa6, 0x67, 0xb0, 0x45, 0x4b, 0x74, 0x1b, 0x56, 0x54, 0x76, 0xb1, 0xf6, 0x55, 0xd8,
	0x14, 0x27, 0x5e, 0xcc, 0x78, 0xff, 0xa0, 0x9b, 0x88, 0x52, 0xd5, 0x91, 0x8a, 0x0e, 0xeb, 0xe2,
	0xe4, 0x9e, 0xc1, 0x16, 0x4a, 0x8e, 0x2f, 0xc0, 0xaa, 0x38, 0xf1, 0x06, 0x4c, 0x4a, 0xbf, 0x6f,
	0x5e, 0x8d, 0x05, 0xd3, 0xbb, 0x93, 0x5d, 0x82, 0x62, 0x0a, 0x76, 0x05, 0x56, 0xc4, 0x89, 0x97,
	0xfa, 0xea, 0xa0, 0x54, 0x87, 0x10, 0x27, 0x0f, 0x7c, 0x75, 0x80, 0x14, 0x2d, 0x58, 0x10, 0x27,
	0x9e, 0x52, 0x91, 0xa9, 0xdd, 0xcd, 0x8b, 0x93, 0x7d, 0x15, 0xe9, 0xb0, 0x1d, 0x1b, 0xa2, 0x2d,
	0x28, 0x3d, 0x7a, 0x35, 0x0a, 0xdb, 0x75, 0x53, 0x0d, 0xdc, 0xd7, 0x83, 0xf7, 0x2a, 0x6c, 0xaa,
	0x33, 0xb4, 0xaf, 0x93, 0xf6, 0xea, 0x0c, 0xed, 0xd5, 0x88, 0xf6, 0xab, 0xe6, 0x4d, 0xa4, 0x51,
	0xed, 0x55, 0x51, 0xfb, 0x06, 0x69, 0xaf, 0x4a, 0xda, 0x2b, 0xd2, 0x9e, 0x6e, 0x91, 0xcf, 0x2b,
	0xab, 0xbd, 0x2a, 0x6b, 0xef, 0x90, 0xf6, 0xaa, 0xa8, 0xfd, 0xeb, 0xd0, 0xa6, 0x17, 0xf2, 0x0e,
	0x19, 0x4b, 0x3d, 0x3a, 0x3c, 0x54, 0x82, 0xf7, 0xfb, 0x4c, 0x98, 0xdb, 0xe3, 0x2d, 0xc4, 0xbf,
	0xcb, 0x58, 0x7a, 0x53, 0x63, 0xf7, 0x09, 0xd9, 0xf9, 0xb7, 0x19, 0xa8, 0xdb, 0xd5, 0xf7, 0xb8,
	0x0b, 0xef, 0x0d, 0x38, 0xc7, 0x25, 0xdd, 0x80, 0xf1, 0x02, 0x5f, 0x84, 0x5e, 0x77, 0x28, 0xb3,
	0xf7, 0xbb, 0xe8, 0x64, 0xb3, 0xc5, 0x25, 0xde, 0x84, 0xb9, 0xed, 0x8b, 0xf0, 0xd6, 0x50, 0x16,
	0x5e, 0xf0, 0xca, 0x17, 0x4b, 0xe9, 0x70, 0xb3, 0x6e, 0x57, 0x8a, 0x39, 0xdb, 0xfc, 0x10, 0x16,
	0xe8, 0x8e, 0x88, 0x29, 0xe2, 0xed, 0x4d, 0xc3, 0x80, 0x47, 0x5c, 0x8c, 0x3b, 0x8f, 0x37, 0x42,
	0x32, 0x59, 0x5d, 0x93, 0x7d, 0x3e, 0x3d, 0x59, 0xb7, 0x3a, 0x7f, 0x5a, 0x81, 0x15, 0x8b, 0x7e,
	0xec, 0x9d, 0xe8, 0xa3, 0xb3, 0x77, 0xa2, 0x7b, 0xd3, 0xd2, 0xd5, 0xa8, 0x39, 0xbe, 0x0f, 0xfd,
	0xc5, 0x0c, 0xd4, 0x74, 0x3c, 0x55, 0x8a, 0xf1, 0xf2, 0xc8, 0xa9, 0x52, 0x8e, 0x9c, 0xf4, 0x82,
	0xd0, 0xd4, 0x2c, 0x56, 0xe2, 0xd4, 0x63, 0x27, 0x5c, 0x49, 0x63, 0x12, 0x9a, 0xc9, 0x5d, 0x0d,
	0xbd, 0xab, 0x81, 0xa3, 0x56, 0x36, 0x3b, 0x66, 0x65, 0x74, 0xfb, 0x37, 0xbf, 0xd5, 0x6f, 0xb7,
	0x21, 0x04, 0x1a, 0xa7, 0xa3, 0x89, 0x78, 0x1c, 0x17, 0x88, 0xe8, 0x1c, 0x72, 0x05, 0x81, 0x96,
	0xe8, 0x4d, 0xb4, 0x57, 0x0c, 0x7a, 0xfc, 0x38, 0xc6, 0xbd, 0xa7, 0x7c, 0x70, 0xd6, 0x74, 0x37,
	0xb8, 0xd4, 0xf1, 0xce, 0x4d, 0x83, 0xce, 0xe2, 0xa6, 0xcf, 0xc1, 0x85, 0xc9, 0xed, 0x68, 0xdb,
	0xa3, 0x1c, 0xa8, 0x1d, 0x4d, 0x68, 0xaa, 0x8d, 0xb9, 0xf3, 0xb3, 0x45, 0x5a, 0x5d, 0x7a, 0x44,
	0xcc, 0xea, 0x7a, 0x1e, 0xea, 0x47, 0x4c, 0x48, 0x1d, 0xbf, 0x9b, 0xd2, 0xad, 0x09, 0x22, 0x0d,
	0xd4, 0x14, 0x6e, 0x49, 0xe7, 0x63, 0x91, 0xc4, 0x7d, 0xcf, 0xd2, 0x97, 0xee, 0x9e, 0xa3, 0xce,
	0x1f, 0x68, 0xfc, 0xfb, 0x84, 0x2e, 0xc6, 0x7a, 0xa8, 0xf3, 0xc4, 0xc6, 0xa4, 0x37, 0xad, 0x39,
	0xec, 0xda, 0x04, 0x16, 0xb8, 0x7f, 0x8f, 0xcc, 0xcf, 0xdc, 0xa4, 0xed, 0x17, 0xad, 0xa0, 0x78,
	0xfe, 0x8b, 0x76, 0x41, 0xdb, 0xef, 0x75, 0x2c, 0x83, 0xd0, 0x0c, 0x0a, 0x7a, 0x2b, 0xde, 0x1b,
	0x4a, 0x66, 0xc6, 0xbb, 0xc1, 0x25, 0xa6, 0x3b, 0x2e, 0xbe, 0xc2, 0xfe, 0x50, 0x5a, 0x7a, 0x9a,
	0xcc, 0x22, 0xfd, 0xa2, 0xa5, 0xdf, 0xd6, 0xa8, 0x9c, 0xfe, 0x32, 0x2c, 0xeb, 0x75, 0x63, 0x46,
	0xdd, 0x54, 0x57, 0x80, 0x4b, 0x3b, 0x0f, 0xda, 0x10, 0x73, 0xfb, 0x21, 0xa7, 0x6b, 0x6a, 0xdf,
	0x99, 0x05, 0xe5, 0xaf, 0x9d, 0xc7, 0x25, 0x3a, 0xb0, 0x35, 0xf2, 0xb8, 0x40, 0x57, 0x8a, 0x27,
	0x4c, 0xa8, 0x60, 0x4f, 0x27, 0xb3, 0x78, 0x82, 0x22, 0x04, 0xed, 0x21, 0x31, 0x05, 0xd0, 0xf3,
	0x3e, 0xda, 0xc8, 0x6c, 0x4e, 0x2d, 0x4d, 0xb0, 0x27, 0xc4, 0x83, 0x52, 0x53, 0xed, 0xee, 0x25,
	0x8f, 0xfb, 0x11, 0xa3, 0x41, 0xe8, 0x1e, 0x9b, 0x93, 0xa5, 0x15, 0x82, 0xea, 0xfe, 0xdf, 0x3a,
	0x76, 0xce, 0xc1, 0x92, 0xf5, 0xa3, 0xe6, 0x28, 0x69, 0xd1, 0xf8, 0x4f, 0xe7, 0x16, 0x3c, 0x33,
	0x21, 0x1e, 0x29, 0x4c, 0x84, 0xbd, 0x68, 0x3e, 0x16, 0x9a, 0x64, 0x13, 0x72, 0x16, 0x8f, 0x7c,
	0x72, 0xcc, 0x6d, 0xf3, 0x71, 0x1e, 0xd9, 0x24, 0x39, 0x8f, 0xa0, 0x56, 0xce, 0x10, 0x9a, 0xd3,
	0xa9, 0x83, 0x96, 0x5c, 0x91, 0xbb, 0x1c, 0x17, 0x12, 0x8d, 0x13, 0x68, 0x92, 0xc8, 0x38, 0x51,
	0x99, 0x58, 0xe7, 0x69, 0x88, 0xad, 0xa3, 0x9c, 0x7b, 0x89, 0x22, 0xc9, 0x9d, 0x7f, 0x30, 0x5e,
	0x5d, 0x53, 0x3d, 0xb6, 0x57, 0xa7, 0x72, 0x22, 0x39, 0xcb, 0xe2, 0xde, 0xb9, 0x82, 0x89, 0xaa,
	0xdd, 0x32, 0xbf, 0xa9, 0xd3, 0x17, 0xeb, 0x3d, 0x18, 0x7d, 0x78, 0xa4, 0x3d, 0x3b, 0x3d, 0xdf,
	0x9f, 0x33, 0x77, 0xb5, 0xe3, 0xbe, 0x63, 0xe4, 0xe8, 0x1d, 0xa0, 0x73, 0x17, 0x5a, 0x9a, 0x04,
	0xef, 0x71, 0x46, 0x7c, 0xc0, 0x95, 0x75, 0x62, 0x2f, 0x83, 0xa3, 0x7b, 0x66, 0xcf, 0x04, 0xbc,
	0xbc, 0x4a, 0x57, 0x73, 0x1b, 0x03, 0x1e, 0xdb, 0xa3, 0xaf, 0xf7, 0xb1, 0xbe, 0xf6, 0xb7, 0x15,
	0x8a, 0xf0, 0x0b, 0x7c, 0x1e, 0x7b, 0x90, 0x7e, 0xab, 0x02, 0xed, 0x31, 0xf9, 0x76, 0x18, 0x66,
	0xa6, 0x73, 0x27, 0x69, 0x62, 0x1f, 0xdd, 0x96, 0x06, 0xed, 0x68, 0x48, 0x69, 0x4c, 0xfe, 0x71,
	0x96, 0xa6, 0xda, 0x8f, 0x68, 0x3b, 0x76, 0xfa, 0xb0, 0x64, 0x37, 0x73, 0x53, 0x89, 0xd9, 0x99,
	0xd6, 0x9e, 0x8c, 0x81, 0xf6, 0x22, 0x4f, 0xa5, 0x96, 0xec, 0x1c, 0x41, 0xad, 0x94, 0xc4, 0x9a,
	0x33, 0xdc, 0xf7, 0xa6, 0x9a, 0x8b, 0xd2, 0x75, 0x2c, 0xfb, 0xb8, 0x6d, 0x3a, 0x68, 0xed, 0xda,
	0x14, 0x32, 0x77, 0xa6, 0x65, 0x78, 0xd4, 0x41, 0x29, 0x04, 0x0a, 0xfa, 0x08, 0x56, 0x47, 0x4c,
	0x64, 0x9a, 0xc1, 0xdf, 0x08, 0x6b, 0xb7, 0x96, 0xcd, 0x2f, 0xce, 0xeb, 0x4b, 0xb0, 0xa6, 0x86,
	0x71, 0x44, 0xcc, 0xe3, 0xd7, 0xe8, 0x58, 0x51, 0x9d, 0x71, 0xf0, 0xf3, 0x47, 0x15, 0x68, 0x22,
	0x61, 0x4a, 0x74, 0xc3, 0xd8, 0x14, 0x80, 0xfd, 0x1e, 0x37, 0x94, 0xfa, 0xa7, 0x4e, 0xd7, 0x79,
	0x7a, 0x74, 0xc3, 0x24, 0xa7, 0xf8, 0xdb, 0xe9, 0x23, 0xec, 0x35, 0x33, 0x94, 0x4f, 0xdc, 0xb5,
	0x09, 0x4a, 0xa3, 0xa0, 0xd7, 0x3a, 0xdf, 0x9b, 0x87, 0x75, 0xc3, 0x0b, 0x89, 0xfa, 0xb6, 0x88,
	0xa0, 0x73, 0x77, 0x3a, 0x6f, 0x28, 0x44, 0x70, 0x40, 0x20, 0x8c, 0xe1, 0xbe, 0x0d, 0x4d, 0x43,
	0x60, 0x3a, 0x68, 0xab, 0x75, 0x53, 0xb0, 0xb6, 0xb1, 0x61, 0x73, 0x57, 0x49, 0xd6, 0x76, 0x6a,
	0x23, 0x8b, 0x5f, 0xaf, 0xc0, 0x46, 0xf1, 0x54, 0xa2, 0xa0, 0xc4, 0xec, 0xd3, 0x52, 0x62, 0xbd,
	0x20, 0x30, 0xd7, 0xe4, 0x12, 0x80, 0x1a, 0xc6, 0x31, 0x8b, 0x3c, 0x95, 0x48, 0x53, 0x08, 0xa8,
	0x12, 0x64, 0x3f, 0x29, 0xa1, 0x55, 0x64, 0xab, 0xea, 0x06, 0xad, 0x22, 0x7b, 0x73, 0x99, 0xca,
	0x1e, 0x78, 0x73, 0x79, 0xd2, 0xe5, 0xce, 0xc5, 0xc9, 0x97, 0x3b, 0x5f, 0x83, 0xcd, 0x9c, 0x74,
	0xe0, 0x9f, 0xf0, 0xc1, 0x70, 0xe0, 0x09, 0xa6, 0xc4, 0xa9, 0x39, 0xeb, 0x6f, 0x65, 0xe8, 0x5d,
	0xc2, 0xba, 0x1a, 0x89, 0xe7, 0x7b, 0xa4, 0x13, 0x7e, 0x16, 0xa3, 0x6a, 0xf2, 0x4c, 0x04, 0xe1,
	0x37, 0x31, 0x3e, 0x06, 0xb9, 0x2c, 0x13, 0xbc, 0x51, 0xbc, 0x53, 0xcf, 0xc0, 0x14, 0xc1, 0x5d,
	0x81, 0x95, 0xb0, 0xe7, 0x75, 0xb9, 0x2d, 0x03, 0x99, 0x84, 0x3b, 0xec, 0xdd, 0xe2, 0xa6, 0x08,
	0xd4, 0x81, 0xda, 0x21, 0x3b, 0x2d, 0x90, 0xd0, 0xd1, 0xff, 0xf2, 0x21, 0x3b, 0xb5, 0x34, 0x9d,
	0x4f, 0x42, 0x43, 0x32, 0xc1, 0x8b, 0xdf, 0x21, 0x70, 0x2e, 0x42, 0x55, 0xc7, 0x16, 0x32, 0x4a,
	0x94, 0xcd, 0x2f, 0x73, 0x40, 0xe7, 0x33, 0x70, 0x81, 0x0f, 0x3c, 0x99, 0xc4, 0x4c, 0x79, 0x69,
	0x42, 0x5e, 0xb0, 0xd0, 0xf8, 0x02, 0x54, 0x7d, 0x9d, 0x5b, 0x15, 0xef, 0x60, 0xfa, 0xa9, 0x24,
	0x69, 0x3f, 0xaa, 0xc0, 0xb9, 0xf4, 0xf8, 0x80, 0xd1, 0x41, 0xe8, 0xc8, 0xa7, 0x0f, 0xf0, 0x5b,
	0x47, 0x19, 0x24, 0xe2, 0x52, 0x15, 0x17, 0x40, 0x33, 0x43, 0xed, 0x70, 0xa9, 0x70, 0x1d, 0x5c,
	0x86, 0xe5, 0x68, 0x0b, 0xdf, 0xb1, 0x3e, 0x60, 0xbe, 0x3d, 0xc0, 0x86, 0x68, 0xeb, 0xbe, 0x81,
	0x64, 0xd7, 0x2b, 0x62, 0x3f, 0xf2, 0x22, 0xbf, 0xcb, 0x22, 0x13, 0x59, 0xd7, 0x2c, 0x74, 0x47,
	0x03, 0x3b, 0x3f, 0xa8, 0x40, 0x2d, 0x60, 0x83, 0xc7, 0x1d, 0x01, 0xa7, 0x0d, 0x8b, 0xe6, 0xdc,
	0xd6, 0xc8, 0xb4, 0x8f, 0x54, 0x55, 0xfb, 0x90, 0x2b, 0x1d, 0xcc, 0xd1, 0xeb, 0xcb, 0x36, 0x7f,
	0xb6, 0x60, 0x7a, 0x67, 0x59, 0xb3, 0x30, 0xef, 0x76, 0x9b, 0x1a, 0xb9, 0x7d, 0xec, 0xbc, 0x05,
	0xe7, 0xce, 0xfc, 0x38, 0x84, 0xf3, 0x0c, 0x80, 0xf9, 0xa4, 0x52, 0x64, 0x32, 0x93, 0xaa, 0x5b,
	0x80, 0x74, 0xbe, 0x06, 0x6d, 0xb3, 0xd2, 0xfa, 0x41, 0x80, 0xef, 0x37, 0xd0, 0x75, 0x29, 0xdd,
	0xf6, 0x2a, 0xac, 0x84, 0x4c, 0x60, 0x72, 0x84, 0xa6, 0x57, 0xb1, 0x5f, 0xc3, 0x41, 0x18, 0xda,
	0xde, 0x05, 0xa8, 0x4a, 0x16, 0x94, 0x2a, 0x76, 0x4b, 0x92, 0x05, 0x34, 0x77, 0xff, 0x34, 0x03,
	0xf5, 0xf2, 0x77, 0xae, 0x70, 0x20, 0x58, 0xec, 0x47, 0xea, 0xd4, 0x04, 0x17, 0xf6, 0x11, 0x5f,
	0x51, 0x97, 0x58, 0xe3, 0xd7, 0x0b, 0x95, 0x85, 0xa5, 0x18, 0x6a, 0xc9, 0x5d, 0xe3, 0x72, 0x2f,
	0xc3, 0xd9, 0x50, 0xea, 0x25, 0x68, 0xda, 0xf7, 0x27, 0xf3, 0x42, 0x1d, 0x0d, 0x5f, 0xc3, 0x20,
	0xf2, 0x3a, 0xdd, 0x05, 0xa8, 0x1e, 0xf8, 0x51, 0xcf, 0x8b, 0x78, 0xcf, 0xd6, 0xc6, 0x97, 0x34,
	0x60, 0x87, 0xf7, 0x70, 0x0d, 0x09, 0x36, 0x94, 0xcc, 0x53, 0x07, 0x82, 0xc9, 0x83, 0x24, 0xb2,
	0x57, 0x37, 0xeb, 0x08, 0xde, 0xb7, 0x50, 0xe7, 0x15, 0x70, 0xac, 0x8e, 0x05, 0x5a, 0xf2, 0x08,
	0x4d, 0x8b, 0xc9, 0xc9, 0xb7, 0xa0, 0x65, 0x97, 0x7a, 0xde, 0x2c, 0x4f, 0x34, 0xd7, 0x0c, 0xd2,
	0x76, 0xcd, 0x16, 0x5a, 0x05, 0x93, 0xca, 0x17, 0xca, 0xb3, 0x63, 0xb5, 0x64, 0x75, 0x41, 0xf0,
	0x03, 0x82, 0x76, 0x7e, 0xa7, 0x02, 0xce, 0xf8, 0x47, 0x83, 0xb4, 0x91, 0xeb, 0x47, 0x2d, 0x26,
	0x19, 0xda, 0x33, 0x1b, 0xf0, 0x45, 0xba, 0x4f, 0x10, 0xbc, 0x6f, 0x27, 0xe8, 0x88, 0x8d, 0xd6,
	0x0b, 0x4d, 0x9c, 0x6e, 0xa5, 0x13, 0x23, 0x5c, 0x29, 0xaf, 0x43, 0x1b, 0x79, 0x4a, 0x2f, 0x62,
	0xbe, 0xc0, 0x6c, 0x21, 0xe4, 0x92, 0x66, 0x64, 0x16, 0x67, 0xa4, 0xe5, 0x8b, 0x74, 0x5b, 0xee,
	0x18, 0xec, 0x1d, 0x83, 0xec, 0xfc, 0x9f, 0xfc, 0x13, 0x7f, 0xb9, 0x4a, 0x97, 0x00, 0x0a, 0x3e,
	0xdf, 0x2c, 0x0f, 0x9e, 0x79, 0xe5, 0x97, 0xf5, 0xa0, 0x76, 0xb5, 0x7b, 0x18, 0xf8, 0xf2, 0xd0,
	0x7e, 0xd9, 0x6c, 0xc6, 0x4c, 0x24, 0x62, 0x76, 0x7d, 0x79, 0x48, 0x1f, 0x38, 0xeb, 0x5c, 0xcf,
	0x7a, 0xfd, 0x78, 0x77, 0xbe, 0xff, 0x72, 0x06, 0x56, 0x47, 0x3e, 0x1e, 0x33, 0xe1, 0x6d, 0x8f,
	0x6a, 0xf1, 0x6d, 0x8f, 0x5f, 0xa9, 0xc0, 0x7a, 0x6f, 0x18, 0x45, 0x23, 0x1f, 0x92, 0xb1, 0x7b,
	0xa6, 0x3b, 0xa5, 0x77, 0x8a, 0x0a, 0x1f, 0x62, 0x71, 0x1d, 0x2d, 0xaf, 0xf4, 0x35, 0x19, 0xa9,
	0xd5, 0x68, 0xe1, 0x9b, 0xed, 0x63, 0x7a, 0xcc, 0x4e, 0xe7, 0xb6, 0xdf, 0xe8, 0x1b, 0xf4, 0xee,
	0x1a, 0xfe, 0x2b, 0xab, 0xd1, 0x79, 0x04, 0x9b, 0x67, 0x7c, 0x2b, 0xcc, 0xb9, 0x06, 0x8d, 0x32,
	0x6c, 0x98, 0x1a, 0x83, 0xab, 0x17, 0xbf, 0x22, 0xf6, 0x10, 0x5f, 0xb6, 0x2b, 0x53, 0x62, 0x82,
	0x60, 0xe6, 0xb8, 0x48, 0xab, 0xb3, 0x84, 0xce, 0xef, 0xce, 0x65, 0xae, 0xa3, 0x67, 0x32, 0xb0,
	0x2d, 0x68, 0xf5, 0x84, 0x37, 0xfe, 0xfd, 0x42, 0x33, 0x7b, 0x6b, 0x3d, 0x71, 0x77, 0xf4, 0xd3,
	0x85, 0x3a, 0xad, 0x8e, 0x06, 0xdc, 0x2b, 0xdc, 0x9f, 0x59, 0x8c, 0x06, 0x1c, 0x51, 0x6d, 0xd0,
	0x3f, 0xc3, 0x28, 0xe0, 0xc6, 0x63, 0xd8, 0x47, 0xa7, 0x05, 0x0b, 0x5c, 0x7a, 0x71, 0xcc, 0xd1,
	0x4b, 0x2c, 0xb9, 0xf3, 0x5c, 0xde, 0x8b, 0x2d, 0x38, 0x34, 0xa5, 0x11, 0x04, 0xdf, 0x51, 0xcc,
	0x39, 0x0f, 0x55, 0xbd, 0x48, 0x06, 0x5c, 0x77, 0x7d, 0x01, 0x31, 0x8b, 0x5c, 0xee, 0x0c, 0xf8,
	0xc3, 0xd4, 0xb9, 0x86, 0x2f, 0x68, 0x68, 0x5c, 0x1c, 0x73, 0x2f, 0x0c, 0x98, 0xa6, 0x59, 0x44,
	0x9a, 0x1a, 0xd2, 0xdc, 0x8b, 0xf9, 0x9d, 0x80, 0x3d, 0x4c, 0x4d, 0xea, 0xa8, 0x29, 0xad, 0xdb,
	0x5b, 0x42, 0xb2, 0x15, 0x24, 0xb3, 0xfe, 0xee, 0x15, 0x70, 0x58, 0xfc, 0x68, 0xc8, 0x05, 0x67,
	0x63, 0xef, 0x71, 0x36, 0x33, 0x4c, 0xf1, 0x1b, 0x07, 0x39, 0x39, 0xbe, 0x78, 0x49, 0xc7, 0xd3,
	0xb5, 0x0c, 0x8a, 0xef, 0x5d, 0x7e, 0x8c, 0xde, 0x59, 0x2b, 0x5e, 0x3e, 0xa7, 0x2a, 0x48, 0x9d,
	0xc0, 0x19, 0x3f, 0x3a, 0x22, 0xd2, 0x84, 0xc8, 0x8c, 0xca, 0x1e, 0x40, 0x20, 0xfb, 0x19, 0x9c,
	0x61, 0x1a, 0xd2, 0x4b, 0x82, 0x65, 0x86, 0x54, 0xf3, 0x58, 0x27, 0xec, 0x5e, 0x99, 0xed, 0xcb,
	0xe0, 0x94, 0x5b, 0x21, 0xf7, 0xba, 0xb9, 0x2c, 0x59, 0x68, 0x81, 0x2f, 0xbe, 0xff, 0xcd, 0x6c,
	0xb6, 0xfc, 0x0b, 0x1f, 0xe8, 0xa2, 0xa1, 0x39, 0xc3, 0x34, 0x9a, 0x63, 0xdf, 0xb4, 0x74, 0x7e,
	0xad, 0x42, 0x5f, 0x52, 0x61, 0x9e, 0x40, 0x63, 0x2c, 0xd7, 0x61, 0xa7, 0xf9, 0x85, 0x47, 0x63,
	0xbe, 0xf4, 0x65, 0x16, 0xe6, 0x6a, 0x69, 0xc5, 0x0f, 0x75, 0x7d, 0x87, 0x6e, 0x32, 0x78, 0x8f,
	0x4a, 0x2a, 0x4c, 0x29, 0x2a, 0x1e, 0xbb, 0x73, 0x40, 0xb7, 0x18, 0xde, 0x2b, 0x2a, 0xf0, 0x4d,
	0x58, 0x4d, 0xd3, 0xf2, 0x37, 0xe5, 0xe6, 0xa6, 0x14, 0x93, 0x8f, 0xbe, 0x59, 0xe5, 0xd6, 0xd3,
	0xb4, 0xf8, 0x51, 0xb9, 0xce, 0x7f, 0x56, 0x32, 0xcf, 0x2c, 0xcd, 0x06, 0xe6, 0x0c, 0x61, 0x55,
	0x8e, 0x7c, 0x5f, 0x6f, 0x8a, 0x49, 0xb8, 0x4d, 0xf2, 0xdd, 0xba, 0x2c, 0x7f, 0x59, 0x6f, 0x68,
	0xea, 0xba, 0xf9, 0xe7, 0xc2, 0xa6, 0x65, 0x06, 0xa5, 0x77, 0x8e, 0xdd, 0x9a, 0x14, 0x69, 0xfe,
	0xa9, 0xb0, 0xce, 0x4f, 0xf3, 0x2d, 0xdc, 0x04, 0xf9, 0x8f, 0x97, 0xd0, 0x5d, 0x87, 0xb5, 0x2c,
	0xa1, 0x2b, 0x5c, 0xaf, 0x20, 0x1f, 0xd7, 0xb4, 0xf9, 0x57, 0x7e, 0xc9, 0xe2, 0x0d, 0x68, 0x97,
	0x13, 0xb0, 0xb1, 0x3b, 0x19, 0x1b, 0xa5, 0x7c, 0x29, 0x6f, 0x99, 0xa7, 0x1f, 0xb8, 0xa2, 0xe6,
	0x8a, 0xe9, 0x07, 0x2e, 0x25, 0x93, 0x14, 0xcd, 0xe7, 0x49, 0x51, 0x03, 0x66, 0x75, 0xfa, 0x64,
	0xd2, 0x24, 0xa5, 0xa2, 0xce, 0xaf, 0xe6, 0xdd, 0x34, 0xaf, 0xb6, 0x61, 0x37, 0x93, 0xec, 0x9e,
	0x31, 0xde, 0x22, 0xa8, 0x4c, 0xa7, 0x08, 0x56, 0xbe, 0x42, 0x6f, 0xef, 0x2d, 0xe3, 0xdd, 0x81,
	0xef, 0x03, 0xb4, 0x26, 0x7e, 0x4a, 0xaf, 0x9c, 0x49, 0x64, 0xe0, 0xb1, 0x4c, 0xc2, 0x7e, 0x67,
	0xcf, 0x39, 0x19, 0x37, 0xd3, 0x99, 0xa9, 0x7e, 0xe7, 0xce, 0x72, 0x1f, 0xb3, 0xd4, 0xff, 0x5f,
	0x01, 0xa7, 0x60, 0x2b, 0x65, 0x97, 0x31, 0xad, 0x6f, 0x1f, 0x16, 0x04, 0xb8, 0x4d, 0x7a, 0x18,
	0xd5, 0xa1, 0x30, 0x91, 0x65, 0xc7, 0x31, 0x2d, 0x1d, 0x0a, 0x02, 0xdc, 0x26, 0x3d, 0x8c, 0x78,
	0xce, 0x2c, 0x0f, 0xcd, 0x55, 0x98, 0x9f, 0x4e, 0x60, 0x34, 0x9a, 0xe1, 0xba, 0x4d, 0x82, 0x14,
	0x15, 0xf8, 0x61, 0x05, 0x5a, 0xe5, 0xa4, 0xd6, 0x2a, 0xb1, 0x30, 0x9d, 0x3b, 0xaf, 0x3f, 0x27,
	0x69, 0x76, 0xd7, 0x10, 0xf3, 0x20, 0x91, 0x45, 0x8d, 0x7e, 0x50, 0x81, 0x0d, 0x33, 0x73, 0xb6,
	0x36, 0x64, 0x55, 0x5a, 0x44, 0x95, 0xf6, 0xa7, 0x67, 0x1e, 0xb9, 0x08, 0x77, 0x9d, 0x64, 0x7e,
	0x49, 0x94, 0xe6, 0xe7, 0x0f, 0x2b, 0x70, 0x39, 0x95, 0x6c, 0x18, 0x26, 0xc7, 0x5c, 0x30, 0x4f,
	0xa7, 0xd7, 0x1e, 0x8b, 0xc3, 0x92, 0x56, 0x4b, 0xd3, 0xf9, 0x36, 0xe2, 0x99, 0x05, 0x02, 0xf7,
	0x62, 0xae, 0xc1, 0x3b, 0xcc, 0x0f, 0xef, 0xc6, 0x61, 0x51, 0xc5, 0x23, 0x58, 0xa5, 0x2c, 0x3e,
	0xd7, 0x88, 0xee, 0x10, 0x3e, 0xf1, 0xe9, 0x42, 0xa9, 0x38, 0xe0, 0xd6, 0x03, 0x36, 0x18, 0x59,
	0x3e, 0xab, 0x3a, 0xdd, 0x2e, 0x0a, 0xa6, 0xfb, 0xb9, 0x5f, 0x99, 0xd2, 0x04, 0x8d, 0x25, 0xf3,
	0x6e, 0xbd, 0x1f, 0x04, 0x05, 0x1d, 0xba, 0x0b, 0xf8, 0x75, 0xa8, 0x4f, 0xff, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x29, 0x6a, 0x50, 0x0a, 0x91, 0x5d, 0x00, 0x00,
}
