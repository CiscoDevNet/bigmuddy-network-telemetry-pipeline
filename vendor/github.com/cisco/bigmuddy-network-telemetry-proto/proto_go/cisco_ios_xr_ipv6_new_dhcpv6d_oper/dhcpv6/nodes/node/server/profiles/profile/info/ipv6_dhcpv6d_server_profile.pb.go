// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_dhcpv6d_server_profile.proto

/*
Package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_profiles_profile_info is a generated protocol buffer package.

It is generated from these files:
	ipv6_dhcpv6d_server_profile.proto

It has these top-level messages:
	Ipv6Dhcpv6DServerProfile_KEYS
	Ipv6Dhcpv6DServerProfile
	IPV6AddressType
	TimeBag
	Ipv6Dhcpv6DServerInterfaceReference
	Ipv6Dhcpv6DServerInterfaceReferenceItem
*/
package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_profiles_profile_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DHCPv6 server profile parameters
type Ipv6Dhcpv6DServerProfile_KEYS struct {
	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
}

func (m *Ipv6Dhcpv6DServerProfile_KEYS) Reset()                    { *m = Ipv6Dhcpv6DServerProfile_KEYS{} }
func (m *Ipv6Dhcpv6DServerProfile_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerProfile_KEYS) ProtoMessage()               {}
func (*Ipv6Dhcpv6DServerProfile_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6Dhcpv6DServerProfile_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile_KEYS) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

type Ipv6Dhcpv6DServerProfile struct {
	// Server profile name
	ProfileName string `protobuf:"bytes,50,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	// Server domain name
	DomainName string `protobuf:"bytes,51,opt,name=domain_name,json=domainName" json:"domain_name,omitempty"`
	// DNS address count
	ProfileDns uint32 `protobuf:"varint,52,opt,name=profile_dns,json=profileDns" json:"profile_dns,omitempty"`
	// DNS addresses
	ProfileDnsAddress []*IPV6AddressType `protobuf:"bytes,53,rep,name=profile_dns_address,json=profileDnsAddress" json:"profile_dns_address,omitempty"`
	// Server lease time
	Lease *TimeBag `protobuf:"bytes,54,opt,name=lease" json:"lease,omitempty"`
	// Server aftr name
	AftrName string `protobuf:"bytes,55,opt,name=aftr_name,json=aftrName" json:"aftr_name,omitempty"`
	// Server framed address pool name
	FramedAddrPoolName string `protobuf:"bytes,56,opt,name=framed_addr_pool_name,json=framedAddrPoolName" json:"framed_addr_pool_name,omitempty"`
	// Server delegated prefix pool name
	DelegatedPrefixPoolName string `protobuf:"bytes,57,opt,name=delegated_prefix_pool_name,json=delegatedPrefixPoolName" json:"delegated_prefix_pool_name,omitempty"`
	// Interface references
	InterfaceReferences *Ipv6Dhcpv6DServerInterfaceReference `protobuf:"bytes,58,opt,name=interface_references,json=interfaceReferences" json:"interface_references,omitempty"`
	// Rapid Commit
	RapidCommit bool `protobuf:"varint,59,opt,name=rapid_commit,json=rapidCommit" json:"rapid_commit,omitempty"`
}

func (m *Ipv6Dhcpv6DServerProfile) Reset()                    { *m = Ipv6Dhcpv6DServerProfile{} }
func (m *Ipv6Dhcpv6DServerProfile) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerProfile) ProtoMessage()               {}
func (*Ipv6Dhcpv6DServerProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6Dhcpv6DServerProfile) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile) GetProfileDns() uint32 {
	if m != nil {
		return m.ProfileDns
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerProfile) GetProfileDnsAddress() []*IPV6AddressType {
	if m != nil {
		return m.ProfileDnsAddress
	}
	return nil
}

func (m *Ipv6Dhcpv6DServerProfile) GetLease() *TimeBag {
	if m != nil {
		return m.Lease
	}
	return nil
}

func (m *Ipv6Dhcpv6DServerProfile) GetAftrName() string {
	if m != nil {
		return m.AftrName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile) GetFramedAddrPoolName() string {
	if m != nil {
		return m.FramedAddrPoolName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile) GetDelegatedPrefixPoolName() string {
	if m != nil {
		return m.DelegatedPrefixPoolName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerProfile) GetInterfaceReferences() *Ipv6Dhcpv6DServerInterfaceReference {
	if m != nil {
		return m.InterfaceReferences
	}
	return nil
}

func (m *Ipv6Dhcpv6DServerProfile) GetRapidCommit() bool {
	if m != nil {
		return m.RapidCommit
	}
	return false
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Time in diffrent formats
type TimeBag struct {
	// DHCPV6 client lease in seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Time in format HH:MM:SS
	Time string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *TimeBag) Reset()                    { *m = TimeBag{} }
func (m *TimeBag) String() string            { return proto.CompactTextString(m) }
func (*TimeBag) ProtoMessage()               {}
func (*TimeBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TimeBag) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *TimeBag) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

// DHCPv6 server profile reference
type Ipv6Dhcpv6DServerInterfaceReference struct {
	// Next interface reference information
	Ipv6Dhcpv6DServerInterfaceReference []*Ipv6Dhcpv6DServerInterfaceReferenceItem `protobuf:"bytes,1,rep,name=ipv6_dhcpv6d_server_interface_reference,json=ipv6Dhcpv6dServerInterfaceReference" json:"ipv6_dhcpv6d_server_interface_reference,omitempty"`
}

func (m *Ipv6Dhcpv6DServerInterfaceReference) Reset()         { *m = Ipv6Dhcpv6DServerInterfaceReference{} }
func (m *Ipv6Dhcpv6DServerInterfaceReference) String() string { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerInterfaceReference) ProtoMessage()    {}
func (*Ipv6Dhcpv6DServerInterfaceReference) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *Ipv6Dhcpv6DServerInterfaceReference) GetIpv6Dhcpv6DServerInterfaceReference() []*Ipv6Dhcpv6DServerInterfaceReferenceItem {
	if m != nil {
		return m.Ipv6Dhcpv6DServerInterfaceReference
	}
	return nil
}

type Ipv6Dhcpv6DServerInterfaceReferenceItem struct {
	// Interface name
	ServerReferenceInterfaceName string `protobuf:"bytes,1,opt,name=server_reference_interface_name,json=serverReferenceInterfaceName" json:"server_reference_interface_name,omitempty"`
}

func (m *Ipv6Dhcpv6DServerInterfaceReferenceItem) Reset() {
	*m = Ipv6Dhcpv6DServerInterfaceReferenceItem{}
}
func (m *Ipv6Dhcpv6DServerInterfaceReferenceItem) String() string { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerInterfaceReferenceItem) ProtoMessage()    {}
func (*Ipv6Dhcpv6DServerInterfaceReferenceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *Ipv6Dhcpv6DServerInterfaceReferenceItem) GetServerReferenceInterfaceName() string {
	if m != nil {
		return m.ServerReferenceInterfaceName
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipv6Dhcpv6DServerProfile_KEYS)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.ipv6_dhcpv6d_server_profile_KEYS")
	proto.RegisterType((*Ipv6Dhcpv6DServerProfile)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.ipv6_dhcpv6d_server_profile")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.IPV6AddressType")
	proto.RegisterType((*TimeBag)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.time_bag")
	proto.RegisterType((*Ipv6Dhcpv6DServerInterfaceReference)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.ipv6_dhcpv6d_server_interface_reference")
	proto.RegisterType((*Ipv6Dhcpv6DServerInterfaceReferenceItem)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.info.ipv6_dhcpv6d_server_interface_reference_item")
}

func init() { proto.RegisterFile("ipv6_dhcpv6d_server_profile.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0xc7, 0x49, 0x75, 0x75, 0x7b, 0xd6, 0x22, 0x4e, 0x2b, 0x06, 0x2b, 0x34, 0x8d, 0x17, 0xdd,
	0x0b, 0x09, 0xb8, 0xd5, 0xb5, 0xda, 0x2b, 0xb1, 0xbd, 0x28, 0x82, 0xac, 0xa9, 0x08, 0xe2, 0xc5,
	0x30, 0x9b, 0x39, 0xa9, 0x03, 0xc9, 0x4c, 0x9c, 0x49, 0xd7, 0xea, 0x8d, 0xf8, 0x0a, 0xbe, 0x87,
	0x8f, 0xe3, 0x4b, 0xf8, 0x14, 0x32, 0x33, 0x49, 0x5c, 0xdc, 0x52, 0x2a, 0x58, 0x7a, 0x13, 0x66,
	0xfe, 0xe7, 0x77, 0x3e, 0x72, 0xce, 0xcc, 0xc0, 0xa6, 0xa8, 0x66, 0x63, 0xca, 0x3f, 0x64, 0xd5,
	0x6c, 0xcc, 0xa9, 0x41, 0x3d, 0x43, 0x4d, 0x2b, 0xad, 0x72, 0x51, 0x60, 0x52, 0x69, 0x55, 0x2b,
	0xf2, 0x3a, 0x13, 0x26, 0x53, 0x54, 0x28, 0x43, 0x4f, 0x34, 0x75, 0xbc, 0xc4, 0x4f, 0x9d, 0x8f,
	0xaa, 0x50, 0x27, 0x7e, 0x93, 0x48, 0xc5, 0xd1, 0xb8, 0x6f, 0xe2, 0x43, 0x25, 0x4d, 0x28, 0xd3,
	0x2e, 0x12, 0x21, 0x73, 0x15, 0x4f, 0x21, 0x3a, 0x23, 0x2f, 0x7d, 0xb9, 0xff, 0xee, 0x90, 0xac,
	0xc3, 0xb2, 0x0d, 0x44, 0x25, 0x2b, 0x31, 0x0c, 0xa2, 0x60, 0xb8, 0x9c, 0xf6, 0xad, 0xf0, 0x8a,
	0x95, 0x48, 0x36, 0xe1, 0x46, 0x0b, 0x3b, 0xfb, 0x92, 0xb3, 0x0f, 0x1a, 0xcd, 0x22, 0xf1, 0xaf,
	0x1e, 0xac, 0x9f, 0x91, 0x64, 0x21, 0xc4, 0x68, 0x21, 0x04, 0xd9, 0x80, 0x01, 0x57, 0x25, 0x13,
	0xd2, 0x13, 0xdb, 0x8e, 0x00, 0x2f, 0xb5, 0x40, 0x1b, 0x83, 0x4b, 0x13, 0x3e, 0x8a, 0x82, 0xe1,
	0x4a, 0x0a, 0x8d, 0xb4, 0x27, 0x0d, 0xf9, 0x1e, 0xc0, 0xea, 0x1c, 0x41, 0x19, 0xe7, 0x1a, 0x8d,
	0x09, 0x1f, 0x47, 0x57, 0x86, 0x83, 0xd1, 0x34, 0xf9, 0xef, 0xad, 0x4d, 0x0e, 0x26, 0x6f, 0xc7,
	0xcf, 0x7d, 0x96, 0x37, 0x9f, 0x2b, 0x4c, 0x6f, 0xfd, 0xa9, 0xa6, 0x91, 0xc9, 0x47, 0xe8, 0x15,
	0xc8, 0x0c, 0x86, 0xe3, 0x28, 0x18, 0x0e, 0x46, 0xef, 0x2f, 0xa0, 0x8a, 0x5a, 0x94, 0x48, 0xa7,
	0xec, 0x28, 0xf5, 0x99, 0xec, 0x30, 0x59, 0x5e, 0x6b, 0xdf, 0xc7, 0x27, 0x7e, 0x98, 0x56, 0x70,
	0x5d, 0x7c, 0x08, 0xb7, 0x73, 0xcd, 0x4a, 0xe4, 0xae, 0x3d, 0xb4, 0x52, 0xaa, 0xf0, 0xe0, 0x8e,
	0x03, 0x89, 0x37, 0xda, 0xea, 0x27, 0x4a, 0x15, 0xce, 0x65, 0x17, 0xee, 0x72, 0x2c, 0xf0, 0x88,
	0xd5, 0xc8, 0x69, 0xa5, 0x31, 0x17, 0x27, 0x73, 0x7e, 0x4f, 0x9d, 0xdf, 0x9d, 0x8e, 0x98, 0x38,
	0xa0, 0x73, 0xfe, 0x11, 0xc0, 0x9a, 0x90, 0x35, 0xea, 0x9c, 0x65, 0x48, 0x35, 0xe6, 0xa8, 0x51,
	0x66, 0x68, 0xc2, 0x67, 0xae, 0x1f, 0x5f, 0x2e, 0xa0, 0x1f, 0xa7, 0x1d, 0xc4, 0x53, 0x4a, 0x48,
	0x57, 0x3b, 0x31, 0xed, 0xca, 0xb2, 0x27, 0x55, 0xb3, 0x4a, 0x70, 0x9a, 0xa9, 0xb2, 0x14, 0x75,
	0xb8, 0x1b, 0x05, 0xc3, 0x7e, 0x3a, 0x70, 0xda, 0x0b, 0x27, 0xc5, 0x5b, 0x70, 0xf3, 0xaf, 0xc1,
	0x93, 0x35, 0xe8, 0xcd, 0x58, 0x71, 0xdc, 0xde, 0x1d, 0xbf, 0x89, 0x77, 0xa0, 0xdf, 0xce, 0x86,
	0x84, 0x70, 0xdd, 0x60, 0xa6, 0x24, 0x37, 0x8e, 0x59, 0x49, 0xdb, 0x2d, 0x21, 0x70, 0xd5, 0x52,
	0xcd, 0xb5, 0x72, 0xeb, 0xf8, 0xdb, 0x12, 0x6c, 0x9d, 0xf3, 0x37, 0xc8, 0xcf, 0xe0, 0xdc, 0x6c,
	0x18, 0xb8, 0xab, 0xf0, 0xf5, 0xf2, 0x9a, 0x4e, 0x45, 0x8d, 0x65, 0x7a, 0xdf, 0xd2, 0x7b, 0x1e,
	0x3e, 0x74, 0xec, 0xc1, 0xc2, 0x28, 0xe2, 0x63, 0x78, 0xf0, 0x2f, 0x41, 0xc9, 0x3e, 0x6c, 0x34,
	0xc8, 0x9c, 0xa1, 0x83, 0xe7, 0x5e, 0xb6, 0x7b, 0x1e, 0xeb, 0x32, 0x75, 0xb9, 0xed, 0x81, 0x9d,
	0x5e, 0x73, 0x0f, 0xf1, 0xf6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x4e, 0x3b, 0x52, 0xad,
	0x05, 0x00, 0x00,
}
