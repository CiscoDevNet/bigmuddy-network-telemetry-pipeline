// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_dhcpv6d_server_binding.proto

/*
Package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_binding_clients_client is a generated protocol buffer package.

It is generated from these files:
	ipv6_dhcpv6d_server_binding.proto

It has these top-level messages:
	Ipv6Dhcpv6DServerBinding_KEYS
	Ipv6Dhcpv6DServerBinding
	TimeBag
	BagDhcpv6DAddrAttrb
	BagDhcpv6DAddrAttrbItem
	BagDhcpv6DIaIdPdInfo
	BagDhcpv6DIaIdPdInfoItem
*/
package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_binding_clients_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DHCPv6 server binding entry
type Ipv6Dhcpv6DServerBinding_KEYS struct {
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *Ipv6Dhcpv6DServerBinding_KEYS) Reset()                    { *m = Ipv6Dhcpv6DServerBinding_KEYS{} }
func (m *Ipv6Dhcpv6DServerBinding_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerBinding_KEYS) ProtoMessage()               {}
func (*Ipv6Dhcpv6DServerBinding_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6Dhcpv6DServerBinding_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding_KEYS) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type Ipv6Dhcpv6DServerBinding struct {
	// Client DUID
	Duid string `protobuf:"bytes,50,opt,name=duid" json:"duid,omitempty"`
	// Client unique identifier
	ClientId uint32 `protobuf:"varint,51,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// DHCPV6 client flag
	ClientFlag uint32 `protobuf:"varint,52,opt,name=client_flag,json=clientFlag" json:"client_flag,omitempty"`
	// DHCPV6 subscriber label
	SubscriberLabel uint32 `protobuf:"varint,53,opt,name=subscriber_label,json=subscriberLabel" json:"subscriber_label,omitempty"`
	// DHCPVV6 client/subscriber VRF name
	VrfName string `protobuf:"bytes,54,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Client MAC address
	MacAddress string `protobuf:"bytes,55,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// Number of ia_id/pd
	IaIdPDs uint32 `protobuf:"varint,56,opt,name=ia_id_p_ds,json=iaIdPDs" json:"ia_id_p_ds,omitempty"`
	// List of DHCPv6 IA_ID/PDs
	IaIdPd *BagDhcpv6DIaIdPdInfo `protobuf:"bytes,57,opt,name=ia_id_pd,json=iaIdPd" json:"ia_id_pd,omitempty"`
	// DHCPV6 IPv6 client link local address
	LinkLocalAddress string `protobuf:"bytes,58,opt,name=link_local_address,json=linkLocalAddress" json:"link_local_address,omitempty"`
	// DHCPV6 access interface to client
	InterfaceName string `protobuf:"bytes,59,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// DHCPV6 access VRF name to client
	AccessVrfName string `protobuf:"bytes,60,opt,name=access_vrf_name,json=accessVrfName" json:"access_vrf_name,omitempty"`
	// DHCPV6 VLAN tag count
	ServerBindingTags uint32 `protobuf:"varint,61,opt,name=server_binding_tags,json=serverBindingTags" json:"server_binding_tags,omitempty"`
	// DHCPV6 VLAN Outer VLAN
	ServerBindingOuterTag uint32 `protobuf:"varint,62,opt,name=server_binding_outer_tag,json=serverBindingOuterTag" json:"server_binding_outer_tag,omitempty"`
	// DHCPV6 VLAN Inner VLAN
	ServerBindingInnerTag uint32 `protobuf:"varint,63,opt,name=server_binding_inner_tag,json=serverBindingInnerTag" json:"server_binding_inner_tag,omitempty"`
	// DHCPV6 pool name
	PoolName string `protobuf:"bytes,64,opt,name=pool_name,json=poolName" json:"pool_name,omitempty"`
	// DHCPV6 profile name
	ProfileName string `protobuf:"bytes,65,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	// DHCPV6 framed ipv6 addess used by ND
	FramedIpv6Prefix string `protobuf:"bytes,66,opt,name=framed_ipv6_prefix,json=framedIpv6Prefix" json:"framed_ipv6_prefix,omitempty"`
	// DHCPV6 framed ipv6 prefix length used by ND
	FramedPrefixLength uint32 `protobuf:"varint,67,opt,name=framed_prefix_length,json=framedPrefixLength" json:"framed_prefix_length,omitempty"`
	// DHCPV6 class name
	ClassName string `protobuf:"bytes,68,opt,name=class_name,json=className" json:"class_name,omitempty"`
	// DHCPV6 received Remote ID
	RxRemoteId string `protobuf:"bytes,69,opt,name=rx_remote_id,json=rxRemoteId" json:"rx_remote_id,omitempty"`
	// DHCPV6 received Interface ID
	RxInterfaceId string `protobuf:"bytes,70,opt,name=rx_interface_id,json=rxInterfaceId" json:"rx_interface_id,omitempty"`
	// DHCPV6 server prefix pool name
	PrefixPoolName string `protobuf:"bytes,71,opt,name=prefix_pool_name,json=prefixPoolName" json:"prefix_pool_name,omitempty"`
	// DHCPV6 server address pool name
	AddressPoolName string `protobuf:"bytes,72,opt,name=address_pool_name,json=addressPoolName" json:"address_pool_name,omitempty"`
	// DNS server count
	DnsServerCount uint32 `protobuf:"varint,73,opt,name=dns_server_count,json=dnsServerCount" json:"dns_server_count,omitempty"`
	// Is true if DHCPv6 next renew from client will be NAK'd
	IsNakNextRenew bool `protobuf:"varint,74,opt,name=is_nak_next_renew,json=isNakNextRenew" json:"is_nak_next_renew,omitempty"`
	// DHCPV6 SRG state
	SrgState uint32 `protobuf:"varint,75,opt,name=srg_state,json=srgState" json:"srg_state,omitempty"`
	// DHCPV6 SRG Intf Role
	SrgIntfRole uint32 `protobuf:"varint,76,opt,name=srg_intf_role,json=srgIntfRole" json:"srg_intf_role,omitempty"`
	// SRG P2P Status
	Srgp2P bool `protobuf:"varint,77,opt,name=srgp2_p,json=srgp2P" json:"srgp2_p,omitempty"`
	// DHCPV6 SRG VRF NAME
	SrgVrfName string `protobuf:"bytes,78,opt,name=srg_vrf_name,json=srgVrfName" json:"srg_vrf_name,omitempty"`
}

func (m *Ipv6Dhcpv6DServerBinding) Reset()                    { *m = Ipv6Dhcpv6DServerBinding{} }
func (m *Ipv6Dhcpv6DServerBinding) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DServerBinding) ProtoMessage()               {}
func (*Ipv6Dhcpv6DServerBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6Dhcpv6DServerBinding) GetDuid() string {
	if m != nil {
		return m.Duid
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetClientFlag() uint32 {
	if m != nil {
		return m.ClientFlag
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetSubscriberLabel() uint32 {
	if m != nil {
		return m.SubscriberLabel
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetIaIdPDs() uint32 {
	if m != nil {
		return m.IaIdPDs
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetIaIdPd() *BagDhcpv6DIaIdPdInfo {
	if m != nil {
		return m.IaIdPd
	}
	return nil
}

func (m *Ipv6Dhcpv6DServerBinding) GetLinkLocalAddress() string {
	if m != nil {
		return m.LinkLocalAddress
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetAccessVrfName() string {
	if m != nil {
		return m.AccessVrfName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetServerBindingTags() uint32 {
	if m != nil {
		return m.ServerBindingTags
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetServerBindingOuterTag() uint32 {
	if m != nil {
		return m.ServerBindingOuterTag
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetServerBindingInnerTag() uint32 {
	if m != nil {
		return m.ServerBindingInnerTag
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetFramedIpv6Prefix() string {
	if m != nil {
		return m.FramedIpv6Prefix
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetFramedPrefixLength() uint32 {
	if m != nil {
		return m.FramedPrefixLength
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetRxRemoteId() string {
	if m != nil {
		return m.RxRemoteId
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetRxInterfaceId() string {
	if m != nil {
		return m.RxInterfaceId
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetPrefixPoolName() string {
	if m != nil {
		return m.PrefixPoolName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetAddressPoolName() string {
	if m != nil {
		return m.AddressPoolName
	}
	return ""
}

func (m *Ipv6Dhcpv6DServerBinding) GetDnsServerCount() uint32 {
	if m != nil {
		return m.DnsServerCount
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetIsNakNextRenew() bool {
	if m != nil {
		return m.IsNakNextRenew
	}
	return false
}

func (m *Ipv6Dhcpv6DServerBinding) GetSrgState() uint32 {
	if m != nil {
		return m.SrgState
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetSrgIntfRole() uint32 {
	if m != nil {
		return m.SrgIntfRole
	}
	return 0
}

func (m *Ipv6Dhcpv6DServerBinding) GetSrgp2P() bool {
	if m != nil {
		return m.Srgp2P
	}
	return false
}

func (m *Ipv6Dhcpv6DServerBinding) GetSrgVrfName() string {
	if m != nil {
		return m.SrgVrfName
	}
	return ""
}

// Time in diffrent formats
type TimeBag struct {
	// DHCPV6 client lease in seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Time in format HH:MM:SS
	Time string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *TimeBag) Reset()                    { *m = TimeBag{} }
func (m *TimeBag) String() string            { return proto.CompactTextString(m) }
func (*TimeBag) ProtoMessage()               {}
func (*TimeBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeBag) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *TimeBag) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type BagDhcpv6DAddrAttrb struct {
	// Next address attribute information
	BagDhcpv6DAddrAttrb []*BagDhcpv6DAddrAttrbItem `protobuf:"bytes,1,rep,name=bag_dhcpv6d_addr_attrb,json=bagDhcpv6dAddrAttrb" json:"bag_dhcpv6d_addr_attrb,omitempty"`
}

func (m *BagDhcpv6DAddrAttrb) Reset()                    { *m = BagDhcpv6DAddrAttrb{} }
func (m *BagDhcpv6DAddrAttrb) String() string            { return proto.CompactTextString(m) }
func (*BagDhcpv6DAddrAttrb) ProtoMessage()               {}
func (*BagDhcpv6DAddrAttrb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BagDhcpv6DAddrAttrb) GetBagDhcpv6DAddrAttrb() []*BagDhcpv6DAddrAttrbItem {
	if m != nil {
		return m.BagDhcpv6DAddrAttrb
	}
	return nil
}

type BagDhcpv6DAddrAttrbItem struct {
	// IPv6 prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// Lease time in seconds
	LeaseTime uint32 `protobuf:"varint,3,opt,name=lease_time,json=leaseTime" json:"lease_time,omitempty"`
	// Remaining lease time in seconds
	RemainingLeaseTime uint32 `protobuf:"varint,4,opt,name=remaining_lease_time,json=remainingLeaseTime" json:"remaining_lease_time,omitempty"`
}

func (m *BagDhcpv6DAddrAttrbItem) Reset()                    { *m = BagDhcpv6DAddrAttrbItem{} }
func (m *BagDhcpv6DAddrAttrbItem) String() string            { return proto.CompactTextString(m) }
func (*BagDhcpv6DAddrAttrbItem) ProtoMessage()               {}
func (*BagDhcpv6DAddrAttrbItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BagDhcpv6DAddrAttrbItem) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *BagDhcpv6DAddrAttrbItem) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *BagDhcpv6DAddrAttrbItem) GetLeaseTime() uint32 {
	if m != nil {
		return m.LeaseTime
	}
	return 0
}

func (m *BagDhcpv6DAddrAttrbItem) GetRemainingLeaseTime() uint32 {
	if m != nil {
		return m.RemainingLeaseTime
	}
	return 0
}

type BagDhcpv6DIaIdPdInfo struct {
	// Next ia_id_pd information
	BagDhcpv6DIaIdPdInfo []*BagDhcpv6DIaIdPdInfoItem `protobuf:"bytes,1,rep,name=bag_dhcpv6d_ia_id_pd_info,json=bagDhcpv6dIaIdPdInfo" json:"bag_dhcpv6d_ia_id_pd_info,omitempty"`
}

func (m *BagDhcpv6DIaIdPdInfo) Reset()                    { *m = BagDhcpv6DIaIdPdInfo{} }
func (m *BagDhcpv6DIaIdPdInfo) String() string            { return proto.CompactTextString(m) }
func (*BagDhcpv6DIaIdPdInfo) ProtoMessage()               {}
func (*BagDhcpv6DIaIdPdInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BagDhcpv6DIaIdPdInfo) GetBagDhcpv6DIaIdPdInfo() []*BagDhcpv6DIaIdPdInfoItem {
	if m != nil {
		return m.BagDhcpv6DIaIdPdInfo
	}
	return nil
}

type BagDhcpv6DIaIdPdInfoItem struct {
	// IA type
	IaType string `protobuf:"bytes,1,opt,name=ia_type,json=iaType" json:"ia_type,omitempty"`
	// IA_ID of this IA
	IaId uint32 `protobuf:"varint,2,opt,name=ia_id,json=iaId" json:"ia_id,omitempty"`
	// FSM Flag for this IA
	Flags uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	// Total address in this IA
	TotalAddress uint32 `protobuf:"varint,4,opt,name=total_address,json=totalAddress" json:"total_address,omitempty"`
	// State
	State string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// List of addresses in this IA
	Addresses *BagDhcpv6DAddrAttrb `protobuf:"bytes,6,opt,name=addresses" json:"addresses,omitempty"`
}

func (m *BagDhcpv6DIaIdPdInfoItem) Reset()                    { *m = BagDhcpv6DIaIdPdInfoItem{} }
func (m *BagDhcpv6DIaIdPdInfoItem) String() string            { return proto.CompactTextString(m) }
func (*BagDhcpv6DIaIdPdInfoItem) ProtoMessage()               {}
func (*BagDhcpv6DIaIdPdInfoItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BagDhcpv6DIaIdPdInfoItem) GetIaType() string {
	if m != nil {
		return m.IaType
	}
	return ""
}

func (m *BagDhcpv6DIaIdPdInfoItem) GetIaId() uint32 {
	if m != nil {
		return m.IaId
	}
	return 0
}

func (m *BagDhcpv6DIaIdPdInfoItem) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *BagDhcpv6DIaIdPdInfoItem) GetTotalAddress() uint32 {
	if m != nil {
		return m.TotalAddress
	}
	return 0
}

func (m *BagDhcpv6DIaIdPdInfoItem) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *BagDhcpv6DIaIdPdInfoItem) GetAddresses() *BagDhcpv6DAddrAttrb {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*Ipv6Dhcpv6DServerBinding_KEYS)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.ipv6_dhcpv6d_server_binding_KEYS")
	proto.RegisterType((*Ipv6Dhcpv6DServerBinding)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.ipv6_dhcpv6d_server_binding")
	proto.RegisterType((*TimeBag)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.time_bag")
	proto.RegisterType((*BagDhcpv6DAddrAttrb)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.bag_dhcpv6d_addr_attrb")
	proto.RegisterType((*BagDhcpv6DAddrAttrbItem)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.bag_dhcpv6d_addr_attrb_item")
	proto.RegisterType((*BagDhcpv6DIaIdPdInfo)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.bag_dhcpv6d_ia_id_pd_info")
	proto.RegisterType((*BagDhcpv6DIaIdPdInfoItem)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.binding.clients.client.bag_dhcpv6d_ia_id_pd_info_item")
}

func init() { proto.RegisterFile("ipv6_dhcpv6d_server_binding.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0x1c, 0x35,
	0x14, 0xd6, 0xb4, 0xcd, 0x26, 0x7b, 0x36, 0x49, 0x13, 0x27, 0x14, 0x57, 0x11, 0x74, 0xbb, 0x08,
	0xb4, 0x45, 0xd5, 0x0a, 0xa5, 0x90, 0x96, 0x7f, 0xd2, 0xa6, 0x85, 0xa1, 0x21, 0x44, 0x9b, 0x08,
	0x09, 0x09, 0xc9, 0xf2, 0x8e, 0x3d, 0x53, 0x93, 0x19, 0xcf, 0xc8, 0x76, 0xb6, 0xdb, 0x27, 0x80,
	0x07, 0xe1, 0x8a, 0x3e, 0x04, 0xd7, 0x48, 0x3c, 0x14, 0xf2, 0xb1, 0x77, 0x37, 0x89, 0xda, 0x5c,
	0x41, 0x6f, 0x92, 0xf1, 0xf7, 0x7d, 0xe7, 0xd8, 0xfe, 0x7c, 0x7c, 0xbc, 0x70, 0x5b, 0x35, 0xe3,
	0x1d, 0x26, 0x9e, 0x65, 0xcd, 0x78, 0x47, 0x30, 0x2b, 0xcd, 0x58, 0x1a, 0x36, 0x52, 0x5a, 0x28,
	0x5d, 0x0c, 0x1a, 0x53, 0xbb, 0x9a, 0x0c, 0x33, 0x65, 0xb3, 0x9a, 0xa9, 0xda, 0xb2, 0x89, 0x61,
	0xa8, 0xd7, 0xf2, 0xf9, 0x2c, 0xa6, 0x6e, 0xa4, 0x19, 0x84, 0xc1, 0x40, 0xd7, 0x42, 0x5a, 0xfc,
	0x3b, 0x08, 0xa9, 0x06, 0xd3, 0x54, 0x59, 0xa9, 0xa4, 0x76, 0x36, 0xfe, 0xef, 0xfd, 0x02, 0xdd,
	0x4b, 0x26, 0x66, 0x4f, 0x1f, 0xff, 0x7c, 0x44, 0xb6, 0xa0, 0xed, 0x33, 0x31, 0xcd, 0x2b, 0x49,
	0x93, 0x6e, 0xd2, 0x6f, 0x0f, 0x97, 0x3c, 0x70, 0xc0, 0x2b, 0xe9, 0xc9, 0x90, 0x8a, 0x29, 0x41,
	0xaf, 0x04, 0x32, 0x00, 0xa9, 0xe8, 0xfd, 0xd3, 0x86, 0xad, 0x4b, 0xd2, 0x13, 0x02, 0xd7, 0xc4,
	0xa9, 0x12, 0x74, 0x1b, 0xe3, 0xf0, 0xfb, 0x7c, 0xc2, 0x7b, 0xdd, 0xa4, 0xbf, 0x32, 0x4f, 0x48,
	0x6e, 0x41, 0x27, 0x92, 0x79, 0xc9, 0x0b, 0xfa, 0x31, 0xd2, 0x10, 0xa0, 0x27, 0x25, 0x2f, 0xc8,
	0x1d, 0x58, 0xb3, 0xa7, 0x23, 0x9b, 0x19, 0x35, 0x92, 0x86, 0x95, 0x7c, 0x24, 0x4b, 0xfa, 0x09,
	0xaa, 0xae, 0xcf, 0xf1, 0x7d, 0x0f, 0x93, 0x9b, 0xb0, 0x34, 0x36, 0x79, 0xd8, 0xd5, 0x0e, 0x2e,
	0x60, 0x71, 0x6c, 0x72, 0xdc, 0xd4, 0x2d, 0xe8, 0x54, 0x3c, 0x63, 0x5c, 0x08, 0x23, 0xad, 0xa5,
	0xf7, 0x91, 0x85, 0x8a, 0x67, 0xbb, 0x01, 0x21, 0x5b, 0x00, 0x8a, 0x33, 0x25, 0x58, 0xc3, 0x84,
	0xa5, 0x0f, 0x70, 0x82, 0x45, 0xc5, 0x53, 0x71, 0xb8, 0x67, 0xc9, 0x6f, 0x09, 0x2c, 0x45, 0x56,
	0xd0, 0x4f, 0xbb, 0x49, 0xbf, 0xb3, 0x5d, 0x0d, 0xfe, 0xfb, 0xb3, 0x1b, 0x8c, 0x78, 0x31, 0x4b,
	0x30, 0x9d, 0x8f, 0x29, 0x9d, 0xd7, 0xc3, 0x16, 0x2e, 0x45, 0x90, 0xbb, 0x40, 0x4a, 0xa5, 0x4f,
	0x58, 0x59, 0x67, 0xbc, 0x9c, 0x6d, 0xe7, 0x33, 0xdc, 0xce, 0x9a, 0x67, 0xf6, 0x3d, 0x31, 0xdd,
	0xd4, 0xfb, 0xb0, 0xaa, 0xb4, 0x93, 0x26, 0xe7, 0x59, 0x3c, 0xec, 0xcf, 0x51, 0xb9, 0x32, 0x43,
	0xd1, 0x9c, 0x0f, 0xe0, 0x3a, 0xcf, 0x32, 0x69, 0x2d, 0x9b, 0xd9, 0xf7, 0x45, 0xd0, 0x05, 0xf8,
	0xa7, 0x68, 0xe2, 0x00, 0x36, 0x2e, 0x54, 0x93, 0xe3, 0x85, 0xa5, 0x5f, 0xa2, 0x59, 0xeb, 0x81,
	0x7a, 0x18, 0x98, 0x63, 0x5e, 0x58, 0x72, 0x1f, 0xe8, 0x05, 0x7d, 0x7d, 0xea, 0xa4, 0xf1, 0x51,
	0xf4, 0x2b, 0x0c, 0x7a, 0xeb, 0x5c, 0xd0, 0x8f, 0x9e, 0x3d, 0xe6, 0xc5, 0x2b, 0x02, 0x95, 0xd6,
	0x31, 0xf0, 0xeb, 0x57, 0x04, 0xa6, 0x9e, 0xf5, 0x81, 0x5b, 0xd0, 0x6e, 0xea, 0xba, 0x0c, 0x7b,
	0xf8, 0x26, 0xd4, 0xae, 0x07, 0x70, 0xf9, 0xb7, 0x61, 0xb9, 0x31, 0x75, 0xae, 0xca, 0xe8, 0xc5,
	0x2e, 0xf2, 0x9d, 0x88, 0xa1, 0xe4, 0x2e, 0x90, 0xdc, 0xf0, 0x4a, 0x8a, 0x70, 0xa0, 0x8d, 0x91,
	0xb9, 0x9a, 0xd0, 0x87, 0xc1, 0xde, 0xc0, 0xa4, 0xcd, 0x78, 0xe7, 0x10, 0x71, 0xf2, 0x11, 0x6c,
	0x46, 0x75, 0x10, 0xb2, 0x52, 0xea, 0xc2, 0x3d, 0xa3, 0x8f, 0x70, 0x89, 0x31, 0x53, 0xd0, 0xee,
	0x23, 0x43, 0xde, 0x01, 0xc8, 0x4a, 0x6e, 0x6d, 0x58, 0xc0, 0x1e, 0xe6, 0x6d, 0x23, 0x82, 0xd3,
	0x77, 0x61, 0xd9, 0x4c, 0x98, 0x91, 0x55, 0xed, 0xa4, 0xbf, 0x2c, 0x8f, 0x43, 0x99, 0x9a, 0xc9,
	0x10, 0xa1, 0x54, 0xf8, 0xa3, 0x32, 0x13, 0x36, 0x3f, 0x54, 0x25, 0xe8, 0x93, 0x70, 0x54, 0x66,
	0x92, 0x4e, 0xd1, 0x54, 0x90, 0x3e, 0xac, 0xc5, 0x35, 0xcd, 0xfd, 0xf8, 0x16, 0x85, 0xab, 0x01,
	0x3f, 0x9c, 0xba, 0xf2, 0x21, 0xac, 0xc7, 0x32, 0x3a, 0x23, 0xfd, 0x0e, 0xa5, 0xd7, 0x23, 0x31,
	0xd3, 0xf6, 0x61, 0x4d, 0x68, 0x3b, 0xbd, 0xf3, 0x59, 0x7d, 0xaa, 0x1d, 0x4d, 0x71, 0xb3, 0xab,
	0x42, 0xdb, 0x23, 0x84, 0x1f, 0x79, 0x94, 0xdc, 0x81, 0x75, 0xe5, 0x77, 0x79, 0xc2, 0xb4, 0x9c,
	0x38, 0x66, 0xa4, 0x96, 0xcf, 0xe9, 0xf7, 0xdd, 0xa4, 0xbf, 0x34, 0x5c, 0x55, 0xf6, 0x80, 0x9f,
	0x1c, 0xc8, 0x89, 0x1b, 0x7a, 0xd4, 0x9f, 0x99, 0x35, 0x05, 0xb3, 0x8e, 0x3b, 0x49, 0x9f, 0x86,
	0xf6, 0x60, 0x4d, 0x71, 0xe4, 0xc7, 0xa4, 0x07, 0x2b, 0x9e, 0x54, 0xda, 0xe5, 0xcc, 0xd4, 0xa5,
	0xa4, 0xfb, 0x28, 0xe8, 0x58, 0x53, 0xa4, 0xda, 0xe5, 0xc3, 0xba, 0x94, 0xe4, 0x6d, 0x58, 0xb4,
	0xa6, 0x68, 0xb6, 0x59, 0x43, 0x7f, 0xc0, 0x19, 0x5a, 0x38, 0x3c, 0xf4, 0x76, 0xfa, 0xe0, 0x59,
	0x51, 0x1f, 0x04, 0x3b, 0xad, 0x29, 0x62, 0x45, 0xf7, 0x1e, 0xc0, 0x92, 0x53, 0x95, 0x64, 0x23,
	0x5e, 0x10, 0x0a, 0x8b, 0x56, 0x66, 0xb5, 0x16, 0x16, 0x5b, 0xe2, 0xca, 0x70, 0x3a, 0xf4, 0x4d,
	0xcd, 0xab, 0x62, 0x33, 0xc4, 0xef, 0xde, 0x5f, 0x09, 0xdc, 0x38, 0x7b, 0x5d, 0xbd, 0x55, 0x8c,
	0x3b, 0x67, 0x46, 0xe4, 0x8f, 0xd7, 0x52, 0x34, 0xe9, 0x5e, 0xed, 0x77, 0xb6, 0xeb, 0xff, 0xbb,
	0x77, 0xcc, 0x67, 0x64, 0xca, 0xc9, 0x6a, 0xb8, 0x31, 0xe2, 0xc5, 0x5e, 0xe0, 0x7c, 0x6b, 0xd8,
	0xf5, 0x4c, 0xef, 0x65, 0x02, 0x5b, 0x97, 0x04, 0x91, 0x1b, 0xd0, 0x8a, 0xf5, 0x1f, 0x5e, 0x88,
	0x38, 0x22, 0xef, 0xc1, 0xca, 0xf9, 0x72, 0xbf, 0x82, 0x6e, 0x2d, 0x37, 0x17, 0x0a, 0xbd, 0x94,
	0xdc, 0x4a, 0x86, 0xc6, 0x5d, 0x45, 0x45, 0x1b, 0x91, 0x63, 0x55, 0x49, 0x7f, 0x73, 0x8c, 0xac,
	0xb8, 0xd2, 0xfe, 0x6e, 0x9f, 0x11, 0x5e, 0x0b, 0x37, 0x67, 0xc6, 0xed, 0x4f, 0x23, 0x7a, 0x7f,
	0x27, 0x70, 0xf3, 0xb5, 0xed, 0x91, 0xbc, 0xbc, 0x8c, 0x8d, 0xae, 0x9b, 0x37, 0xda, 0xb1, 0x83,
	0xf1, 0x9b, 0x73, 0xe3, 0x53, 0x6c, 0xe0, 0xa9, 0xce, 0xeb, 0xde, 0x9f, 0x57, 0xe0, 0xdd, 0xcb,
	0x03, 0x7d, 0x4d, 0x2b, 0xce, 0xdc, 0x8b, 0x66, 0xfa, 0x3e, 0xb7, 0x14, 0x3f, 0x7e, 0xd1, 0x48,
	0xb2, 0x01, 0x0b, 0x28, 0x8f, 0xae, 0x5f, 0xf3, 0xef, 0x02, 0xd9, 0x84, 0x05, 0xff, 0x7a, 0xda,
	0x68, 0x74, 0x18, 0xf8, 0x83, 0x72, 0xb5, 0x3b, 0xf3, 0x4c, 0x04, 0x77, 0x97, 0x11, 0x9c, 0x3e,
	0x11, 0x9b, 0xb0, 0x10, 0x6e, 0xde, 0x02, 0x4e, 0x13, 0x06, 0xe4, 0xf7, 0x04, 0xda, 0x31, 0x4a,
	0x5a, 0xda, 0xc2, 0x17, 0xef, 0xd7, 0x37, 0x57, 0xb5, 0xc3, 0xf9, 0xe4, 0xa3, 0x16, 0xfe, 0x54,
	0xba, 0xf7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x1f, 0x57, 0x5e, 0x4f, 0x09, 0x00, 0x00,
}
