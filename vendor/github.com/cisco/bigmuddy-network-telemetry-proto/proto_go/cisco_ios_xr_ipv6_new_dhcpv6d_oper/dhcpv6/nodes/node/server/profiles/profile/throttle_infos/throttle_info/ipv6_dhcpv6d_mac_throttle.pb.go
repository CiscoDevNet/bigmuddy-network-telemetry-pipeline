// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_dhcpv6d_mac_throttle.proto

/*
Package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_profiles_profile_throttle_infos_throttle_info is a generated protocol buffer package.

It is generated from these files:
	ipv6_dhcpv6d_mac_throttle.proto

It has these top-level messages:
	Ipv6Dhcpv6DMacThrottle_KEYS
	Ipv6Dhcpv6DMacThrottle
*/
package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_server_profiles_profile_throttle_infos_throttle_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IPv6 DHCP Mac Throttle
type Ipv6Dhcpv6DMacThrottle_KEYS struct {
	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	MacAddress  string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *Ipv6Dhcpv6DMacThrottle_KEYS) Reset()                    { *m = Ipv6Dhcpv6DMacThrottle_KEYS{} }
func (m *Ipv6Dhcpv6DMacThrottle_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DMacThrottle_KEYS) ProtoMessage()               {}
func (*Ipv6Dhcpv6DMacThrottle_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6Dhcpv6DMacThrottle_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6Dhcpv6DMacThrottle_KEYS) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *Ipv6Dhcpv6DMacThrottle_KEYS) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type Ipv6Dhcpv6DMacThrottle struct {
	// Client MAC address
	BindingChaddr []byte `protobuf:"bytes,50,opt,name=binding_chaddr,json=bindingChaddr,proto3" json:"binding_chaddr,omitempty"`
	// DHCP access interface
	Ifname []byte `protobuf:"bytes,51,opt,name=ifname,proto3" json:"ifname,omitempty"`
	// State of entry
	State uint32 `protobuf:"varint,52,opt,name=state" json:"state,omitempty"`
	// Time Left in secs
	TimeLeft uint32 `protobuf:"varint,53,opt,name=time_left,json=timeLeft" json:"time_left,omitempty"`
}

func (m *Ipv6Dhcpv6DMacThrottle) Reset()                    { *m = Ipv6Dhcpv6DMacThrottle{} }
func (m *Ipv6Dhcpv6DMacThrottle) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DMacThrottle) ProtoMessage()               {}
func (*Ipv6Dhcpv6DMacThrottle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6Dhcpv6DMacThrottle) GetBindingChaddr() []byte {
	if m != nil {
		return m.BindingChaddr
	}
	return nil
}

func (m *Ipv6Dhcpv6DMacThrottle) GetIfname() []byte {
	if m != nil {
		return m.Ifname
	}
	return nil
}

func (m *Ipv6Dhcpv6DMacThrottle) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Ipv6Dhcpv6DMacThrottle) GetTimeLeft() uint32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv6Dhcpv6DMacThrottle_KEYS)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.throttle_infos.throttle_info.ipv6_dhcpv6d_mac_throttle_KEYS")
	proto.RegisterType((*Ipv6Dhcpv6DMacThrottle)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.server.profiles.profile.throttle_infos.throttle_info.ipv6_dhcpv6d_mac_throttle")
}

func init() { proto.RegisterFile("ipv6_dhcpv6d_mac_throttle.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x89, 0xe2, 0xd8, 0xb2, 0xcd, 0x43, 0x10, 0xa9, 0x08, 0xae, 0x0e, 0x84, 0x9e, 0x7a,
	0x70, 0xba, 0xbb, 0x88, 0x27, 0xc5, 0x43, 0x3d, 0x79, 0xfa, 0xc8, 0x92, 0xaf, 0x36, 0xd0, 0x24,
	0x25, 0x09, 0xd5, 0xab, 0x7f, 0x80, 0xff, 0xb3, 0x24, 0xed, 0x04, 0x0f, 0xbb, 0x84, 0xbc, 0xdf,
	0xfb, 0xf2, 0xf2, 0x42, 0xe8, 0x4a, 0x75, 0xfd, 0x16, 0x64, 0x23, 0xba, 0x7e, 0x2b, 0x41, 0x73,
	0x01, 0xa1, 0x71, 0x36, 0x84, 0x16, 0xcb, 0xce, 0xd9, 0x60, 0x99, 0x12, 0xca, 0x0b, 0x0b, 0xca,
	0x7a, 0xf8, 0x72, 0x90, 0xa6, 0x0d, 0x7e, 0xfe, 0x9d, 0xb0, 0x1d, 0xba, 0x72, 0x10, 0xa5, 0xb1,
	0x12, 0x7d, 0x5a, 0x4b, 0x8f, 0xae, 0x47, 0x17, 0x23, 0x6a, 0xd5, 0xa2, 0xdf, 0x6f, 0xca, 0x7d,
	0x38, 0x28, 0x53, 0x5b, 0xff, 0x5f, 0xae, 0xbf, 0x09, 0xbd, 0x3a, 0x58, 0x07, 0x9e, 0x9f, 0xde,
	0xdf, 0xd8, 0x25, 0x9d, 0xc5, 0x7c, 0x30, 0x5c, 0x63, 0x46, 0x72, 0x52, 0xcc, 0xaa, 0x69, 0x04,
	0xaf, 0x5c, 0x23, 0xbb, 0xa6, 0x8b, 0xf1, 0x9e, 0xc1, 0x3f, 0x4a, 0xfe, 0x7c, 0x64, 0x69, 0x64,
	0x45, 0xe7, 0x31, 0x94, 0x4b, 0xe9, 0xd0, 0xfb, 0xec, 0x38, 0x4d, 0x50, 0xcd, 0xc5, 0xc3, 0x40,
	0xd6, 0x3f, 0x84, 0x5e, 0x1c, 0xec, 0xc0, 0x6e, 0xe8, 0xe9, 0x4e, 0x19, 0xa9, 0xcc, 0x07, 0x88,
	0x26, 0x86, 0x64, 0xb7, 0x39, 0x29, 0x16, 0xd5, 0x72, 0xa4, 0x8f, 0x09, 0xb2, 0x73, 0x3a, 0x51,
	0x75, 0xaa, 0xb0, 0x49, 0xf6, 0xa8, 0xd8, 0x19, 0x3d, 0xf1, 0x81, 0x07, 0xcc, 0xee, 0x72, 0x52,
	0x2c, 0xab, 0x41, 0xc4, 0x37, 0x05, 0xa5, 0x11, 0x5a, 0xac, 0x43, 0x76, 0x9f, 0x9c, 0x69, 0x04,
	0x2f, 0x58, 0x87, 0xdd, 0x24, 0xfd, 0xc2, 0xe6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x51, 0x58, 0x8b,
	0x12, 0xa8, 0x01, 0x00, 0x00,
}
