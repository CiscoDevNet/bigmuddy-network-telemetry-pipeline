// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_summary.proto

/*
Package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_summary_ospfv3 is a generated protocol buffer package.

It is generated from these files:
	ospfv3_edm_summary.proto

It has these top-level messages:
	Ospfv3EdmSummary_KEYS
	Ospfv3EdmSummary
	Ospfv3EdmTime
	Ospfv3EdmRedist
	Ospfv3ShDomainIdEntry
	Ospfv3ShDomainId
	Ospfv3ShStubRouterTrigger
	Ospfv3ShStubRouter
	OspfShIpfrrTb
*/
package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_summary_ospfv3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPFv3 summary
type Ospfv3EdmSummary_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *Ospfv3EdmSummary_KEYS) Reset()                    { *m = Ospfv3EdmSummary_KEYS{} }
func (m *Ospfv3EdmSummary_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmSummary_KEYS) ProtoMessage()               {}
func (*Ospfv3EdmSummary_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ospfv3EdmSummary_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Ospfv3EdmSummary_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type Ospfv3EdmSummary struct {
	// Router ID
	RouterId string `protobuf:"bytes,50,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	// If true, the process is running as stanby role
	IsRoleStandby bool `protobuf:"varint,51,opt,name=is_role_standby,json=isRoleStandby" json:"is_role_standby,omitempty"`
	// Role, V1/V2 Active/Standby
	Role uint32 `protobuf:"varint,52,opt,name=role" json:"role,omitempty"`
	// If true, NSR is enabled
	IsNsrEnabled bool `protobuf:"varint,53,opt,name=is_nsr_enabled,json=isNsrEnabled" json:"is_nsr_enabled,omitempty"`
	// Trigger RP Switchover on detectable process restart
	IsNsrSwitchoverOnRestart bool `protobuf:"varint,54,opt,name=is_nsr_switchover_on_restart,json=isNsrSwitchoverOnRestart" json:"is_nsr_switchover_on_restart,omitempty"`
	// Stalled Router ID
	IsRouterIdStalled bool `protobuf:"varint,55,opt,name=is_router_id_stalled,json=isRouterIdStalled" json:"is_router_id_stalled,omitempty"`
	// Opaque LSA capable
	IsOpaqueCapable bool `protobuf:"varint,56,opt,name=is_opaque_capable,json=isOpaqueCapable" json:"is_opaque_capable,omitempty"`
	// If true, is an area border router
	IsAreaBorderRouter bool `protobuf:"varint,57,opt,name=is_area_border_router,json=isAreaBorderRouter" json:"is_area_border_router,omitempty"`
	// If true, is an AS border router
	IsAsBorderRouter bool `protobuf:"varint,58,opt,name=is_as_border_router,json=isAsBorderRouter" json:"is_as_border_router,omitempty"`
	// Redistribution metric
	Metric uint32 `protobuf:"varint,59,opt,name=metric" json:"metric,omitempty"`
	// If true, origin is by default
	IsDefaultOriginated bool `protobuf:"varint,60,opt,name=is_default_originated,json=isDefaultOriginated" json:"is_default_originated,omitempty"`
	// If true, default always
	IsDefaultAlways bool `protobuf:"varint,61,opt,name=is_default_always,json=isDefaultAlways" json:"is_default_always,omitempty"`
	// Default metric
	DefaultMetric uint32 `protobuf:"varint,62,opt,name=default_metric,json=defaultMetric" json:"default_metric,omitempty"`
	// Default metric type
	DefaultMetricType string `protobuf:"bytes,63,opt,name=default_metric_type,json=defaultMetricType" json:"default_metric_type,omitempty"`
	// Default tag
	DefaultTag uint32 `protobuf:"varint,64,opt,name=default_tag,json=defaultTag" json:"default_tag,omitempty"`
	// If true, is a default policy
	IsDefaultPolicy bool `protobuf:"varint,65,opt,name=is_default_policy,json=isDefaultPolicy" json:"is_default_policy,omitempty"`
	// Default policy name
	DefaultPolicyName string `protobuf:"bytes,66,opt,name=default_policy_name,json=defaultPolicyName" json:"default_policy_name,omitempty"`
	// Scheduling delay for SPF (ms)
	SpfStartTime uint32 `protobuf:"varint,67,opt,name=spf_start_time,json=spfStartTime" json:"spf_start_time,omitempty"`
	// Minimum delay time between SPF runs (ms)
	SpfHoldTime uint32 `protobuf:"varint,68,opt,name=spf_hold_time,json=spfHoldTime" json:"spf_hold_time,omitempty"`
	// Maximum delay time between SPF runs (ms)
	SpfMaximumTime uint32 `protobuf:"varint,69,opt,name=spf_maximum_time,json=spfMaximumTime" json:"spf_maximum_time,omitempty"`
	// Initial LSA throttle delay (ms)
	LsaStartTime uint32 `protobuf:"varint,70,opt,name=lsa_start_time,json=lsaStartTime" json:"lsa_start_time,omitempty"`
	// Second delay before generating next LSA (ms)
	LsaHoldTime uint32 `protobuf:"varint,71,opt,name=lsa_hold_time,json=lsaHoldTime" json:"lsa_hold_time,omitempty"`
	// Maximum delay before generating an LSA (ms)
	LsaMaximumTime uint32 `protobuf:"varint,72,opt,name=lsa_maximum_time,json=lsaMaximumTime" json:"lsa_maximum_time,omitempty"`
	// Minimum time between LSA regeneration (ms)
	MinimumLsaInterval uint32 `protobuf:"varint,73,opt,name=minimum_lsa_interval,json=minimumLsaInterval" json:"minimum_lsa_interval,omitempty"`
	// LSA refresh interval (sec)
	LsaGroupInterval uint32 `protobuf:"varint,74,opt,name=lsa_group_interval,json=lsaGroupInterval" json:"lsa_group_interval,omitempty"`
	// LSA flood pacing timer (ms)
	LsaFloodPacingInterval uint32 `protobuf:"varint,75,opt,name=lsa_flood_pacing_interval,json=lsaFloodPacingInterval" json:"lsa_flood_pacing_interval,omitempty"`
	// LSA retransmission pacing timer (ms)
	LsaRetransmissionPacingInterval uint32 `protobuf:"varint,76,opt,name=lsa_retransmission_pacing_interval,json=lsaRetransmissionPacingInterval" json:"lsa_retransmission_pacing_interval,omitempty"`
	// Number of AS scope LSAs
	AsLsAs uint32 `protobuf:"varint,77,opt,name=as_ls_as,json=asLsAs" json:"as_ls_as,omitempty"`
	// Number of opaque LSAs
	OpaqueLsAs uint32 `protobuf:"varint,78,opt,name=opaque_ls_as,json=opaqueLsAs" json:"opaque_ls_as,omitempty"`
	// Sum of opaque LSA checksum
	OpaqueLsaChecksum uint32 `protobuf:"varint,79,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum" json:"opaque_lsa_checksum,omitempty"`
	// Number of external and AS opaque LSAs with demand circut bit not set
	AsDcBitlessLsAs uint32 `protobuf:"varint,80,opt,name=as_dc_bitless_ls_as,json=asDcBitlessLsAs" json:"as_dc_bitless_ls_as,omitempty"`
	// Number of external and AS opaque LSAs with do not age set
	AsDoNotAgeLsAs uint32 `protobuf:"varint,81,opt,name=as_do_not_age_ls_as,json=asDoNotAgeLsAs" json:"as_do_not_age_ls_as,omitempty"`
	// Number of areas
	Areas uint32 `protobuf:"varint,82,opt,name=areas" json:"areas,omitempty"`
	// Number of normal areas
	NormalAreas uint32 `protobuf:"varint,83,opt,name=normal_areas,json=normalAreas" json:"normal_areas,omitempty"`
	// Number of stub and total stub areas
	StubAreas uint32 `protobuf:"varint,84,opt,name=stub_areas,json=stubAreas" json:"stub_areas,omitempty"`
	// Number of NSSA areas
	NssaAreas uint32 `protobuf:"varint,85,opt,name=nssa_areas,json=nssaAreas" json:"nssa_areas,omitempty"`
	// Length of AS LSAs flood list
	AsLsaFloodListLength uint32 `protobuf:"varint,86,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength" json:"as_lsa_flood_list_length,omitempty"`
	// If true, grace restart is enabled
	IsGraceRestartEnabled bool `protobuf:"varint,87,opt,name=is_grace_restart_enabled,json=isGraceRestartEnabled" json:"is_grace_restart_enabled,omitempty"`
	//  Length of time since the last NSF (s)
	LastNsfTime uint32 `protobuf:"varint,88,opt,name=last_nsf_time,json=lastNsfTime" json:"last_nsf_time,omitempty"`
	// Grace time to resync
	GraceResyncTime uint32 `protobuf:"varint,89,opt,name=grace_resync_time,json=graceResyncTime" json:"grace_resync_time,omitempty"`
	// Maximum number of interfaces
	MaximumInterfaces uint32 `protobuf:"varint,90,opt,name=maximum_interfaces,json=maximumInterfaces" json:"maximum_interfaces,omitempty"`
	// Maximum number of paths
	MaximumPaths uint32 `protobuf:"varint,91,opt,name=maximum_paths,json=maximumPaths" json:"maximum_paths,omitempty"`
	// The number of redistributed prefixes allowed
	RedistributionLimit uint32 `protobuf:"varint,92,opt,name=redistribution_limit,json=redistributionLimit" json:"redistribution_limit,omitempty"`
	// When the number of redistributed prefixes reaches this threshold, a warning message is issued
	RedistributionThreshold uint32 `protobuf:"varint,93,opt,name=redistribution_threshold,json=redistributionThreshold" json:"redistribution_threshold,omitempty"`
	// If true, auto cost is enabled
	IsAutoCost bool `protobuf:"varint,94,opt,name=is_auto_cost,json=isAutoCost" json:"is_auto_cost,omitempty"`
	// Reference Bandwdith
	ReferenceBandwidth uint32 `protobuf:"varint,95,opt,name=reference_bandwidth,json=referenceBandwidth" json:"reference_bandwidth,omitempty"`
	// Domain ID information
	DomainId *Ospfv3ShDomainId `protobuf:"bytes,96,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// Stub Router Information
	StubRouter []*Ospfv3ShStubRouter `protobuf:"bytes,97,rep,name=stub_router,json=stubRouter" json:"stub_router,omitempty"`
	// IPFRR-Tiebreakers list
	IpfrrTiebreakersList []*OspfShIpfrrTb `protobuf:"bytes,98,rep,name=ipfrr_tiebreakers_list,json=ipfrrTiebreakersList" json:"ipfrr_tiebreakers_list,omitempty"`
	// Context name
	ContextName string `protobuf:"bytes,99,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	// If true, snmp trap is enabled
	SnmpTrapEnabled bool `protobuf:"varint,100,opt,name=snmp_trap_enabled,json=snmpTrapEnabled" json:"snmp_trap_enabled,omitempty"`
	// Graceful shutdown state
	GracefulShutdownState string `protobuf:"bytes,101,opt,name=graceful_shutdown_state,json=gracefulShutdownState" json:"graceful_shutdown_state,omitempty"`
}

func (m *Ospfv3EdmSummary) Reset()                    { *m = Ospfv3EdmSummary{} }
func (m *Ospfv3EdmSummary) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmSummary) ProtoMessage()               {}
func (*Ospfv3EdmSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ospfv3EdmSummary) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetIsRoleStandby() bool {
	if m != nil {
		return m.IsRoleStandby
	}
	return false
}

func (m *Ospfv3EdmSummary) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsNsrEnabled() bool {
	if m != nil {
		return m.IsNsrEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsNsrSwitchoverOnRestart() bool {
	if m != nil {
		return m.IsNsrSwitchoverOnRestart
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsRouterIdStalled() bool {
	if m != nil {
		return m.IsRouterIdStalled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsOpaqueCapable() bool {
	if m != nil {
		return m.IsOpaqueCapable
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsAreaBorderRouter() bool {
	if m != nil {
		return m.IsAreaBorderRouter
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsAsBorderRouter() bool {
	if m != nil {
		return m.IsAsBorderRouter
	}
	return false
}

func (m *Ospfv3EdmSummary) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsDefaultOriginated() bool {
	if m != nil {
		return m.IsDefaultOriginated
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsDefaultAlways() bool {
	if m != nil {
		return m.IsDefaultAlways
	}
	return false
}

func (m *Ospfv3EdmSummary) GetDefaultMetric() uint32 {
	if m != nil {
		return m.DefaultMetric
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetDefaultMetricType() string {
	if m != nil {
		return m.DefaultMetricType
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetDefaultTag() uint32 {
	if m != nil {
		return m.DefaultTag
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsDefaultPolicy() bool {
	if m != nil {
		return m.IsDefaultPolicy
	}
	return false
}

func (m *Ospfv3EdmSummary) GetDefaultPolicyName() string {
	if m != nil {
		return m.DefaultPolicyName
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetSpfStartTime() uint32 {
	if m != nil {
		return m.SpfStartTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetSpfHoldTime() uint32 {
	if m != nil {
		return m.SpfHoldTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetSpfMaximumTime() uint32 {
	if m != nil {
		return m.SpfMaximumTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaStartTime() uint32 {
	if m != nil {
		return m.LsaStartTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaHoldTime() uint32 {
	if m != nil {
		return m.LsaHoldTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaMaximumTime() uint32 {
	if m != nil {
		return m.LsaMaximumTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMinimumLsaInterval() uint32 {
	if m != nil {
		return m.MinimumLsaInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaGroupInterval() uint32 {
	if m != nil {
		return m.LsaGroupInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaFloodPacingInterval() uint32 {
	if m != nil {
		return m.LsaFloodPacingInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaRetransmissionPacingInterval() uint32 {
	if m != nil {
		return m.LsaRetransmissionPacingInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsLsAs() uint32 {
	if m != nil {
		return m.AsLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetOpaqueLsAs() uint32 {
	if m != nil {
		return m.OpaqueLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.OpaqueLsaChecksum
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsDcBitlessLsAs() uint32 {
	if m != nil {
		return m.AsDcBitlessLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsDoNotAgeLsAs() uint32 {
	if m != nil {
		return m.AsDoNotAgeLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAreas() uint32 {
	if m != nil {
		return m.Areas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetNormalAreas() uint32 {
	if m != nil {
		return m.NormalAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetStubAreas() uint32 {
	if m != nil {
		return m.StubAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetNssaAreas() uint32 {
	if m != nil {
		return m.NssaAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsLsaFloodListLength() uint32 {
	if m != nil {
		return m.AsLsaFloodListLength
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsGraceRestartEnabled() bool {
	if m != nil {
		return m.IsGraceRestartEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetLastNsfTime() uint32 {
	if m != nil {
		return m.LastNsfTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetGraceResyncTime() uint32 {
	if m != nil {
		return m.GraceResyncTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMaximumInterfaces() uint32 {
	if m != nil {
		return m.MaximumInterfaces
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMaximumPaths() uint32 {
	if m != nil {
		return m.MaximumPaths
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetRedistributionLimit() uint32 {
	if m != nil {
		return m.RedistributionLimit
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetRedistributionThreshold() uint32 {
	if m != nil {
		return m.RedistributionThreshold
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsAutoCost() bool {
	if m != nil {
		return m.IsAutoCost
	}
	return false
}

func (m *Ospfv3EdmSummary) GetReferenceBandwidth() uint32 {
	if m != nil {
		return m.ReferenceBandwidth
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetDomainId() *Ospfv3ShDomainId {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetStubRouter() []*Ospfv3ShStubRouter {
	if m != nil {
		return m.StubRouter
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetIpfrrTiebreakersList() []*OspfShIpfrrTb {
	if m != nil {
		return m.IpfrrTiebreakersList
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetSnmpTrapEnabled() bool {
	if m != nil {
		return m.SnmpTrapEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetGracefulShutdownState() string {
	if m != nil {
		return m.GracefulShutdownState
	}
	return ""
}

// OSPFv3 time stamp
type Ospfv3EdmTime struct {
	// Seconds
	Second uint32 `protobuf:"varint,1,opt,name=second" json:"second,omitempty"`
	// Nano seconds
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond" json:"nanosecond,omitempty"`
}

func (m *Ospfv3EdmTime) Reset()                    { *m = Ospfv3EdmTime{} }
func (m *Ospfv3EdmTime) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmTime) ProtoMessage()               {}
func (*Ospfv3EdmTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ospfv3EdmTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Ospfv3EdmTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

// OSPFv3 Redistribution Information
type Ospfv3EdmRedist struct {
	// Protocol name
	ProtocolName string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	// Process ID
	ProcessId     string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	RedMetricFlag bool   `protobuf:"varint,3,opt,name=red_metric_flag,json=redMetricFlag" json:"red_metric_flag,omitempty"`
	RedMetric     uint32 `protobuf:"varint,4,opt,name=red_metric,json=redMetric" json:"red_metric,omitempty"`
	RedMtypeFlag  bool   `protobuf:"varint,5,opt,name=red_mtype_flag,json=redMtypeFlag" json:"red_mtype_flag,omitempty"`
	RedMetricType uint32 `protobuf:"varint,6,opt,name=red_metric_type,json=redMetricType" json:"red_metric_type,omitempty"`
	RedTag        uint32 `protobuf:"varint,7,opt,name=red_tag,json=redTag" json:"red_tag,omitempty"`
	// Route policy name
	PolicyName string `protobuf:"bytes,8,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
}

func (m *Ospfv3EdmRedist) Reset()                    { *m = Ospfv3EdmRedist{} }
func (m *Ospfv3EdmRedist) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmRedist) ProtoMessage()               {}
func (*Ospfv3EdmRedist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ospfv3EdmRedist) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *Ospfv3EdmRedist) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *Ospfv3EdmRedist) GetRedMetricFlag() bool {
	if m != nil {
		return m.RedMetricFlag
	}
	return false
}

func (m *Ospfv3EdmRedist) GetRedMetric() uint32 {
	if m != nil {
		return m.RedMetric
	}
	return 0
}

func (m *Ospfv3EdmRedist) GetRedMtypeFlag() bool {
	if m != nil {
		return m.RedMtypeFlag
	}
	return false
}

func (m *Ospfv3EdmRedist) GetRedMetricType() uint32 {
	if m != nil {
		return m.RedMetricType
	}
	return 0
}

func (m *Ospfv3EdmRedist) GetRedTag() uint32 {
	if m != nil {
		return m.RedTag
	}
	return 0
}

func (m *Ospfv3EdmRedist) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

// OSPF Domain ID
type Ospfv3ShDomainIdEntry struct {
	// Domain ID Type
	DomainIdType uint32 `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType" json:"domain_id_type,omitempty"`
	// Domain ID value
	DomainIdValue []byte `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
}

func (m *Ospfv3ShDomainIdEntry) Reset()                    { *m = Ospfv3ShDomainIdEntry{} }
func (m *Ospfv3ShDomainIdEntry) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShDomainIdEntry) ProtoMessage()               {}
func (*Ospfv3ShDomainIdEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ospfv3ShDomainIdEntry) GetDomainIdType() uint32 {
	if m != nil {
		return m.DomainIdType
	}
	return 0
}

func (m *Ospfv3ShDomainIdEntry) GetDomainIdValue() []byte {
	if m != nil {
		return m.DomainIdValue
	}
	return nil
}

// OSPF Domain ID entries
type Ospfv3ShDomainId struct {
	// Primary Domain ID
	PrimaryDomainId *Ospfv3ShDomainIdEntry `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId" json:"primary_domain_id,omitempty"`
	// List of secondary domain IDs
	SecondaryDomainIdList []*Ospfv3ShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id_list,json=secondaryDomainIdList" json:"secondary_domain_id_list,omitempty"`
}

func (m *Ospfv3ShDomainId) Reset()                    { *m = Ospfv3ShDomainId{} }
func (m *Ospfv3ShDomainId) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShDomainId) ProtoMessage()               {}
func (*Ospfv3ShDomainId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Ospfv3ShDomainId) GetPrimaryDomainId() *Ospfv3ShDomainIdEntry {
	if m != nil {
		return m.PrimaryDomainId
	}
	return nil
}

func (m *Ospfv3ShDomainId) GetSecondaryDomainIdList() []*Ospfv3ShDomainIdEntry {
	if m != nil {
		return m.SecondaryDomainIdList
	}
	return nil
}

// OSPFv3 stub router trigger information
type Ospfv3ShStubRouterTrigger struct {
	// Stub Router Trigger type
	Trigger string `protobuf:"bytes,1,opt,name=trigger" json:"trigger,omitempty"`
	// If true, stub router is terminated when BGP converges
	WaitForBgp bool `protobuf:"varint,2,opt,name=wait_for_bgp,json=waitForBgp" json:"wait_for_bgp,omitempty"`
	// Reason for clearing stub router condition
	UnsetReason string `protobuf:"bytes,3,opt,name=unset_reason,json=unsetReason" json:"unset_reason,omitempty"`
	// Time (in seconds) to stay in stub router mode
	Time uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
	UnsetTime *Ospfv3EdmTime `protobuf:"bytes,5,opt,name=unset_time,json=unsetTime" json:"unset_time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
	StartTime *Ospfv3EdmTime `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

func (m *Ospfv3ShStubRouterTrigger) Reset()                    { *m = Ospfv3ShStubRouterTrigger{} }
func (m *Ospfv3ShStubRouterTrigger) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShStubRouterTrigger) ProtoMessage()               {}
func (*Ospfv3ShStubRouterTrigger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ospfv3ShStubRouterTrigger) GetTrigger() string {
	if m != nil {
		return m.Trigger
	}
	return ""
}

func (m *Ospfv3ShStubRouterTrigger) GetWaitForBgp() bool {
	if m != nil {
		return m.WaitForBgp
	}
	return false
}

func (m *Ospfv3ShStubRouterTrigger) GetUnsetReason() string {
	if m != nil {
		return m.UnsetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouterTrigger) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Ospfv3ShStubRouterTrigger) GetUnsetTime() *Ospfv3EdmTime {
	if m != nil {
		return m.UnsetTime
	}
	return nil
}

func (m *Ospfv3ShStubRouterTrigger) GetStartTime() *Ospfv3EdmTime {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// OSPFv3 Stub Router Information
type Ospfv3ShStubRouter struct {
	// Stub router mode
	Mode string `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	// If true, stub router mode is active
	Active bool `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	// Remaining time (in seconds) in stub router mode
	RemainingTime uint32 `protobuf:"varint,3,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	// Reason for entering stub router mode
	SetReason string `protobuf:"bytes,4,opt,name=set_reason,json=setReason" json:"set_reason,omitempty"`
	// Reason for clearing stub router condition
	UnsetReason string `protobuf:"bytes,5,opt,name=unset_reason,json=unsetReason" json:"unset_reason,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
	UnsetTime *Ospfv3EdmTime `protobuf:"bytes,6,opt,name=unset_time,json=unsetTime" json:"unset_time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
	StartTime *Ospfv3EdmTime `protobuf:"bytes,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// If true, advertise maximum metric for stub links
	IncludeStubLinks bool `protobuf:"varint,8,opt,name=include_stub_links,json=includeStubLinks" json:"include_stub_links,omitempty"`
	// Metric for summary LSAs in max-metric mode
	SummaryLsaMetric uint32 `protobuf:"varint,9,opt,name=summary_lsa_metric,json=summaryLsaMetric" json:"summary_lsa_metric,omitempty"`
	// Metric for external LSAs in max-metric mode
	ExternalLsaMetric uint32 `protobuf:"varint,10,opt,name=external_lsa_metric,json=externalLsaMetric" json:"external_lsa_metric,omitempty"`
	// Triggers for entering stub router mode
	Triggers []*Ospfv3ShStubRouterTrigger `protobuf:"bytes,11,rep,name=triggers" json:"triggers,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed
	AbrResumeTime *Ospfv3EdmTime `protobuf:"bytes,12,opt,name=abr_resume_time,json=abrResumeTime" json:"abr_resume_time,omitempty"`
	// Reason for being in ABR off mode
	AbrOffReason string `protobuf:"bytes,13,opt,name=abr_off_reason,json=abrOffReason" json:"abr_off_reason,omitempty"`
}

func (m *Ospfv3ShStubRouter) Reset()                    { *m = Ospfv3ShStubRouter{} }
func (m *Ospfv3ShStubRouter) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShStubRouter) ProtoMessage()               {}
func (*Ospfv3ShStubRouter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Ospfv3ShStubRouter) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Ospfv3ShStubRouter) GetRemainingTime() uint32 {
	if m != nil {
		return m.RemainingTime
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetSetReason() string {
	if m != nil {
		return m.SetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetUnsetReason() string {
	if m != nil {
		return m.UnsetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetUnsetTime() *Ospfv3EdmTime {
	if m != nil {
		return m.UnsetTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetStartTime() *Ospfv3EdmTime {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetIncludeStubLinks() bool {
	if m != nil {
		return m.IncludeStubLinks
	}
	return false
}

func (m *Ospfv3ShStubRouter) GetSummaryLsaMetric() uint32 {
	if m != nil {
		return m.SummaryLsaMetric
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetExternalLsaMetric() uint32 {
	if m != nil {
		return m.ExternalLsaMetric
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetTriggers() []*Ospfv3ShStubRouterTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetAbrResumeTime() *Ospfv3EdmTime {
	if m != nil {
		return m.AbrResumeTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetAbrOffReason() string {
	if m != nil {
		return m.AbrOffReason
	}
	return ""
}

// OSPF IPFRR Tiebreakers
type OspfShIpfrrTb struct {
	// Tiebreaker Type
	TiebreakerType string `protobuf:"bytes,1,opt,name=tiebreaker_type,json=tiebreakerType" json:"tiebreaker_type,omitempty"`
	// Tiebreaker Index
	TiebreakerIndex uint32 `protobuf:"varint,2,opt,name=tiebreaker_index,json=tiebreakerIndex" json:"tiebreaker_index,omitempty"`
}

func (m *OspfShIpfrrTb) Reset()                    { *m = OspfShIpfrrTb{} }
func (m *OspfShIpfrrTb) String() string            { return proto.CompactTextString(m) }
func (*OspfShIpfrrTb) ProtoMessage()               {}
func (*OspfShIpfrrTb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OspfShIpfrrTb) GetTiebreakerType() string {
	if m != nil {
		return m.TiebreakerType
	}
	return ""
}

func (m *OspfShIpfrrTb) GetTiebreakerIndex() uint32 {
	if m != nil {
		return m.TiebreakerIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*Ospfv3EdmSummary_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_edm_summary_KEYS")
	proto.RegisterType((*Ospfv3EdmSummary)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_edm_summary")
	proto.RegisterType((*Ospfv3EdmTime)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_edm_time")
	proto.RegisterType((*Ospfv3EdmRedist)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_edm_redist")
	proto.RegisterType((*Ospfv3ShDomainIdEntry)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_sh_domain_id_entry")
	proto.RegisterType((*Ospfv3ShDomainId)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_sh_domain_id")
	proto.RegisterType((*Ospfv3ShStubRouterTrigger)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger")
	proto.RegisterType((*Ospfv3ShStubRouter)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospfv3_sh_stub_router")
	proto.RegisterType((*OspfShIpfrrTb)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.summary.ospfv3.ospf_sh_ipfrr_tb")
}

func init() { proto.RegisterFile("ospfv3_edm_summary.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x49, 0x73, 0x1d, 0x49,
	0x11, 0x8e, 0xe7, 0x45, 0x4b, 0x69, 0xb3, 0x5a, 0x92, 0x5d, 0x0e, 0x30, 0x16, 0x0f, 0x33, 0x08,
	0x33, 0x23, 0x18, 0x1b, 0x3c, 0x98, 0x65, 0x40, 0xb2, 0x6c, 0x8f, 0xb0, 0x2c, 0x99, 0x96, 0x98,
	0x61, 0xd8, 0x6a, 0xea, 0x75, 0x57, 0x3f, 0x55, 0xb8, 0xbb, 0xab, 0xa9, 0xac, 0xa7, 0xe5, 0x42,
	0x70, 0x82, 0xe0, 0x4a, 0x04, 0xfc, 0x00, 0x0e, 0xfc, 0x20, 0x7e, 0x08, 0x27, 0x7e, 0x00, 0x91,
	0x99, 0xd5, 0x6f, 0x91, 0x7d, 0xc4, 0xe2, 0x62, 0xf7, 0xcb, 0xef, 0xcb, 0xa5, 0x3b, 0x97, 0xca,
	0x92, 0x90, 0x0e, 0x9a, 0xe2, 0xe4, 0xa1, 0x32, 0x79, 0xa5, 0x60, 0x50, 0x55, 0xda, 0x9f, 0x6f,
	0x36, 0xde, 0x05, 0x97, 0xec, 0x67, 0x16, 0x32, 0xa7, 0xac, 0x03, 0x75, 0xe6, 0x95, 0x6d, 0x4e,
	0x1e, 0xa9, 0xc8, 0x75, 0x8d, 0xf1, 0x9b, 0xfc, 0x8c, 0xdc, 0xcc, 0x00, 0x18, 0x68, 0x9f, 0x36,
	0x4f, 0x7c, 0x41, 0xff, 0x6c, 0xb6, 0xe6, 0x98, 0xd9, 0xfd, 0x4c, 0xdc, 0x7a, 0xd3, 0x97, 0x7a,
	0xf1, 0xf4, 0xf3, 0xc3, 0xe4, 0xab, 0x62, 0x3e, 0x6a, 0xab, 0x5a, 0x57, 0x46, 0x76, 0xd6, 0x3b,
	0x1b, 0xb3, 0xe9, 0x5c, 0x94, 0xed, 0xeb, 0xca, 0x24, 0xb7, 0xc5, 0xcc, 0x89, 0x2f, 0x18, 0xbe,
	0x42, 0xf0, 0xf4, 0x89, 0x2f, 0x10, 0xea, 0xfe, 0x7b, 0x45, 0x24, 0x6f, 0x5a, 0x4e, 0xbe, 0x24,
	0x66, 0xbd, 0x1b, 0x04, 0xe3, 0x95, 0xcd, 0xe5, 0x03, 0x52, 0x99, 0x61, 0xc1, 0x6e, 0x9e, 0xbc,
	0x27, 0x96, 0x2c, 0x28, 0xef, 0x4a, 0xa3, 0x20, 0xe8, 0x3a, 0xef, 0x9d, 0xcb, 0x87, 0xeb, 0x9d,
	0x8d, 0x99, 0x74, 0xc1, 0x42, 0xea, 0x4a, 0x73, 0xc8, 0xc2, 0x24, 0x11, 0xd7, 0x90, 0x24, 0xbf,
	0xbb, 0xde, 0xd9, 0x58, 0x48, 0xe9, 0x39, 0xb9, 0x27, 0x16, 0x2d, 0xa8, 0x1a, 0xbc, 0x32, 0xb5,
	0xee, 0x95, 0x26, 0x97, 0xdf, 0x23, 0xd5, 0x79, 0x0b, 0xfb, 0xe0, 0x9f, 0xb2, 0x2c, 0xf9, 0x58,
	0x7c, 0x39, 0xb2, 0xe0, 0xd4, 0x86, 0xec, 0xd8, 0x9d, 0x18, 0xaf, 0x5c, 0xad, 0xbc, 0x81, 0xa0,
	0x7d, 0x90, 0x8f, 0x48, 0x47, 0x92, 0xce, 0xe1, 0x90, 0x71, 0x50, 0xa7, 0x8c, 0x27, 0xdf, 0x16,
	0xab, 0x14, 0x61, 0x7c, 0x03, 0x0c, 0xb3, 0x44, 0x5f, 0x1f, 0x91, 0xde, 0x32, 0x86, 0xc9, 0xef,
	0x72, 0xc8, 0x40, 0x72, 0x5f, 0x2c, 0x5b, 0x50, 0xae, 0xd1, 0xbf, 0x1f, 0x18, 0x95, 0xe9, 0x06,
	0xc3, 0x90, 0xdf, 0x27, 0xf6, 0x92, 0x85, 0x03, 0x92, 0x3f, 0x61, 0x71, 0xf2, 0xa1, 0x58, 0xb3,
	0xa0, 0xb4, 0x37, 0x5a, 0xf5, 0x9c, 0xcf, 0x8d, 0x8f, 0x8e, 0xe4, 0x63, 0xe2, 0x27, 0x16, 0xb6,
	0xbc, 0xd1, 0xdb, 0x04, 0xb1, 0x9f, 0xe4, 0x03, 0xb1, 0x82, 0x2a, 0x70, 0x41, 0xe1, 0x07, 0xa4,
	0x70, 0xc3, 0xc2, 0x16, 0x4c, 0xd0, 0x6f, 0x8a, 0xa9, 0xca, 0x04, 0x6f, 0x33, 0xf9, 0x43, 0xfa,
	0x74, 0xf1, 0x57, 0xf2, 0x80, 0x3c, 0xe7, 0xa6, 0xd0, 0x83, 0x32, 0x28, 0xe7, 0x6d, 0xdf, 0xd6,
	0x3a, 0x98, 0x5c, 0xfe, 0x88, 0x0c, 0xad, 0x58, 0xd8, 0x61, 0xec, 0x60, 0x08, 0xc5, 0x37, 0x6b,
	0x75, 0x74, 0x79, 0xaa, 0xcf, 0x41, 0xfe, 0xb8, 0x7d, 0xb3, 0xc8, 0xdf, 0x22, 0x71, 0xf2, 0x75,
	0xb1, 0xd8, 0x12, 0xa3, 0xff, 0x8f, 0xc9, 0xff, 0x42, 0x94, 0xbe, 0xe4, 0x30, 0x36, 0xc5, 0xca,
	0x24, 0x4d, 0x85, 0xf3, 0xc6, 0xc8, 0x9f, 0x50, 0x99, 0x2c, 0x4f, 0x70, 0x8f, 0xce, 0x1b, 0x93,
	0xdc, 0x15, 0x73, 0x2d, 0x3f, 0xe8, 0xbe, 0xfc, 0x29, 0xd9, 0x14, 0x51, 0x74, 0xa4, 0xfb, 0x17,
	0x62, 0x6c, 0x5c, 0x69, 0xb3, 0x73, 0xb9, 0x75, 0x21, 0xc6, 0x57, 0x24, 0x1e, 0x77, 0xce, 0x44,
	0x2e, 0xeb, 0xed, 0x09, 0xe7, 0xcc, 0xa5, 0xda, 0xbf, 0x27, 0x16, 0xa1, 0x29, 0x14, 0xd5, 0x85,
	0x0a, 0xb6, 0x32, 0xf2, 0x09, 0xf9, 0x9f, 0x87, 0xa6, 0x38, 0x44, 0xe1, 0x91, 0xad, 0x4c, 0xd2,
	0x15, 0x0b, 0xc8, 0x3a, 0x76, 0x65, 0xce, 0xa4, 0x1d, 0x22, 0xcd, 0x41, 0x53, 0x7c, 0xe2, 0xca,
	0x9c, 0x38, 0x1b, 0xe2, 0x06, 0x72, 0x2a, 0x7d, 0x66, 0xab, 0x41, 0xc5, 0xb4, 0xa7, 0x44, 0x43,
	0x0f, 0x2f, 0x59, 0x4c, 0xcc, 0x7b, 0x62, 0xb1, 0x04, 0x3d, 0xee, 0xf3, 0x19, 0xfb, 0x2c, 0x41,
	0x4f, 0xf8, 0x44, 0xd6, 0xc8, 0xe7, 0x73, 0xf6, 0x59, 0x82, 0x1e, 0xf7, 0x89, 0x9c, 0x09, 0x9f,
	0x9f, 0xb0, 0xcf, 0x12, 0xf4, 0xb8, 0xcf, 0xef, 0x88, 0xd5, 0xca, 0xd6, 0xc4, 0x42, 0x0d, 0x5b,
	0x07, 0xe3, 0x4f, 0x74, 0x29, 0x77, 0x89, 0x9d, 0x44, 0x6c, 0x0f, 0xf4, 0x6e, 0x44, 0x92, 0xf7,
	0x45, 0x82, 0xcc, 0xbe, 0x77, 0x83, 0x66, 0xc4, 0xff, 0x19, 0xf1, 0xd1, 0xeb, 0x73, 0x04, 0x86,
	0xec, 0xc7, 0xe2, 0x36, 0xb2, 0x8b, 0xd2, 0xb9, 0x5c, 0x35, 0x3a, 0xb3, 0x75, 0x7f, 0xa4, 0xf4,
	0x82, 0x94, 0x6e, 0x96, 0xa0, 0x9f, 0x21, 0xfe, 0x8a, 0xe0, 0xa1, 0xea, 0x0b, 0xd1, 0x45, 0x55,
	0x6f, 0x82, 0xd7, 0x35, 0x54, 0x16, 0xc0, 0xba, 0xfa, 0x0d, 0x1b, 0x7b, 0x64, 0xe3, 0x6e, 0x09,
	0x3a, 0x9d, 0x20, 0x5e, 0x30, 0x26, 0xc5, 0x8c, 0x06, 0x55, 0x62, 0x37, 0xc9, 0x97, 0xdc, 0x1d,
	0x1a, 0xf6, 0x60, 0x0b, 0x92, 0x75, 0x31, 0x1f, 0x1b, 0x98, 0xd1, 0x7d, 0xae, 0x33, 0x96, 0x11,
	0x63, 0x53, 0xac, 0x0c, 0x19, 0x5a, 0x65, 0xc7, 0x26, 0x7b, 0x0d, 0x83, 0x4a, 0x1e, 0x10, 0x71,
	0xb9, 0x25, 0xea, 0x27, 0x11, 0x48, 0xde, 0x17, 0x2b, 0x1a, 0x54, 0x9e, 0xa9, 0x9e, 0x0d, 0x25,
	0x0e, 0x58, 0x36, 0xfc, 0x8a, 0xf8, 0x4b, 0x1a, 0x76, 0xb2, 0x6d, 0x06, 0xc8, 0xfa, 0xb7, 0x98,
	0xed, 0x54, 0xed, 0x82, 0xd2, 0xfd, 0x36, 0x8c, 0x9f, 0x73, 0xba, 0x34, 0xec, 0xb8, 0x7d, 0x17,
	0xb6, 0xfa, 0x1c, 0xca, 0xaa, 0xb8, 0x8e, 0x13, 0x04, 0x64, 0x4a, 0x30, 0xff, 0xc0, 0x59, 0x5e,
	0x3b, 0x5f, 0xe9, 0x52, 0x31, 0x78, 0xc8, 0x15, 0xc1, 0xb2, 0x2d, 0xa2, 0xdc, 0x11, 0x02, 0xc2,
	0xa0, 0x17, 0x09, 0x47, 0x44, 0x98, 0x45, 0xc9, 0x10, 0xae, 0x01, 0x74, 0x84, 0x7f, 0xc1, 0x30,
	0x4a, 0x18, 0x7e, 0x24, 0x24, 0x7d, 0xbd, 0x36, 0x91, 0xa5, 0x85, 0xa0, 0x4a, 0x53, 0xf7, 0xc3,
	0xb1, 0xfc, 0x94, 0xc8, 0xab, 0xf8, 0x35, 0x39, 0x8d, 0x7b, 0x16, 0xc2, 0x1e, 0x61, 0xc9, 0x47,
	0x42, 0x5a, 0x50, 0x7d, 0xaf, 0x33, 0xd3, 0x0e, 0xe1, 0xe1, 0x00, 0xff, 0x8c, 0x1a, 0x75, 0xcd,
	0xc2, 0x73, 0x84, 0xe3, 0x08, 0x6e, 0x27, 0x39, 0x16, 0xb9, 0x86, 0xa0, 0x6a, 0x28, 0xb8, 0x7a,
	0x7f, 0x19, 0x8b, 0x5c, 0x43, 0xd8, 0x87, 0x82, 0x4a, 0xf7, 0xbe, 0x58, 0x1e, 0x5a, 0x3e, 0xaf,
	0x33, 0xe6, 0x7d, 0xce, 0x1f, 0xb9, 0x1f, 0x6d, 0x9e, 0xd7, 0x19, 0x71, 0x3f, 0x10, 0x49, 0xdb,
	0x0c, 0x54, 0x39, 0x85, 0xce, 0x0c, 0xc8, 0x5f, 0x71, 0x06, 0x23, 0xb2, 0x3b, 0x04, 0x92, 0xaf,
	0x89, 0x85, 0x96, 0xde, 0xe8, 0x70, 0x0c, 0xf2, 0xd7, 0xdc, 0x88, 0x51, 0xf8, 0x0a, 0x65, 0xc9,
	0x87, 0x62, 0xd5, 0x9b, 0xdc, 0x42, 0xf0, 0xb6, 0x37, 0x08, 0x58, 0x9b, 0xa5, 0xad, 0x6c, 0x90,
	0xbf, 0x21, 0xee, 0xca, 0x24, 0xb6, 0x87, 0x50, 0xf2, 0x58, 0xc8, 0x0b, 0x2a, 0xe1, 0xd8, 0x1b,
	0xc0, 0x5e, 0x96, 0xbf, 0x25, 0xb5, 0x5b, 0x93, 0xf8, 0x51, 0x0b, 0x63, 0x99, 0xe2, 0x59, 0x30,
	0x08, 0x4e, 0x65, 0x0e, 0x82, 0xfc, 0x1d, 0x7d, 0x3e, 0x61, 0x61, 0x6b, 0x10, 0xdc, 0x13, 0x07,
	0x78, 0x7a, 0xad, 0x78, 0x53, 0x18, 0x6f, 0xea, 0xcc, 0xa8, 0x9e, 0xae, 0xf3, 0x53, 0x9b, 0x87,
	0x63, 0xa9, 0xb8, 0x93, 0x87, 0xd0, 0x76, 0x8b, 0x24, 0x7f, 0xec, 0x88, 0xd9, 0xdc, 0x55, 0xda,
	0xd6, 0x78, 0x5c, 0x7f, 0xb1, 0xde, 0xd9, 0x98, 0x7b, 0x90, 0x6d, 0xfe, 0x6f, 0x57, 0x90, 0xf8,
	0x9f, 0x82, 0x63, 0x35, 0x74, 0x95, 0xce, 0xf0, 0xe3, 0x6e, 0x9e, 0xfc, 0xa9, 0x23, 0xe6, 0xa8,
	0x2e, 0xe3, 0xd1, 0xa6, 0xd7, 0xaf, 0x6e, 0xcc, 0x3d, 0x30, 0xef, 0x2e, 0x88, 0x31, 0x67, 0x29,
	0x75, 0x44, 0x3c, 0x3b, 0xff, 0xde, 0x11, 0x37, 0x6d, 0x53, 0x78, 0xaf, 0x82, 0x35, 0x3d, 0x6f,
	0xf4, 0x6b, 0xe3, 0x81, 0xea, 0x5c, 0xf6, 0x28, 0xa6, 0x2f, 0xde, 0x45, 0x4c, 0x18, 0x51, 0xf4,
	0xda, 0x4b, 0x57, 0xe9, 0xe9, 0x68, 0xe4, 0x1e, 0x1b, 0x09, 0x7b, 0x3b, 0x73, 0x75, 0x30, 0x67,
	0x81, 0x4f, 0xac, 0x8c, 0xf7, 0xb4, 0x28, 0xa3, 0xb3, 0xea, 0xbe, 0x58, 0x86, 0xba, 0x6a, 0x54,
	0xf0, 0xba, 0x19, 0xb6, 0x57, 0xce, 0xe7, 0x20, 0x02, 0x47, 0x5e, 0x37, 0x6d, 0x63, 0x3d, 0x12,
	0xb7, 0xa8, 0x37, 0x8a, 0x41, 0xa9, 0xe0, 0x78, 0x10, 0x72, 0x77, 0x5a, 0xe3, 0x89, 0x13, 0x8c,
	0x34, 0x64, 0x79, 0xad, 0x85, 0x0f, 0x23, 0x7a, 0x88, 0x60, 0x77, 0x57, 0x2c, 0x8d, 0xed, 0x7b,
	0xd8, 0x6a, 0xb8, 0x6e, 0x80, 0xc9, 0x5c, 0x9d, 0xd3, 0xee, 0xb8, 0x90, 0xc6, 0x5f, 0xc9, 0x57,
	0x84, 0xa8, 0x75, 0xed, 0x22, 0x76, 0x85, 0xc7, 0xe9, 0x48, 0xd2, 0xfd, 0xe7, 0x15, 0xb1, 0x3c,
	0x66, 0x8b, 0x0b, 0x1e, 0x5b, 0x8e, 0x76, 0xe0, 0xcc, 0x95, 0xe3, 0x0b, 0xe9, 0x7c, 0x2b, 0xa4,
	0x37, 0xbd, 0x23, 0x44, 0xbb, 0xb4, 0xda, 0x3c, 0xee, 0xa4, 0xb3, 0x51, 0xc2, 0x1b, 0xa6, 0x37,
	0x79, 0xbb, 0x5d, 0x14, 0xa5, 0xee, 0xcb, 0xab, 0xbc, 0x61, 0x7a, 0x93, 0xf3, 0x66, 0xf1, 0xac,
	0xd4, 0x7d, 0x34, 0x33, 0xe2, 0xc9, 0x6b, 0x3c, 0xed, 0x86, 0x14, 0x3c, 0x87, 0x09, 0xc6, 0xf5,
	0x84, 0xad, 0x5c, 0xe7, 0x65, 0x13, 0x29, 0x28, 0x24, 0x23, 0x93, 0xce, 0x68, 0x95, 0x99, 0xe2,
	0xb5, 0x67, 0x68, 0x89, 0xd6, 0x98, 0x5b, 0x62, 0x1a, 0x79, 0xb8, 0xc2, 0x4c, 0xf3, 0x77, 0xf2,
	0x26, 0xc7, 0xf5, 0xe5, 0xae, 0x98, 0x1b, 0x5f, 0x45, 0x66, 0xe8, 0x6d, 0x44, 0x33, 0xdc, 0x41,
	0xba, 0x56, 0xdc, 0x7e, 0x4b, 0xf7, 0x28, 0x53, 0x07, 0x7f, 0x8e, 0x41, 0x8e, 0x44, 0xe4, 0x9d,
	0xb3, 0x30, 0xdf, 0xf6, 0x16, 0x39, 0x7f, 0x4f, 0x2c, 0x8d, 0x58, 0x27, 0xba, 0x1c, 0xf0, 0x26,
	0x3f, 0x9f, 0x2e, 0xb4, 0xb4, 0x4f, 0x51, 0xd8, 0xfd, 0xd7, 0x15, 0xb1, 0xf2, 0x16, 0x5f, 0xc9,
	0xdf, 0x3a, 0x62, 0xb9, 0xf1, 0x96, 0xae, 0x0d, 0xa3, 0x51, 0xd1, 0xa1, 0x51, 0x61, 0x2f, 0x61,
	0x54, 0xf0, 0xcb, 0xa6, 0x4b, 0x31, 0x86, 0x9d, 0x76, 0x6e, 0xfc, 0xa3, 0x23, 0x24, 0x97, 0xd3,
	0x44, 0x64, 0xdc, 0xb0, 0x57, 0xa8, 0x61, 0x2f, 0x31, 0xbc, 0xb5, 0x61, 0x28, 0x6d, 0x80, 0xd8,
	0xba, 0xdd, 0xbf, 0x5e, 0x15, 0x77, 0xde, 0x3a, 0x79, 0x54, 0xf0, 0xb6, 0xdf, 0x37, 0x3e, 0x91,
	0x62, 0x3a, 0x3e, 0xc6, 0x72, 0x6f, 0x7f, 0xe2, 0xb8, 0x3f, 0xd5, 0x36, 0xa8, 0xc2, 0x79, 0xd5,
	0xeb, 0x37, 0x94, 0xb5, 0x99, 0x54, 0xa0, 0xec, 0x99, 0xf3, 0xdb, 0xfd, 0x06, 0x07, 0xc3, 0xa0,
	0x06, 0x13, 0x14, 0x9e, 0xd0, 0xae, 0xa6, 0x4a, 0x9f, 0x4d, 0xe7, 0x48, 0x96, 0x92, 0x08, 0x6f,
	0x52, 0x74, 0x28, 0x72, 0x85, 0xd3, 0x73, 0xf2, 0x07, 0x21, 0x58, 0x8d, 0x90, 0xeb, 0x94, 0x49,
	0xf5, 0x8e, 0x3e, 0x55, 0x3b, 0x2a, 0xd2, 0x59, 0x72, 0x79, 0x14, 0xfd, 0x8f, 0x2d, 0xb8, 0x53,
	0x97, 0xe4, 0x1f, 0xda, 0xf5, 0xb9, 0xfb, 0x9f, 0x29, 0xb1, 0xf6, 0xd6, 0xa4, 0xe0, 0xd7, 0xaa,
	0x5c, 0xde, 0x0e, 0x1e, 0x7a, 0xc6, 0x19, 0xa7, 0xb3, 0x60, 0x4f, 0x4c, 0x4c, 0x40, 0xfc, 0x85,
	0x57, 0x1e, 0x6f, 0x30, 0xd5, 0xb8, 0x8b, 0xd2, 0x9b, 0x5c, 0x6d, 0x7b, 0x3f, 0x4a, 0xe9, 0x65,
	0x71, 0xeb, 0x1a, 0x65, 0xe8, 0x1a, 0xcf, 0xab, 0x51, 0x7e, 0x2e, 0xa6, 0xf0, 0xfa, 0x9b, 0x29,
	0x9c, 0x4c, 0xd7, 0xd4, 0xff, 0x39, 0x5d, 0xd3, 0x97, 0x9d, 0x2e, 0xbc, 0x6d, 0xd8, 0x3a, 0x2b,
	0x07, 0xb9, 0xe1, 0x5c, 0x95, 0xb6, 0x7e, 0x0d, 0x34, 0x2b, 0xf1, 0x06, 0xcc, 0xc8, 0x61, 0x18,
	0xf4, 0xf6, 0x50, 0x8e, 0xec, 0xf6, 0x8f, 0x1c, 0x74, 0xff, 0xe1, 0x01, 0x3f, 0xcb, 0x77, 0x93,
	0x88, 0xec, 0x81, 0x1e, 0x5d, 0x48, 0xcd, 0x59, 0x30, 0xbe, 0xd6, 0xe5, 0x38, 0x5d, 0xf0, 0x56,
	0xd8, 0x42, 0x23, 0xfe, 0x5f, 0x3a, 0x62, 0x26, 0xf6, 0x27, 0xc8, 0x39, 0x1a, 0x32, 0xd5, 0xa5,
	0x6c, 0x2a, 0xed, 0xbc, 0x48, 0x87, 0xee, 0x93, 0x3f, 0x77, 0xc4, 0x92, 0xee, 0x79, 0xdc, 0x7d,
	0x07, 0x95, 0xe1, 0xec, 0xcc, 0x5f, 0x4e, 0x76, 0x16, 0x74, 0xcf, 0xa7, 0xe4, 0xb6, 0xbd, 0xb5,
	0x62, 0x20, 0xae, 0x28, 0xda, 0x32, 0x5e, 0xe0, 0x93, 0x5b, 0xf7, 0xfc, 0x41, 0x51, 0x70, 0x1d,
	0x77, 0x0b, 0x71, 0xe3, 0xe2, 0xc2, 0x93, 0x7c, 0x43, 0x2c, 0x8d, 0x96, 0xad, 0xd1, 0x19, 0x36,
	0x9b, 0x2e, 0x8e, 0xc4, 0x74, 0x8a, 0x7d, 0x53, 0xdc, 0x18, 0x23, 0xda, 0x3a, 0x37, 0x67, 0x71,
	0xaf, 0x18, 0x33, 0xb0, 0x8b, 0xe2, 0xde, 0x14, 0xed, 0x0b, 0x0f, 0xff, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x40, 0xd2, 0x7f, 0x20, 0x64, 0x13, 0x00, 0x00,
}
