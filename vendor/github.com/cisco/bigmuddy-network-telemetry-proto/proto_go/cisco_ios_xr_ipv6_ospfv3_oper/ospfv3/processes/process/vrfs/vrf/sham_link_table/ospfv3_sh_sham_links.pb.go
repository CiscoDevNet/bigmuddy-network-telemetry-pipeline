// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_sh_sham_links.proto

/*
Package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_sham_link_table is a generated protocol buffer package.

It is generated from these files:
	ospfv3_sh_sham_links.proto

It has these top-level messages:
	Ospfv3ShShamLinks_KEYS
	Ospfv3ShShamLinks
	Ospfv3EdmNeighborRetrans
	Ospfv3ShSlinkNeighbor
*/
package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_sham_link_table

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPFv3 Sham Link
type Ospfv3ShShamLinks_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *Ospfv3ShShamLinks_KEYS) Reset()                    { *m = Ospfv3ShShamLinks_KEYS{} }
func (m *Ospfv3ShShamLinks_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShShamLinks_KEYS) ProtoMessage()               {}
func (*Ospfv3ShShamLinks_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ospfv3ShShamLinks_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Ospfv3ShShamLinks_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type Ospfv3ShShamLinks struct {
	// Neighbor on other end of this sham link
	ShamLinkNeighborId string `protobuf:"bytes,50,opt,name=sham_link_neighbor_id,json=shamLinkNeighborId" json:"sham_link_neighbor_id,omitempty"`
	// Sham-link source
	ShamLinkSourceAddress string `protobuf:"bytes,51,opt,name=sham_link_source_address,json=shamLinkSourceAddress" json:"sham_link_source_address,omitempty"`
	// Sham-link dest
	ShamLinkDestAddress string `protobuf:"bytes,52,opt,name=sham_link_dest_address,json=shamLinkDestAddress" json:"sham_link_dest_address,omitempty"`
	// OSPF interface state for the sham link
	ShamLinkState string `protobuf:"bytes,53,opt,name=sham_link_state,json=shamLinkState" json:"sham_link_state,omitempty"`
	// If true, the link runs as demand circuit
	ShamLinkDemandCircuit bool `protobuf:"varint,54,opt,name=sham_link_demand_circuit,json=shamLinkDemandCircuit" json:"sham_link_demand_circuit,omitempty"`
	// Number of LSA's with demand circuit bit not set
	ShamLinkDcBitlessLsa uint32 `protobuf:"varint,55,opt,name=sham_link_dc_bitless_lsa,json=shamLinkDcBitlessLsa" json:"sham_link_dc_bitless_lsa,omitempty"`
	// Sham-link ifindex
	ShamLinkIfindex uint32 `protobuf:"varint,56,opt,name=sham_link_ifindex,json=shamLinkIfindex" json:"sham_link_ifindex,omitempty"`
	// Area id
	ShamLinkArea string `protobuf:"bytes,57,opt,name=sham_link_area,json=shamLinkArea" json:"sham_link_area,omitempty"`
	// Cost of the sham link
	ShamLinkCost uint32 `protobuf:"varint,58,opt,name=sham_link_cost,json=shamLinkCost" json:"sham_link_cost,omitempty"`
	// Transmission delay in seconds
	ShamLinkTransmissionDelay uint32 `protobuf:"varint,59,opt,name=sham_link_transmission_delay,json=shamLinkTransmissionDelay" json:"sham_link_transmission_delay,omitempty"`
	// Hello interval (s)
	ShamLinkHelloInterval uint32 `protobuf:"varint,60,opt,name=sham_link_hello_interval,json=shamLinkHelloInterval" json:"sham_link_hello_interval,omitempty"`
	// Dead interval (s)
	ShamLinkDeadInterval uint32 `protobuf:"varint,61,opt,name=sham_link_dead_interval,json=shamLinkDeadInterval" json:"sham_link_dead_interval,omitempty"`
	// Wait interval (s)
	ShamLinkWaitInterval uint32 `protobuf:"varint,62,opt,name=sham_link_wait_interval,json=shamLinkWaitInterval" json:"sham_link_wait_interval,omitempty"`
	// Retransmission interval (s)
	ShamLinkRetransmissionInterval uint32 `protobuf:"varint,63,opt,name=sham_link_retransmission_interval,json=shamLinkRetransmissionInterval" json:"sham_link_retransmission_interval,omitempty"`
	// Time until next hello (s)
	ShamLinkNextHello uint32 `protobuf:"varint,64,opt,name=sham_link_next_hello,json=shamLinkNextHello" json:"sham_link_next_hello,omitempty"`
	// If true, interface is passive
	ShamLinkPassive bool `protobuf:"varint,65,opt,name=sham_link_passive,json=shamLinkPassive" json:"sham_link_passive,omitempty"`
	// If true, sham link IP security is required
	IsShamLinkIpSecurityRequired bool `protobuf:"varint,66,opt,name=is_sham_link_ip_security_required,json=isShamLinkIpSecurityRequired" json:"is_sham_link_ip_security_required,omitempty"`
	// If true, Sham link IP security is active
	IsShamLinkIpSecurityActive bool `protobuf:"varint,67,opt,name=is_sham_link_ip_security_active,json=isShamLinkIpSecurityActive" json:"is_sham_link_ip_security_active,omitempty"`
	// If true, sham link authentication is enabled
	IsShamLinkAuthenticationEnabled bool `protobuf:"varint,68,opt,name=is_sham_link_authentication_enabled,json=isShamLinkAuthenticationEnabled" json:"is_sham_link_authentication_enabled,omitempty"`
	// Sham link authentication spi
	VirtualLinkAuthenticationSpi uint32 `protobuf:"varint,69,opt,name=virtual_link_authentication_spi,json=virtualLinkAuthenticationSpi" json:"virtual_link_authentication_spi,omitempty"`
	// Sham link authentication transmit
	ShamLinkAuthenticationTransmit uint32 `protobuf:"varint,70,opt,name=sham_link_authentication_transmit,json=shamLinkAuthenticationTransmit" json:"sham_link_authentication_transmit,omitempty"`
	// If true, sham link encryption is enabled
	IsShamLinkEncryptionEnabled bool `protobuf:"varint,71,opt,name=is_sham_link_encryption_enabled,json=isShamLinkEncryptionEnabled" json:"is_sham_link_encryption_enabled,omitempty"`
	// Sham link encryption spi
	ShamLinkEncryptionSpi uint32 `protobuf:"varint,72,opt,name=sham_link_encryption_spi,json=shamLinkEncryptionSpi" json:"sham_link_encryption_spi,omitempty"`
	// Sham link encryption transmitted
	ShamLinkEncryptionTransmitted uint32 `protobuf:"varint,73,opt,name=sham_link_encryption_transmitted,json=shamLinkEncryptionTransmitted" json:"sham_link_encryption_transmitted,omitempty"`
	// Sham link encrypted authentication transmitted
	ShamLinkEncryptedAuthenticationTransmitted uint32 `protobuf:"varint,74,opt,name=sham_link_encrypted_authentication_transmitted,json=shamLinkEncryptedAuthenticationTransmitted" json:"sham_link_encrypted_authentication_transmitted,omitempty"`
	// If true,  enabled
	ShamLinkGrEnabled bool `protobuf:"varint,75,opt,name=sham_link_gr_enabled,json=shamLinkGrEnabled" json:"sham_link_gr_enabled,omitempty"`
	// If true, Gracefule restart in progress
	ShamLinkGr bool `protobuf:"varint,76,opt,name=sham_link_gr,json=shamLinkGr" json:"sham_link_gr,omitempty"`
	// Time in seconds since last GR
	ShamLinkLastGr uint32 `protobuf:"varint,77,opt,name=sham_link_last_gr,json=shamLinkLastGr" json:"sham_link_last_gr,omitempty"`
	// Neighbor information
	ShamLinkNeighbor *Ospfv3ShSlinkNeighbor `protobuf:"bytes,78,opt,name=sham_link_neighbor,json=shamLinkNeighbor" json:"sham_link_neighbor,omitempty"`
}

func (m *Ospfv3ShShamLinks) Reset()                    { *m = Ospfv3ShShamLinks{} }
func (m *Ospfv3ShShamLinks) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShShamLinks) ProtoMessage()               {}
func (*Ospfv3ShShamLinks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ospfv3ShShamLinks) GetShamLinkNeighborId() string {
	if m != nil {
		return m.ShamLinkNeighborId
	}
	return ""
}

func (m *Ospfv3ShShamLinks) GetShamLinkSourceAddress() string {
	if m != nil {
		return m.ShamLinkSourceAddress
	}
	return ""
}

func (m *Ospfv3ShShamLinks) GetShamLinkDestAddress() string {
	if m != nil {
		return m.ShamLinkDestAddress
	}
	return ""
}

func (m *Ospfv3ShShamLinks) GetShamLinkState() string {
	if m != nil {
		return m.ShamLinkState
	}
	return ""
}

func (m *Ospfv3ShShamLinks) GetShamLinkDemandCircuit() bool {
	if m != nil {
		return m.ShamLinkDemandCircuit
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetShamLinkDcBitlessLsa() uint32 {
	if m != nil {
		return m.ShamLinkDcBitlessLsa
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkIfindex() uint32 {
	if m != nil {
		return m.ShamLinkIfindex
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkArea() string {
	if m != nil {
		return m.ShamLinkArea
	}
	return ""
}

func (m *Ospfv3ShShamLinks) GetShamLinkCost() uint32 {
	if m != nil {
		return m.ShamLinkCost
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkTransmissionDelay() uint32 {
	if m != nil {
		return m.ShamLinkTransmissionDelay
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkHelloInterval() uint32 {
	if m != nil {
		return m.ShamLinkHelloInterval
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkDeadInterval() uint32 {
	if m != nil {
		return m.ShamLinkDeadInterval
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkWaitInterval() uint32 {
	if m != nil {
		return m.ShamLinkWaitInterval
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkRetransmissionInterval() uint32 {
	if m != nil {
		return m.ShamLinkRetransmissionInterval
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkNextHello() uint32 {
	if m != nil {
		return m.ShamLinkNextHello
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkPassive() bool {
	if m != nil {
		return m.ShamLinkPassive
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetIsShamLinkIpSecurityRequired() bool {
	if m != nil {
		return m.IsShamLinkIpSecurityRequired
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetIsShamLinkIpSecurityActive() bool {
	if m != nil {
		return m.IsShamLinkIpSecurityActive
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetIsShamLinkAuthenticationEnabled() bool {
	if m != nil {
		return m.IsShamLinkAuthenticationEnabled
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetVirtualLinkAuthenticationSpi() uint32 {
	if m != nil {
		return m.VirtualLinkAuthenticationSpi
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkAuthenticationTransmit() uint32 {
	if m != nil {
		return m.ShamLinkAuthenticationTransmit
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetIsShamLinkEncryptionEnabled() bool {
	if m != nil {
		return m.IsShamLinkEncryptionEnabled
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetShamLinkEncryptionSpi() uint32 {
	if m != nil {
		return m.ShamLinkEncryptionSpi
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkEncryptionTransmitted() uint32 {
	if m != nil {
		return m.ShamLinkEncryptionTransmitted
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkEncryptedAuthenticationTransmitted() uint32 {
	if m != nil {
		return m.ShamLinkEncryptedAuthenticationTransmitted
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkGrEnabled() bool {
	if m != nil {
		return m.ShamLinkGrEnabled
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetShamLinkGr() bool {
	if m != nil {
		return m.ShamLinkGr
	}
	return false
}

func (m *Ospfv3ShShamLinks) GetShamLinkLastGr() uint32 {
	if m != nil {
		return m.ShamLinkLastGr
	}
	return 0
}

func (m *Ospfv3ShShamLinks) GetShamLinkNeighbor() *Ospfv3ShSlinkNeighbor {
	if m != nil {
		return m.ShamLinkNeighbor
	}
	return nil
}

// OSPFv3 neighbor retransmission information
type Ospfv3EdmNeighborRetrans struct {
	// Number of database descriptor retransmissions during last exchange
	DatabaseDescriptorRetransmissions uint32 `protobuf:"varint,1,opt,name=database_descriptor_retransmissions,json=databaseDescriptorRetransmissions" json:"database_descriptor_retransmissions,omitempty"`
	// Area scope LSA's flood index
	AreaFloodIndex uint32 `protobuf:"varint,2,opt,name=area_flood_index,json=areaFloodIndex" json:"area_flood_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,3,opt,name=as_flood_index,json=asFloodIndex" json:"as_flood_index,omitempty"`
	// Link flood index
	LinkFloodIndex uint32 `protobuf:"varint,4,opt,name=link_flood_index,json=linkFloodIndex" json:"link_flood_index,omitempty"`
	// Number of neighbor retransmissions
	NeighborRetransmissions uint32 `protobuf:"varint,5,opt,name=neighbor_retransmissions,json=neighborRetransmissions" json:"neighbor_retransmissions,omitempty"`
	// Number of retransmissions for this neighbor
	Retransmissions uint32 `protobuf:"varint,6,opt,name=retransmissions" json:"retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFlood uint32 `protobuf:"varint,7,opt,name=area_first_flood,json=areaFirstFlood" json:"area_first_flood,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_index,json=areaFirstFloodIndex" json:"area_first_flood_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFlood uint32 `protobuf:"varint,9,opt,name=as_first_flood,json=asFirstFlood" json:"as_first_flood,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_index,json=asFirstFloodIndex" json:"as_first_flood_index,omitempty"`
	// Link first flood information
	LinkFirstFlood uint32 `protobuf:"varint,11,opt,name=link_first_flood,json=linkFirstFlood" json:"link_first_flood,omitempty"`
	// Link first flood information index
	LinkFirstFloodIndex uint32 `protobuf:"varint,12,opt,name=link_first_flood_index,json=linkFirstFloodIndex" json:"link_first_flood_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFlood uint32 `protobuf:"varint,13,opt,name=area_next_flood,json=areaNextFlood" json:"area_next_flood,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodIndex uint32 `protobuf:"varint,14,opt,name=area_next_flood_index,json=areaNextFloodIndex" json:"area_next_flood_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFlood uint32 `protobuf:"varint,15,opt,name=as_next_flood,json=asNextFlood" json:"as_next_flood,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodIndex uint32 `protobuf:"varint,16,opt,name=as_next_flood_index,json=asNextFloodIndex" json:"as_next_flood_index,omitempty"`
	// Link next flood information
	LinkNextFlood uint32 `protobuf:"varint,17,opt,name=link_next_flood,json=linkNextFlood" json:"link_next_flood,omitempty"`
	// Link next flood information index
	LinkNextFloodIndex uint32 `protobuf:"varint,18,opt,name=link_next_flood_index,json=linkNextFloodIndex" json:"link_next_flood_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,19,opt,name=last_retransmission_length,json=lastRetransmissionLength" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,20,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,21,opt,name=last_retransmission_time,json=lastRetransmissionTime" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,22,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,23,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer" json:"lsa_retransmission_timer,omitempty"`
}

func (m *Ospfv3EdmNeighborRetrans) Reset()                    { *m = Ospfv3EdmNeighborRetrans{} }
func (m *Ospfv3EdmNeighborRetrans) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighborRetrans) ProtoMessage()               {}
func (*Ospfv3EdmNeighborRetrans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ospfv3EdmNeighborRetrans) GetDatabaseDescriptorRetransmissions() uint32 {
	if m != nil {
		return m.DatabaseDescriptorRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFloodIndex() uint32 {
	if m != nil {
		return m.AreaFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFloodIndex() uint32 {
	if m != nil {
		return m.AsFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFloodIndex() uint32 {
	if m != nil {
		return m.LinkFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetNeighborRetransmissions() uint32 {
	if m != nil {
		return m.NeighborRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetRetransmissions() uint32 {
	if m != nil {
		return m.Retransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFlood() uint32 {
	if m != nil {
		return m.AreaFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFloodIndex() uint32 {
	if m != nil {
		return m.AreaFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFlood() uint32 {
	if m != nil {
		return m.AsFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFloodIndex() uint32 {
	if m != nil {
		return m.AsFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFlood() uint32 {
	if m != nil {
		return m.LinkFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFloodIndex() uint32 {
	if m != nil {
		return m.LinkFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFlood() uint32 {
	if m != nil {
		return m.AreaNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFloodIndex() uint32 {
	if m != nil {
		return m.AreaNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFlood() uint32 {
	if m != nil {
		return m.AsNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFloodIndex() uint32 {
	if m != nil {
		return m.AsNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFlood() uint32 {
	if m != nil {
		return m.LinkNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFloodIndex() uint32 {
	if m != nil {
		return m.LinkNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if m != nil {
		return m.LastRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if m != nil {
		return m.MaximumRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if m != nil {
		return m.LastRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if m != nil {
		return m.LsaRetransmissionTimer
	}
	return 0
}

// Sham Link Neighbor Information
type Ospfv3ShSlinkNeighbor struct {
	// If true Hellos suppressed
	ShamLinkSuppressHello bool `protobuf:"varint,1,opt,name=sham_link_suppress_hello,json=shamLinkSuppressHello" json:"sham_link_suppress_hello,omitempty"`
	// Adjacency state
	ShamLinkState string `protobuf:"bytes,2,opt,name=sham_link_state,json=shamLinkState" json:"sham_link_state,omitempty"`
	// Neighbor retransmission info
	ShamLinkRetransmission *Ospfv3EdmNeighborRetrans `protobuf:"bytes,3,opt,name=sham_link_retransmission,json=shamLinkRetransmission" json:"sham_link_retransmission,omitempty"`
}

func (m *Ospfv3ShSlinkNeighbor) Reset()                    { *m = Ospfv3ShSlinkNeighbor{} }
func (m *Ospfv3ShSlinkNeighbor) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3ShSlinkNeighbor) ProtoMessage()               {}
func (*Ospfv3ShSlinkNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ospfv3ShSlinkNeighbor) GetShamLinkSuppressHello() bool {
	if m != nil {
		return m.ShamLinkSuppressHello
	}
	return false
}

func (m *Ospfv3ShSlinkNeighbor) GetShamLinkState() string {
	if m != nil {
		return m.ShamLinkState
	}
	return ""
}

func (m *Ospfv3ShSlinkNeighbor) GetShamLinkRetransmission() *Ospfv3EdmNeighborRetrans {
	if m != nil {
		return m.ShamLinkRetransmission
	}
	return nil
}

func init() {
	proto.RegisterType((*Ospfv3ShShamLinks_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.sham_link_table.ospfv3_sh_sham_links_KEYS")
	proto.RegisterType((*Ospfv3ShShamLinks)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.sham_link_table.ospfv3_sh_sham_links")
	proto.RegisterType((*Ospfv3EdmNeighborRetrans)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.sham_link_table.ospfv3_edm_neighbor_retrans")
	proto.RegisterType((*Ospfv3ShSlinkNeighbor)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.sham_link_table.ospfv3_sh_slink_neighbor")
}

func init() { proto.RegisterFile("ospfv3_sh_sham_links.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xdb, 0x6e, 0x1b, 0x37,
	0x13, 0xc7, 0x21, 0x7f, 0x5f, 0x73, 0xa0, 0x2d, 0xdb, 0xa1, 0x0f, 0x61, 0x6c, 0xa7, 0x96, 0x9d,
	0x22, 0x50, 0x03, 0x54, 0x41, 0xec, 0xc6, 0x49, 0xda, 0x34, 0xa9, 0x6d, 0x39, 0x8e, 0x1a, 0xd5,
	0x2d, 0x24, 0x03, 0x45, 0xae, 0x16, 0xd4, 0x2e, 0x65, 0x11, 0x59, 0xed, 0x6e, 0x49, 0x4a, 0xb5,
	0x5f, 0xa1, 0x2f, 0xd0, 0xdb, 0x5e, 0x14, 0x7d, 0xce, 0x82, 0x43, 0xee, 0x81, 0xab, 0xd5, 0x5d,
	0x7b, 0x13, 0x18, 0x9c, 0xdf, 0xff, 0xcf, 0x99, 0x59, 0x8a, 0xc3, 0xa0, 0xad, 0x58, 0x26, 0xc3,
	0xe9, 0xa1, 0x27, 0x47, 0x9e, 0x1c, 0xd1, 0xb1, 0x17, 0xf2, 0xe8, 0x93, 0x6c, 0x25, 0x22, 0x56,
	0x31, 0xfe, 0xc9, 0xe7, 0xd2, 0x8f, 0x3d, 0x1e, 0x4b, 0xef, 0x5a, 0x78, 0x3c, 0x99, 0x1e, 0x79,
	0x96, 0x8e, 0x13, 0x26, 0x5a, 0xe6, 0x6f, 0xcd, 0xfa, 0x4c, 0x4a, 0x26, 0xd3, 0xbf, 0x5a, 0x53,
	0x31, 0x84, 0x7f, 0x5a, 0x99, 0xa3, 0xa7, 0xe8, 0x20, 0x64, 0xfb, 0x1f, 0xd1, 0x83, 0xaa, 0xed,
	0xbc, 0x0f, 0x67, 0x1f, 0xfb, 0x78, 0x0f, 0x2d, 0x59, 0x03, 0x2f, 0xa2, 0x63, 0x46, 0x6a, 0x8d,
	0x5a, 0xf3, 0x6e, 0x6f, 0xd1, 0xae, 0x5d, 0xd0, 0x31, 0xc3, 0x0f, 0xd0, 0x9d, 0xa9, 0x18, 0x9a,
	0xf0, 0x02, 0x84, 0x6f, 0x4f, 0xc5, 0x50, 0x87, 0xf6, 0x7f, 0x5f, 0x46, 0xeb, 0x55, 0xde, 0xf8,
	0x19, 0xda, 0xc8, 0xd3, 0x88, 0x18, 0xbf, 0x1a, 0x0d, 0x62, 0xe1, 0xf1, 0x80, 0x1c, 0x80, 0x01,
	0xd6, 0xc1, 0x2e, 0x8f, 0x3e, 0x5d, 0xd8, 0x50, 0x27, 0xc0, 0x2f, 0x10, 0xc9, 0x25, 0x32, 0x9e,
	0x08, 0x9f, 0x79, 0x34, 0x08, 0x04, 0x93, 0x92, 0x1c, 0x82, 0x6a, 0x23, 0x55, 0xf5, 0x21, 0x7a,
	0x6c, 0x82, 0xf8, 0x10, 0x6d, 0xe6, 0xc2, 0x80, 0x49, 0x95, 0xc9, 0xbe, 0x06, 0xd9, 0x5a, 0x2a,
	0x6b, 0x33, 0xa9, 0x52, 0xd1, 0x63, 0xb4, 0x52, 0xd8, 0x4d, 0x51, 0xc5, 0xc8, 0x73, 0xa0, 0xeb,
	0xd9, 0x26, 0x7a, 0xd1, 0xcd, 0x2a, 0x60, 0x63, 0x1a, 0x05, 0x9e, 0xcf, 0x85, 0x3f, 0xe1, 0x8a,
	0x1c, 0x35, 0x6a, 0xcd, 0x3b, 0x79, 0x56, 0x6d, 0x88, 0x9e, 0x9a, 0x20, 0x3e, 0x72, 0x84, 0xbe,
	0x37, 0xe0, 0x2a, 0xd4, 0x5d, 0x0e, 0x25, 0x25, 0x2f, 0x1a, 0xb5, 0x66, 0xbd, 0xb7, 0x9e, 0x09,
	0xfd, 0x13, 0x13, 0xec, 0x4a, 0x8a, 0x9f, 0xa0, 0x7b, 0xb9, 0x8e, 0x0f, 0x79, 0x14, 0xb0, 0x6b,
	0xf2, 0x12, 0x04, 0x2b, 0xa9, 0xa0, 0x63, 0x96, 0xf1, 0x17, 0x68, 0x39, 0x67, 0xa9, 0x60, 0x94,
	0xbc, 0x82, 0x1a, 0x96, 0x52, 0xf0, 0x58, 0x30, 0xea, 0x52, 0x7e, 0x2c, 0x15, 0xf9, 0x06, 0xec,
	0x32, 0xea, 0x34, 0x96, 0x0a, 0xbf, 0x45, 0x3b, 0x85, 0x83, 0x23, 0x68, 0x24, 0xc7, 0x5c, 0x4a,
	0x1e, 0x47, 0x5e, 0xc0, 0x42, 0x7a, 0x43, 0xbe, 0x05, 0xcd, 0x83, 0x54, 0x73, 0x59, 0x20, 0xda,
	0x1a, 0x70, 0x3b, 0x35, 0x62, 0x61, 0x18, 0x7b, 0x3c, 0x52, 0x4c, 0x4c, 0x69, 0x48, 0x5e, 0x83,
	0x38, 0xeb, 0xd4, 0x7b, 0x1d, 0xed, 0xd8, 0x20, 0x7e, 0x8e, 0xee, 0x17, 0x5b, 0x4c, 0x83, 0x5c,
	0xf7, 0x5d, 0xa9, 0x51, 0x8c, 0x06, 0xd5, 0xb2, 0xdf, 0x28, 0x57, 0xb9, 0xec, 0x8d, 0x2b, 0xfb,
	0x85, 0x72, 0x95, 0xc9, 0x3a, 0x68, 0x2f, 0x97, 0x09, 0xe6, 0x54, 0x9a, 0x19, 0xbc, 0x05, 0x83,
	0xcf, 0x53, 0x83, 0x9e, 0x83, 0x65, 0x56, 0x4f, 0xd1, 0x7a, 0xf1, 0x90, 0x5f, 0x2b, 0x53, 0x36,
	0xf9, 0x1e, 0xd4, 0xf7, 0xf2, 0x33, 0x7e, 0xad, 0xa0, 0x62, 0xf7, 0xdb, 0x26, 0x54, 0x4a, 0x3e,
	0x65, 0xe4, 0x18, 0x4e, 0x51, 0xf6, 0x6d, 0x7f, 0x36, 0xcb, 0xf8, 0x1c, 0xed, 0x71, 0xe9, 0x15,
	0x8e, 0x42, 0xe2, 0x49, 0xe6, 0x4f, 0x04, 0x57, 0x37, 0x9e, 0x60, 0xbf, 0x4e, 0xb8, 0x60, 0x01,
	0x39, 0x01, 0xed, 0x0e, 0x97, 0xfd, 0xf4, 0x64, 0x24, 0x7d, 0x0b, 0xf5, 0x2c, 0x83, 0x4f, 0xd1,
	0xee, 0x5c, 0x23, 0xea, 0x2b, 0x9d, 0xc2, 0x29, 0xd8, 0x6c, 0x55, 0xd9, 0x1c, 0x03, 0x81, 0xbb,
	0xe8, 0x91, 0x63, 0x42, 0x27, 0x6a, 0xc4, 0x22, 0xc5, 0x7d, 0xaa, 0x74, 0xe3, 0x58, 0xa4, 0x6f,
	0x9a, 0x80, 0xb4, 0xc1, 0x68, 0x37, 0x37, 0x3a, 0x76, 0xb8, 0x33, 0x83, 0xe1, 0x33, 0xb4, 0x3b,
	0xe5, 0x42, 0x4d, 0x68, 0x58, 0xe9, 0x26, 0x13, 0x4e, 0xce, 0xa0, 0x87, 0x3b, 0x16, 0x9b, 0xb5,
	0xea, 0x27, 0xdc, 0xfd, 0x94, 0x25, 0x0f, 0xfb, 0xc1, 0x14, 0x79, 0xe7, 0x7e, 0x4a, 0xd7, 0xc5,
	0x9e, 0x62, 0x85, 0xdb, 0xa5, 0x26, 0xb1, 0xc8, 0x17, 0x37, 0x89, 0x53, 0xdb, 0x39, 0xd4, 0xb6,
	0x9d, 0xd7, 0x76, 0x96, 0x31, 0x69, 0x5d, 0xce, 0x4f, 0xa0, 0x60, 0xa1, 0x0b, 0x7a, 0xef, 0xfe,
	0x04, 0x72, 0xb1, 0xae, 0xe4, 0x1c, 0x35, 0x2a, 0x85, 0x69, 0x15, 0x8a, 0x05, 0xa4, 0x03, 0x06,
	0x0f, 0x67, 0x0d, 0x2e, 0x73, 0x08, 0x0f, 0x50, 0x6b, 0xc6, 0x88, 0x05, 0xf3, 0x9a, 0xa3, 0x6d,
	0x7f, 0x00, 0xdb, 0x27, 0x25, 0x5b, 0x16, 0x54, 0x37, 0x4a, 0xef, 0xe1, 0x1c, 0xfb, 0x2b, 0x91,
	0x35, 0xe8, 0x03, 0x34, 0x28, 0x3b, 0xf6, 0xe7, 0x22, 0x6d, 0x4b, 0x03, 0x2d, 0x15, 0x05, 0xa4,
	0x0b, 0x20, 0xca, 0x41, 0xfc, 0x65, 0xf1, 0x87, 0x11, 0x52, 0xa9, 0x34, 0xf6, 0x23, 0x64, 0xb6,
	0x9c, 0x62, 0x5d, 0x2a, 0xd5, 0xb9, 0xc0, 0x7f, 0xd4, 0x10, 0x9e, 0x1d, 0x2d, 0xe4, 0xa2, 0x51,
	0x6b, 0x2e, 0x1e, 0xf0, 0xd6, 0xbf, 0x3c, 0x3c, 0x5b, 0x85, 0xe9, 0xe6, 0x6c, 0xd8, 0x5b, 0x2d,
	0x8f, 0xb0, 0xfd, 0x3f, 0xef, 0xa2, 0x6d, 0x8b, 0xb3, 0x60, 0x9c, 0x4f, 0x3d, 0x7b, 0xc9, 0xe0,
	0x0b, 0xf4, 0x28, 0xa0, 0x8a, 0x0e, 0xa8, 0x64, 0x7a, 0x4c, 0xf9, 0x82, 0x27, 0x2a, 0x0f, 0xdb,
	0xcb, 0x45, 0xc2, 0x04, 0xae, 0xf7, 0xf6, 0x52, 0xb4, 0x9d, 0x91, 0xee, 0x2d, 0x24, 0x71, 0x13,
	0xad, 0xea, 0x3b, 0xdf, 0x1b, 0x86, 0x71, 0xac, 0xef, 0x4c, 0x3d, 0x28, 0x16, 0x4c, 0xcf, 0xf4,
	0xfa, 0x3b, 0xbd, 0xdc, 0x49, 0xe7, 0x04, 0x95, 0x0e, 0xf7, 0x3f, 0x33, 0x01, 0xa8, 0x2c, 0x50,
	0x4d, 0xb4, 0x0a, 0x25, 0x16, 0xb9, 0xff, 0x1b, 0x3f, 0xbd, 0x5e, 0x20, 0x5f, 0x21, 0x52, 0xae,
	0x2e, 0x4b, 0xff, 0x33, 0x50, 0xdc, 0xcf, 0xfa, 0x34, 0x93, 0xf4, 0x4a, 0x59, 0x71, 0xcb, 0x0c,
	0x37, 0x31, 0xaf, 0x3c, 0x2e, 0xa4, 0x32, 0x49, 0x91, 0xdb, 0x85, 0xf2, 0xf4, 0x32, 0xe4, 0xa4,
	0x1f, 0x00, 0x65, 0xd2, 0xa6, 0x7f, 0x07, 0xf8, 0x35, 0x97, 0x77, 0x7a, 0x52, 0x30, 0xbf, 0x9b,
	0xf5, 0x24, 0xb7, 0x7e, 0x8a, 0xd6, 0x5d, 0xca, 0x1a, 0x23, 0x73, 0xc5, 0x17, 0xd9, 0x52, 0x13,
	0x0b, 0xc6, 0x8b, 0x85, 0x26, 0x3a, 0x59, 0x97, 0x49, 0x6b, 0xbe, 0x64, 0xb2, 0x76, 0x79, 0x63,
	0xff, 0x18, 0xad, 0x40, 0xa9, 0x30, 0x6d, 0x8c, 0x7b, 0x1d, 0xe8, 0xba, 0x5e, 0xd6, 0x93, 0xc6,
	0x98, 0x3f, 0x43, 0x1b, 0x25, 0xce, 0x7a, 0x2f, 0x03, 0x8d, 0x1d, 0xda, 0x58, 0xef, 0xa3, 0x3a,
	0x95, 0x45, 0xe3, 0x15, 0x40, 0x17, 0xa9, 0xcc, 0x6d, 0xbf, 0x42, 0x6b, 0x0e, 0x63, 0x4d, 0x57,
	0x81, 0x5c, 0x2d, 0x90, 0x59, 0xb6, 0xf9, 0x6c, 0x34, 0xa6, 0xf7, 0x4c, 0xb6, 0xa1, 0x9d, 0x8b,
	0x59, 0xb6, 0x25, 0xce, 0x1a, 0x63, 0x93, 0xad, 0x43, 0x1b, 0xeb, 0xd7, 0x68, 0x0b, 0xee, 0x89,
	0xd2, 0x04, 0x0f, 0x59, 0x74, 0xa5, 0x46, 0x64, 0x0d, 0x74, 0x44, 0x13, 0xee, 0x01, 0xec, 0x42,
	0x1c, 0x9f, 0xa0, 0x87, 0x63, 0x7a, 0xcd, 0xc7, 0x93, 0xf1, 0x1c, 0x83, 0x75, 0x30, 0xd8, 0xb6,
	0x50, 0xa5, 0xc7, 0x4b, 0x44, 0xaa, 0x32, 0x50, 0x7c, 0xcc, 0xc8, 0x06, 0xc8, 0x37, 0x67, 0xf7,
	0xbf, 0xe4, 0x63, 0x86, 0xdf, 0xa0, 0xed, 0x39, 0xbb, 0x83, 0x78, 0xd3, 0xbc, 0xb4, 0x2a, 0xf7,
	0x06, 0xbd, 0xde, 0x59, 0xd2, 0x2a, 0xad, 0x20, 0xf7, 0xed, 0xce, 0x92, 0xce, 0x0a, 0xc5, 0xfe,
	0x5f, 0x0b, 0x88, 0xcc, 0xbb, 0xd1, 0x4a, 0x0f, 0xf0, 0x49, 0x92, 0xe8, 0x87, 0xb2, 0x7d, 0xd2,
	0xd4, 0xdc, 0xa7, 0x6e, 0xdf, 0x46, 0xcd, 0xb3, 0xa6, 0xe2, 0x2d, 0xbd, 0x50, 0xf5, 0x96, 0xfe,
	0xbb, 0x56, 0xdc, 0xc1, 0x4d, 0x1f, 0x6e, 0xa4, 0xc5, 0x83, 0xf0, 0xbf, 0xba, 0xc0, 0xab, 0x6e,
	0xe4, 0xde, 0x66, 0xf5, 0x03, 0x6f, 0x70, 0x0b, 0xfe, 0x27, 0x76, 0xf8, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0xb6, 0xcd, 0x26, 0xa7, 0x0d, 0x00, 0x00,
}
