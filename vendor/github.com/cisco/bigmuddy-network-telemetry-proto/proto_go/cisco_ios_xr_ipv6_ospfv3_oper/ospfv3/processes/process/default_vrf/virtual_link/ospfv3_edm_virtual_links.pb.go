// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_virtual_links.proto

/*
Package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_virtual_link is a generated protocol buffer package.

It is generated from these files:
	ospfv3_edm_virtual_links.proto

It has these top-level messages:
	Ospfv3EdmVirtualLinks_KEYS
	Ospfv3EdmVirtualLinks
	Ospfv3EdmNeighborRetrans
	Ospfv3EdmVlinkNeighbor
*/
package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_virtual_link

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPFv3 virtual link information
type Ospfv3EdmVirtualLinks_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
}

func (m *Ospfv3EdmVirtualLinks_KEYS) Reset()                    { *m = Ospfv3EdmVirtualLinks_KEYS{} }
func (m *Ospfv3EdmVirtualLinks_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmVirtualLinks_KEYS) ProtoMessage()               {}
func (*Ospfv3EdmVirtualLinks_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ospfv3EdmVirtualLinks_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type Ospfv3EdmVirtualLinks struct {
	// Neighbor on other end of this virtual link
	VirtualLinkNeighborId string `protobuf:"bytes,50,opt,name=virtual_link_neighbor_id,json=virtualLinkNeighborId" json:"virtual_link_neighbor_id,omitempty"`
	// Virtual link interface number
	VirtualLinkInterfaceNumber uint32 `protobuf:"varint,51,opt,name=virtual_link_interface_number,json=virtualLinkInterfaceNumber" json:"virtual_link_interface_number,omitempty"`
	// OSPF interface state for the virtual link
	VirtualLinkState string `protobuf:"bytes,52,opt,name=virtual_link_state,json=virtualLinkState" json:"virtual_link_state,omitempty"`
	// If true, virtual link IP security is required
	IsVirtualLinkIpSecurityRequired bool `protobuf:"varint,53,opt,name=is_virtual_link_ip_security_required,json=isVirtualLinkIpSecurityRequired" json:"is_virtual_link_ip_security_required,omitempty"`
	// If true, Virtual link IP security is active
	IsVirtualLinkIpSecurityActive bool `protobuf:"varint,54,opt,name=is_virtual_link_ip_security_active,json=isVirtualLinkIpSecurityActive" json:"is_virtual_link_ip_security_active,omitempty"`
	// Virtual link neighbor addresss
	VirtualLinkNeighborAddress string `protobuf:"bytes,55,opt,name=virtual_link_neighbor_address,json=virtualLinkNeighborAddress" json:"virtual_link_neighbor_address,omitempty"`
	// If true, the link runs as demand circuit
	IsVirtualLinkDemandCircuit bool `protobuf:"varint,56,opt,name=is_virtual_link_demand_circuit,json=isVirtualLinkDemandCircuit" json:"is_virtual_link_demand_circuit,omitempty"`
	// Number of LSA's with demand circuit bit not set
	VirtualLinkDcBitlessLsa uint32 `protobuf:"varint,57,opt,name=virtual_link_dc_bitless_lsa,json=virtualLinkDcBitlessLsa" json:"virtual_link_dc_bitless_lsa,omitempty"`
	// Transit area id
	TransitAreaId string `protobuf:"bytes,58,opt,name=transit_area_id,json=transitAreaId" json:"transit_area_id,omitempty"`
	// Interface on which this virtual link is formed
	InterfaceName string `protobuf:"bytes,59,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Cost of the virtual link
	VirtualLinkCost uint32 `protobuf:"varint,60,opt,name=virtual_link_cost,json=virtualLinkCost" json:"virtual_link_cost,omitempty"`
	// Transmission delay in seconds
	VirualLinkTransmissionDelay uint32 `protobuf:"varint,61,opt,name=virual_link_transmission_delay,json=virualLinkTransmissionDelay" json:"virual_link_transmission_delay,omitempty"`
	// Hello interval (s)
	VirtualLinkHelloInterval uint32 `protobuf:"varint,62,opt,name=virtual_link_hello_interval,json=virtualLinkHelloInterval" json:"virtual_link_hello_interval,omitempty"`
	// Dead interval (s)
	VirtualLinkDeadInterval uint32 `protobuf:"varint,63,opt,name=virtual_link_dead_interval,json=virtualLinkDeadInterval" json:"virtual_link_dead_interval,omitempty"`
	// Wait interval (s)
	VirtualLinkWaitInterval uint32 `protobuf:"varint,64,opt,name=virtual_link_wait_interval,json=virtualLinkWaitInterval" json:"virtual_link_wait_interval,omitempty"`
	// Retransmission interval (s)
	VirtualLinkRetransmissionInterval uint32 `protobuf:"varint,65,opt,name=virtual_link_retransmission_interval,json=virtualLinkRetransmissionInterval" json:"virtual_link_retransmission_interval,omitempty"`
	// Time until next hello (s)
	VirtualLinkNextHello uint32 `protobuf:"varint,66,opt,name=virtual_link_next_hello,json=virtualLinkNextHello" json:"virtual_link_next_hello,omitempty"`
	// If true, interface is passive
	IsVirtualLinkPassive bool `protobuf:"varint,67,opt,name=is_virtual_link_passive,json=isVirtualLinkPassive" json:"is_virtual_link_passive,omitempty"`
	// If true, virtual link authentication is enabled
	IsVirtualLinkAuthenticationEnabled bool `protobuf:"varint,68,opt,name=is_virtual_link_authentication_enabled,json=isVirtualLinkAuthenticationEnabled" json:"is_virtual_link_authentication_enabled,omitempty"`
	// Virtual link authentication spi
	VirtualLinkAuthenticationSpi uint32 `protobuf:"varint,69,opt,name=virtual_link_authentication_spi,json=virtualLinkAuthenticationSpi" json:"virtual_link_authentication_spi,omitempty"`
	// Virtual link authentication transmit
	VirtualLinkAuthenticationTransmit uint32 `protobuf:"varint,70,opt,name=virtual_link_authentication_transmit,json=virtualLinkAuthenticationTransmit" json:"virtual_link_authentication_transmit,omitempty"`
	// If true, virtual link encryption is enabled
	IsVirtualLinkEncryptionEnabled bool `protobuf:"varint,71,opt,name=is_virtual_link_encryption_enabled,json=isVirtualLinkEncryptionEnabled" json:"is_virtual_link_encryption_enabled,omitempty"`
	// Virtual link encryption spi
	VirtualLinkEncryptionSpi uint32 `protobuf:"varint,72,opt,name=virtual_link_encryption_spi,json=virtualLinkEncryptionSpi" json:"virtual_link_encryption_spi,omitempty"`
	// Virtual link encryption transmitted
	VirtualLinkEncryptionTransmitted uint32 `protobuf:"varint,73,opt,name=virtual_link_encryption_transmitted,json=virtualLinkEncryptionTransmitted" json:"virtual_link_encryption_transmitted,omitempty"`
	// Virtual link encrypted authentication transmitted
	VirtualLinkEncryptedAuthenticationTransmitted uint32 `protobuf:"varint,74,opt,name=virtual_link_encrypted_authentication_transmitted,json=virtualLinkEncryptedAuthenticationTransmitted" json:"virtual_link_encrypted_authentication_transmitted,omitempty"`
	// Neighbor information
	VirtualLinkNeighbor *Ospfv3EdmVlinkNeighbor `protobuf:"bytes,75,opt,name=virtual_link_neighbor,json=virtualLinkNeighbor" json:"virtual_link_neighbor,omitempty"`
}

func (m *Ospfv3EdmVirtualLinks) Reset()                    { *m = Ospfv3EdmVirtualLinks{} }
func (m *Ospfv3EdmVirtualLinks) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmVirtualLinks) ProtoMessage()               {}
func (*Ospfv3EdmVirtualLinks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkNeighborId() string {
	if m != nil {
		return m.VirtualLinkNeighborId
	}
	return ""
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkInterfaceNumber() uint32 {
	if m != nil {
		return m.VirtualLinkInterfaceNumber
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkState() string {
	if m != nil {
		return m.VirtualLinkState
	}
	return ""
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkIpSecurityRequired() bool {
	if m != nil {
		return m.IsVirtualLinkIpSecurityRequired
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkIpSecurityActive() bool {
	if m != nil {
		return m.IsVirtualLinkIpSecurityActive
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkNeighborAddress() string {
	if m != nil {
		return m.VirtualLinkNeighborAddress
	}
	return ""
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkDemandCircuit() bool {
	if m != nil {
		return m.IsVirtualLinkDemandCircuit
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkDcBitlessLsa() uint32 {
	if m != nil {
		return m.VirtualLinkDcBitlessLsa
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetTransitAreaId() string {
	if m != nil {
		return m.TransitAreaId
	}
	return ""
}

func (m *Ospfv3EdmVirtualLinks) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkCost() uint32 {
	if m != nil {
		return m.VirtualLinkCost
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirualLinkTransmissionDelay() uint32 {
	if m != nil {
		return m.VirualLinkTransmissionDelay
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkHelloInterval() uint32 {
	if m != nil {
		return m.VirtualLinkHelloInterval
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkDeadInterval() uint32 {
	if m != nil {
		return m.VirtualLinkDeadInterval
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkWaitInterval() uint32 {
	if m != nil {
		return m.VirtualLinkWaitInterval
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkRetransmissionInterval() uint32 {
	if m != nil {
		return m.VirtualLinkRetransmissionInterval
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkNextHello() uint32 {
	if m != nil {
		return m.VirtualLinkNextHello
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkPassive() bool {
	if m != nil {
		return m.IsVirtualLinkPassive
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkAuthenticationEnabled() bool {
	if m != nil {
		return m.IsVirtualLinkAuthenticationEnabled
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkAuthenticationSpi() uint32 {
	if m != nil {
		return m.VirtualLinkAuthenticationSpi
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkAuthenticationTransmit() uint32 {
	if m != nil {
		return m.VirtualLinkAuthenticationTransmit
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetIsVirtualLinkEncryptionEnabled() bool {
	if m != nil {
		return m.IsVirtualLinkEncryptionEnabled
	}
	return false
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkEncryptionSpi() uint32 {
	if m != nil {
		return m.VirtualLinkEncryptionSpi
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkEncryptionTransmitted() uint32 {
	if m != nil {
		return m.VirtualLinkEncryptionTransmitted
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkEncryptedAuthenticationTransmitted() uint32 {
	if m != nil {
		return m.VirtualLinkEncryptedAuthenticationTransmitted
	}
	return 0
}

func (m *Ospfv3EdmVirtualLinks) GetVirtualLinkNeighbor() *Ospfv3EdmVlinkNeighbor {
	if m != nil {
		return m.VirtualLinkNeighbor
	}
	return nil
}

// OSPFv3 neighbor retransmission information
type Ospfv3EdmNeighborRetrans struct {
	// Number of database descriptor retransmissions during last exchange
	DatabaseDescriptorRetransmissions uint32 `protobuf:"varint,1,opt,name=database_descriptor_retransmissions,json=databaseDescriptorRetransmissions" json:"database_descriptor_retransmissions,omitempty"`
	// Area scope LSA's flood index
	AreaFloodIndex uint32 `protobuf:"varint,2,opt,name=area_flood_index,json=areaFloodIndex" json:"area_flood_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,3,opt,name=as_flood_index,json=asFloodIndex" json:"as_flood_index,omitempty"`
	// Link flood index
	LinkFloodIndex uint32 `protobuf:"varint,4,opt,name=link_flood_index,json=linkFloodIndex" json:"link_flood_index,omitempty"`
	// Number of neighbor retransmissions
	NeighborRetransmissions uint32 `protobuf:"varint,5,opt,name=neighbor_retransmissions,json=neighborRetransmissions" json:"neighbor_retransmissions,omitempty"`
	// Number of retransmissions for this neighbor
	Retransmissions uint32 `protobuf:"varint,6,opt,name=retransmissions" json:"retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFlood uint32 `protobuf:"varint,7,opt,name=area_first_flood,json=areaFirstFlood" json:"area_first_flood,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_index,json=areaFirstFloodIndex" json:"area_first_flood_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFlood uint32 `protobuf:"varint,9,opt,name=as_first_flood,json=asFirstFlood" json:"as_first_flood,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_index,json=asFirstFloodIndex" json:"as_first_flood_index,omitempty"`
	// Link first flood information
	LinkFirstFlood uint32 `protobuf:"varint,11,opt,name=link_first_flood,json=linkFirstFlood" json:"link_first_flood,omitempty"`
	// Link first flood information index
	LinkFirstFloodIndex uint32 `protobuf:"varint,12,opt,name=link_first_flood_index,json=linkFirstFloodIndex" json:"link_first_flood_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFlood uint32 `protobuf:"varint,13,opt,name=area_next_flood,json=areaNextFlood" json:"area_next_flood,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodIndex uint32 `protobuf:"varint,14,opt,name=area_next_flood_index,json=areaNextFloodIndex" json:"area_next_flood_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFlood uint32 `protobuf:"varint,15,opt,name=as_next_flood,json=asNextFlood" json:"as_next_flood,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodIndex uint32 `protobuf:"varint,16,opt,name=as_next_flood_index,json=asNextFloodIndex" json:"as_next_flood_index,omitempty"`
	// Link next flood information
	LinkNextFlood uint32 `protobuf:"varint,17,opt,name=link_next_flood,json=linkNextFlood" json:"link_next_flood,omitempty"`
	// Link next flood information index
	LinkNextFloodIndex uint32 `protobuf:"varint,18,opt,name=link_next_flood_index,json=linkNextFloodIndex" json:"link_next_flood_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,19,opt,name=last_retransmission_length,json=lastRetransmissionLength" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,20,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,21,opt,name=last_retransmission_time,json=lastRetransmissionTime" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,22,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,23,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer" json:"lsa_retransmission_timer,omitempty"`
}

func (m *Ospfv3EdmNeighborRetrans) Reset()                    { *m = Ospfv3EdmNeighborRetrans{} }
func (m *Ospfv3EdmNeighborRetrans) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighborRetrans) ProtoMessage()               {}
func (*Ospfv3EdmNeighborRetrans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ospfv3EdmNeighborRetrans) GetDatabaseDescriptorRetransmissions() uint32 {
	if m != nil {
		return m.DatabaseDescriptorRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFloodIndex() uint32 {
	if m != nil {
		return m.AreaFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFloodIndex() uint32 {
	if m != nil {
		return m.AsFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFloodIndex() uint32 {
	if m != nil {
		return m.LinkFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetNeighborRetransmissions() uint32 {
	if m != nil {
		return m.NeighborRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetRetransmissions() uint32 {
	if m != nil {
		return m.Retransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFlood() uint32 {
	if m != nil {
		return m.AreaFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFloodIndex() uint32 {
	if m != nil {
		return m.AreaFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFlood() uint32 {
	if m != nil {
		return m.AsFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFloodIndex() uint32 {
	if m != nil {
		return m.AsFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFlood() uint32 {
	if m != nil {
		return m.LinkFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFloodIndex() uint32 {
	if m != nil {
		return m.LinkFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFlood() uint32 {
	if m != nil {
		return m.AreaNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFloodIndex() uint32 {
	if m != nil {
		return m.AreaNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFlood() uint32 {
	if m != nil {
		return m.AsNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFloodIndex() uint32 {
	if m != nil {
		return m.AsNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFlood() uint32 {
	if m != nil {
		return m.LinkNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFloodIndex() uint32 {
	if m != nil {
		return m.LinkNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if m != nil {
		return m.LastRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if m != nil {
		return m.MaximumRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if m != nil {
		return m.LastRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if m != nil {
		return m.LsaRetransmissionTimer
	}
	return 0
}

// OSPFv3 virtual link neighbor information
type Ospfv3EdmVlinkNeighbor struct {
	// If true, hello suppressed
	IsVirtualLinkHelloSuppressed bool `protobuf:"varint,1,opt,name=is_virtual_link_hello_suppressed,json=isVirtualLinkHelloSuppressed" json:"is_virtual_link_hello_suppressed,omitempty"`
	// OSPF interface state for the virtual link
	VirtualLinkState string `protobuf:"bytes,2,opt,name=virtual_link_state,json=virtualLinkState" json:"virtual_link_state,omitempty"`
	// Virtual link retransmission information
	VirtualLinkRetransmission *Ospfv3EdmNeighborRetrans `protobuf:"bytes,3,opt,name=virtual_link_retransmission,json=virtualLinkRetransmission" json:"virtual_link_retransmission,omitempty"`
}

func (m *Ospfv3EdmVlinkNeighbor) Reset()                    { *m = Ospfv3EdmVlinkNeighbor{} }
func (m *Ospfv3EdmVlinkNeighbor) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmVlinkNeighbor) ProtoMessage()               {}
func (*Ospfv3EdmVlinkNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ospfv3EdmVlinkNeighbor) GetIsVirtualLinkHelloSuppressed() bool {
	if m != nil {
		return m.IsVirtualLinkHelloSuppressed
	}
	return false
}

func (m *Ospfv3EdmVlinkNeighbor) GetVirtualLinkState() string {
	if m != nil {
		return m.VirtualLinkState
	}
	return ""
}

func (m *Ospfv3EdmVlinkNeighbor) GetVirtualLinkRetransmission() *Ospfv3EdmNeighborRetrans {
	if m != nil {
		return m.VirtualLinkRetransmission
	}
	return nil
}

func init() {
	proto.RegisterType((*Ospfv3EdmVirtualLinks_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.virtual_link.ospfv3_edm_virtual_links_KEYS")
	proto.RegisterType((*Ospfv3EdmVirtualLinks)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.virtual_link.ospfv3_edm_virtual_links")
	proto.RegisterType((*Ospfv3EdmNeighborRetrans)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.virtual_link.ospfv3_edm_neighbor_retrans")
	proto.RegisterType((*Ospfv3EdmVlinkNeighbor)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.virtual_link.ospfv3_edm_vlink_neighbor")
}

func init() { proto.RegisterFile("ospfv3_edm_virtual_links.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xeb, 0x52, 0x1b, 0x37,
	0x14, 0xc7, 0xc7, 0x69, 0x9b, 0x06, 0x81, 0xb9, 0x88, 0x9b, 0x80, 0x40, 0x8c, 0x43, 0x19, 0x4f,
	0xa7, 0x71, 0x27, 0xd0, 0xdc, 0x1a, 0x92, 0xd6, 0xdc, 0x1a, 0x27, 0x84, 0x74, 0x0c, 0xd3, 0x4e,
	0x3f, 0xed, 0xc8, 0xbb, 0x22, 0xa8, 0x59, 0xef, 0x6e, 0x25, 0xd9, 0x85, 0x97, 0xe9, 0xf4, 0x01,
	0xf2, 0x10, 0x7d, 0xb4, 0x8e, 0x8e, 0xc4, 0x5a, 0x5a, 0x7b, 0xf3, 0xa9, 0xfd, 0xc6, 0x48, 0xff,
	0xff, 0x4f, 0xe7, 0x1c, 0x9f, 0x3d, 0x12, 0x68, 0x23, 0x95, 0xd9, 0xc5, 0x60, 0x37, 0x60, 0x51,
	0x2f, 0x18, 0x70, 0xa1, 0xfa, 0x34, 0x0e, 0x62, 0x9e, 0x7c, 0x90, 0xcd, 0x4c, 0xa4, 0x2a, 0xc5,
	0xef, 0x42, 0x2e, 0xc3, 0x34, 0xe0, 0xa9, 0x0c, 0xae, 0x44, 0xc0, 0xb3, 0xc1, 0xe3, 0xc0, 0x3a,
	0xd2, 0x8c, 0x89, 0xa6, 0xf9, 0x5b, 0x6b, 0x43, 0x26, 0x25, 0x93, 0x37, 0x7f, 0x35, 0x23, 0x76,
	0x41, 0xfb, 0xb1, 0x0a, 0x06, 0xe2, 0xa2, 0xe9, 0x72, 0xeb, 0xfb, 0x68, 0xbd, 0xec, 0xc8, 0xe0,
	0xcd, 0xd1, 0x6f, 0x67, 0x78, 0x13, 0x4d, 0x59, 0x48, 0x90, 0xd0, 0x1e, 0x23, 0x95, 0x5a, 0xa5,
	0x31, 0xd1, 0x99, 0xb4, 0x6b, 0xa7, 0xb4, 0xc7, 0xea, 0x1f, 0xa7, 0x11, 0x29, 0x83, 0xe0, 0x27,
	0x88, 0xb8, 0x0b, 0x41, 0xc2, 0xf8, 0xfb, 0xcb, 0x6e, 0x2a, 0x02, 0x1e, 0x91, 0x1d, 0x60, 0x2d,
	0xda, 0xfd, 0x13, 0x9e, 0x7c, 0x38, 0xb5, 0xbb, 0xed, 0x08, 0xb7, 0xd0, 0xba, 0x67, 0xe4, 0x89,
	0x62, 0xe2, 0x82, 0x86, 0x2c, 0x48, 0xfa, 0xbd, 0x2e, 0x13, 0x64, 0xb7, 0x56, 0x69, 0x54, 0x3b,
	0xab, 0x8e, 0xbb, 0x7d, 0x23, 0x39, 0x05, 0x05, 0xfe, 0x06, 0x61, 0x0f, 0x21, 0x15, 0x55, 0x8c,
	0x7c, 0x07, 0xa7, 0xce, 0x3a, 0xbe, 0x33, 0xbd, 0x8e, 0xdf, 0xa2, 0x2d, 0x2e, 0x03, 0xff, 0xcc,
	0x2c, 0x90, 0x2c, 0xec, 0x0b, 0xae, 0xae, 0x03, 0xc1, 0xfe, 0xe8, 0x73, 0xc1, 0x22, 0xf2, 0xa8,
	0x56, 0x69, 0xdc, 0xe9, 0xdc, 0xe3, 0xf2, 0x17, 0xe7, 0xe4, 0xec, 0xcc, 0xea, 0x3a, 0x56, 0x86,
	0xdb, 0xa8, 0xfe, 0x29, 0x1c, 0x0d, 0x15, 0x1f, 0x30, 0xf2, 0x18, 0x60, 0xeb, 0x25, 0xb0, 0x16,
	0x88, 0x46, 0x4a, 0x91, 0xd7, 0x90, 0x46, 0x91, 0x60, 0x52, 0x92, 0x27, 0x90, 0xd2, 0xea, 0x98,
	0x42, 0xb6, 0x8c, 0x02, 0xef, 0xa3, 0x8d, 0x62, 0x34, 0x11, 0xeb, 0xd1, 0x24, 0x0a, 0x42, 0x2e,
	0xc2, 0x3e, 0x57, 0xe4, 0x29, 0x44, 0xb2, 0xea, 0x45, 0x72, 0x08, 0x92, 0x03, 0xa3, 0xc0, 0x7b,
	0x68, 0xcd, 0x07, 0x84, 0x41, 0x97, 0xab, 0x58, 0xb7, 0x46, 0x2c, 0x29, 0x79, 0x06, 0xbf, 0xc7,
	0xb2, 0x13, 0xc4, 0x61, 0xb8, 0x6f, 0xf6, 0x4f, 0x24, 0xc5, 0xdb, 0x68, 0x46, 0x09, 0x9a, 0x48,
	0xae, 0x02, 0x2a, 0x18, 0xd5, 0xbf, 0xff, 0xf7, 0x10, 0x76, 0xd5, 0x2e, 0xb7, 0x04, 0xa3, 0xed,
	0x08, 0x7f, 0x85, 0xa6, 0x9d, 0x9f, 0x5a, 0xb7, 0xdc, 0x73, 0x23, 0xcb, 0x57, 0x75, 0xd3, 0xe1,
	0xaf, 0xd1, 0x9c, 0x17, 0x4c, 0x98, 0x4a, 0x45, 0xf6, 0x20, 0x84, 0x19, 0x27, 0x84, 0x83, 0x54,
	0x2a, 0x7c, 0x80, 0x36, 0x06, 0x5c, 0xe4, 0x52, 0x38, 0xaf, 0xc7, 0xa5, 0xe4, 0x69, 0x12, 0x44,
	0x2c, 0xa6, 0xd7, 0xe4, 0x05, 0x18, 0xd7, 0x8c, 0x4a, 0xfb, 0xce, 0x1d, 0xcd, 0xa1, 0x96, 0xe0,
	0x17, 0x85, 0xec, 0x2f, 0x59, 0x1c, 0xa7, 0xa6, 0x2b, 0x07, 0x34, 0x26, 0x2f, 0x81, 0x40, 0x9c,
	0xa3, 0x5f, 0x69, 0x41, 0xdb, 0xee, 0xe3, 0xe7, 0x68, 0xb5, 0x50, 0x7d, 0x1a, 0x0d, 0xdd, 0x3f,
	0x8c, 0xd6, 0x8e, 0xd1, 0xa8, 0xd4, 0xfc, 0x27, 0xe5, 0x6a, 0x68, 0xfe, 0x71, 0xc4, 0xfc, 0x2b,
	0xe5, 0x2a, 0x37, 0xbf, 0x43, 0x5b, 0x9e, 0x59, 0x30, 0xaf, 0x00, 0x39, 0xa6, 0x05, 0x98, 0x4d,
	0x07, 0xd3, 0xf1, 0x94, 0x39, 0xf0, 0x11, 0x5a, 0x2e, 0xb4, 0xe3, 0x95, 0x32, 0xe5, 0x20, 0xfb,
	0xc0, 0x58, 0xf0, 0x1a, 0xf1, 0x4a, 0x41, 0x25, 0xb4, 0xad, 0xd8, 0x82, 0x19, 0x95, 0x52, 0x7f,
	0x05, 0x07, 0xd0, 0x7b, 0x0b, 0x5e, 0xef, 0xfd, 0x6c, 0xf6, 0x70, 0x07, 0x6d, 0x17, 0x6d, 0xb4,
	0xaf, 0x2e, 0x59, 0xa2, 0x78, 0x48, 0x95, 0xce, 0x80, 0x25, 0xb4, 0x1b, 0xb3, 0x88, 0x1c, 0x02,
	0xa5, 0xee, 0x51, 0x5a, 0x9e, 0xf4, 0xc8, 0x28, 0xf1, 0x11, 0xba, 0xf7, 0x29, 0xa0, 0xcc, 0x38,
	0x39, 0x82, 0x4c, 0xee, 0x0e, 0xca, 0x50, 0x67, 0x19, 0x1f, 0xa9, 0x6c, 0x01, 0x63, 0x8b, 0xa7,
	0xc8, 0xf1, 0x48, 0x65, 0x7d, 0x96, 0x6d, 0x36, 0x85, 0x5f, 0x8f, 0xce, 0x0c, 0x96, 0x84, 0xe2,
	0x3a, 0xf3, 0xf2, 0xfc, 0x09, 0xf2, 0xdc, 0xf0, 0xf2, 0x3c, 0xca, 0x65, 0x37, 0x39, 0x16, 0xfb,
	0xd5, 0x01, 0xe9, 0xfc, 0x5e, 0x8d, 0xf4, 0xeb, 0x10, 0xa1, 0x73, 0x7b, 0x8b, 0xee, 0x97, 0xd9,
	0x6f, 0xf2, 0x52, 0x2c, 0x22, 0x6d, 0xc0, 0xd4, 0xc6, 0x62, 0xce, 0x87, 0x3a, 0x7c, 0x89, 0x1e,
	0x8e, 0xc3, 0xb1, 0xa8, 0xac, 0x68, 0x1a, 0xfe, 0x1a, 0xe0, 0x0f, 0x46, 0xe1, 0x2c, 0x1a, 0x5f,
	0x40, 0x7d, 0xd2, 0x5f, 0x15, 0xb4, 0x38, 0x76, 0x5a, 0x92, 0x37, 0xb5, 0x4a, 0x63, 0x72, 0xe7,
	0xf7, 0xe6, 0x7f, 0x7c, 0x87, 0x36, 0xdd, 0xbb, 0xcf, 0x3b, 0xb1, 0x33, 0x3f, 0x66, 0x22, 0xd7,
	0xff, 0x9e, 0x40, 0x6b, 0x8e, 0x25, 0x1f, 0xe6, 0xf6, 0xbb, 0xc4, 0xa7, 0xe8, 0x7e, 0x44, 0x15,
	0xed, 0x52, 0xc9, 0x82, 0x88, 0xc9, 0x50, 0xf0, 0x4c, 0x0d, 0xb7, 0xed, 0xc7, 0x28, 0xe1, 0x22,
	0xae, 0x76, 0x36, 0x6f, 0xa4, 0x87, 0xb9, 0xd2, 0xff, 0x6a, 0x25, 0x6e, 0xa0, 0x59, 0x18, 0xb8,
	0x17, 0x71, 0x9a, 0xea, 0x91, 0x13, 0xb1, 0x2b, 0x72, 0x0b, 0xcc, 0xd3, 0x7a, 0xfd, 0x58, 0x2f,
	0xb7, 0xf5, 0x2a, 0xde, 0x42, 0xd3, 0x54, 0x7a, 0xba, 0xcf, 0x40, 0x37, 0x45, 0xa5, 0xa3, 0x6a,
	0xa0, 0x59, 0xc8, 0xd2, 0xd5, 0x7d, 0x6e, 0x78, 0x7a, 0xdd, 0x51, 0x3e, 0x43, 0xa4, 0x98, 0x5d,
	0x1e, 0xfe, 0x17, 0x66, 0x68, 0xe5, 0xa5, 0x1a, 0x09, 0x7a, 0xa6, 0xe8, 0xb8, 0x6d, 0x86, 0xbb,
	0x28, 0x4b, 0x8f, 0x0b, 0xa9, 0x4c, 0x50, 0xe4, 0x4b, 0x27, 0x3d, 0xbd, 0x0c, 0x31, 0xe1, 0x5d,
	0xb4, 0x54, 0x54, 0xda, 0xf0, 0xef, 0x80, 0x7e, 0xde, 0xd7, 0x7b, 0x35, 0x71, 0xe0, 0x13, 0x79,
	0x4d, 0x86, 0xe8, 0x6f, 0xd1, 0x82, 0xaf, 0xb2, 0x60, 0x04, 0xda, 0x39, 0x57, 0x5b, 0x28, 0xa2,
	0x03, 0x9e, 0x74, 0x8a, 0xe8, 0x45, 0x5d, 0x54, 0x5a, 0xf8, 0x94, 0x89, 0xda, 0xd7, 0x1b, 0xfc,
	0x36, 0x9a, 0x81, 0x54, 0x61, 0x34, 0x1b, 0x7a, 0x15, 0xd4, 0x55, 0xbd, 0xac, 0x67, 0xb2, 0x81,
	0x3f, 0x44, 0x8b, 0x05, 0x9d, 0x65, 0x4f, 0x83, 0x1a, 0x7b, 0x6a, 0x83, 0xae, 0xa3, 0x2a, 0x95,
	0x2e, 0x78, 0x06, 0xa4, 0x93, 0x54, 0x0e, 0xb1, 0x0f, 0xd0, 0xbc, 0xa7, 0xb1, 0xd0, 0x59, 0x50,
	0xce, 0x3a, 0xca, 0x3c, 0xda, 0xe1, 0x45, 0x62, 0xa0, 0x73, 0x26, 0xda, 0xd8, 0xde, 0x20, 0x79,
	0xb4, 0x05, 0x9d, 0x05, 0x63, 0x13, 0xad, 0xa7, 0x36, 0xe8, 0x3d, 0xb4, 0x1a, 0x53, 0xa9, 0x8a,
	0x97, 0x5e, 0xcc, 0x92, 0xf7, 0xea, 0x92, 0xcc, 0x9b, 0x21, 0xa8, 0x15, 0x7e, 0x03, 0x9e, 0xc0,
	0x3e, 0xde, 0x47, 0xeb, 0x3d, 0x7a, 0xc5, 0x7b, 0xfd, 0x5e, 0x09, 0x60, 0xc1, 0xbc, 0x1b, 0xac,
	0x68, 0x2c, 0xe3, 0x29, 0x22, 0xe3, 0x22, 0x50, 0xbc, 0xc7, 0xc8, 0x22, 0xd8, 0x97, 0x46, 0xcf,
	0x3f, 0xe7, 0x3d, 0x86, 0x5f, 0xa2, 0xb5, 0x92, 0xd3, 0xc1, 0xbc, 0x04, 0xe6, 0x95, 0xb1, 0x67,
	0x83, 0x5f, 0x9f, 0x2c, 0xe9, 0x38, 0xaf, 0x20, 0xcb, 0xf6, 0x64, 0x49, 0x47, 0x8d, 0xa2, 0xfe,
	0xcf, 0x2d, 0xb4, 0x52, 0x3a, 0xd5, 0xf0, 0x31, 0xaa, 0x15, 0x6f, 0x29, 0xf3, 0x18, 0x92, 0xfd,
	0x2c, 0xd3, 0xaf, 0x4d, 0x16, 0xc1, 0x74, 0xba, 0xd3, 0xb9, 0xeb, 0xdd, 0x51, 0xf0, 0x0c, 0x38,
	0xcb, 0x35, 0x25, 0xcf, 0xf3, 0x5b, 0x25, 0xcf, 0xf3, 0x8f, 0x95, 0xc2, 0x85, 0xe6, 0xe7, 0x05,
	0xa3, 0x6a, 0x72, 0x27, 0xfe, 0x3f, 0xa7, 0x7b, 0x71, 0x98, 0x75, 0x56, 0x4a, 0x1f, 0x4b, 0xdd,
	0xdb, 0xf0, 0x0f, 0xdb, 0xee, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x70, 0xce, 0x6d, 0xd2,
	0x0d, 0x00, 0x00,
}
