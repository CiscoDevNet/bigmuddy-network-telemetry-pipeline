// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_database_lsainfo.proto

/*
Package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_areas_area_database_table_lsa_internal_table_lsa is a generated protocol buffer package.

It is generated from these files:
	ospfv3_edm_database_lsainfo.proto

It has these top-level messages:
	Ospfv3EdmDatabaseLsainfo_KEYS
	Ospfv3EdmDatabaseLsainfo
	Ospfv3EdmPrefix
	Ospfv3EdmDbHeader
	Ospfv3EdmDbDetail
	Ospfv3EdmLsaExternal
	Ospfv3EdmLsaIapfx
	Ospfv3EdmLsaIartr
	Ospfv3EdmLsaLink
	Ospfv3EdmLsaNetwork
	Ospfv3EdmLsaGrace
	Ospfv3EdmLsaPrefix
	Ospfv3EdmLink
	Ospfv3EdmRpfPath
	Ospfv3EdmLsaRouter
	Ospfv3EdmLsaUnknown
	Ospfv3EdmDatabase
	Ospfv3LsaInfoUnion
*/
package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_areas_area_database_table_lsa_internal_table_lsa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPFv3 LSA Information
type Ospfv3EdmDatabaseLsainfo_KEYS struct {
	ProcessName       string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName           string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AreaId            uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	AreaId_1          uint32 `protobuf:"varint,4,opt,name=area_id_1,json=areaId1" json:"area_id_1,omitempty"`
	LsType            string `protobuf:"bytes,5,opt,name=ls_type,json=lsType" json:"ls_type,omitempty"`
	AdvertisingRouter string `protobuf:"bytes,6,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	LsId              uint32 `protobuf:"varint,7,opt,name=ls_id,json=lsId" json:"ls_id,omitempty"`
	InterfaceName     string `protobuf:"bytes,8,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) Reset()                    { *m = Ospfv3EdmDatabaseLsainfo_KEYS{} }
func (m *Ospfv3EdmDatabaseLsainfo_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmDatabaseLsainfo_KEYS) ProtoMessage()               {}
func (*Ospfv3EdmDatabaseLsainfo_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetAreaId_1() uint32 {
	if m != nil {
		return m.AreaId_1
	}
	return 0
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetLsType() string {
	if m != nil {
		return m.LsType
	}
	return ""
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetLsId() uint32 {
	if m != nil {
		return m.LsId
	}
	return 0
}

func (m *Ospfv3EdmDatabaseLsainfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type Ospfv3EdmDatabaseLsainfo struct {
	// Summary of all LSAs or LSA specific information
	LsaInfo *Ospfv3LsaInfoUnion `protobuf:"bytes,50,opt,name=lsa_info,json=lsaInfo" json:"lsa_info,omitempty"`
}

func (m *Ospfv3EdmDatabaseLsainfo) Reset()                    { *m = Ospfv3EdmDatabaseLsainfo{} }
func (m *Ospfv3EdmDatabaseLsainfo) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmDatabaseLsainfo) ProtoMessage()               {}
func (*Ospfv3EdmDatabaseLsainfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ospfv3EdmDatabaseLsainfo) GetLsaInfo() *Ospfv3LsaInfoUnion {
	if m != nil {
		return m.LsaInfo
	}
	return nil
}

// OSPFv3 Prefix Type
type Ospfv3EdmPrefix struct {
	// OSPFv3 prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// OSPFv3 prefix length
	OspFv3PrefixLength uint32 `protobuf:"varint,2,opt,name=osp_fv3_prefix_length,json=ospFv3PrefixLength" json:"osp_fv3_prefix_length,omitempty"`
	// OSPFv3 prefix options
	OspFv3PrefixOptions uint32 `protobuf:"varint,3,opt,name=osp_fv3_prefix_options,json=ospFv3PrefixOptions" json:"osp_fv3_prefix_options,omitempty"`
	// OSPFv3 prefix metric
	OspFv3PrefixMetric uint32 `protobuf:"varint,4,opt,name=osp_fv3_prefix_metric,json=ospFv3PrefixMetric" json:"osp_fv3_prefix_metric,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,5,opt,name=priority" json:"priority,omitempty"`
}

func (m *Ospfv3EdmPrefix) Reset()                    { *m = Ospfv3EdmPrefix{} }
func (m *Ospfv3EdmPrefix) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmPrefix) ProtoMessage()               {}
func (*Ospfv3EdmPrefix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ospfv3EdmPrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ospfv3EdmPrefix) GetOspFv3PrefixLength() uint32 {
	if m != nil {
		return m.OspFv3PrefixLength
	}
	return 0
}

func (m *Ospfv3EdmPrefix) GetOspFv3PrefixOptions() uint32 {
	if m != nil {
		return m.OspFv3PrefixOptions
	}
	return 0
}

func (m *Ospfv3EdmPrefix) GetOspFv3PrefixMetric() uint32 {
	if m != nil {
		return m.OspFv3PrefixMetric
	}
	return 0
}

func (m *Ospfv3EdmPrefix) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

// OSPFv3 LSA Database Header
type Ospfv3EdmDbHeader struct {
	// LSA type
	LsaType uint32 `protobuf:"varint,1,opt,name=lsa_type,json=lsaType" json:"lsa_type,omitempty"`
	// Area ID in decimal or dotted-decimal format
	LsaAreaId string `protobuf:"bytes,2,opt,name=lsa_area_id,json=lsaAreaId" json:"lsa_area_id,omitempty"`
	// LSA's Age (s)
	LsaAge uint32 `protobuf:"varint,3,opt,name=lsa_age,json=lsaAge" json:"lsa_age,omitempty"`
	// If true, Do Not Age this LSA
	IsDoNotAgeLsa bool `protobuf:"varint,4,opt,name=is_do_not_age_lsa,json=isDoNotAgeLsa" json:"is_do_not_age_lsa,omitempty"`
	// LS ID
	LsId uint32 `protobuf:"varint,5,opt,name=ls_id,json=lsId" json:"ls_id,omitempty"`
	// Router ID of Advertising Router
	AdvertisingRouter string `protobuf:"bytes,6,opt,name=advertising_router,json=advertisingRouter" json:"advertising_router,omitempty"`
	// Current Sequence number
	SequenceNumber uint32 `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Checksum value
	Checksum uint32 `protobuf:"varint,8,opt,name=checksum" json:"checksum,omitempty"`
	// If true, if grace restart is active
	IsGracefulRestartActive bool `protobuf:"varint,9,opt,name=is_graceful_restart_active,json=isGracefulRestartActive" json:"is_graceful_restart_active,omitempty"`
}

func (m *Ospfv3EdmDbHeader) Reset()                    { *m = Ospfv3EdmDbHeader{} }
func (m *Ospfv3EdmDbHeader) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmDbHeader) ProtoMessage()               {}
func (*Ospfv3EdmDbHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ospfv3EdmDbHeader) GetLsaType() uint32 {
	if m != nil {
		return m.LsaType
	}
	return 0
}

func (m *Ospfv3EdmDbHeader) GetLsaAreaId() string {
	if m != nil {
		return m.LsaAreaId
	}
	return ""
}

func (m *Ospfv3EdmDbHeader) GetLsaAge() uint32 {
	if m != nil {
		return m.LsaAge
	}
	return 0
}

func (m *Ospfv3EdmDbHeader) GetIsDoNotAgeLsa() bool {
	if m != nil {
		return m.IsDoNotAgeLsa
	}
	return false
}

func (m *Ospfv3EdmDbHeader) GetLsId() uint32 {
	if m != nil {
		return m.LsId
	}
	return 0
}

func (m *Ospfv3EdmDbHeader) GetAdvertisingRouter() string {
	if m != nil {
		return m.AdvertisingRouter
	}
	return ""
}

func (m *Ospfv3EdmDbHeader) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Ospfv3EdmDbHeader) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *Ospfv3EdmDbHeader) GetIsGracefulRestartActive() bool {
	if m != nil {
		return m.IsGracefulRestartActive
	}
	return false
}

// OSPFv3 Detailed LSA Database Information
type Ospfv3EdmDbDetail struct {
	// Second table index
	SecondTableIndex uint32 `protobuf:"varint,1,opt,name=second_table_index,json=secondTableIndex" json:"second_table_index,omitempty"`
	// Minute table index
	MinuteTableIndex uint32 `protobuf:"varint,2,opt,name=minute_table_index,json=minuteTableIndex" json:"minute_table_index,omitempty"`
	// The amount of time since the last check was made to free this LSA (s)
	FreeTime uint32 `protobuf:"varint,3,opt,name=free_time,json=freeTime" json:"free_time,omitempty"`
	// If true, flag is set to delete this LSA
	IsDeleted bool `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// If true, Routing Bit set on the LSA
	IsRoutingBit bool `protobuf:"varint,5,opt,name=is_routing_bit,json=isRoutingBit" json:"is_routing_bit,omitempty"`
	// If true, Advertising Router is reachable
	IsAdvertisingRouterReachable bool `protobuf:"varint,6,opt,name=is_advertising_router_reachable,json=isAdvertisingRouterReachable" json:"is_advertising_router_reachable,omitempty"`
	// If true, the reason not to delete this LSA is because delete flag not set on this LSA
	IsNoDelete bool `protobuf:"varint,7,opt,name=is_no_delete,json=isNoDelete" json:"is_no_delete,omitempty"`
	// If true, the reason  not to delete this LSA is because neighbor is in exchange state
	IsNeighborExchange bool `protobuf:"varint,8,opt,name=is_neighbor_exchange,json=isNeighborExchange" json:"is_neighbor_exchange,omitempty"`
	// If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table
	IsRoutingTable bool `protobuf:"varint,9,opt,name=is_routing_table,json=isRoutingTable" json:"is_routing_table,omitempty"`
	// If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty
	IsAcknowledged bool `protobuf:"varint,10,opt,name=is_acknowledged,json=isAcknowledged" json:"is_acknowledged,omitempty"`
	// If true, the reason not to delete this LSA is because it is in Maxage Queue
	IsMaximumAged bool `protobuf:"varint,11,opt,name=is_maximum_aged,json=isMaximumAged" json:"is_maximum_aged,omitempty"`
	// If true, the reason not to delete this LSA is because it is in partial SPF queue
	IsPartialSpf bool `protobuf:"varint,12,opt,name=is_partial_spf,json=isPartialSpf" json:"is_partial_spf,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for flooding or retransmission
	IsFloodPending bool `protobuf:"varint,13,opt,name=is_flood_pending,json=isFloodPending" json:"is_flood_pending,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
	RateLimit bool `protobuf:"varint,14,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	// If true, the reason not to delete this LSA is because NSR ACK from standby is pending
	IsNsrAckPending bool `protobuf:"varint,15,opt,name=is_nsr_ack_pending,json=isNsrAckPending" json:"is_nsr_ack_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending flooding on switchover
	NsrFloodRequired bool `protobuf:"varint,16,opt,name=nsr_flood_required,json=nsrFloodRequired" json:"nsr_flood_required,omitempty"`
	// LSA flood required after FO
	LsaFloodRequiredPostFailOver bool `protobuf:"varint,17,opt,name=lsa_flood_required_post_fail_over,json=lsaFloodRequiredPostFailOver" json:"lsa_flood_required_post_fail_over,omitempty"`
	// Length of the LSA
	LsaLength uint32 `protobuf:"varint,18,opt,name=lsa_length,json=lsaLength" json:"lsa_length,omitempty"`
	// State of LSA sync with active
	LsaSyncState string `protobuf:"bytes,19,opt,name=lsa_sync_state,json=lsaSyncState" json:"lsa_sync_state,omitempty"`
}

func (m *Ospfv3EdmDbDetail) Reset()                    { *m = Ospfv3EdmDbDetail{} }
func (m *Ospfv3EdmDbDetail) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmDbDetail) ProtoMessage()               {}
func (*Ospfv3EdmDbDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ospfv3EdmDbDetail) GetSecondTableIndex() uint32 {
	if m != nil {
		return m.SecondTableIndex
	}
	return 0
}

func (m *Ospfv3EdmDbDetail) GetMinuteTableIndex() uint32 {
	if m != nil {
		return m.MinuteTableIndex
	}
	return 0
}

func (m *Ospfv3EdmDbDetail) GetFreeTime() uint32 {
	if m != nil {
		return m.FreeTime
	}
	return 0
}

func (m *Ospfv3EdmDbDetail) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsRoutingBit() bool {
	if m != nil {
		return m.IsRoutingBit
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsAdvertisingRouterReachable() bool {
	if m != nil {
		return m.IsAdvertisingRouterReachable
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsNoDelete() bool {
	if m != nil {
		return m.IsNoDelete
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsNeighborExchange() bool {
	if m != nil {
		return m.IsNeighborExchange
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsRoutingTable() bool {
	if m != nil {
		return m.IsRoutingTable
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsAcknowledged() bool {
	if m != nil {
		return m.IsAcknowledged
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsMaximumAged() bool {
	if m != nil {
		return m.IsMaximumAged
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsPartialSpf() bool {
	if m != nil {
		return m.IsPartialSpf
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsFloodPending() bool {
	if m != nil {
		return m.IsFloodPending
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetRateLimit() bool {
	if m != nil {
		return m.RateLimit
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetIsNsrAckPending() bool {
	if m != nil {
		return m.IsNsrAckPending
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetNsrFloodRequired() bool {
	if m != nil {
		return m.NsrFloodRequired
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetLsaFloodRequiredPostFailOver() bool {
	if m != nil {
		return m.LsaFloodRequiredPostFailOver
	}
	return false
}

func (m *Ospfv3EdmDbDetail) GetLsaLength() uint32 {
	if m != nil {
		return m.LsaLength
	}
	return 0
}

func (m *Ospfv3EdmDbDetail) GetLsaSyncState() string {
	if m != nil {
		return m.LsaSyncState
	}
	return ""
}

// OSPFv3 External LSA
type Ospfv3EdmLsaExternal struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// IPV6 address prefix
	Prefix string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,4,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// Metric type
	MetricType string `protobuf:"bytes,5,opt,name=metric_type,json=metricType" json:"metric_type,omitempty"`
	// Type of service cost metric
	TosCost uint32 `protobuf:"varint,6,opt,name=tos_cost,json=tosCost" json:"tos_cost,omitempty"`
	// If true, forwarding address is set
	IsForwardingAddressSet bool `protobuf:"varint,7,opt,name=is_forwarding_address_set,json=isForwardingAddressSet" json:"is_forwarding_address_set,omitempty"`
	// Forwarding Address
	ForwardingAddress string `protobuf:"bytes,8,opt,name=forwarding_address,json=forwardingAddress" json:"forwarding_address,omitempty"`
	// Route Tag
	ExternalTag uint32 `protobuf:"varint,9,opt,name=external_tag,json=externalTag" json:"external_tag,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,10,opt,name=priority" json:"priority,omitempty"`
}

func (m *Ospfv3EdmLsaExternal) Reset()                    { *m = Ospfv3EdmLsaExternal{} }
func (m *Ospfv3EdmLsaExternal) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaExternal) ProtoMessage()               {}
func (*Ospfv3EdmLsaExternal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Ospfv3EdmLsaExternal) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaExternal) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaExternal) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ospfv3EdmLsaExternal) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ospfv3EdmLsaExternal) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *Ospfv3EdmLsaExternal) GetTosCost() uint32 {
	if m != nil {
		return m.TosCost
	}
	return 0
}

func (m *Ospfv3EdmLsaExternal) GetIsForwardingAddressSet() bool {
	if m != nil {
		return m.IsForwardingAddressSet
	}
	return false
}

func (m *Ospfv3EdmLsaExternal) GetForwardingAddress() string {
	if m != nil {
		return m.ForwardingAddress
	}
	return ""
}

func (m *Ospfv3EdmLsaExternal) GetExternalTag() uint32 {
	if m != nil {
		return m.ExternalTag
	}
	return 0
}

func (m *Ospfv3EdmLsaExternal) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

// OSPFv3 Inter-area Prefix LSA
type Ospfv3EdmLsaIapfx struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// LSA address prefix
	Prefix string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,4,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,5,opt,name=priority" json:"priority,omitempty"`
}

func (m *Ospfv3EdmLsaIapfx) Reset()                    { *m = Ospfv3EdmLsaIapfx{} }
func (m *Ospfv3EdmLsaIapfx) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaIapfx) ProtoMessage()               {}
func (*Ospfv3EdmLsaIapfx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ospfv3EdmLsaIapfx) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaIapfx) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaIapfx) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ospfv3EdmLsaIapfx) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ospfv3EdmLsaIapfx) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

// OSPFv3 Inter-area Router LSA
type Ospfv3EdmLsaIartr struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// LSA router ID
	LsaRouterId uint32 `protobuf:"varint,3,opt,name=lsa_router_id,json=lsaRouterId" json:"lsa_router_id,omitempty"`
}

func (m *Ospfv3EdmLsaIartr) Reset()                    { *m = Ospfv3EdmLsaIartr{} }
func (m *Ospfv3EdmLsaIartr) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaIartr) ProtoMessage()               {}
func (*Ospfv3EdmLsaIartr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Ospfv3EdmLsaIartr) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaIartr) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaIartr) GetLsaRouterId() uint32 {
	if m != nil {
		return m.LsaRouterId
	}
	return 0
}

// OSPFv3 Link LSA
type Ospfv3EdmLsaLink struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// LSA interface handle
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,4,opt,name=is_virtual_link,json=isVirtualLink" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,5,opt,name=virtual_link_id,json=virtualLinkId" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,6,opt,name=is_sham_link,json=isShamLink" json:"is_sham_link,omitempty"`
	// Sham link ID
	ShamLinkId uint32 `protobuf:"varint,7,opt,name=sham_link_id,json=shamLinkId" json:"sham_link_id,omitempty"`
	// LSA link local
	LsaLinkLocal string `protobuf:"bytes,8,opt,name=lsa_link_local,json=lsaLinkLocal" json:"lsa_link_local,omitempty"`
	// Router priority
	RouterPriority uint32 `protobuf:"varint,9,opt,name=router_priority,json=routerPriority" json:"router_priority,omitempty"`
	// OSPFv3 prefix
	Prefix []*Ospfv3EdmPrefix `protobuf:"bytes,10,rep,name=prefix" json:"prefix,omitempty"`
}

func (m *Ospfv3EdmLsaLink) Reset()                    { *m = Ospfv3EdmLsaLink{} }
func (m *Ospfv3EdmLsaLink) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaLink) ProtoMessage()               {}
func (*Ospfv3EdmLsaLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Ospfv3EdmLsaLink) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaLink) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaLink) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ospfv3EdmLsaLink) GetIsVirtualLink() bool {
	if m != nil {
		return m.IsVirtualLink
	}
	return false
}

func (m *Ospfv3EdmLsaLink) GetVirtualLinkId() uint32 {
	if m != nil {
		return m.VirtualLinkId
	}
	return 0
}

func (m *Ospfv3EdmLsaLink) GetIsShamLink() bool {
	if m != nil {
		return m.IsShamLink
	}
	return false
}

func (m *Ospfv3EdmLsaLink) GetShamLinkId() uint32 {
	if m != nil {
		return m.ShamLinkId
	}
	return 0
}

func (m *Ospfv3EdmLsaLink) GetLsaLinkLocal() string {
	if m != nil {
		return m.LsaLinkLocal
	}
	return ""
}

func (m *Ospfv3EdmLsaLink) GetRouterPriority() uint32 {
	if m != nil {
		return m.RouterPriority
	}
	return 0
}

func (m *Ospfv3EdmLsaLink) GetPrefix() []*Ospfv3EdmPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

// OSPFv3 Network LSA
type Ospfv3EdmLsaNetwork struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// Neighbor router list
	NeighborRouterList [][]byte `protobuf:"bytes,3,rep,name=neighbor_router_list,json=neighborRouterList,proto3" json:"neighbor_router_list,omitempty"`
}

func (m *Ospfv3EdmLsaNetwork) Reset()                    { *m = Ospfv3EdmLsaNetwork{} }
func (m *Ospfv3EdmLsaNetwork) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaNetwork) ProtoMessage()               {}
func (*Ospfv3EdmLsaNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Ospfv3EdmLsaNetwork) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaNetwork) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaNetwork) GetNeighborRouterList() [][]byte {
	if m != nil {
		return m.NeighborRouterList
	}
	return nil
}

// OSPFv3 Grace LSA
type Ospfv3EdmLsaGrace struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// The grace periord where helper routers should wait before advertising it fully adjacent(s)
	GracePeriod uint32 `protobuf:"varint,3,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
	// Reason for router restart
	GraceReason string `protobuf:"bytes,4,opt,name=grace_reason,json=graceReason" json:"grace_reason,omitempty"`
}

func (m *Ospfv3EdmLsaGrace) Reset()                    { *m = Ospfv3EdmLsaGrace{} }
func (m *Ospfv3EdmLsaGrace) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaGrace) ProtoMessage()               {}
func (*Ospfv3EdmLsaGrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Ospfv3EdmLsaGrace) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaGrace) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaGrace) GetGracePeriod() uint32 {
	if m != nil {
		return m.GracePeriod
	}
	return 0
}

func (m *Ospfv3EdmLsaGrace) GetGraceReason() string {
	if m != nil {
		return m.GraceReason
	}
	return ""
}

// OSPFv3 Prefix LSA
type Ospfv3EdmLsaPrefix struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// Reference type
	ReferenceType string `protobuf:"bytes,3,opt,name=reference_type,json=referenceType" json:"reference_type,omitempty"`
	// Reference LSA ID
	ReferenceLsaId uint32 `protobuf:"varint,4,opt,name=reference_lsa_id,json=referenceLsaId" json:"reference_lsa_id,omitempty"`
	// Reference advertised router
	ReferenceAdvertisedRouter string `protobuf:"bytes,5,opt,name=reference_advertised_router,json=referenceAdvertisedRouter" json:"reference_advertised_router,omitempty"`
	// OSPFv3 prefix
	Prefix []*Ospfv3EdmPrefix `protobuf:"bytes,6,rep,name=prefix" json:"prefix,omitempty"`
}

func (m *Ospfv3EdmLsaPrefix) Reset()                    { *m = Ospfv3EdmLsaPrefix{} }
func (m *Ospfv3EdmLsaPrefix) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaPrefix) ProtoMessage()               {}
func (*Ospfv3EdmLsaPrefix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Ospfv3EdmLsaPrefix) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaPrefix) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaPrefix) GetReferenceType() string {
	if m != nil {
		return m.ReferenceType
	}
	return ""
}

func (m *Ospfv3EdmLsaPrefix) GetReferenceLsaId() uint32 {
	if m != nil {
		return m.ReferenceLsaId
	}
	return 0
}

func (m *Ospfv3EdmLsaPrefix) GetReferenceAdvertisedRouter() string {
	if m != nil {
		return m.ReferenceAdvertisedRouter
	}
	return ""
}

func (m *Ospfv3EdmLsaPrefix) GetPrefix() []*Ospfv3EdmPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

// OSPFv3 Router LSA Links
type Ospfv3EdmLink struct {
	// Type of link
	LinkType string `protobuf:"bytes,1,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// LSA link metric
	LinkMetric uint32 `protobuf:"varint,2,opt,name=link_metric,json=linkMetric" json:"link_metric,omitempty"`
	// LSA link interface ID
	LinkInterfaceId uint32 `protobuf:"varint,3,opt,name=link_interface_id,json=linkInterfaceId" json:"link_interface_id,omitempty"`
	// LSA link neighbor interface ID
	LinkNeighborInterfaceId uint32 `protobuf:"varint,4,opt,name=link_neighbor_interface_id,json=linkNeighborInterfaceId" json:"link_neighbor_interface_id,omitempty"`
	// LSA link neigbhor router id
	LinkNeighborRouterId uint32 `protobuf:"varint,5,opt,name=link_neighbor_router_id,json=linkNeighborRouterId" json:"link_neighbor_router_id,omitempty"`
}

func (m *Ospfv3EdmLink) Reset()                    { *m = Ospfv3EdmLink{} }
func (m *Ospfv3EdmLink) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLink) ProtoMessage()               {}
func (*Ospfv3EdmLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Ospfv3EdmLink) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *Ospfv3EdmLink) GetLinkMetric() uint32 {
	if m != nil {
		return m.LinkMetric
	}
	return 0
}

func (m *Ospfv3EdmLink) GetLinkInterfaceId() uint32 {
	if m != nil {
		return m.LinkInterfaceId
	}
	return 0
}

func (m *Ospfv3EdmLink) GetLinkNeighborInterfaceId() uint32 {
	if m != nil {
		return m.LinkNeighborInterfaceId
	}
	return 0
}

func (m *Ospfv3EdmLink) GetLinkNeighborRouterId() uint32 {
	if m != nil {
		return m.LinkNeighborRouterId
	}
	return 0
}

// OSPFv3 Router LSA Reverse-Path Forwarding Information
type Ospfv3EdmRpfPath struct {
	// RPF multicast next hop
	RpfMulticastNextHop uint32 `protobuf:"varint,1,opt,name=rpf_multicast_next_hop,json=rpfMulticastNextHop" json:"rpf_multicast_next_hop,omitempty"`
	// RPF multicast IDB
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *Ospfv3EdmRpfPath) Reset()                    { *m = Ospfv3EdmRpfPath{} }
func (m *Ospfv3EdmRpfPath) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmRpfPath) ProtoMessage()               {}
func (*Ospfv3EdmRpfPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Ospfv3EdmRpfPath) GetRpfMulticastNextHop() uint32 {
	if m != nil {
		return m.RpfMulticastNextHop
	}
	return 0
}

func (m *Ospfv3EdmRpfPath) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

// OSPFv3 Router LSA
type Ospfv3EdmLsaRouter struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// Router LA bits
	RouterLaBits uint32 `protobuf:"varint,3,opt,name=router_la_bits,json=routerLaBits" json:"router_la_bits,omitempty"`
	// List of links in this LSA
	LinkList []*Ospfv3EdmLink `protobuf:"bytes,4,rep,name=link_list,json=linkList" json:"link_list,omitempty"`
	// Router LSA Reverse-Path Forwarding information
	RpfPath *Ospfv3EdmRpfPath `protobuf:"bytes,5,opt,name=rpf_path,json=rpfPath" json:"rpf_path,omitempty"`
}

func (m *Ospfv3EdmLsaRouter) Reset()                    { *m = Ospfv3EdmLsaRouter{} }
func (m *Ospfv3EdmLsaRouter) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaRouter) ProtoMessage()               {}
func (*Ospfv3EdmLsaRouter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Ospfv3EdmLsaRouter) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaRouter) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaRouter) GetRouterLaBits() uint32 {
	if m != nil {
		return m.RouterLaBits
	}
	return 0
}

func (m *Ospfv3EdmLsaRouter) GetLinkList() []*Ospfv3EdmLink {
	if m != nil {
		return m.LinkList
	}
	return nil
}

func (m *Ospfv3EdmLsaRouter) GetRpfPath() *Ospfv3EdmRpfPath {
	if m != nil {
		return m.RpfPath
	}
	return nil
}

// OSPFv3 Unknown LSA Database Information
type Ospfv3EdmLsaUnknown struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// LSA interface name
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,4,opt,name=is_virtual_link,json=isVirtualLink" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,5,opt,name=virtual_link_id,json=virtualLinkId" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,6,opt,name=is_sham_link,json=isShamLink" json:"is_sham_link,omitempty"`
	// Shamlink ID
	ShamLinkId uint32 `protobuf:"varint,7,opt,name=sham_link_id,json=shamLinkId" json:"sham_link_id,omitempty"`
}

func (m *Ospfv3EdmLsaUnknown) Reset()                    { *m = Ospfv3EdmLsaUnknown{} }
func (m *Ospfv3EdmLsaUnknown) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmLsaUnknown) ProtoMessage()               {}
func (*Ospfv3EdmLsaUnknown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Ospfv3EdmLsaUnknown) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmLsaUnknown) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmLsaUnknown) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ospfv3EdmLsaUnknown) GetIsVirtualLink() bool {
	if m != nil {
		return m.IsVirtualLink
	}
	return false
}

func (m *Ospfv3EdmLsaUnknown) GetVirtualLinkId() uint32 {
	if m != nil {
		return m.VirtualLinkId
	}
	return 0
}

func (m *Ospfv3EdmLsaUnknown) GetIsShamLink() bool {
	if m != nil {
		return m.IsShamLink
	}
	return false
}

func (m *Ospfv3EdmLsaUnknown) GetShamLinkId() uint32 {
	if m != nil {
		return m.ShamLinkId
	}
	return 0
}

// OSPFv3 Database Information
type Ospfv3EdmDatabase struct {
	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail" json:"lsa_detail,omitempty"`
	// Number of links
	Links uint32 `protobuf:"varint,3,opt,name=links" json:"links,omitempty"`
	// Router LA bits
	RouterLaBits uint32 `protobuf:"varint,4,opt,name=router_la_bits,json=routerLaBits" json:"router_la_bits,omitempty"`
	// Reference type
	ReferenceType uint32 `protobuf:"varint,5,opt,name=reference_type,json=referenceType" json:"reference_type,omitempty"`
	// Reference LSA ID
	ReferenceLsaId uint32 `protobuf:"varint,6,opt,name=reference_lsa_id,json=referenceLsaId" json:"reference_lsa_id,omitempty"`
	// LSA router ID
	LsaRouterId uint32 `protobuf:"varint,7,opt,name=lsa_router_id,json=lsaRouterId" json:"lsa_router_id,omitempty"`
	// OSPFv3 address Prefix
	Prefix string `protobuf:"bytes,8,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,9,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// LSA interface name
	InterfaceName string `protobuf:"bytes,10,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,11,opt,name=is_virtual_link,json=isVirtualLink" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,12,opt,name=virtual_link_id,json=virtualLinkId" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,13,opt,name=is_sham_link,json=isShamLink" json:"is_sham_link,omitempty"`
	// Sham link ID
	ShamLinkId uint32 `protobuf:"varint,14,opt,name=sham_link_id,json=shamLinkId" json:"sham_link_id,omitempty"`
}

func (m *Ospfv3EdmDatabase) Reset()                    { *m = Ospfv3EdmDatabase{} }
func (m *Ospfv3EdmDatabase) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmDatabase) ProtoMessage()               {}
func (*Ospfv3EdmDatabase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Ospfv3EdmDatabase) GetLsaHeader() *Ospfv3EdmDbHeader {
	if m != nil {
		return m.LsaHeader
	}
	return nil
}

func (m *Ospfv3EdmDatabase) GetLsaDetail() *Ospfv3EdmDbDetail {
	if m != nil {
		return m.LsaDetail
	}
	return nil
}

func (m *Ospfv3EdmDatabase) GetLinks() uint32 {
	if m != nil {
		return m.Links
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetRouterLaBits() uint32 {
	if m != nil {
		return m.RouterLaBits
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetReferenceType() uint32 {
	if m != nil {
		return m.ReferenceType
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetReferenceLsaId() uint32 {
	if m != nil {
		return m.ReferenceLsaId
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetLsaRouterId() uint32 {
	if m != nil {
		return m.LsaRouterId
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ospfv3EdmDatabase) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ospfv3EdmDatabase) GetIsVirtualLink() bool {
	if m != nil {
		return m.IsVirtualLink
	}
	return false
}

func (m *Ospfv3EdmDatabase) GetVirtualLinkId() uint32 {
	if m != nil {
		return m.VirtualLinkId
	}
	return 0
}

func (m *Ospfv3EdmDatabase) GetIsShamLink() bool {
	if m != nil {
		return m.IsShamLink
	}
	return false
}

func (m *Ospfv3EdmDatabase) GetShamLinkId() uint32 {
	if m != nil {
		return m.ShamLinkId
	}
	return 0
}

// Detail LSA information for an LSA
type Ospfv3LsaInfoUnion struct {
	LsaInfoType string `protobuf:"bytes,1,opt,name=lsa_info_type,json=lsaInfoType" json:"lsa_info_type,omitempty"`
	// Summary information of LSAs
	LsaSummaryInfo *Ospfv3EdmDatabase `protobuf:"bytes,2,opt,name=lsa_summary_info,json=lsaSummaryInfo" json:"lsa_summary_info,omitempty"`
	// Router LSA
	RouterLsaType *Ospfv3EdmLsaRouter `protobuf:"bytes,3,opt,name=router_lsa_type,json=routerLsaType" json:"router_lsa_type,omitempty"`
	// Network LSA
	NetworkLsaType *Ospfv3EdmLsaNetwork `protobuf:"bytes,4,opt,name=network_lsa_type,json=networkLsaType" json:"network_lsa_type,omitempty"`
	// Inter Area Prefix LSA
	InterAreaPrefixLsaType *Ospfv3EdmLsaIapfx `protobuf:"bytes,5,opt,name=inter_area_prefix_lsa_type,json=interAreaPrefixLsaType" json:"inter_area_prefix_lsa_type,omitempty"`
	// Inter Area Router LSA
	InterAreaRouterLsaType *Ospfv3EdmLsaIartr `protobuf:"bytes,6,opt,name=inter_area_router_lsa_type,json=interAreaRouterLsaType" json:"inter_area_router_lsa_type,omitempty"`
	// External LSA
	ExternalLsaType *Ospfv3EdmLsaExternal `protobuf:"bytes,7,opt,name=external_lsa_type,json=externalLsaType" json:"external_lsa_type,omitempty"`
	// NSSA External LSA
	NssalsaType *Ospfv3EdmLsaExternal `protobuf:"bytes,8,opt,name=nssalsa_type,json=nssalsaType" json:"nssalsa_type,omitempty"`
	// Link LSA
	LinkLsaType *Ospfv3EdmLsaLink `protobuf:"bytes,9,opt,name=link_lsa_type,json=linkLsaType" json:"link_lsa_type,omitempty"`
	// Intra Area Prefix LSA
	IntraAreaPrefixLsaType *Ospfv3EdmLsaPrefix `protobuf:"bytes,10,opt,name=intra_area_prefix_lsa_type,json=intraAreaPrefixLsaType" json:"intra_area_prefix_lsa_type,omitempty"`
	// Grace LSA
	GraceLsa *Ospfv3EdmLsaGrace `protobuf:"bytes,11,opt,name=grace_lsa,json=graceLsa" json:"grace_lsa,omitempty"`
	// Unknown Link Scope LSA
	UnknownLinkLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,12,opt,name=unknown_link_lsa_type,json=unknownLinkLsaType" json:"unknown_link_lsa_type,omitempty"`
	// Unknown-Area scope LSA
	UnknownAreaLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,13,opt,name=unknown_area_lsa_type,json=unknownAreaLsaType" json:"unknown_area_lsa_type,omitempty"`
	// Unknown-AS scope LSA
	UnknownAslsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,14,opt,name=unknown_aslsa_type,json=unknownAslsaType" json:"unknown_aslsa_type,omitempty"`
	// Unknown LSA
	UnknownLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,15,opt,name=unknown_lsa_type,json=unknownLsaType" json:"unknown_lsa_type,omitempty"`
}

func (m *Ospfv3LsaInfoUnion) Reset()                    { *m = Ospfv3LsaInfoUnion{} }
func (m *Ospfv3LsaInfoUnion) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3LsaInfoUnion) ProtoMessage()               {}
func (*Ospfv3LsaInfoUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Ospfv3LsaInfoUnion) GetLsaInfoType() string {
	if m != nil {
		return m.LsaInfoType
	}
	return ""
}

func (m *Ospfv3LsaInfoUnion) GetLsaSummaryInfo() *Ospfv3EdmDatabase {
	if m != nil {
		return m.LsaSummaryInfo
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetRouterLsaType() *Ospfv3EdmLsaRouter {
	if m != nil {
		return m.RouterLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetNetworkLsaType() *Ospfv3EdmLsaNetwork {
	if m != nil {
		return m.NetworkLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetInterAreaPrefixLsaType() *Ospfv3EdmLsaIapfx {
	if m != nil {
		return m.InterAreaPrefixLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetInterAreaRouterLsaType() *Ospfv3EdmLsaIartr {
	if m != nil {
		return m.InterAreaRouterLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetExternalLsaType() *Ospfv3EdmLsaExternal {
	if m != nil {
		return m.ExternalLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetNssalsaType() *Ospfv3EdmLsaExternal {
	if m != nil {
		return m.NssalsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetLinkLsaType() *Ospfv3EdmLsaLink {
	if m != nil {
		return m.LinkLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetIntraAreaPrefixLsaType() *Ospfv3EdmLsaPrefix {
	if m != nil {
		return m.IntraAreaPrefixLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetGraceLsa() *Ospfv3EdmLsaGrace {
	if m != nil {
		return m.GraceLsa
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetUnknownLinkLsaType() *Ospfv3EdmLsaUnknown {
	if m != nil {
		return m.UnknownLinkLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetUnknownAreaLsaType() *Ospfv3EdmLsaUnknown {
	if m != nil {
		return m.UnknownAreaLsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetUnknownAslsaType() *Ospfv3EdmLsaUnknown {
	if m != nil {
		return m.UnknownAslsaType
	}
	return nil
}

func (m *Ospfv3LsaInfoUnion) GetUnknownLsaType() *Ospfv3EdmLsaUnknown {
	if m != nil {
		return m.UnknownLsaType
	}
	return nil
}

func init() {
	proto.RegisterType((*Ospfv3EdmDatabaseLsainfo_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_database_lsainfo_KEYS")
	proto.RegisterType((*Ospfv3EdmDatabaseLsainfo)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_database_lsainfo")
	proto.RegisterType((*Ospfv3EdmPrefix)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_prefix")
	proto.RegisterType((*Ospfv3EdmDbHeader)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header")
	proto.RegisterType((*Ospfv3EdmDbDetail)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail")
	proto.RegisterType((*Ospfv3EdmLsaExternal)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external")
	proto.RegisterType((*Ospfv3EdmLsaIapfx)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iapfx")
	proto.RegisterType((*Ospfv3EdmLsaIartr)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iartr")
	proto.RegisterType((*Ospfv3EdmLsaLink)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link")
	proto.RegisterType((*Ospfv3EdmLsaNetwork)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_network")
	proto.RegisterType((*Ospfv3EdmLsaGrace)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_grace")
	proto.RegisterType((*Ospfv3EdmLsaPrefix)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix")
	proto.RegisterType((*Ospfv3EdmLink)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_link")
	proto.RegisterType((*Ospfv3EdmRpfPath)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_rpf_path")
	proto.RegisterType((*Ospfv3EdmLsaRouter)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router")
	proto.RegisterType((*Ospfv3EdmLsaUnknown)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown")
	proto.RegisterType((*Ospfv3EdmDatabase)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_edm_database")
	proto.RegisterType((*Ospfv3LsaInfoUnion)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union")
}

func init() { proto.RegisterFile("ospfv3_edm_database_lsainfo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x57, 0x4f, 0x12, 0xc7, 0x2e, 0x7f, 0x24, 0xa9, 0xc9, 0x26, 0x9e, 0x0c, 0x30, 0x19, 0x33,
	0x2c, 0x11, 0x2c, 0xd1, 0x4e, 0x46, 0x20, 0xa1, 0x95, 0x90, 0xbc, 0xcc, 0xcc, 0xae, 0x85, 0x27,
	0x1b, 0x75, 0x46, 0x48, 0x9c, 0x4a, 0x15, 0x77, 0xb5, 0x5d, 0x4a, 0xbb, 0xab, 0xa7, 0xaa, 0xec,
	0x49, 0x8e, 0x08, 0xf1, 0x25, 0x81, 0xc4, 0x75, 0xa5, 0x95, 0x10, 0xe2, 0xe3, 0x80, 0x04, 0x42,
	0x42, 0x82, 0x0b, 0x17, 0x58, 0xfe, 0x85, 0xbd, 0x70, 0xe4, 0x1f, 0xe0, 0x5f, 0x40, 0xf5, 0xaa,
	0xaa, 0xdd, 0x8e, 0xad, 0xd9, 0x41, 0x0a, 0x1b, 0x1f, 0x7c, 0x99, 0x69, 0xbf, 0xf7, 0xaa, 0xfb,
	0xd7, 0xf5, 0x7e, 0xef, 0xa3, 0x5e, 0x07, 0xdd, 0x17, 0x2a, 0x8b, 0xc7, 0x8f, 0x08, 0x8b, 0x86,
	0x24, 0xa2, 0x9a, 0x9e, 0x51, 0xc5, 0x48, 0xa2, 0x28, 0x4f, 0x63, 0x71, 0x98, 0x49, 0xa1, 0x05,
	0xce, 0x7a, 0x5c, 0xf5, 0x04, 0xe1, 0x42, 0x91, 0x0b, 0x49, 0x78, 0x36, 0xfe, 0x06, 0x71, 0x8b,
	0x44, 0xc6, 0xe4, 0xa1, 0xbd, 0x36, 0xb6, 0x3d, 0xa6, 0x14, 0x53, 0xfe, 0xea, 0x70, 0x2c, 0x63,
	0xf8, 0xe7, 0x90, 0x4a, 0x46, 0x15, 0xfc, 0x7b, 0x98, 0x3f, 0x42, 0xd3, 0xb3, 0x84, 0x1d, 0x26,
	0x8a, 0x12, 0x9e, 0x6a, 0x26, 0x53, 0x9a, 0x4c, 0x44, 0xad, 0x0f, 0x6f, 0xa1, 0xfd, 0x57, 0xe0,
	0x22, 0xdf, 0x79, 0xf2, 0xbd, 0x53, 0x7c, 0x1f, 0xd5, 0xdc, 0x93, 0x48, 0x4a, 0x87, 0xac, 0x19,
	0xec, 0x07, 0x07, 0x95, 0xb0, 0xea, 0x64, 0xc7, 0x74, 0xc8, 0xf0, 0x1d, 0x54, 0x1e, 0xcb, 0xd8,
	0xaa, 0x6f, 0x81, 0x7a, 0x7d, 0x2c, 0x63, 0x50, 0xed, 0xa2, 0x75, 0x03, 0x88, 0xf0, 0xa8, 0xb9,
	0xb2, 0x1f, 0x1c, 0xd4, 0xc3, 0x92, 0xf9, 0xd9, 0x89, 0xf0, 0x1e, 0xaa, 0x38, 0x05, 0x79, 0xd8,
	0x5c, 0x05, 0xd5, 0xba, 0x55, 0x3d, 0x34, 0x8b, 0x12, 0x45, 0xf4, 0x65, 0xc6, 0x9a, 0x6b, 0x70,
	0xbb, 0x52, 0xa2, 0x9e, 0x5f, 0x66, 0x0c, 0x7f, 0x0d, 0x61, 0x1a, 0x8d, 0x99, 0xd4, 0x5c, 0xf1,
	0xb4, 0x4f, 0xa4, 0x18, 0x69, 0x26, 0x9b, 0x25, 0xb0, 0xd9, 0x2a, 0x68, 0x42, 0x50, 0xe0, 0xdb,
	0x68, 0x2d, 0x51, 0xe6, 0xd1, 0xeb, 0x70, 0xff, 0xd5, 0x44, 0x75, 0x22, 0xfc, 0x25, 0xd4, 0x80,
	0xad, 0x88, 0x69, 0x8f, 0x59, 0xc8, 0x65, 0x58, 0x5f, 0xcf, 0xa5, 0x06, 0x78, 0xeb, 0xe3, 0x00,
	0xdd, 0x7d, 0xc5, 0xde, 0xe0, 0x5f, 0x07, 0xa8, 0x6c, 0xb7, 0x35, 0x16, 0xcd, 0xa3, 0xfd, 0xe0,
	0xa0, 0x7a, 0xf4, 0xe3, 0xe0, 0xf0, 0xb3, 0x76, 0xa1, 0xbb, 0x25, 0xf1, 0x48, 0xc8, 0x28, 0xe5,
	0x22, 0x0d, 0xd7, 0x13, 0x45, 0x3b, 0x69, 0x2c, 0x5a, 0xff, 0x0e, 0xd0, 0x56, 0xe1, 0x2d, 0x32,
	0xc9, 0x62, 0x7e, 0x81, 0x77, 0x50, 0xc9, 0x5e, 0x39, 0x67, 0xba, 0x5f, 0xf8, 0x21, 0x7a, 0x43,
	0xa8, 0x8c, 0x18, 0x6b, 0x2b, 0x21, 0x09, 0x4b, 0xfb, 0x7a, 0x00, 0x4e, 0xad, 0x87, 0x58, 0xa8,
	0xec, 0xe9, 0xf8, 0xd1, 0x09, 0xa8, 0xba, 0xa0, 0xc1, 0x8f, 0xd0, 0xce, 0x95, 0x25, 0x22, 0xd3,
	0x5c, 0xa4, 0xca, 0xb9, 0xfb, 0x76, 0x71, 0xcd, 0x07, 0x56, 0x35, 0xe7, 0x39, 0x43, 0xa6, 0x25,
	0xef, 0x39, 0x1e, 0x4c, 0x3d, 0xe7, 0x19, 0x68, 0xf0, 0x1e, 0x2a, 0x67, 0x92, 0x0b, 0xc9, 0xf5,
	0xa5, 0xe3, 0x44, 0xfe, 0xbb, 0xf5, 0xaf, 0x5b, 0x68, 0xbb, 0xe8, 0xaa, 0x33, 0x32, 0x60, 0x34,
	0x62, 0xd2, 0xf0, 0xd2, 0x6c, 0x0c, 0x10, 0x29, 0xb0, 0x14, 0x4b, 0x14, 0x05, 0x26, 0x7d, 0x01,
	0x55, 0x8d, 0xca, 0x73, 0xd3, 0xb2, 0xb6, 0x92, 0x28, 0xda, 0xb6, 0xf4, 0x04, 0x0a, 0x52, 0x42,
	0xfb, 0xcc, 0xf3, 0xd6, 0xe8, 0xfa, 0x0c, 0x1f, 0xa0, 0x2d, 0xae, 0x48, 0x24, 0x48, 0x2a, 0xb4,
	0x51, 0x9b, 0xad, 0x07, 0xdc, 0xe5, 0xb0, 0xce, 0xd5, 0x63, 0x71, 0x2c, 0x74, 0xbb, 0xcf, 0xba,
	0x8a, 0x4e, 0xd8, 0xb7, 0x56, 0x60, 0xdf, 0xff, 0xc8, 0xe0, 0x2f, 0xa3, 0x0d, 0xc5, 0x5e, 0x8c,
	0x58, 0x6a, 0xb8, 0x3a, 0x1a, 0x9e, 0x31, 0xe9, 0xb8, 0xdc, 0xf0, 0xe2, 0x63, 0x90, 0x9a, 0xfd,
	0xe9, 0x0d, 0x58, 0xef, 0x5c, 0x8d, 0x86, 0xc0, 0xe7, 0x7a, 0x98, 0xff, 0xc6, 0xef, 0xa0, 0x3d,
	0xae, 0x48, 0x5f, 0xd2, 0x1e, 0x8b, 0x47, 0x09, 0x91, 0x4c, 0x69, 0x2a, 0x35, 0xa1, 0x3d, 0xcd,
	0xc7, 0xac, 0x59, 0x01, 0xec, 0xbb, 0x5c, 0xbd, 0xe7, 0x0c, 0x42, 0xab, 0x6f, 0x83, 0xba, 0xf5,
	0x8f, 0xd2, 0xd5, 0xcd, 0x8d, 0x98, 0xa6, 0x3c, 0xc1, 0x6f, 0x21, 0xac, 0x58, 0x4f, 0xa4, 0x91,
	0x65, 0x23, 0xe1, 0x69, 0xc4, 0x2e, 0xdc, 0x36, 0x6f, 0x5a, 0xcd, 0x73, 0xa3, 0xe8, 0x18, 0xb9,
	0xb1, 0x1e, 0xf2, 0x74, 0xa4, 0xd9, 0x94, 0xb5, 0xe5, 0xd5, 0xa6, 0xd5, 0x14, 0xac, 0xef, 0xa2,
	0x4a, 0x2c, 0x19, 0x23, 0x9a, 0x0f, 0xfd, 0xfe, 0x97, 0x8d, 0xe0, 0x39, 0x1f, 0x32, 0xfc, 0x79,
	0x84, 0x8c, 0x07, 0x58, 0xc2, 0x34, 0x8b, 0xdc, 0xd6, 0x57, 0xb8, 0x7a, 0x6c, 0x05, 0xf8, 0x01,
	0x6a, 0x70, 0x05, 0x1b, 0x6b, 0x36, 0xf8, 0x8c, 0x6b, 0xd8, 0xff, 0x72, 0x58, 0xe3, 0x2a, 0xb4,
	0xc2, 0x77, 0xb9, 0xc6, 0x4f, 0xd0, 0x3d, 0xae, 0xc8, 0xac, 0x2b, 0x88, 0x64, 0xb4, 0x37, 0x30,
	0x48, 0xc0, 0x29, 0xe5, 0xf0, 0x73, 0x5c, 0xb5, 0xaf, 0xba, 0x25, 0xf4, 0x36, 0x78, 0x1f, 0xd5,
	0xb8, 0x22, 0xa9, 0x70, 0x70, 0xc0, 0x39, 0xe5, 0x10, 0x71, 0x75, 0x2c, 0x2c, 0x1e, 0xfc, 0x36,
	0xda, 0x36, 0x16, 0x8c, 0xf7, 0x07, 0x67, 0x42, 0x12, 0x76, 0xd1, 0x1b, 0xd0, 0xb4, 0x6f, 0x93,
	0x4e, 0x39, 0xc4, 0x5c, 0x1d, 0x3b, 0xd5, 0x13, 0xa7, 0xc1, 0x07, 0x68, 0xb3, 0xf0, 0x02, 0xb0,
	0x5d, 0xce, 0x49, 0x8d, 0xfc, 0x15, 0x60, 0xaf, 0x0c, 0x3b, 0xcc, 0x4b, 0xf4, 0xce, 0x53, 0xf1,
	0x32, 0x61, 0x51, 0x9f, 0x45, 0x4d, 0xe4, 0x0d, 0xdb, 0x05, 0x29, 0x7e, 0x13, 0x0c, 0x87, 0xf4,
	0x82, 0x0f, 0x47, 0x43, 0xc3, 0xda, 0xa8, 0x59, 0xf5, 0x94, 0x7d, 0x66, 0xa5, 0xed, 0x7e, 0xbe,
	0x77, 0x19, 0x95, 0x9a, 0xd3, 0x84, 0xa8, 0x2c, 0x6e, 0xd6, 0xfc, 0xde, 0x9d, 0x58, 0xe1, 0x69,
	0x16, 0x3b, 0x80, 0x71, 0x22, 0x44, 0x44, 0x32, 0x96, 0x46, 0x3c, 0xed, 0x37, 0xeb, 0xfe, 0xb9,
	0x4f, 0x8d, 0xf8, 0xc4, 0x4a, 0x8d, 0xab, 0x24, 0xd5, 0x8c, 0x24, 0x7c, 0xc8, 0x75, 0xb3, 0x61,
	0x5d, 0x65, 0x24, 0x5d, 0x23, 0xc0, 0x5f, 0x45, 0xd8, 0xec, 0x8d, 0x92, 0xe6, 0x1d, 0xf2, 0x5b,
	0x6d, 0x80, 0xd9, 0x06, 0x57, 0xc7, 0x4a, 0xb6, 0x7b, 0xe7, 0xfe, 0x5e, 0x6f, 0x21, 0x6c, 0x2c,
	0xed, 0x63, 0x25, 0x7b, 0x31, 0xe2, 0x92, 0x45, 0xcd, 0x4d, 0x30, 0xde, 0x4c, 0x95, 0x84, 0x07,
	0x87, 0x4e, 0x8e, 0xdf, 0x43, 0xf7, 0x4d, 0xfc, 0x4e, 0x5b, 0x93, 0x4c, 0x28, 0x4d, 0x62, 0xca,
	0x13, 0x22, 0xc6, 0x4c, 0x36, 0xb7, 0xac, 0x87, 0x13, 0x45, 0xa7, 0x16, 0x9f, 0x08, 0xa5, 0x9f,
	0x52, 0x9e, 0x7c, 0x30, 0x66, 0xd2, 0xbc, 0x82, 0xb9, 0x91, 0x4b, 0x84, 0x18, 0xb8, 0x68, 0xf2,
	0x84, 0xcb, 0x7f, 0x0f, 0x50, 0xc3, 0xa8, 0xd5, 0x65, 0xda, 0x23, 0x4a, 0x53, 0xcd, 0x9a, 0xb7,
	0x21, 0x96, 0x6b, 0x89, 0xa2, 0xa7, 0x97, 0x69, 0xef, 0xd4, 0xc8, 0x5a, 0x3f, 0x5f, 0x43, 0xbb,
	0x85, 0x20, 0x32, 0x2b, 0xd8, 0x85, 0xcd, 0xe5, 0xf8, 0x77, 0x81, 0x7d, 0x82, 0xcd, 0x59, 0x10,
	0x40, 0xd5, 0xa3, 0x1f, 0xdd, 0x5c, 0x29, 0x99, 0x4a, 0xa1, 0xf0, 0xaa, 0xef, 0xdb, 0x6c, 0xea,
	0x81, 0xda, 0xf8, 0x87, 0xd8, 0x5d, 0x04, 0xa0, 0x16, 0x0e, 0x00, 0x7d, 0x6c, 0x33, 0xd3, 0xa4,
	0xbc, 0xad, 0x4c, 0x95, 0xb7, 0x2f, 0xa2, 0xfa, 0x74, 0x59, 0xb3, 0xe5, 0xa6, 0x96, 0x15, 0x0b,
	0xda, 0x3d, 0x54, 0xb5, 0xc5, 0xa8, 0xd8, 0x7f, 0x20, 0x2b, 0x82, 0xca, 0x71, 0x07, 0x95, 0xb5,
	0x50, 0xa4, 0x27, 0x94, 0x86, 0x14, 0x51, 0x0f, 0xd7, 0xb5, 0x50, 0xdf, 0x16, 0x4a, 0xe3, 0x6f,
	0xa2, 0x3b, 0x26, 0x30, 0x84, 0x7c, 0x49, 0xa5, 0xe1, 0x2c, 0xa1, 0x51, 0x24, 0x4d, 0xe3, 0xa4,
	0x98, 0x76, 0xa9, 0x61, 0x87, 0xab, 0xa7, 0xb9, 0xbe, 0x6d, 0xd5, 0xa7, 0x4c, 0x9b, 0xba, 0x30,
	0xbb, 0xce, 0x75, 0x26, 0x5b, 0xf1, 0xd5, 0x15, 0xa6, 0x29, 0xf3, 0x04, 0x22, 0x9a, 0xf6, 0x21,
	0x3f, 0xd4, 0xc3, 0xaa, 0x97, 0x3d, 0xa7, 0xfd, 0xa9, 0x8a, 0x89, 0xae, 0x54, 0xcc, 0xbf, 0xaf,
	0x4c, 0x25, 0x75, 0xd8, 0x67, 0x9a, 0xc5, 0x17, 0x4b, 0x32, 0x2e, 0x16, 0x19, 0x5f, 0xd5, 0xf5,
	0xfc, 0x6c, 0x9e, 0x0f, 0xa5, 0x96, 0x4b, 0x1f, 0x5e, 0xbb, 0x0f, 0x5b, 0xa8, 0x6e, 0x56, 0xba,
	0x0e, 0x21, 0x3f, 0xca, 0x98, 0x0e, 0xd2, 0x36, 0x04, 0x9d, 0xa8, 0xf5, 0x8b, 0x12, 0xba, 0x7d,
	0xc5, 0x1d, 0x09, 0x4f, 0xcf, 0x97, 0xde, 0xb8, 0x76, 0x6f, 0xcc, 0x1e, 0xe0, 0x56, 0xe6, 0x1c,
	0xe0, 0x5c, 0xcf, 0x33, 0xe6, 0x52, 0x8f, 0x68, 0x02, 0xbe, 0x98, 0xb4, 0xe9, 0xdf, 0xb5, 0xd2,
	0xae, 0x71, 0xd0, 0x9b, 0x68, 0xa3, 0x68, 0x34, 0x69, 0xd8, 0xeb, 0xe3, 0x89, 0x55, 0x27, 0x72,
	0xad, 0x9e, 0x1a, 0xd0, 0xa1, 0xbd, 0x59, 0xc9, 0xb7, 0x7a, 0xa7, 0x03, 0x3a, 0x84, 0x3b, 0xed,
	0xa3, 0x5a, 0xae, 0x9e, 0x9c, 0x3a, 0x91, 0x72, 0xfa, 0x4e, 0xe4, 0xbb, 0x05, 0x30, 0x48, 0x44,
	0x8f, 0x26, 0x2e, 0xc3, 0x9b, 0x6e, 0xc1, 0x98, 0x74, 0x8d, 0xcc, 0xb4, 0x75, 0x8e, 0x6a, 0x79,
	0xf0, 0xdb, 0xfc, 0xde, 0xb0, 0xe2, 0x13, 0x27, 0xc5, 0x1f, 0x05, 0x79, 0x72, 0x41, 0xfb, 0x2b,
	0x07, 0xd5, 0xa3, 0x1f, 0xdc, 0xac, 0xbb, 0x2c, 0x16, 0x9f, 0xe2, 0x5a, 0x1f, 0xad, 0xc0, 0xe1,
	0xb0, 0x18, 0x12, 0x29, 0xd3, 0x2f, 0x85, 0x5c, 0x46, 0xc5, 0xf5, 0x47, 0xc5, 0xdb, 0x68, 0x3b,
	0x3f, 0x64, 0x38, 0xf6, 0x24, 0x5c, 0xe9, 0xe6, 0xca, 0xfe, 0xca, 0x41, 0x2d, 0xc4, 0x5e, 0x67,
	0xf3, 0x55, 0x97, 0x2b, 0xdd, 0xfa, 0xe3, 0x6c, 0x01, 0x81, 0x33, 0xe2, 0xd2, 0x39, 0xd7, 0xee,
	0x9c, 0xfb, 0xa8, 0x06, 0x5b, 0x4b, 0x32, 0x26, 0xb9, 0xc8, 0xeb, 0x07, 0xc8, 0x4e, 0x40, 0x34,
	0x31, 0x31, 0xcf, 0x16, 0x29, 0xe4, 0xaa, 0x8a, 0x33, 0x09, 0x41, 0xd4, 0xfa, 0x70, 0x0d, 0xe6,
	0x26, 0x45, 0x87, 0xb9, 0x66, 0x62, 0xe9, 0xb1, 0xff, 0x43, 0x91, 0x91, 0x2c, 0x66, 0x12, 0x26,
	0x2f, 0x70, 0x12, 0x70, 0x45, 0x26, 0x97, 0xc2, 0x61, 0xe0, 0x00, 0x6d, 0x4e, 0xcc, 0xe0, 0x51,
	0x91, 0x6b, 0xe4, 0x26, 0xcb, 0xbb, 0x8a, 0x76, 0x22, 0xfc, 0x2d, 0x74, 0x77, 0x62, 0xe9, 0xe7,
	0x0e, 0x2c, 0xf2, 0x13, 0x20, 0xdb, 0xdd, 0xdd, 0xc9, 0x4d, 0xda, 0xb9, 0x85, 0x9b, 0x04, 0x15,
	0x72, 0x7d, 0x69, 0x01, 0x73, 0xfd, 0x7f, 0x02, 0xb4, 0x51, 0xe4, 0xa6, 0xa9, 0x87, 0x77, 0x51,
	0x05, 0x2a, 0x5d, 0x3e, 0x7f, 0xab, 0x84, 0x65, 0x23, 0x80, 0x9d, 0xbb, 0x87, 0xaa, 0xa0, 0x74,
	0x93, 0x3f, 0x3b, 0x09, 0x42, 0x46, 0xe4, 0x26, 0x7e, 0x5f, 0x41, 0x5b, 0xb6, 0x90, 0xe6, 0xb5,
	0x3e, 0x6f, 0xbc, 0x36, 0x8c, 0xa2, 0xe3, 0xe5, 0x9d, 0x08, 0xbf, 0x83, 0xf6, 0xc0, 0x36, 0xcf,
	0x80, 0x53, 0x8b, 0xac, 0x43, 0x76, 0x8d, 0x85, 0x1f, 0xb6, 0x14, 0x17, 0x7f, 0x1d, 0xed, 0x4e,
	0x2f, 0x9e, 0xf4, 0x79, 0xb6, 0x11, 0xd8, 0x2e, 0xae, 0xcc, 0x1b, 0xbe, 0x17, 0x53, 0xfd, 0x9e,
	0xcc, 0x62, 0x92, 0x51, 0x3b, 0x10, 0x35, 0xd7, 0xc3, 0x51, 0xa2, 0x79, 0x8f, 0x2a, 0x4d, 0x52,
	0x76, 0xa1, 0xc9, 0x40, 0x64, 0x6e, 0x34, 0x76, 0x5b, 0x66, 0xf1, 0x33, 0xaf, 0x3c, 0x66, 0x17,
	0xfa, 0x7d, 0x91, 0xcd, 0x69, 0x69, 0x6e, 0xcd, 0x9b, 0x49, 0x7f, 0x32, 0x9b, 0x00, 0x2c, 0xd6,
	0x65, 0x02, 0xb8, 0xf6, 0x04, 0xf0, 0x00, 0x35, 0x7c, 0x19, 0xa5, 0xe4, 0x8c, 0x6b, 0x3f, 0xd0,
	0xae, 0x59, 0x69, 0x97, 0xbe, 0xcb, 0xb5, 0xc2, 0xbf, 0x0c, 0x1c, 0xc7, 0xa1, 0xd6, 0xae, 0x42,
	0x60, 0x7e, 0xff, 0x66, 0xdf, 0xc6, 0xc0, 0xb1, 0x71, 0x66, 0xaa, 0x3c, 0xfe, 0x55, 0x80, 0xca,
	0x9e, 0x9c, 0xc0, 0xe7, 0xea, 0xd1, 0x0f, 0x6f, 0x16, 0xa0, 0x47, 0x13, 0xae, 0xcb, 0x2c, 0x3e,
	0xa1, 0x7a, 0xd0, 0xfa, 0xed, 0xea, 0x4c, 0xa3, 0x38, 0x4a, 0xcf, 0x53, 0xf1, 0x32, 0x5d, 0x12,
	0x7b, 0x79, 0x7c, 0xca, 0x8f, 0x4f, 0x57, 0xcf, 0xd8, 0x7e, 0x3f, 0x96, 0x24, 0xb9, 0x76, 0x92,
	0x6c, 0xa3, 0x35, 0xe3, 0x06, 0x9f, 0xf4, 0xec, 0x8f, 0x39, 0x39, 0x71, 0x75, 0x4e, 0x4e, 0x9c,
	0x6d, 0x9d, 0x1c, 0x21, 0x3e, 0xbd, 0x75, 0x2a, 0xcd, 0x6d, 0x9d, 0x66, 0xc6, 0x2f, 0xeb, 0x33,
	0xe3, 0x97, 0xc2, 0x98, 0xad, 0xfc, 0xea, 0x31, 0x5b, 0x65, 0xce, 0x98, 0x6d, 0x36, 0x24, 0xd0,
	0x6b, 0x86, 0x44, 0xf5, 0x35, 0x43, 0xa2, 0xf6, 0x3a, 0x21, 0x51, 0xff, 0xd4, 0x90, 0x68, 0xcc,
	0x84, 0xc4, 0x27, 0xdb, 0x79, 0x4b, 0x30, 0xfd, 0x0d, 0xd8, 0xef, 0x1a, 0x48, 0x0a, 0x1d, 0x58,
	0xd5, 0x7d, 0x1a, 0x06, 0x1f, 0xfc, 0x29, 0x40, 0x9b, 0xf0, 0xf9, 0x62, 0x34, 0x1c, 0x52, 0x79,
	0x69, 0x3f, 0x66, 0xdf, 0x5a, 0x84, 0x22, 0xe1, 0x17, 0x84, 0x8d, 0x44, 0xd1, 0x53, 0x0b, 0xcf,
	0xc0, 0x36, 0x90, 0xfd, 0x74, 0x24, 0xff, 0xb6, 0xbb, 0x72, 0xd3, 0x9f, 0xdf, 0xa7, 0xbb, 0xb1,
	0xb0, 0xee, 0xe2, 0xc1, 0x7d, 0x6b, 0xfe, 0x73, 0x80, 0x36, 0xdd, 0xe0, 0x63, 0x82, 0x79, 0x15,
	0x30, 0xff, 0xe4, 0xe6, 0x31, 0x3b, 0x64, 0x61, 0xc3, 0x5d, 0x78, 0xd4, 0x1f, 0x07, 0x68, 0x0f,
	0x56, 0xdb, 0x8f, 0xe4, 0x3e, 0x8a, 0x3c, 0xfe, 0xb5, 0x45, 0xc8, 0x5d, 0xf9, 0x87, 0x8b, 0x70,
	0x07, 0x0c, 0xdb, 0x92, 0x51, 0xf7, 0xe7, 0x09, 0xf3, 0xdf, 0xe2, 0x2a, 0x73, 0x4a, 0x8b, 0xf3,
	0x16, 0x52, 0xcb, 0xc2, 0x5b, 0x84, 0x53, 0x0c, 0xfa, 0x4b, 0x80, 0xb6, 0xf2, 0xef, 0x3d, 0x39,
	0xf8, 0x75, 0x00, 0xff, 0xd3, 0x9b, 0x07, 0xef, 0xa1, 0x85, 0x1b, 0xfe, 0xca, 0x03, 0xff, 0x43,
	0x80, 0x6a, 0xa9, 0x52, 0x34, 0xc7, 0x5c, 0x5e, 0x38, 0xcc, 0x55, 0x87, 0x0f, 0xf0, 0xfe, 0x3e,
	0x40, 0x75, 0xdb, 0xcf, 0x7b, 0xc0, 0x95, 0x45, 0xc8, 0x86, 0x7e, 0x68, 0x1c, 0xc2, 0x99, 0xd9,
	0x6f, 0xee, 0x3f, 0x2d, 0xb7, 0x25, 0x9d, 0x1f, 0xa1, 0x68, 0x51, 0xb2, 0xa2, 0x1b, 0x15, 0xec,
	0x00, 0xd6, 0xd9, 0x10, 0xfd, 0x4d, 0x80, 0x2a, 0x76, 0xf4, 0x95, 0x28, 0x0a, 0x15, 0x75, 0x21,
	0x22, 0xd2, 0x4e, 0xde, 0xca, 0xf0, 0x5f, 0x57, 0x51, 0xfc, 0xb7, 0x00, 0xbd, 0xe1, 0x4e, 0x25,
	0x64, 0x9a, 0x22, 0xb5, 0x45, 0x49, 0xe5, 0x0e, 0x5e, 0x88, 0xdd, 0x45, 0xb7, 0x40, 0x96, 0x22,
	0x7c, 0xa0, 0x4b, 0x0e, 0xbf, 0xbe, 0xa8, 0xf0, 0x0d, 0x55, 0x3c, 0xfc, 0xbf, 0x06, 0x08, 0xe7,
	0xf0, 0x55, 0x8e, 0xbd, 0xb1, 0x68, 0xd8, 0x37, 0x3d, 0x76, 0x95, 0x14, 0xaa, 0x7f, 0xce, 0x1b,
	0x8f, 0x7b, 0x63, 0xd1, 0x70, 0x37, 0x3c, 0x65, 0x2c, 0xea, 0xb3, 0x12, 0xfc, 0x4d, 0xea, 0xa3,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x05, 0xe4, 0x93, 0x55, 0xb8, 0x2a, 0x00, 0x00,
}
