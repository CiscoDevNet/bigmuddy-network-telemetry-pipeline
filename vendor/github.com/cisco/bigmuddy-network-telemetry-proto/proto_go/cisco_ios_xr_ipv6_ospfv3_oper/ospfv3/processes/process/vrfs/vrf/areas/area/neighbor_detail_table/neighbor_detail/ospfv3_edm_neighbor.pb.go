// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_neighbor.proto

/*
Package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_areas_area_neighbor_detail_table_neighbor_detail is a generated protocol buffer package.

It is generated from these files:
	ospfv3_edm_neighbor.proto

It has these top-level messages:
	Ospfv3EdmNeighbor_KEYS
	Ospfv3EdmNeighbor
	Ospfv3EdmNeighborRetrans
	Ospfv3EdmNeighborBfd
	Ospfv3EdmNeighborDetail
*/
package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_areas_area_neighbor_detail_table_neighbor_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPFv3 neighbor summary information
type Ospfv3EdmNeighbor_KEYS struct {
	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AreaId          uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	InterfaceName   string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,5,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *Ospfv3EdmNeighbor_KEYS) Reset()                    { *m = Ospfv3EdmNeighbor_KEYS{} }
func (m *Ospfv3EdmNeighbor_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighbor_KEYS) ProtoMessage()               {}
func (*Ospfv3EdmNeighbor_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ospfv3EdmNeighbor_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Ospfv3EdmNeighbor_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ospfv3EdmNeighbor_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *Ospfv3EdmNeighbor_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ospfv3EdmNeighbor_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type Ospfv3EdmNeighbor struct {
	// Neighbor IP Address
	NeighborAddress string `protobuf:"bytes,50,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Neighbor interface ID
	NeighborInterfaceId uint32 `protobuf:"varint,51,opt,name=neighbor_interface_id,json=neighborInterfaceId" json:"neighbor_interface_id,omitempty"`
	// Neighbor's DR priority
	NeighborDrPriority uint32 `protobuf:"varint,52,opt,name=neighbor_dr_priority,json=neighborDrPriority" json:"neighbor_dr_priority,omitempty"`
	// Neighbor's state
	NeighborState string `protobuf:"bytes,53,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	// Designated router
	NeighborDesignatedRouter string `protobuf:"bytes,54,opt,name=neighbor_designated_router,json=neighborDesignatedRouter" json:"neighbor_designated_router,omitempty"`
	// Time until neighbor's dead timer expires (seconds)
	NeighborDeadTimer uint32 `protobuf:"varint,55,opt,name=neighbor_dead_timer,json=neighborDeadTimer" json:"neighbor_dead_timer,omitempty"`
	// Amount of time since the adjacency is up (seconds)
	NeighborUpTime uint32 `protobuf:"varint,56,opt,name=neighbor_up_time,json=neighborUpTime" json:"neighbor_up_time,omitempty"`
	// Neighbor virtual link id
	NeighborVirtualLinkId uint32 `protobuf:"varint,57,opt,name=neighbor_virtual_link_id,json=neighborVirtualLinkId" json:"neighbor_virtual_link_id,omitempty"`
	// If true, neighbor is on a virtual link
	IsNeighborVirtualLink bool `protobuf:"varint,58,opt,name=is_neighbor_virtual_link,json=isNeighborVirtualLink" json:"is_neighbor_virtual_link,omitempty"`
	// Neighbor sham link id
	NeighborShamLinkId uint32 `protobuf:"varint,59,opt,name=neighbor_sham_link_id,json=neighborShamLinkId" json:"neighbor_sham_link_id,omitempty"`
	// If true, neighbor is on a sham link
	IsNeighborShamLink bool `protobuf:"varint,60,opt,name=is_neighbor_sham_link,json=isNeighborShamLink" json:"is_neighbor_sham_link,omitempty"`
	// Detailed OSPFv3 neighbor information
	NeighborDetail *Ospfv3EdmNeighborDetail `protobuf:"bytes,61,opt,name=neighbor_detail,json=neighborDetail" json:"neighbor_detail,omitempty"`
	// Neighbor BFD information
	NeighborBfdInfo *Ospfv3EdmNeighborBfd `protobuf:"bytes,62,opt,name=neighbor_bfd_info,json=neighborBfdInfo" json:"neighbor_bfd_info,omitempty"`
}

func (m *Ospfv3EdmNeighbor) Reset()                    { *m = Ospfv3EdmNeighbor{} }
func (m *Ospfv3EdmNeighbor) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighbor) ProtoMessage()               {}
func (*Ospfv3EdmNeighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ospfv3EdmNeighbor) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *Ospfv3EdmNeighbor) GetNeighborInterfaceId() uint32 {
	if m != nil {
		return m.NeighborInterfaceId
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetNeighborDrPriority() uint32 {
	if m != nil {
		return m.NeighborDrPriority
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetNeighborState() string {
	if m != nil {
		return m.NeighborState
	}
	return ""
}

func (m *Ospfv3EdmNeighbor) GetNeighborDesignatedRouter() string {
	if m != nil {
		return m.NeighborDesignatedRouter
	}
	return ""
}

func (m *Ospfv3EdmNeighbor) GetNeighborDeadTimer() uint32 {
	if m != nil {
		return m.NeighborDeadTimer
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetNeighborUpTime() uint32 {
	if m != nil {
		return m.NeighborUpTime
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetNeighborVirtualLinkId() uint32 {
	if m != nil {
		return m.NeighborVirtualLinkId
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetIsNeighborVirtualLink() bool {
	if m != nil {
		return m.IsNeighborVirtualLink
	}
	return false
}

func (m *Ospfv3EdmNeighbor) GetNeighborShamLinkId() uint32 {
	if m != nil {
		return m.NeighborShamLinkId
	}
	return 0
}

func (m *Ospfv3EdmNeighbor) GetIsNeighborShamLink() bool {
	if m != nil {
		return m.IsNeighborShamLink
	}
	return false
}

func (m *Ospfv3EdmNeighbor) GetNeighborDetail() *Ospfv3EdmNeighborDetail {
	if m != nil {
		return m.NeighborDetail
	}
	return nil
}

func (m *Ospfv3EdmNeighbor) GetNeighborBfdInfo() *Ospfv3EdmNeighborBfd {
	if m != nil {
		return m.NeighborBfdInfo
	}
	return nil
}

// OSPFv3 neighbor retransmission information
type Ospfv3EdmNeighborRetrans struct {
	// Number of database descriptor retransmissions during last exchange
	DatabaseDescriptorRetransmissions uint32 `protobuf:"varint,1,opt,name=database_descriptor_retransmissions,json=databaseDescriptorRetransmissions" json:"database_descriptor_retransmissions,omitempty"`
	// Area scope LSA's flood index
	AreaFloodIndex uint32 `protobuf:"varint,2,opt,name=area_flood_index,json=areaFloodIndex" json:"area_flood_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,3,opt,name=as_flood_index,json=asFloodIndex" json:"as_flood_index,omitempty"`
	// Link flood index
	LinkFloodIndex uint32 `protobuf:"varint,4,opt,name=link_flood_index,json=linkFloodIndex" json:"link_flood_index,omitempty"`
	// Number of neighbor retransmissions
	NeighborRetransmissions uint32 `protobuf:"varint,5,opt,name=neighbor_retransmissions,json=neighborRetransmissions" json:"neighbor_retransmissions,omitempty"`
	// Number of retransmissions for this neighbor
	Retransmissions uint32 `protobuf:"varint,6,opt,name=retransmissions" json:"retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFlood uint32 `protobuf:"varint,7,opt,name=area_first_flood,json=areaFirstFlood" json:"area_first_flood,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_index,json=areaFirstFloodIndex" json:"area_first_flood_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFlood uint32 `protobuf:"varint,9,opt,name=as_first_flood,json=asFirstFlood" json:"as_first_flood,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_index,json=asFirstFloodIndex" json:"as_first_flood_index,omitempty"`
	// Link first flood information
	LinkFirstFlood uint32 `protobuf:"varint,11,opt,name=link_first_flood,json=linkFirstFlood" json:"link_first_flood,omitempty"`
	// Link first flood information index
	LinkFirstFloodIndex uint32 `protobuf:"varint,12,opt,name=link_first_flood_index,json=linkFirstFloodIndex" json:"link_first_flood_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFlood uint32 `protobuf:"varint,13,opt,name=area_next_flood,json=areaNextFlood" json:"area_next_flood,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodIndex uint32 `protobuf:"varint,14,opt,name=area_next_flood_index,json=areaNextFloodIndex" json:"area_next_flood_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFlood uint32 `protobuf:"varint,15,opt,name=as_next_flood,json=asNextFlood" json:"as_next_flood,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodIndex uint32 `protobuf:"varint,16,opt,name=as_next_flood_index,json=asNextFloodIndex" json:"as_next_flood_index,omitempty"`
	// Link next flood information
	LinkNextFlood uint32 `protobuf:"varint,17,opt,name=link_next_flood,json=linkNextFlood" json:"link_next_flood,omitempty"`
	// Link next flood information index
	LinkNextFloodIndex uint32 `protobuf:"varint,18,opt,name=link_next_flood_index,json=linkNextFloodIndex" json:"link_next_flood_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,19,opt,name=last_retransmission_length,json=lastRetransmissionLength" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,20,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,21,opt,name=last_retransmission_time,json=lastRetransmissionTime" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,22,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,23,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer" json:"lsa_retransmission_timer,omitempty"`
}

func (m *Ospfv3EdmNeighborRetrans) Reset()                    { *m = Ospfv3EdmNeighborRetrans{} }
func (m *Ospfv3EdmNeighborRetrans) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighborRetrans) ProtoMessage()               {}
func (*Ospfv3EdmNeighborRetrans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ospfv3EdmNeighborRetrans) GetDatabaseDescriptorRetransmissions() uint32 {
	if m != nil {
		return m.DatabaseDescriptorRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFloodIndex() uint32 {
	if m != nil {
		return m.AreaFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFloodIndex() uint32 {
	if m != nil {
		return m.AsFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFloodIndex() uint32 {
	if m != nil {
		return m.LinkFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetNeighborRetransmissions() uint32 {
	if m != nil {
		return m.NeighborRetransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetRetransmissions() uint32 {
	if m != nil {
		return m.Retransmissions
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFlood() uint32 {
	if m != nil {
		return m.AreaFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaFirstFloodIndex() uint32 {
	if m != nil {
		return m.AreaFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFlood() uint32 {
	if m != nil {
		return m.AsFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsFirstFloodIndex() uint32 {
	if m != nil {
		return m.AsFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFlood() uint32 {
	if m != nil {
		return m.LinkFirstFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkFirstFloodIndex() uint32 {
	if m != nil {
		return m.LinkFirstFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFlood() uint32 {
	if m != nil {
		return m.AreaNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAreaNextFloodIndex() uint32 {
	if m != nil {
		return m.AreaNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFlood() uint32 {
	if m != nil {
		return m.AsNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetAsNextFloodIndex() uint32 {
	if m != nil {
		return m.AsNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFlood() uint32 {
	if m != nil {
		return m.LinkNextFlood
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLinkNextFloodIndex() uint32 {
	if m != nil {
		return m.LinkNextFloodIndex
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if m != nil {
		return m.LastRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if m != nil {
		return m.MaximumRetransmissionLength
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if m != nil {
		return m.LastRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *Ospfv3EdmNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if m != nil {
		return m.LsaRetransmissionTimer
	}
	return 0
}

// OSPFv3 Neighbor BFD information
type Ospfv3EdmNeighborBfd struct {
	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode" json:"bfd_intf_enable_mode,omitempty"`
	// Status of the BFD Session
	BfdStatusFlag uint32 `protobuf:"varint,2,opt,name=bfd_status_flag,json=bfdStatusFlag" json:"bfd_status_flag,omitempty"`
}

func (m *Ospfv3EdmNeighborBfd) Reset()                    { *m = Ospfv3EdmNeighborBfd{} }
func (m *Ospfv3EdmNeighborBfd) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighborBfd) ProtoMessage()               {}
func (*Ospfv3EdmNeighborBfd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ospfv3EdmNeighborBfd) GetBfdIntfEnableMode() uint32 {
	if m != nil {
		return m.BfdIntfEnableMode
	}
	return 0
}

func (m *Ospfv3EdmNeighborBfd) GetBfdStatusFlag() uint32 {
	if m != nil {
		return m.BfdStatusFlag
	}
	return 0
}

// Detailed OSPFv3 neighbor information
type Ospfv3EdmNeighborDetail struct {
	// Number of state changes
	StateChanges uint32 `protobuf:"varint,1,opt,name=state_changes,json=stateChanges" json:"state_changes,omitempty"`
	// Cost of path to this neighbor
	NeighborCost uint32 `protobuf:"varint,2,opt,name=neighbor_cost,json=neighborCost" json:"neighbor_cost,omitempty"`
	// If true, filter outgoing LSAs
	IsNeighborFiltered bool `protobuf:"varint,3,opt,name=is_neighbor_filtered,json=isNeighborFiltered" json:"is_neighbor_filtered,omitempty"`
	// Address of designated router
	NeighborDesignatedRouterAddress string `protobuf:"bytes,4,opt,name=neighbor_designated_router_address,json=neighborDesignatedRouterAddress" json:"neighbor_designated_router_address,omitempty"`
	// Address of backup designated router
	NeighborBackupDesignatedRouterAddress string `protobuf:"bytes,5,opt,name=neighbor_backup_designated_router_address,json=neighborBackupDesignatedRouterAddress" json:"neighbor_backup_designated_router_address,omitempty"`
	// Interface type
	InterfaceType string `protobuf:"bytes,6,opt,name=interface_type,json=interfaceType" json:"interface_type,omitempty"`
	// Poll interval (s)
	PollInterval uint32 `protobuf:"varint,7,opt,name=poll_interval,json=pollInterval" json:"poll_interval,omitempty"`
	// For NBMA networks, amount of time remaining in seconds before the next poll interval expires and Hello is sent (s)
	NextPollInterval uint32 `protobuf:"varint,8,opt,name=next_poll_interval,json=nextPollInterval" json:"next_poll_interval,omitempty"`
	// Remaining time when ignore timer is running
	NeighborIgnoreTimer uint32 `protobuf:"varint,9,opt,name=neighbor_ignore_timer,json=neighborIgnoreTimer" json:"neighbor_ignore_timer,omitempty"`
	//  This is bitmask of neighbor's option field received
	NeighborOption uint32 `protobuf:"varint,10,opt,name=neighbor_option,json=neighborOption" json:"neighbor_option,omitempty"`
	// Number of pending events
	PendingEvents uint32 `protobuf:"varint,11,opt,name=pending_events,json=pendingEvents" json:"pending_events,omitempty"`
	// Retransmission information with this neighbor
	NeighborRetransmission *Ospfv3EdmNeighborRetrans `protobuf:"bytes,12,opt,name=neighbor_retransmission,json=neighborRetransmission" json:"neighbor_retransmission,omitempty"`
}

func (m *Ospfv3EdmNeighborDetail) Reset()                    { *m = Ospfv3EdmNeighborDetail{} }
func (m *Ospfv3EdmNeighborDetail) String() string            { return proto.CompactTextString(m) }
func (*Ospfv3EdmNeighborDetail) ProtoMessage()               {}
func (*Ospfv3EdmNeighborDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ospfv3EdmNeighborDetail) GetStateChanges() uint32 {
	if m != nil {
		return m.StateChanges
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborCost() uint32 {
	if m != nil {
		return m.NeighborCost
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetIsNeighborFiltered() bool {
	if m != nil {
		return m.IsNeighborFiltered
	}
	return false
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborDesignatedRouterAddress() string {
	if m != nil {
		return m.NeighborDesignatedRouterAddress
	}
	return ""
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborBackupDesignatedRouterAddress() string {
	if m != nil {
		return m.NeighborBackupDesignatedRouterAddress
	}
	return ""
}

func (m *Ospfv3EdmNeighborDetail) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *Ospfv3EdmNeighborDetail) GetPollInterval() uint32 {
	if m != nil {
		return m.PollInterval
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetNextPollInterval() uint32 {
	if m != nil {
		return m.NextPollInterval
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborIgnoreTimer() uint32 {
	if m != nil {
		return m.NeighborIgnoreTimer
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborOption() uint32 {
	if m != nil {
		return m.NeighborOption
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetPendingEvents() uint32 {
	if m != nil {
		return m.PendingEvents
	}
	return 0
}

func (m *Ospfv3EdmNeighborDetail) GetNeighborRetransmission() *Ospfv3EdmNeighborRetrans {
	if m != nil {
		return m.NeighborRetransmission
	}
	return nil
}

func init() {
	proto.RegisterType((*Ospfv3EdmNeighbor_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.neighbor_detail_table.neighbor_detail.ospfv3_edm_neighbor_KEYS")
	proto.RegisterType((*Ospfv3EdmNeighbor)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.neighbor_detail_table.neighbor_detail.ospfv3_edm_neighbor")
	proto.RegisterType((*Ospfv3EdmNeighborRetrans)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.neighbor_detail_table.neighbor_detail.ospfv3_edm_neighbor_retrans")
	proto.RegisterType((*Ospfv3EdmNeighborBfd)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.neighbor_detail_table.neighbor_detail.ospfv3_edm_neighbor_bfd")
	proto.RegisterType((*Ospfv3EdmNeighborDetail)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.neighbor_detail_table.neighbor_detail.ospfv3_edm_neighbor_detail")
}

func init() { proto.RegisterFile("ospfv3_edm_neighbor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0x56, 0x60, 0xb7, 0x3f, 0x6e, 0xd2, 0x1f, 0xf7, 0x6f, 0xda, 0x0a, 0xd1, 0xcd, 0xb2, 0x90,
	0x95, 0x20, 0xd0, 0x16, 0xf6, 0x07, 0xca, 0x4a, 0xec, 0xb6, 0x95, 0xa2, 0x5d, 0xca, 0x2a, 0x5d,
	0x10, 0x5c, 0x59, 0x4e, 0xc6, 0x93, 0x5a, 0x9d, 0x8c, 0x47, 0xb6, 0x13, 0xb5, 0x4f, 0x80, 0x90,
	0xe0, 0x1d, 0x78, 0x03, 0xee, 0x78, 0x01, 0x2e, 0x78, 0x2d, 0xe4, 0x63, 0xcf, 0x8c, 0x67, 0x3a,
	0xe1, 0x72, 0xb5, 0x37, 0x51, 0xf2, 0x9d, 0xef, 0xfb, 0xce, 0xb1, 0x67, 0x7c, 0x7c, 0x82, 0x76,
	0x84, 0x4a, 0xa3, 0xe9, 0x11, 0x61, 0xe1, 0x98, 0x24, 0x8c, 0x8f, 0x2e, 0x07, 0x42, 0x76, 0x53,
	0x29, 0xb4, 0xc0, 0xe9, 0x90, 0xab, 0xa1, 0x20, 0x5c, 0x28, 0x72, 0x2d, 0x09, 0x4f, 0xa7, 0x8f,
	0x88, 0x23, 0x8b, 0x94, 0xc9, 0xae, 0xfd, 0x6e, 0xb8, 0x43, 0xa6, 0x14, 0x53, 0xd9, 0xb7, 0xee,
	0x54, 0x46, 0xf0, 0xd1, 0xa5, 0x92, 0x51, 0x05, 0x9f, 0xdd, 0xcc, 0x9a, 0x84, 0x4c, 0x53, 0x1e,
	0x13, 0x4d, 0x07, 0x31, 0xab, 0xa2, 0xed, 0x7f, 0x1a, 0x28, 0xa8, 0xa9, 0x87, 0xbc, 0x3c, 0xfd,
	0xe5, 0x02, 0xdf, 0x43, 0x4d, 0x97, 0x81, 0x24, 0x74, 0xcc, 0x82, 0xc6, 0x7e, 0xa3, 0xb3, 0xd8,
	0x5f, 0x72, 0xd8, 0x39, 0x1d, 0x33, 0xbc, 0x83, 0x16, 0xa6, 0x32, 0xb2, 0xe1, 0xf7, 0x20, 0x3c,
	0x3f, 0x95, 0x11, 0x84, 0xb6, 0xd1, 0xbc, 0x29, 0x84, 0xf0, 0x30, 0x78, 0x7f, 0xbf, 0xd1, 0x69,
	0xf5, 0xe7, 0xcc, 0xcf, 0x5e, 0x88, 0x1f, 0xa0, 0x65, 0x9e, 0x68, 0x26, 0x23, 0x3a, 0x64, 0x56,
	0x79, 0x07, 0x94, 0xad, 0x1c, 0x05, 0xfd, 0x43, 0xb4, 0x9a, 0x97, 0x43, 0xc3, 0x50, 0x32, 0xa5,
	0x82, 0xbb, 0x40, 0x5c, 0xc9, 0xf0, 0xef, 0x2c, 0xdc, 0xfe, 0x6b, 0x1e, 0xad, 0xd7, 0xac, 0xa2,
	0xd6, 0xe2, 0xb0, 0xd6, 0x02, 0x1f, 0xa2, 0xcd, 0x9c, 0x5a, 0x54, 0xc7, 0xc3, 0xe0, 0x08, 0x6a,
	0x5f, 0xcf, 0x82, 0xbd, 0x2c, 0xd6, 0x0b, 0xf1, 0x17, 0x68, 0xa3, 0xd8, 0x4f, 0x49, 0x52, 0xc9,
	0x85, 0xe4, 0xfa, 0x26, 0xf8, 0x12, 0x24, 0x38, 0x8b, 0x9d, 0xc8, 0xd7, 0x2e, 0x62, 0x96, 0x9e,
	0x2b, 0x94, 0xa6, 0x9a, 0x05, 0x5f, 0xd9, 0xa5, 0x67, 0xe8, 0x85, 0x01, 0xf1, 0x31, 0xda, 0xf5,
	0x1e, 0x94, 0xe2, 0xa3, 0x84, 0x6a, 0x16, 0x12, 0x29, 0x26, 0x9a, 0xc9, 0xe0, 0x11, 0x48, 0x82,
	0xdc, 0x3e, 0x27, 0xf4, 0x21, 0x8e, 0xbb, 0x68, 0xdd, 0x53, 0xd3, 0x90, 0x68, 0x3e, 0x66, 0x32,
	0x78, 0x0c, 0x55, 0xad, 0x15, 0x32, 0x1a, 0xbe, 0x31, 0x01, 0xdc, 0xf1, 0x76, 0x69, 0x92, 0x02,
	0x3b, 0x78, 0x02, 0xe4, 0xbc, 0xd8, 0x1f, 0x53, 0x43, 0xc5, 0x8f, 0x51, 0x9e, 0x95, 0x4c, 0xb9,
	0xd4, 0x13, 0x1a, 0x93, 0x98, 0x27, 0x57, 0x66, 0x9f, 0x9e, 0x82, 0x22, 0xdf, 0xc4, 0x9f, 0x6c,
	0xf8, 0x15, 0x4f, 0xae, 0x7a, 0xa1, 0x11, 0x72, 0x45, 0x6a, 0xb5, 0xc1, 0xd7, 0xfb, 0x8d, 0xce,
	0x42, 0x7f, 0x93, 0xab, 0xf3, 0xdb, 0x52, 0x7c, 0xe0, 0x3d, 0x16, 0x75, 0x49, 0xc7, 0x79, 0xba,
	0x6f, 0xca, 0x7b, 0x7c, 0x71, 0x49, 0xc7, 0x2e, 0xd7, 0x01, 0xda, 0xf4, 0x73, 0xe5, 0xaa, 0xe0,
	0x18, 0x12, 0xe1, 0x22, 0x51, 0x26, 0xc2, 0x7f, 0x37, 0xd0, 0x4a, 0xe5, 0x64, 0x04, 0xdf, 0xee,
	0x37, 0x3a, 0x4b, 0x87, 0xbf, 0x37, 0xba, 0x6f, 0xfb, 0x4c, 0x76, 0xeb, 0xce, 0xa3, 0x0d, 0x15,
	0x0f, 0xe4, 0x04, 0x7e, 0x9b, 0xc2, 0xf3, 0x07, 0x4a, 0x06, 0x51, 0x48, 0x78, 0x12, 0x89, 0xe0,
	0x19, 0x94, 0xfe, 0xdb, 0x3b, 0x52, 0xfa, 0x20, 0x0a, 0x8b, 0xe3, 0xf6, 0x3c, 0x0a, 0x7b, 0x49,
	0x24, 0xda, 0x7f, 0x2e, 0xa2, 0xbd, 0x3a, 0xb2, 0x64, 0x5a, 0xd2, 0x44, 0xe1, 0x73, 0x74, 0x3f,
	0xa4, 0x9a, 0x0e, 0xa8, 0x62, 0xe6, 0x04, 0x0c, 0x25, 0x4f, 0x75, 0x11, 0x1e, 0x73, 0xa5, 0xb8,
	0x48, 0x14, 0x74, 0xa4, 0x56, 0xff, 0x5e, 0x46, 0x3d, 0xc9, 0x99, 0xfd, 0x32, 0xd1, 0xbc, 0xe3,
	0xd0, 0x8c, 0xa2, 0x58, 0x08, 0xb3, 0x4b, 0x21, 0xbb, 0x86, 0x7e, 0xd5, 0xea, 0x2f, 0x1b, 0xfc,
	0xcc, 0xc0, 0x3d, 0x83, 0xe2, 0x8f, 0xd0, 0x32, 0x55, 0x25, 0x9e, 0xed, 0x5e, 0x4d, 0xaa, 0x3c,
	0x56, 0x07, 0xad, 0xc2, 0x9b, 0xe8, 0xf3, 0xee, 0x58, 0x3f, 0x83, 0x7b, 0xcc, 0xa7, 0xde, 0x99,
	0xa9, 0x96, 0x7f, 0x17, 0x14, 0xdb, 0x59, 0xfc, 0x76, 0xd1, 0x2b, 0x55, 0xc5, 0x1c, 0x28, 0xaa,
	0x70, 0xb1, 0x3c, 0x2e, 0x95, 0xb6, 0x45, 0x05, 0xf3, 0xde, 0xf2, 0x0c, 0x0c, 0x35, 0xe1, 0x23,
	0xb4, 0x55, 0x65, 0xba, 0xf2, 0x17, 0x6c, 0xa3, 0x2b, 0xf3, 0x4b, 0x7b, 0xe2, 0x99, 0x2f, 0xe6,
	0x7b, 0x52, 0x58, 0x7f, 0x8e, 0x36, 0xca, 0x2c, 0x67, 0x8c, 0x6c, 0xe3, 0xf1, 0xb9, 0x95, 0x4d,
	0xf4, 0x8c, 0x97, 0xbc, 0x4d, 0x2c, 0x55, 0x5d, 0x65, 0x3a, 0xf3, 0xa6, 0xad, 0xba, 0xcc, 0xb7,
	0xf6, 0x1f, 0xa3, 0x15, 0x58, 0x6a, 0xc2, 0xae, 0x33, 0xf7, 0x16, 0xb0, 0x5b, 0x06, 0x3e, 0x67,
	0xd7, 0xce, 0xfc, 0x00, 0x6d, 0x56, 0x78, 0xce, 0x7b, 0xd9, 0xf6, 0x98, 0x12, 0xdb, 0x5a, 0xb7,
	0x51, 0x8b, 0x2a, 0xdf, 0x78, 0x05, 0xa8, 0x4b, 0x54, 0x15, 0xb6, 0x9f, 0xa1, 0xf5, 0x12, 0xc7,
	0x99, 0xae, 0x02, 0x73, 0xd5, 0x63, 0xe6, 0xd5, 0xc2, 0x12, 0x3d, 0xd3, 0x35, 0x5b, 0xad, 0x81,
	0x4b, 0xd5, 0x56, 0x78, 0xce, 0x18, 0xdb, 0x6a, 0x4b, 0x6c, 0x6b, 0x7d, 0x8c, 0x76, 0x63, 0xaa,
	0x74, 0xe5, 0xf5, 0x23, 0x31, 0x4b, 0x46, 0xfa, 0x32, 0x58, 0x07, 0x5d, 0x60, 0x18, 0xe5, 0x17,
	0xf0, 0x15, 0xc4, 0xf1, 0x73, 0xf4, 0xc1, 0x98, 0x5e, 0xf3, 0xf1, 0x64, 0x3c, 0xc3, 0x60, 0x03,
	0x0c, 0xf6, 0x1c, 0xa9, 0xd6, 0xe3, 0x09, 0x0a, 0xea, 0x2a, 0x80, 0xab, 0x66, 0x13, 0xe4, 0x5b,
	0xb7, 0xf3, 0xc3, 0x95, 0xf3, 0x0c, 0xed, 0xcd, 0xc8, 0x0e, 0xe2, 0x2d, 0x10, 0xef, 0xd4, 0xe6,
	0x06, 0xbd, 0xc9, 0xac, 0x68, 0x9d, 0x56, 0x06, 0xdb, 0x2e, 0xb3, 0xa2, 0xb7, 0x85, 0xb2, 0x2d,
	0xd1, 0xf6, 0x8c, 0x76, 0x66, 0xde, 0x74, 0xdb, 0x6c, 0x75, 0x44, 0x58, 0x62, 0x3a, 0x21, 0x19,
	0x8b, 0x90, 0xb9, 0x76, 0xb4, 0x36, 0x30, 0x4d, 0x4e, 0x47, 0xa7, 0x10, 0xf9, 0x5e, 0x84, 0xcc,
	0x3c, 0x5c, 0x23, 0x30, 0x57, 0xfe, 0xc4, 0x34, 0x17, 0x3a, 0x72, 0xdd, 0xa7, 0x35, 0x88, 0xc2,
	0x0b, 0x40, 0xcf, 0x62, 0x3a, 0x6a, 0xff, 0x3a, 0x87, 0x76, 0x67, 0xb7, 0x7f, 0x7c, 0x1f, 0xb5,
	0x60, 0x6a, 0x20, 0xc3, 0x4b, 0x9a, 0x8c, 0x58, 0xd6, 0xff, 0x9a, 0x00, 0xbe, 0xb0, 0x98, 0x21,
	0xe5, 0xba, 0xa1, 0x50, 0xda, 0x65, 0x6a, 0x66, 0xe0, 0x0b, 0xa1, 0xb4, 0x19, 0x5d, 0xfc, 0x4b,
	0x32, 0xe2, 0xb1, 0x66, 0x92, 0xd9, 0x49, 0xad, 0x74, 0x47, 0x9e, 0xb9, 0x08, 0x7e, 0x89, 0xda,
	0xb3, 0x67, 0x92, 0x7c, 0xba, 0xb2, 0x93, 0xdc, 0x87, 0xb3, 0x66, 0x93, 0x6c, 0xda, 0xfa, 0x19,
	0x3d, 0x2c, 0x36, 0x94, 0x0e, 0xaf, 0x26, 0xe9, 0xff, 0x78, 0xda, 0xa1, 0xef, 0x41, 0x7e, 0x85,
	0x00, 0x7f, 0x96, 0x73, 0x69, 0xb8, 0xd4, 0x37, 0x29, 0x83, 0x96, 0xe9, 0x0f, 0x97, 0x6f, 0x6e,
	0x52, 0x66, 0x36, 0x29, 0x15, 0x71, 0x6c, 0x47, 0xbd, 0x29, 0x8d, 0x5d, 0xb7, 0x6c, 0x1a, 0xb0,
	0xe7, 0x30, 0xfc, 0x29, 0xc2, 0x70, 0xca, 0xca, 0x4c, 0xdb, 0x27, 0x57, 0x4d, 0xe4, 0xb5, 0xcf,
	0x2e, 0x4d, 0x90, 0xa3, 0x44, 0x48, 0xe6, 0x5e, 0xb3, 0xc5, 0xca, 0x04, 0x09, 0x31, 0x3b, 0x7a,
	0x7d, 0xe2, 0xcd, 0x1d, 0x22, 0xd5, 0x5c, 0x24, 0xae, 0x5b, 0xe6, 0x17, 0xfd, 0x0f, 0x80, 0x9a,
	0x65, 0xa5, 0x2c, 0x09, 0x79, 0x32, 0x22, 0x6c, 0xca, 0x12, 0xad, 0x5c, 0xa3, 0x6c, 0x39, 0xf4,
	0x14, 0x40, 0xfc, 0x6f, 0x03, 0x6d, 0xcf, 0xb8, 0x6d, 0xa0, 0x53, 0x2e, 0x1d, 0xfe, 0xf1, 0x8e,
	0x4c, 0x05, 0xae, 0xb8, 0xfe, 0x56, 0xfd, 0xe5, 0x37, 0x98, 0x83, 0x7f, 0x44, 0x47, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x07, 0x6c, 0x00, 0x2e, 0x0d, 0x00, 0x00,
}
