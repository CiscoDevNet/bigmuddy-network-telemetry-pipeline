// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_corr_ruleset_detail_bag.proto

/*
Package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_set_details_rule_set_detail is a generated protocol buffer package.

It is generated from these files:
	snmp_corr_ruleset_detail_bag.proto

It has these top-level messages:
	SnmpCorrRulesetDetailBag_KEYS
	SnmpCorrRulesetDetailBag
	SnmpCorrRuleSummaryBag
*/
package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_set_details_rule_set_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Correlation Ruleset detail information
type SnmpCorrRulesetDetailBag_KEYS struct {
	RulesetName string `protobuf:"bytes,1,opt,name=ruleset_name,json=rulesetName" json:"ruleset_name,omitempty"`
}

func (m *SnmpCorrRulesetDetailBag_KEYS) Reset()                    { *m = SnmpCorrRulesetDetailBag_KEYS{} }
func (m *SnmpCorrRulesetDetailBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRulesetDetailBag_KEYS) ProtoMessage()               {}
func (*SnmpCorrRulesetDetailBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SnmpCorrRulesetDetailBag_KEYS) GetRulesetName() string {
	if m != nil {
		return m.RulesetName
	}
	return ""
}

type SnmpCorrRulesetDetailBag struct {
	// Ruleset Name
	RuleSetName string `protobuf:"bytes,50,opt,name=rule_set_name,json=ruleSetName" json:"rule_set_name,omitempty"`
	// Rules contained in a ruleset
	Rules []*SnmpCorrRuleSummaryBag `protobuf:"bytes,51,rep,name=rules" json:"rules,omitempty"`
}

func (m *SnmpCorrRulesetDetailBag) Reset()                    { *m = SnmpCorrRulesetDetailBag{} }
func (m *SnmpCorrRulesetDetailBag) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRulesetDetailBag) ProtoMessage()               {}
func (*SnmpCorrRulesetDetailBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SnmpCorrRulesetDetailBag) GetRuleSetName() string {
	if m != nil {
		return m.RuleSetName
	}
	return ""
}

func (m *SnmpCorrRulesetDetailBag) GetRules() []*SnmpCorrRuleSummaryBag {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Correlation Rule summary information
type SnmpCorrRuleSummaryBag struct {
	// Correlation Rule Name
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
	// Applied state of the rule It could be not applied, applied or applied to all
	RuleState string `protobuf:"bytes,2,opt,name=rule_state,json=ruleState" json:"rule_state,omitempty"`
	// Number of buffered traps correlated to this rule
	BufferedTrapsCount uint32 `protobuf:"varint,3,opt,name=buffered_traps_count,json=bufferedTrapsCount" json:"buffered_traps_count,omitempty"`
}

func (m *SnmpCorrRuleSummaryBag) Reset()                    { *m = SnmpCorrRuleSummaryBag{} }
func (m *SnmpCorrRuleSummaryBag) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRuleSummaryBag) ProtoMessage()               {}
func (*SnmpCorrRuleSummaryBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SnmpCorrRuleSummaryBag) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetRuleState() string {
	if m != nil {
		return m.RuleState
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetBufferedTrapsCount() uint32 {
	if m != nil {
		return m.BufferedTrapsCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SnmpCorrRulesetDetailBag_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_ruleset_detail_bag_KEYS")
	proto.RegisterType((*SnmpCorrRulesetDetailBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_ruleset_detail_bag")
	proto.RegisterType((*SnmpCorrRuleSummaryBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_rule_summary_bag")
}

func init() { proto.RegisterFile("snmp_corr_ruleset_detail_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x15, 0x2a, 0x10, 0xbd, 0xd2, 0xc5, 0x62, 0x88, 0xf8, 0x23, 0xb5, 0x9e, 0x32, 0x59,
	0xa8, 0xfd, 0x08, 0x08, 0x16, 0x04, 0x43, 0xc2, 0xc2, 0x74, 0x72, 0xd2, 0x6b, 0x15, 0x29, 0x8e,
	0xa3, 0xb3, 0x23, 0xc1, 0xc4, 0xce, 0xd7, 0xe2, 0x8b, 0x21, 0x3b, 0x94, 0x02, 0x12, 0x9d, 0x18,
	0xfd, 0xde, 0xdd, 0xef, 0x3d, 0xdb, 0x20, 0x5d, 0x6b, 0x3a, 0xac, 0x2c, 0x33, 0x72, 0xdf, 0x90,
	0x23, 0x8f, 0x2b, 0xf2, 0xba, 0x6e, 0xb0, 0xd4, 0x1b, 0xd5, 0xb1, 0xf5, 0x56, 0xdc, 0x57, 0xb5,
	0xab, 0x2c, 0xd6, 0xd6, 0xe1, 0x33, 0x63, 0x5c, 0xd0, 0x1b, 0x6a, 0x3d, 0xda, 0x8e, 0x58, 0x85,
	0xb3, 0x0a, 0x00, 0x6a, 0xb4, 0xb7, 0xac, 0x02, 0x06, 0x77, 0x1c, 0xf7, 0x5b, 0x90, 0xb7, 0x30,
	0xdf, 0x17, 0x8a, 0x77, 0x37, 0x4f, 0x85, 0x98, 0xc3, 0xc9, 0xd6, 0x6a, 0xb5, 0xa1, 0x34, 0x99,
	0x25, 0xd9, 0x38, 0x9f, 0x7c, 0x6a, 0x0f, 0xda, 0x90, 0x7c, 0x4f, 0xe0, 0x62, 0x1f, 0x48, 0x48,
	0x98, 0x7e, 0x65, 0x47, 0xc8, 0x62, 0x07, 0x29, 0x06, 0x88, 0x78, 0x85, 0xc3, 0xb8, 0x99, 0x2e,
	0x67, 0xa3, 0x6c, 0xb2, 0xa8, 0xd5, 0xbf, 0xde, 0x55, 0xfd, 0xec, 0x87, 0xae, 0x37, 0x46, 0xf3,
	0x4b, 0x68, 0x97, 0x0f, 0xb9, 0xf2, 0x2d, 0x81, 0xb3, 0xbf, 0xa7, 0xc4, 0x39, 0x8c, 0xa3, 0xf6,
	0xed, 0x11, 0x8e, 0x83, 0x10, 0xcb, 0x5f, 0x02, 0x0c, 0x0b, 0x5e, 0x7b, 0x4a, 0x0f, 0xa2, 0x1b,
	0xc7, 0x8b, 0x20, 0x88, 0x2b, 0x38, 0x2d, 0xfb, 0xf5, 0x9a, 0x98, 0x56, 0xe8, 0x59, 0x77, 0x0e,
	0x2b, 0xdb, 0xb7, 0x3e, 0x1d, 0xcd, 0x92, 0x6c, 0x9a, 0x8b, 0xad, 0xf7, 0x18, 0xac, 0xeb, 0xe0,
	0x94, 0x47, 0xf1, 0xc3, 0x97, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0xf0, 0xd0, 0xe4, 0x16,
	0x02, 0x00, 0x00,
}
