// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_corr_rule_detail_bag.proto

/*
Package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail is a generated protocol buffer package.

It is generated from these files:
	snmp_corr_rule_detail_bag.proto

It has these top-level messages:
	SnmpCorrRuleDetailBag_KEYS
	SnmpCorrRuleDetailBag
	SnmpCorrVbindMatch
	SnmpCorrTrapMatch
	SnmpCorrHost
	SnmpCorrRuleSummaryBag
*/
package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Correlation Rule detail information
type SnmpCorrRuleDetailBag_KEYS struct {
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
}

func (m *SnmpCorrRuleDetailBag_KEYS) Reset()                    { *m = SnmpCorrRuleDetailBag_KEYS{} }
func (m *SnmpCorrRuleDetailBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRuleDetailBag_KEYS) ProtoMessage()               {}
func (*SnmpCorrRuleDetailBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SnmpCorrRuleDetailBag_KEYS) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

type SnmpCorrRuleDetailBag struct {
	// Rule summary, name, etc
	RuleSummary *SnmpCorrRuleSummaryBag `protobuf:"bytes,50,opt,name=rule_summary,json=ruleSummary" json:"rule_summary,omitempty"`
	// Time window (in ms) for which root/all messages are kept in correlater before sending them to hosts
	Timeout uint32 `protobuf:"varint,51,opt,name=timeout" json:"timeout,omitempty"`
	// OID/VarBinds defining the rootcause match conditions.
	Rootcause *SnmpCorrTrapMatch `protobuf:"bytes,52,opt,name=rootcause" json:"rootcause,omitempty"`
	// OIDs/VarBinds defining the nonrootcause match conditions.
	NonRootcauses []*SnmpCorrTrapMatch `protobuf:"bytes,53,rep,name=non_rootcauses,json=nonRootcauses" json:"non_rootcauses,omitempty"`
	// Hosts (IP/port) to which the rule is applied
	ApplyHosts []*SnmpCorrHost `protobuf:"bytes,54,rep,name=apply_hosts,json=applyHosts" json:"apply_hosts,omitempty"`
}

func (m *SnmpCorrRuleDetailBag) Reset()                    { *m = SnmpCorrRuleDetailBag{} }
func (m *SnmpCorrRuleDetailBag) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRuleDetailBag) ProtoMessage()               {}
func (*SnmpCorrRuleDetailBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SnmpCorrRuleDetailBag) GetRuleSummary() *SnmpCorrRuleSummaryBag {
	if m != nil {
		return m.RuleSummary
	}
	return nil
}

func (m *SnmpCorrRuleDetailBag) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *SnmpCorrRuleDetailBag) GetRootcause() *SnmpCorrTrapMatch {
	if m != nil {
		return m.Rootcause
	}
	return nil
}

func (m *SnmpCorrRuleDetailBag) GetNonRootcauses() []*SnmpCorrTrapMatch {
	if m != nil {
		return m.NonRootcauses
	}
	return nil
}

func (m *SnmpCorrRuleDetailBag) GetApplyHosts() []*SnmpCorrHost {
	if m != nil {
		return m.ApplyHosts
	}
	return nil
}

type SnmpCorrVbindMatch struct {
	// OID of the varbind
	Oid string `protobuf:"bytes,1,opt,name=oid" json:"oid,omitempty"`
	// Varbind match type
	MatchType string `protobuf:"bytes,2,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	// Regular expression to match
	RegExp string `protobuf:"bytes,3,opt,name=reg_exp,json=regExp" json:"reg_exp,omitempty"`
}

func (m *SnmpCorrVbindMatch) Reset()                    { *m = SnmpCorrVbindMatch{} }
func (m *SnmpCorrVbindMatch) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrVbindMatch) ProtoMessage()               {}
func (*SnmpCorrVbindMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SnmpCorrVbindMatch) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *SnmpCorrVbindMatch) GetMatchType() string {
	if m != nil {
		return m.MatchType
	}
	return ""
}

func (m *SnmpCorrVbindMatch) GetRegExp() string {
	if m != nil {
		return m.RegExp
	}
	return ""
}

type SnmpCorrTrapMatch struct {
	// OID of the trap
	Oid string `protobuf:"bytes,1,opt,name=oid" json:"oid,omitempty"`
	// VarBinds of the trap
	VarBinds []*SnmpCorrVbindMatch `protobuf:"bytes,2,rep,name=var_binds,json=varBinds" json:"var_binds,omitempty"`
}

func (m *SnmpCorrTrapMatch) Reset()                    { *m = SnmpCorrTrapMatch{} }
func (m *SnmpCorrTrapMatch) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrTrapMatch) ProtoMessage()               {}
func (*SnmpCorrTrapMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SnmpCorrTrapMatch) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *SnmpCorrTrapMatch) GetVarBinds() []*SnmpCorrVbindMatch {
	if m != nil {
		return m.VarBinds
	}
	return nil
}

type SnmpCorrHost struct {
	// IP address of the host
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// Port of the host
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *SnmpCorrHost) Reset()                    { *m = SnmpCorrHost{} }
func (m *SnmpCorrHost) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrHost) ProtoMessage()               {}
func (*SnmpCorrHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SnmpCorrHost) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *SnmpCorrHost) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Correlation Rule summary information
type SnmpCorrRuleSummaryBag struct {
	// Correlation Rule Name
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
	// Applied state of the rule It could be not applied, applied or applied to all
	RuleState string `protobuf:"bytes,2,opt,name=rule_state,json=ruleState" json:"rule_state,omitempty"`
	// Number of buffered traps correlated to this rule
	BufferedTrapsCount uint32 `protobuf:"varint,3,opt,name=buffered_traps_count,json=bufferedTrapsCount" json:"buffered_traps_count,omitempty"`
}

func (m *SnmpCorrRuleSummaryBag) Reset()                    { *m = SnmpCorrRuleSummaryBag{} }
func (m *SnmpCorrRuleSummaryBag) String() string            { return proto.CompactTextString(m) }
func (*SnmpCorrRuleSummaryBag) ProtoMessage()               {}
func (*SnmpCorrRuleSummaryBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SnmpCorrRuleSummaryBag) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetRuleState() string {
	if m != nil {
		return m.RuleState
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetBufferedTrapsCount() uint32 {
	if m != nil {
		return m.BufferedTrapsCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SnmpCorrRuleDetailBag_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag_KEYS")
	proto.RegisterType((*SnmpCorrRuleDetailBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag")
	proto.RegisterType((*SnmpCorrVbindMatch)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_vbind_match")
	proto.RegisterType((*SnmpCorrTrapMatch)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_trap_match")
	proto.RegisterType((*SnmpCorrHost)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_host")
	proto.RegisterType((*SnmpCorrRuleSummaryBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_summary_bag")
}

func init() { proto.RegisterFile("snmp_corr_rule_detail_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0xd9, 0xa6, 0xb4, 0xdd, 0x17, 0x53, 0x64, 0xa8, 0x38, 0x2a, 0x6a, 0xd8, 0x53, 0x4e,
	0x8b, 0xb4, 0xea, 0xcd, 0x83, 0x96, 0x80, 0x20, 0x78, 0xd8, 0xd6, 0x83, 0x28, 0x0c, 0x93, 0xdd,
	0xd7, 0x74, 0x21, 0x3b, 0x33, 0xbc, 0x99, 0x0d, 0xd9, 0xab, 0x78, 0xf2, 0xdf, 0xf0, 0x5f, 0xf0,
	0x0f, 0x94, 0x79, 0x49, 0xd3, 0x28, 0x8d, 0xa7, 0x78, 0x9b, 0xf9, 0xbe, 0xcc, 0xfc, 0xbe, 0xf9,
	0xc8, 0x5b, 0x78, 0xee, 0x4d, 0xe3, 0x54, 0x69, 0x89, 0x14, 0xb5, 0x33, 0x54, 0x15, 0x06, 0x5d,
	0xcf, 0xd4, 0x44, 0x4f, 0x73, 0x47, 0x36, 0x58, 0x31, 0x2e, 0x6b, 0x5f, 0x5a, 0x55, 0x5b, 0xaf,
	0x16, 0xa4, 0xf8, 0xd7, 0x7a, 0x8a, 0x26, 0x28, 0xeb, 0x90, 0xf2, 0xb8, 0xcf, 0xe3, 0x69, 0x9c,
	0xe9, 0x60, 0x29, 0xdf, 0xb8, 0xc3, 0x6f, 0x6e, 0xb2, 0x37, 0xf0, 0x6c, 0x2b, 0x49, 0x7d, 0x18,
	0x7f, 0xbe, 0x10, 0x4f, 0x20, 0x65, 0xdd, 0xe8, 0x06, 0x65, 0x32, 0x4c, 0x46, 0x69, 0x71, 0x14,
	0x85, 0x8f, 0xba, 0xc1, 0xec, 0xd7, 0x3e, 0x3c, 0xda, 0x7a, 0x5e, 0x7c, 0x4f, 0xe0, 0x1e, 0x6b,
	0xbe, 0x6d, 0x1a, 0x4d, 0x9d, 0x3c, 0x1d, 0x26, 0xa3, 0xfe, 0xa9, 0xce, 0x77, 0x92, 0x3d, 0xff,
	0x0b, 0xbc, 0x82, 0x44, 0x72, 0xd1, 0x8f, 0xca, 0xc5, 0x52, 0x10, 0x12, 0x0e, 0x43, 0xdd, 0xa0,
	0x6d, 0x83, 0x3c, 0x1b, 0x26, 0xa3, 0x41, 0x71, 0xb3, 0x15, 0x1d, 0xa4, 0x64, 0x6d, 0x28, 0x75,
	0xeb, 0x51, 0xbe, 0xe4, 0x70, 0x5f, 0x76, 0x1e, 0x2e, 0x90, 0x76, 0xaa, 0xd1, 0xa1, 0xbc, 0x2e,
	0x6e, 0x69, 0xe2, 0x5b, 0x02, 0xc7, 0xc6, 0x1a, 0xb5, 0x56, 0xbc, 0x7c, 0x35, 0xec, 0xfd, 0xef,
	0x00, 0x03, 0x63, 0x4d, 0xb1, 0x26, 0x8a, 0x39, 0xf4, 0xb5, 0x73, 0xb3, 0x4e, 0x5d, 0x5b, 0x1f,
	0xbc, 0x7c, 0xcd, 0x01, 0x3e, 0xed, 0x3c, 0x40, 0xbc, 0xbd, 0x00, 0x26, 0xbd, 0x8f, 0xa0, 0x4c,
	0xc3, 0x83, 0x5b, 0x77, 0x3e, 0xa9, 0x4d, 0xb5, 0xcc, 0x27, 0xee, 0x43, 0xcf, 0xd6, 0xd5, 0xea,
	0x6f, 0x16, 0x97, 0xe2, 0x29, 0x00, 0x5b, 0x2a, 0x74, 0x0e, 0xe5, 0x1e, 0x1b, 0x29, 0x2b, 0x97,
	0x9d, 0x43, 0xf1, 0x10, 0x0e, 0x09, 0xa7, 0x0a, 0x17, 0x4e, 0xf6, 0xd8, 0x3b, 0x20, 0x9c, 0x8e,
	0x17, 0x2e, 0xfb, 0x99, 0xc0, 0xc9, 0x5d, 0x15, 0xdc, 0x81, 0xe8, 0x20, 0x9d, 0x6b, 0x52, 0x31,
	0x86, 0x97, 0x7b, 0xdc, 0xc1, 0xd7, 0x9d, 0x77, 0xb0, 0xf1, 0xca, 0xe2, 0x68, 0xae, 0xe9, 0x5d,
	0xa4, 0x65, 0xe7, 0x70, 0xfc, 0x67, 0x4d, 0xf1, 0xbd, 0xb5, 0x53, 0xba, 0xaa, 0x08, 0xbd, 0x5f,
	0xa5, 0x4c, 0x6b, 0xf7, 0x76, 0x29, 0x08, 0x01, 0xfb, 0xce, 0x52, 0xe0, 0x22, 0x06, 0x05, 0xaf,
	0xb3, 0x1f, 0x09, 0x3c, 0xde, 0x3e, 0x0b, 0xff, 0x1c, 0xe0, 0x88, 0x5b, 0x1e, 0x08, 0x3a, 0xac,
	0xeb, 0xe5, 0xe1, 0x89, 0x82, 0x78, 0x01, 0x27, 0x93, 0xf6, 0xea, 0x0a, 0x09, 0x2b, 0xee, 0xd0,
	0xab, 0xd2, 0xb6, 0x26, 0x70, 0xd7, 0x83, 0x42, 0xdc, 0x78, 0x97, 0xd1, 0x3a, 0x8f, 0xce, 0xe4,
	0x80, 0x3f, 0x4f, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x6a, 0x0c, 0x32, 0xc1, 0x04,
	0x00, 0x00,
}
