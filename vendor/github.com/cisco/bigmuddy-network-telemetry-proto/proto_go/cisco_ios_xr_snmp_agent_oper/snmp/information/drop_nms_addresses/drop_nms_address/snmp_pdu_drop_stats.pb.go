// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_pdu_drop_stats.proto

/*
Package cisco_ios_xr_snmp_agent_oper_snmp_information_drop_nms_addresses_drop_nms_address is a generated protocol buffer package.

It is generated from these files:
	snmp_pdu_drop_stats.proto

It has these top-level messages:
	SnmpPduDropStats_KEYS
	SnmpPduDropStats
*/
package cisco_ios_xr_snmp_agent_oper_snmp_information_drop_nms_addresses_drop_nms_address

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SNMP Agent Req PDU Drop Stats
type SnmpPduDropStats_KEYS struct {
	NmsAddr string `protobuf:"bytes,1,opt,name=nms_addr,json=nmsAddr" json:"nms_addr,omitempty"`
}

func (m *SnmpPduDropStats_KEYS) Reset()                    { *m = SnmpPduDropStats_KEYS{} }
func (m *SnmpPduDropStats_KEYS) String() string            { return proto.CompactTextString(m) }
func (*SnmpPduDropStats_KEYS) ProtoMessage()               {}
func (*SnmpPduDropStats_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SnmpPduDropStats_KEYS) GetNmsAddr() string {
	if m != nil {
		return m.NmsAddr
	}
	return ""
}

type SnmpPduDropStats struct {
	// NMS address of server
	NmsAddress string `protobuf:"bytes,50,opt,name=nms_address,json=nmsAddress" json:"nms_address,omitempty"`
	// Drop Count at Incoming Q
	IncomingQCount uint32 `protobuf:"varint,51,opt,name=incoming_q_count,json=incomingQCount" json:"incoming_q_count,omitempty"`
	// Drop Count at Incoming Q after threshold limit
	ThresholdIncomingQCount uint32 `protobuf:"varint,52,opt,name=threshold_incoming_q_count,json=thresholdIncomingQCount" json:"threshold_incoming_q_count,omitempty"`
	// Drop Count with Encode errors
	EncodeCount uint32 `protobuf:"varint,53,opt,name=encode_count,json=encodeCount" json:"encode_count,omitempty"`
	// Duplicate request drop count
	DuplicateCount uint32 `protobuf:"varint,54,opt,name=duplicate_count,json=duplicateCount" json:"duplicate_count,omitempty"`
	// Drop Count at snmp Stack
	StackCount uint32 `protobuf:"varint,55,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	// drop count with AIPC Buffer Full
	AipcCount uint32 `protobuf:"varint,56,opt,name=aipc_count,json=aipcCount" json:"aipc_count,omitempty"`
	// Drop Count with overload notification
	OverloadCount uint32 `protobuf:"varint,57,opt,name=overload_count,json=overloadCount" json:"overload_count,omitempty"`
	// Drop count with timeout
	TimeoutCount uint32 `protobuf:"varint,58,opt,name=timeout_count,json=timeoutCount" json:"timeout_count,omitempty"`
	//  drop with Internal Errors
	InternalCount uint32 `protobuf:"varint,59,opt,name=internal_count,json=internalCount" json:"internal_count,omitempty"`
}

func (m *SnmpPduDropStats) Reset()                    { *m = SnmpPduDropStats{} }
func (m *SnmpPduDropStats) String() string            { return proto.CompactTextString(m) }
func (*SnmpPduDropStats) ProtoMessage()               {}
func (*SnmpPduDropStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SnmpPduDropStats) GetNmsAddress() string {
	if m != nil {
		return m.NmsAddress
	}
	return ""
}

func (m *SnmpPduDropStats) GetIncomingQCount() uint32 {
	if m != nil {
		return m.IncomingQCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetThresholdIncomingQCount() uint32 {
	if m != nil {
		return m.ThresholdIncomingQCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetEncodeCount() uint32 {
	if m != nil {
		return m.EncodeCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetDuplicateCount() uint32 {
	if m != nil {
		return m.DuplicateCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetStackCount() uint32 {
	if m != nil {
		return m.StackCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetAipcCount() uint32 {
	if m != nil {
		return m.AipcCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetOverloadCount() uint32 {
	if m != nil {
		return m.OverloadCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetTimeoutCount() uint32 {
	if m != nil {
		return m.TimeoutCount
	}
	return 0
}

func (m *SnmpPduDropStats) GetInternalCount() uint32 {
	if m != nil {
		return m.InternalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SnmpPduDropStats_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.information.drop_nms_addresses.drop_nms_address.snmp_pdu_drop_stats_KEYS")
	proto.RegisterType((*SnmpPduDropStats)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.information.drop_nms_addresses.drop_nms_address.snmp_pdu_drop_stats")
}

func init() { proto.RegisterFile("snmp_pdu_drop_stats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd2, 0x3d, 0x4f, 0xeb, 0x30,
	0x14, 0xc6, 0x71, 0x55, 0x57, 0xba, 0xf7, 0xf6, 0xf4, 0x05, 0x14, 0x06, 0x52, 0x24, 0xd4, 0x52,
	0x84, 0xe8, 0x94, 0x81, 0x52, 0xde, 0x3a, 0x21, 0xc4, 0x80, 0x98, 0x5a, 0x26, 0x26, 0xcb, 0xd8,
	0xa6, 0xb5, 0x48, 0x7c, 0x82, 0x8f, 0x83, 0xf8, 0x30, 0x7c, 0x58, 0x54, 0xdb, 0xa9, 0x40, 0xed,
	0x98, 0xbf, 0x7f, 0x8f, 0x93, 0x21, 0xd0, 0x23, 0x53, 0x94, 0xac, 0x94, 0x15, 0x93, 0x16, 0x4b,
	0x46, 0x8e, 0x3b, 0xca, 0x4a, 0x8b, 0x0e, 0x93, 0x99, 0xd0, 0x24, 0x90, 0x69, 0x24, 0xf6, 0x69,
	0x99, 0x77, 0x7c, 0xa1, 0x8c, 0x63, 0x58, 0x2a, 0x9b, 0xad, 0x9e, 0x33, 0x6d, 0x5e, 0xd1, 0x16,
	0xdc, 0x69, 0x34, 0x99, 0xdf, 0x9b, 0x82, 0x18, 0x97, 0xd2, 0x2a, 0x22, 0x45, 0x1b, 0x69, 0x38,
	0x81, 0x74, 0xcb, 0xfb, 0xd8, 0xe3, 0xfd, 0xf3, 0x53, 0xd2, 0x83, 0xff, 0x35, 0x4d, 0x1b, 0x83,
	0xc6, 0xa8, 0x39, 0xff, 0x67, 0x0a, 0xba, 0x95, 0xd2, 0x0e, 0xbf, 0xfe, 0xc0, 0xde, 0x96, 0x5d,
	0xd2, 0x87, 0xd6, 0x8f, 0xdb, 0xd3, 0x33, 0xbf, 0x82, 0xb8, 0x52, 0x44, 0xc9, 0x08, 0x76, 0xb5,
	0x11, 0x58, 0x68, 0xb3, 0x60, 0xef, 0x4c, 0x60, 0x65, 0x5c, 0x3a, 0x1e, 0x34, 0x46, 0x9d, 0x79,
	0xb7, 0xee, 0xb3, 0xbb, 0x55, 0x4d, 0xa6, 0x70, 0xe0, 0x96, 0x56, 0xd1, 0x12, 0x73, 0xc9, 0x36,
	0x36, 0xe7, 0x7e, 0xb3, 0xbf, 0x16, 0x0f, 0xbf, 0xc7, 0x47, 0xd0, 0x56, 0x46, 0xa0, 0x54, 0x91,
	0x4f, 0x3c, 0x6f, 0x85, 0x16, 0xc8, 0x29, 0xec, 0xc8, 0xaa, 0xcc, 0xb5, 0xe0, 0xae, 0x56, 0x17,
	0xe1, 0x43, 0xd6, 0x39, 0xc0, 0x3e, 0xb4, 0xc8, 0x71, 0xf1, 0x16, 0xd1, 0xa5, 0x47, 0xe0, 0x53,
	0x00, 0x87, 0x00, 0x5c, 0x97, 0x22, 0x9e, 0x5f, 0xf9, 0xf3, 0xe6, 0xaa, 0x84, 0xe3, 0x13, 0xe8,
	0xe2, 0x87, 0xb2, 0x39, 0x72, 0x19, 0xc9, 0xb5, 0x27, 0x9d, 0xba, 0x06, 0x76, 0x0c, 0x1d, 0xa7,
	0x0b, 0x85, 0x95, 0x8b, 0xea, 0xc6, 0xab, 0x76, 0x8c, 0xeb, 0xbb, 0xb4, 0x71, 0xca, 0x1a, 0x9e,
	0x47, 0x35, 0x0d, 0x77, 0xd5, 0xd5, 0xb3, 0x97, 0xbf, 0xfe, 0x7f, 0x19, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0x9a, 0x05, 0x69, 0x4c, 0x02, 0x00, 0x00,
}
