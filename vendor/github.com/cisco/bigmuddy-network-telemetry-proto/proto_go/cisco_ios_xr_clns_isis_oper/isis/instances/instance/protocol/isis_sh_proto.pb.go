// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_proto.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol is a generated protocol buffer package.

It is generated from these files:
	isis_sh_proto.proto

It has these top-level messages:
	IsisShProto_KEYS
	IsisShProto
	IsisStringType
	IsisTopoIdType
	OsiAreaAddressType
	IsisShRedistEntryProto
	IsisShRedistEntry
	IsisShRedistEntryItem
	IsisShTopoArea
	IsisShTopo
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Information about an IS-IS instance
type IsisShProto_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *IsisShProto_KEYS) Reset()                    { *m = IsisShProto_KEYS{} }
func (m *IsisShProto_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShProto_KEYS) ProtoMessage()               {}
func (*IsisShProto_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShProto_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

type IsisShProto struct {
	// Local system ID
	NsapSystemId string `protobuf:"bytes,50,opt,name=nsap_system_id,json=nsapSystemId" json:"nsap_system_id,omitempty"`
	// Indicates if system ID valid
	ValidNsapSystemId bool `protobuf:"varint,51,opt,name=valid_nsap_system_id,json=validNsapSystemId" json:"valid_nsap_system_id,omitempty"`
	// instance id
	InstanceId uint32 `protobuf:"varint,52,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// Levels running
	RunningLevels string `protobuf:"bytes,53,opt,name=running_levels,json=runningLevels" json:"running_levels,omitempty"`
	// Manual area addresses
	ManualAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,54,rep,name=manual_area_addresses,json=manualAreaAddresses" json:"manual_area_addresses,omitempty"`
	// Active area addresses
	ActiveAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,55,rep,name=active_area_addresses,json=activeAreaAddresses" json:"active_area_addresses,omitempty"`
	// Configured NSF type
	ConfiguredNsfFlavor string `protobuf:"bytes,56,opt,name=configured_nsf_flavor,json=configuredNsfFlavor" json:"configured_nsf_flavor,omitempty"`
	// NSF type of last restart
	LastRestartNsfFlavor string `protobuf:"bytes,57,opt,name=last_restart_nsf_flavor,json=lastRestartNsfFlavor" json:"last_restart_nsf_flavor,omitempty"`
	// Last restart status
	LastRestartStatus string `protobuf:"bytes,58,opt,name=last_restart_status,json=lastRestartStatus" json:"last_restart_status,omitempty"`
	// Time remaining until the next NSF restart may be attempted
	RemainingTimeForNextNsfRestart uint32 `protobuf:"varint,59,opt,name=remaining_time_for_next_nsf_restart,json=remainingTimeForNextNsfRestart" json:"remaining_time_for_next_nsf_restart,omitempty"`
	// Per-topology data
	PerTopoData []*IsisShTopo `protobuf:"bytes,60,rep,name=per_topo_data,json=perTopoData" json:"per_topo_data,omitempty"`
	// Adj Forming count
	AdjFormCount uint32 `protobuf:"varint,61,opt,name=adj_form_count,json=adjFormCount" json:"adj_form_count,omitempty"`
	// Adj Full count
	AdjFullCount uint32 `protobuf:"varint,62,opt,name=adj_full_count,json=adjFullCount" json:"adj_full_count,omitempty"`
	// Adjacency Stagger Enabled
	AdjStaggerEnabled bool `protobuf:"varint,63,opt,name=adj_stagger_enabled,json=adjStaggerEnabled" json:"adj_stagger_enabled,omitempty"`
	// Adjacency Stagger Initiall Number of Forming Neighbors Allowed
	AdjStaggerInit uint32 `protobuf:"varint,64,opt,name=adj_stagger_init,json=adjStaggerInit" json:"adj_stagger_init,omitempty"`
	// Adjacency Stagger Max Number of Forming Neighbors Allowed
	AdjStaggerMax uint32 `protobuf:"varint,65,opt,name=adj_stagger_max,json=adjStaggerMax" json:"adj_stagger_max,omitempty"`
}

func (m *IsisShProto) Reset()                    { *m = IsisShProto{} }
func (m *IsisShProto) String() string            { return proto.CompactTextString(m) }
func (*IsisShProto) ProtoMessage()               {}
func (*IsisShProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShProto) GetNsapSystemId() string {
	if m != nil {
		return m.NsapSystemId
	}
	return ""
}

func (m *IsisShProto) GetValidNsapSystemId() bool {
	if m != nil {
		return m.ValidNsapSystemId
	}
	return false
}

func (m *IsisShProto) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *IsisShProto) GetRunningLevels() string {
	if m != nil {
		return m.RunningLevels
	}
	return ""
}

func (m *IsisShProto) GetManualAreaAddresses() []*OsiAreaAddressType {
	if m != nil {
		return m.ManualAreaAddresses
	}
	return nil
}

func (m *IsisShProto) GetActiveAreaAddresses() []*OsiAreaAddressType {
	if m != nil {
		return m.ActiveAreaAddresses
	}
	return nil
}

func (m *IsisShProto) GetConfiguredNsfFlavor() string {
	if m != nil {
		return m.ConfiguredNsfFlavor
	}
	return ""
}

func (m *IsisShProto) GetLastRestartNsfFlavor() string {
	if m != nil {
		return m.LastRestartNsfFlavor
	}
	return ""
}

func (m *IsisShProto) GetLastRestartStatus() string {
	if m != nil {
		return m.LastRestartStatus
	}
	return ""
}

func (m *IsisShProto) GetRemainingTimeForNextNsfRestart() uint32 {
	if m != nil {
		return m.RemainingTimeForNextNsfRestart
	}
	return 0
}

func (m *IsisShProto) GetPerTopoData() []*IsisShTopo {
	if m != nil {
		return m.PerTopoData
	}
	return nil
}

func (m *IsisShProto) GetAdjFormCount() uint32 {
	if m != nil {
		return m.AdjFormCount
	}
	return 0
}

func (m *IsisShProto) GetAdjFullCount() uint32 {
	if m != nil {
		return m.AdjFullCount
	}
	return 0
}

func (m *IsisShProto) GetAdjStaggerEnabled() bool {
	if m != nil {
		return m.AdjStaggerEnabled
	}
	return false
}

func (m *IsisShProto) GetAdjStaggerInit() uint32 {
	if m != nil {
		return m.AdjStaggerInit
	}
	return 0
}

func (m *IsisShProto) GetAdjStaggerMax() uint32 {
	if m != nil {
		return m.AdjStaggerMax
	}
	return 0
}

type IsisStringType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisStringType) Reset()                    { *m = IsisStringType{} }
func (m *IsisStringType) String() string            { return proto.CompactTextString(m) }
func (*IsisStringType) ProtoMessage()               {}
func (*IsisStringType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisStringType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
}

func (m *IsisTopoIdType) Reset()                    { *m = IsisTopoIdType{} }
func (m *IsisTopoIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisTopoIdType) ProtoMessage()               {}
func (*IsisTopoIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisTopoIdType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisTopoIdType) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisTopoIdType) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IsisTopoIdType) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

type OsiAreaAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *OsiAreaAddressType) Reset()                    { *m = OsiAreaAddressType{} }
func (m *OsiAreaAddressType) String() string            { return proto.CompactTextString(m) }
func (*OsiAreaAddressType) ProtoMessage()               {}
func (*OsiAreaAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OsiAreaAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Redistributed protocol information
type IsisShRedistEntryProto struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	// IS-IS instance identifier
	IsisInstanceId *IsisStringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId" json:"isis_instance_id,omitempty"`
	// OSPF process identifier
	OspfProcessId *IsisStringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId" json:"ospf_process_id,omitempty"`
	// OSPFv3 process identifier
	OspFv3ProcessId *IsisStringType `protobuf:"bytes,4,opt,name=osp_fv3_process_id,json=ospFv3ProcessId" json:"osp_fv3_process_id,omitempty"`
	// BGP Autonomous System number
	BgpAsNumber *IsisStringType `protobuf:"bytes,5,opt,name=bgp_as_number,json=bgpAsNumber" json:"bgp_as_number,omitempty"`
	// EIGRP Autonomous System number
	EigrpAsNumber   *IsisStringType `protobuf:"bytes,6,opt,name=eigrp_as_number,json=eigrpAsNumber" json:"eigrp_as_number,omitempty"`
	ApplicationName *IsisStringType `protobuf:"bytes,7,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
}

func (m *IsisShRedistEntryProto) Reset()                    { *m = IsisShRedistEntryProto{} }
func (m *IsisShRedistEntryProto) String() string            { return proto.CompactTextString(m) }
func (*IsisShRedistEntryProto) ProtoMessage()               {}
func (*IsisShRedistEntryProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsisShRedistEntryProto) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *IsisShRedistEntryProto) GetIsisInstanceId() *IsisStringType {
	if m != nil {
		return m.IsisInstanceId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetOspfProcessId() *IsisStringType {
	if m != nil {
		return m.OspfProcessId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetOspFv3ProcessId() *IsisStringType {
	if m != nil {
		return m.OspFv3ProcessId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetBgpAsNumber() *IsisStringType {
	if m != nil {
		return m.BgpAsNumber
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetEigrpAsNumber() *IsisStringType {
	if m != nil {
		return m.EigrpAsNumber
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetApplicationName() *IsisStringType {
	if m != nil {
		return m.ApplicationName
	}
	return nil
}

// Redistributed protocol entry
type IsisShRedistEntry struct {
	// Next entry in list
	IsisShRedistEntry []*IsisShRedistEntryItem `protobuf:"bytes,1,rep,name=isis_sh_redist_entry,json=isisShRedistEntry" json:"isis_sh_redist_entry,omitempty"`
}

func (m *IsisShRedistEntry) Reset()                    { *m = IsisShRedistEntry{} }
func (m *IsisShRedistEntry) String() string            { return proto.CompactTextString(m) }
func (*IsisShRedistEntry) ProtoMessage()               {}
func (*IsisShRedistEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsisShRedistEntry) GetIsisShRedistEntry() []*IsisShRedistEntryItem {
	if m != nil {
		return m.IsisShRedistEntry
	}
	return nil
}

type IsisShRedistEntryItem struct {
	// Relevant details of the redistributed protocol
	ProtocolDetails *IsisShRedistEntryProto `protobuf:"bytes,1,opt,name=protocol_details,json=protocolDetails" json:"protocol_details,omitempty"`
}

func (m *IsisShRedistEntryItem) Reset()                    { *m = IsisShRedistEntryItem{} }
func (m *IsisShRedistEntryItem) String() string            { return proto.CompactTextString(m) }
func (*IsisShRedistEntryItem) ProtoMessage()               {}
func (*IsisShRedistEntryItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsisShRedistEntryItem) GetProtocolDetails() *IsisShRedistEntryProto {
	if m != nil {
		return m.ProtocolDetails
	}
	return nil
}

// Per-topology, per-area IS-IS protocol data
type IsisShTopoArea struct {
	// The level this data refers to
	Level string `protobuf:"bytes,1,opt,name=level" json:"level,omitempty"`
	// Does this topology use the default link topology
	UsesDefaultLinkTopoFlag bool `protobuf:"varint,2,opt,name=uses_default_link_topo_flag,json=usesDefaultLinkTopoFlag" json:"uses_default_link_topo_flag,omitempty"`
	// Generate metric style
	GeneratedMetricStyle string `protobuf:"bytes,3,opt,name=generated_metric_style,json=generatedMetricStyle" json:"generated_metric_style,omitempty"`
	// Accept metric style
	AcceptedMetricStyle string `protobuf:"bytes,4,opt,name=accepted_metric_style,json=acceptedMetricStyle" json:"accepted_metric_style,omitempty"`
	// Metric
	Metric uint32 `protobuf:"varint,5,opt,name=metric" json:"metric,omitempty"`
	// ISPF state
	IspfState string `protobuf:"bytes,6,opt,name=ispf_state,json=ispfState" json:"ispf_state,omitempty"`
	// Indicates whether MPLS TE is enabled
	TeEnabled bool `protobuf:"varint,7,opt,name=te_enabled,json=teEnabled" json:"te_enabled,omitempty"`
}

func (m *IsisShTopoArea) Reset()                    { *m = IsisShTopoArea{} }
func (m *IsisShTopoArea) String() string            { return proto.CompactTextString(m) }
func (*IsisShTopoArea) ProtoMessage()               {}
func (*IsisShTopoArea) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IsisShTopoArea) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShTopoArea) GetUsesDefaultLinkTopoFlag() bool {
	if m != nil {
		return m.UsesDefaultLinkTopoFlag
	}
	return false
}

func (m *IsisShTopoArea) GetGeneratedMetricStyle() string {
	if m != nil {
		return m.GeneratedMetricStyle
	}
	return ""
}

func (m *IsisShTopoArea) GetAcceptedMetricStyle() string {
	if m != nil {
		return m.AcceptedMetricStyle
	}
	return ""
}

func (m *IsisShTopoArea) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *IsisShTopoArea) GetIspfState() string {
	if m != nil {
		return m.IspfState
	}
	return ""
}

func (m *IsisShTopoArea) GetTeEnabled() bool {
	if m != nil {
		return m.TeEnabled
	}
	return false
}

// Per-topology IS-IS instance data
type IsisShTopo struct {
	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// List of redistributed protocols
	RedistProtocolsList *IsisShRedistEntry `protobuf:"bytes,2,opt,name=redist_protocols_list,json=redistProtocolsList" json:"redist_protocols_list,omitempty"`
	// Default administrative distance
	DefaultAdminDistance uint32 `protobuf:"varint,3,opt,name=default_admin_distance,json=defaultAdminDistance" json:"default_admin_distance,omitempty"`
	// Advertise passive interface prefixes only
	AdvertisePassiveOnly bool `protobuf:"varint,4,opt,name=advertise_passive_only,json=advertisePassiveOnly" json:"advertise_passive_only,omitempty"`
	// Per-area data
	PerAreaData []*IsisShTopoArea `protobuf:"bytes,5,rep,name=per_area_data,json=perAreaData" json:"per_area_data,omitempty"`
}

func (m *IsisShTopo) Reset()                    { *m = IsisShTopo{} }
func (m *IsisShTopo) String() string            { return proto.CompactTextString(m) }
func (*IsisShTopo) ProtoMessage()               {}
func (*IsisShTopo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IsisShTopo) GetId() *IsisTopoIdType {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IsisShTopo) GetRedistProtocolsList() *IsisShRedistEntry {
	if m != nil {
		return m.RedistProtocolsList
	}
	return nil
}

func (m *IsisShTopo) GetDefaultAdminDistance() uint32 {
	if m != nil {
		return m.DefaultAdminDistance
	}
	return 0
}

func (m *IsisShTopo) GetAdvertisePassiveOnly() bool {
	if m != nil {
		return m.AdvertisePassiveOnly
	}
	return false
}

func (m *IsisShTopo) GetPerAreaData() []*IsisShTopoArea {
	if m != nil {
		return m.PerAreaData
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShProto_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto_KEYS")
	proto.RegisterType((*IsisShProto)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto")
	proto.RegisterType((*IsisStringType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type")
	proto.RegisterType((*IsisTopoIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_topo_id_type")
	proto.RegisterType((*OsiAreaAddressType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.osi_area_address_type")
	proto.RegisterType((*IsisShRedistEntryProto)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto")
	proto.RegisterType((*IsisShRedistEntry)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry")
	proto.RegisterType((*IsisShRedistEntryItem)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_item")
	proto.RegisterType((*IsisShTopoArea)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo_area")
	proto.RegisterType((*IsisShTopo)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo")
}

func init() { proto.RegisterFile("isis_sh_proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xd3, 0xe6, 0x6f, 0x1c, 0xe7, 0x67, 0xec, 0x34, 0xdb, 0x22, 0x20, 0x72, 0x00, 0xf9,
	0x06, 0x23, 0x25, 0x2d, 0x50, 0x08, 0x3f, 0x11, 0x49, 0xa4, 0xd0, 0xd4, 0x89, 0xd6, 0x95, 0x80,
	0xab, 0xd1, 0x64, 0xf7, 0xd8, 0x9d, 0x74, 0x76, 0x76, 0x35, 0x33, 0xb6, 0x6c, 0x71, 0x89, 0x44,
	0xb9, 0xe2, 0x1d, 0xb8, 0xe2, 0x99, 0x78, 0x03, 0x1e, 0x03, 0xcd, 0x99, 0x5d, 0x7b, 0x5d, 0x9a,
	0xab, 0xda, 0x37, 0x96, 0xf7, 0x7c, 0xdf, 0x99, 0xef, 0xec, 0x39, 0x3b, 0xdf, 0x0c, 0xa9, 0x0b,
	0x23, 0x0c, 0x33, 0x2f, 0x59, 0xa6, 0x53, 0x9b, 0xb6, 0xf1, 0x97, 0x1e, 0x47, 0xc2, 0x44, 0x29,
	0x13, 0xa9, 0x61, 0x23, 0xcd, 0x22, 0xa9, 0x0c, 0x43, 0x5a, 0x9a, 0x81, 0x6e, 0xbb, 0x7f, 0x6d,
	0xa1, 0x8c, 0xe5, 0x2a, 0x82, 0xe9, 0x3f, 0x9f, 0x1a, 0xa5, 0xb2, 0xf9, 0x94, 0xd0, 0x99, 0x45,
	0xd9, 0xb3, 0xb3, 0x5f, 0xba, 0xf4, 0x80, 0xd4, 0x0a, 0x2a, 0x53, 0x3c, 0x81, 0xa0, 0xb2, 0x5f,
	0x69, 0xad, 0x87, 0x1b, 0x45, 0xb0, 0xc3, 0x13, 0x68, 0xfe, 0xbb, 0x4a, 0x6a, 0x33, 0xb9, 0xf4,
	0x23, 0xb2, 0xa9, 0x0c, 0xcf, 0x98, 0x19, 0x1b, 0x0b, 0x09, 0x13, 0x71, 0x70, 0xe8, 0xf3, 0x5c,
	0xb4, 0x8b, 0xc1, 0x8b, 0x98, 0x7e, 0x46, 0x1a, 0x43, 0x2e, 0x45, 0xcc, 0xde, 0xe0, 0x1e, 0xed,
	0x57, 0x5a, 0x6b, 0xe1, 0x0e, 0x62, 0x9d, 0x72, 0xc2, 0x87, 0xa4, 0x3a, 0xa9, 0x46, 0xc4, 0xc1,
	0xe3, 0xfd, 0x4a, 0xab, 0x16, 0x92, 0x22, 0x74, 0x11, 0xd3, 0x8f, 0xc9, 0xa6, 0x1e, 0x28, 0x25,
	0x54, 0x9f, 0x49, 0x18, 0x82, 0x34, 0xc1, 0x13, 0xd4, 0xad, 0xe5, 0xd1, 0x4b, 0x0c, 0xd2, 0xd7,
	0x15, 0xb2, 0x9b, 0x70, 0x35, 0xe0, 0x92, 0x71, 0x0d, 0x9c, 0xf1, 0x38, 0xd6, 0x60, 0x0c, 0x98,
	0xe0, 0xf3, 0xfd, 0x7b, 0xad, 0xea, 0x61, 0xb7, 0xfd, 0x2e, 0xad, 0x6c, 0xa7, 0x46, 0xcc, 0xac,
	0xcb, 0xec, 0x38, 0x83, 0xb0, 0xee, 0x15, 0x4f, 0x34, 0xf0, 0x93, 0x42, 0x0f, 0x2b, 0xe1, 0x91,
	0x15, 0x43, 0x78, 0xb3, 0x92, 0x2f, 0x16, 0x58, 0x89, 0x57, 0x9c, 0xad, 0xe4, 0x90, 0xec, 0x46,
	0xa9, 0xea, 0x89, 0xfe, 0x40, 0x83, 0x9b, 0x48, 0x8f, 0xf5, 0x24, 0x1f, 0xa6, 0x3a, 0xf8, 0x12,
	0x3b, 0x58, 0x9f, 0x82, 0x1d, 0xd3, 0x3b, 0x47, 0x88, 0x3e, 0x21, 0x7b, 0x92, 0x1b, 0xcb, 0x34,
	0x18, 0xcb, 0xb5, 0x2d, 0x67, 0x3d, 0xc5, 0xac, 0x86, 0x83, 0x43, 0x8f, 0x4e, 0xd3, 0xda, 0xa4,
	0x3e, 0x93, 0x66, 0x2c, 0xb7, 0x03, 0x13, 0x7c, 0x85, 0x29, 0x3b, 0xa5, 0x94, 0x2e, 0x02, 0xf4,
	0x19, 0x39, 0xd0, 0x90, 0x70, 0x81, 0x73, 0xb5, 0x22, 0x01, 0xd6, 0x4b, 0x35, 0x53, 0x30, 0xf2,
	0x8a, 0xf9, 0x32, 0xc1, 0xd7, 0xf8, 0x39, 0x7c, 0x30, 0xa1, 0xbe, 0x10, 0x09, 0x9c, 0xa7, 0xba,
	0x03, 0x23, 0xa7, 0x9d, 0x2f, 0x49, 0x15, 0xa9, 0x65, 0xa0, 0x99, 0x4d, 0xb3, 0x94, 0xc5, 0xdc,
	0xf2, 0xe0, 0x18, 0x1b, 0xfd, 0xe3, 0xbb, 0x35, 0xba, 0xf8, 0xfc, 0xdd, 0xb2, 0x61, 0x35, 0x03,
	0xfd, 0x22, 0xcd, 0xd2, 0x53, 0x6e, 0xb9, 0xdb, 0x0a, 0x3c, 0xbe, 0x75, 0x15, 0x27, 0x2c, 0x4a,
	0x07, 0xca, 0x06, 0xdf, 0x60, 0x9d, 0x1b, 0x3c, 0xbe, 0x3d, 0x4f, 0x75, 0xf2, 0x83, 0x8b, 0x4d,
	0x58, 0x03, 0x29, 0x73, 0xd6, 0xb7, 0x53, 0xd6, 0x40, 0x4a, 0xcf, 0x6a, 0x93, 0xba, 0x63, 0x19,
	0xcb, 0xfb, 0x7d, 0xd0, 0x0c, 0x14, 0xbf, 0x91, 0x10, 0x07, 0xdf, 0xf9, 0xfd, 0xc2, 0xe3, 0xdb,
	0xae, 0x47, 0xce, 0x3c, 0x40, 0x5b, 0x64, 0xbb, 0xcc, 0x17, 0x4a, 0xd8, 0xe0, 0x7b, 0x5c, 0x77,
	0x73, 0x4a, 0xbe, 0x50, 0xc2, 0xd2, 0x4f, 0xc8, 0x56, 0x99, 0x99, 0xf0, 0x51, 0x70, 0x82, 0xc4,
	0xda, 0x94, 0xf8, 0x9c, 0x8f, 0x9a, 0x2d, 0xb2, 0xed, 0x5f, 0xd5, 0x6a, 0x1c, 0xc6, 0x38, 0x03,
	0xda, 0x20, 0xcb, 0x43, 0x2e, 0x07, 0x85, 0x37, 0xf8, 0x87, 0xe6, 0xeb, 0x0a, 0xd9, 0x41, 0x2a,
	0x76, 0x5a, 0xc4, 0x9e, 0xbb, 0x47, 0x56, 0x79, 0xaf, 0xec, 0x24, 0x2b, 0xbc, 0xe7, 0x3c, 0x84,
	0x3e, 0x24, 0x6b, 0xa6, 0x40, 0x96, 0x10, 0x59, 0x35, 0x53, 0x68, 0xa8, 0x73, 0xe8, 0x9e, 0x87,
	0x86, 0xda, 0x43, 0x07, 0xa4, 0xe6, 0x96, 0x97, 0x69, 0x7f, 0xec, 0xf1, 0xfb, 0xde, 0x66, 0x8a,
	0x20, 0xda, 0xd3, 0xa7, 0x64, 0xf7, 0xad, 0xfb, 0xe0, 0x8e, 0xc2, 0xff, 0x5c, 0x21, 0x8f, 0x8a,
	0x71, 0x6a, 0x88, 0x85, 0xb1, 0x0c, 0x94, 0xd5, 0xe3, 0xdc, 0xda, 0x1e, 0x91, 0xb5, 0x62, 0xea,
	0x79, 0xde, 0xe4, 0x99, 0x8e, 0xf2, 0xee, 0x94, 0x4d, 0xca, 0xbd, 0x4c, 0xf5, 0xb0, 0x33, 0x8f,
	0xcf, 0x6b, 0xda, 0xf3, 0x70, 0xd3, 0x45, 0x2e, 0xa6, 0xc6, 0x37, 0x24, 0x5b, 0xa9, 0xc9, 0x7a,
	0xae, 0xc6, 0xc8, 0xbd, 0x9f, 0x88, 0xb1, 0x55, 0xf3, 0x17, 0xae, 0x39, 0x99, 0x6b, 0xaf, 0x72,
	0x11, 0xd3, 0x5f, 0x09, 0x4d, 0x4d, 0xc6, 0x7a, 0xc3, 0xa3, 0xb2, 0xf4, 0xfd, 0x85, 0x48, 0xbb,
	0x37, 0x3c, 0x1f, 0x1e, 0x4d, 0xc5, 0x35, 0xa9, 0xdd, 0xf4, 0x33, 0xc6, 0x0d, 0x53, 0x83, 0xe4,
	0x06, 0x74, 0xb0, 0xbc, 0x10, 0xdd, 0xea, 0x4d, 0x3f, 0x3b, 0x31, 0x1d, 0x94, 0x70, 0x8d, 0x06,
	0xd1, 0xd7, 0x65, 0xd5, 0x95, 0xc5, 0x34, 0x1a, 0x65, 0x26, 0xba, 0x63, 0xb2, 0xcd, 0xb3, 0x4c,
	0x8a, 0x88, 0x5b, 0x91, 0x2a, 0xff, 0xb1, 0xaf, 0x2e, 0xa6, 0xcd, 0x25, 0x1d, 0xdc, 0x3f, 0x7f,
	0x55, 0x48, 0xe3, 0x6d, 0x1b, 0x82, 0xfe, 0x71, 0x07, 0x10, 0x54, 0xd0, 0x52, 0x7f, 0x9a, 0x8f,
	0xa5, 0xce, 0xec, 0x41, 0x61, 0x21, 0x09, 0xd1, 0x57, 0xba, 0x2f, 0x43, 0x04, 0xce, 0x5c, 0xdc,
	0xd5, 0xf8, 0xf0, 0xce, 0x04, 0xfa, 0x5b, 0x85, 0x6c, 0x17, 0xeb, 0xb2, 0x18, 0x2c, 0x17, 0xd2,
	0xe0, 0xe6, 0xad, 0x1e, 0xfe, 0xbc, 0x80, 0x22, 0x11, 0x0d, 0xb7, 0x0a, 0xd2, 0xa9, 0x17, 0x6c,
	0xfe, 0xbd, 0x94, 0x3b, 0x62, 0x7e, 0x4e, 0xa0, 0x23, 0x39, 0x13, 0xc2, 0xab, 0x4a, 0x61, 0x42,
	0xf8, 0x40, 0x8f, 0xc9, 0x7b, 0x03, 0x03, 0x86, 0xc5, 0xd0, 0xe3, 0x03, 0x69, 0x99, 0x14, 0xea,
	0x95, 0x4f, 0xea, 0x49, 0xde, 0x47, 0x53, 0x59, 0x0b, 0xf7, 0x1c, 0xe5, 0xd4, 0x33, 0x2e, 0x85,
	0x7a, 0xe5, 0xce, 0x9c, 0x73, 0xc9, 0xfb, 0xf4, 0x31, 0x79, 0xd0, 0x07, 0x05, 0x9a, 0x5b, 0x88,
	0x59, 0x02, 0x56, 0x8b, 0x88, 0x19, 0x3b, 0x96, 0x85, 0x7f, 0x36, 0x26, 0xe8, 0x73, 0x04, 0xbb,
	0x0e, 0x73, 0x37, 0x00, 0x1e, 0x45, 0x90, 0xfd, 0x2f, 0xc9, 0x9b, 0x6a, 0xbd, 0x00, 0xcb, 0x39,
	0x0f, 0xc8, 0x8a, 0xa7, 0xe2, 0xde, 0xab, 0x85, 0xf9, 0x13, 0x7d, 0x9f, 0x10, 0xe1, 0xfc, 0xc8,
	0x1d, 0xed, 0x80, 0x3b, 0x64, 0x3d, 0x5c, 0x77, 0x11, 0x77, 0xa4, 0x83, 0x83, 0x2d, 0x4c, 0xce,
	0xaf, 0x55, 0x7c, 0x9b, 0x75, 0x0b, 0xf9, 0xb9, 0xd5, 0xfc, 0xe7, 0x1e, 0xd9, 0x28, 0x77, 0x8a,
	0x32, 0xb2, 0x24, 0xe2, 0x7c, 0x62, 0x57, 0x73, 0x98, 0x58, 0xf9, 0x4c, 0x0a, 0x97, 0x44, 0x4c,
	0x7f, 0xaf, 0x90, 0xdd, 0x7c, 0x86, 0x05, 0xd3, 0x30, 0x29, 0x8c, 0xcd, 0xfd, 0x3b, 0x9c, 0xff,
	0x67, 0x12, 0xd6, 0xfd, 0xd3, 0x75, 0xa1, 0x77, 0x29, 0x8c, 0x75, 0xa3, 0x2b, 0x66, 0xce, 0xe3,
	0x44, 0x28, 0xe6, 0x28, 0x6e, 0x31, 0x1c, 0x5d, 0x2d, 0x6c, 0xe4, 0xe8, 0x89, 0x03, 0x4f, 0x73,
	0xcc, 0x65, 0xf1, 0x78, 0x08, 0xda, 0x0a, 0x03, 0x2c, 0xe3, 0xc6, 0xb8, 0x0b, 0x65, 0xaa, 0xe4,
	0x18, 0x67, 0xb7, 0x16, 0x36, 0x26, 0xe8, 0xb5, 0x07, 0xaf, 0x94, 0x1c, 0x53, 0xe3, 0xaf, 0x42,
	0x78, 0x30, 0xe2, 0x55, 0x68, 0x19, 0xf7, 0xed, 0xd5, 0xfc, 0xae, 0x42, 0xb8, 0x36, 0xde, 0x87,
	0xdc, 0x65, 0xd3, 0xdd, 0x87, 0x6e, 0x56, 0x90, 0x78, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6f, 0x58, 0x87, 0x5b, 0xc3, 0x0c, 0x00, 0x00,
}
