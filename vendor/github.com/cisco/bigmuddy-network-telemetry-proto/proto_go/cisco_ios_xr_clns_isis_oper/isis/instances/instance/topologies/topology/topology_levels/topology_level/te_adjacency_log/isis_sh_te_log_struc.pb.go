// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_te_log_struc.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_adjacency_log is a generated protocol buffer package.

It is generated from these files:
	isis_sh_te_log_struc.proto

It has these top-level messages:
	IsisShTeLogStruc_KEYS
	IsisShTeLogStruc
	IsisShTimestampType
	IsisShGenericLogEnt
	IsisShTeLogEnt
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_adjacency_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE log
type IsisShTeLogStruc_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
	Level        string `protobuf:"bytes,5,opt,name=level" json:"level,omitempty"`
}

func (m *IsisShTeLogStruc_KEYS) Reset()                    { *m = IsisShTeLogStruc_KEYS{} }
func (m *IsisShTeLogStruc_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShTeLogStruc_KEYS) ProtoMessage()               {}
func (*IsisShTeLogStruc_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShTeLogStruc_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShTeLogStruc_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShTeLogStruc_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisShTeLogStruc_KEYS) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

func (m *IsisShTeLogStruc_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type IsisShTeLogStruc struct {
	// Log entries
	LogEntry []*IsisShTeLogEnt `protobuf:"bytes,50,rep,name=log_entry,json=logEntry" json:"log_entry,omitempty"`
}

func (m *IsisShTeLogStruc) Reset()                    { *m = IsisShTeLogStruc{} }
func (m *IsisShTeLogStruc) String() string            { return proto.CompactTextString(m) }
func (*IsisShTeLogStruc) ProtoMessage()               {}
func (*IsisShTeLogStruc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShTeLogStruc) GetLogEntry() []*IsisShTeLogEnt {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds" json:"nano_seconds,omitempty"`
}

func (m *IsisShTimestampType) Reset()                    { *m = IsisShTimestampType{} }
func (m *IsisShTimestampType) String() string            { return proto.CompactTextString(m) }
func (*IsisShTimestampType) ProtoMessage()               {}
func (*IsisShTimestampType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisShTimestampType) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IsisShTimestampType) GetNanoSeconds() uint32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

// Generic portion of a log entry
type IsisShGenericLogEnt struct {
	// Time in UTC relative to Jan 1st, 1970
	Timestamp *IsisShTimestampType `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *IsisShGenericLogEnt) Reset()                    { *m = IsisShGenericLogEnt{} }
func (m *IsisShGenericLogEnt) String() string            { return proto.CompactTextString(m) }
func (*IsisShGenericLogEnt) ProtoMessage()               {}
func (*IsisShGenericLogEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisShGenericLogEnt) GetTimestamp() *IsisShTimestampType {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// MPLS TE log entry
type IsisShTeLogEnt struct {
	// Generic entry data
	GenericData *IsisShGenericLogEnt `protobuf:"bytes,1,opt,name=generic_data,json=genericData" json:"generic_data,omitempty"`
	// Neighbor ip address
	NeighborIpAddress string `protobuf:"bytes,2,opt,name=neighbor_ip_address,json=neighborIpAddress" json:"neighbor_ip_address,omitempty"`
	// Up (TRUE) or down
	Status bool `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// Interface
	LogInterface string `protobuf:"bytes,4,opt,name=log_interface,json=logInterface" json:"log_interface,omitempty"`
	// Neighbor system ID
	TeLogNeighborSystemId string `protobuf:"bytes,5,opt,name=te_log_neighbor_system_id,json=teLogNeighborSystemId" json:"te_log_neighbor_system_id,omitempty"`
}

func (m *IsisShTeLogEnt) Reset()                    { *m = IsisShTeLogEnt{} }
func (m *IsisShTeLogEnt) String() string            { return proto.CompactTextString(m) }
func (*IsisShTeLogEnt) ProtoMessage()               {}
func (*IsisShTeLogEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsisShTeLogEnt) GetGenericData() *IsisShGenericLogEnt {
	if m != nil {
		return m.GenericData
	}
	return nil
}

func (m *IsisShTeLogEnt) GetNeighborIpAddress() string {
	if m != nil {
		return m.NeighborIpAddress
	}
	return ""
}

func (m *IsisShTeLogEnt) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *IsisShTeLogEnt) GetLogInterface() string {
	if m != nil {
		return m.LogInterface
	}
	return ""
}

func (m *IsisShTeLogEnt) GetTeLogNeighborSystemId() string {
	if m != nil {
		return m.TeLogNeighborSystemId
	}
	return ""
}

func init() {
	proto.RegisterType((*IsisShTeLogStruc_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_adjacency_log.isis_sh_te_log_struc_KEYS")
	proto.RegisterType((*IsisShTeLogStruc)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_adjacency_log.isis_sh_te_log_struc")
	proto.RegisterType((*IsisShTimestampType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_adjacency_log.isis_sh_timestamp_type")
	proto.RegisterType((*IsisShGenericLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_adjacency_log.isis_sh_generic_log_ent")
	proto.RegisterType((*IsisShTeLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_adjacency_log.isis_sh_te_log_ent")
}

func init() { proto.RegisterFile("isis_sh_te_log_struc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xbf, 0x6e, 0x14, 0x31,
	0x10, 0xc6, 0xe5, 0x0b, 0xb9, 0x3f, 0x73, 0x77, 0x05, 0x26, 0x24, 0x77, 0x54, 0xe1, 0xd2, 0xa4,
	0xda, 0xe2, 0x68, 0x68, 0x91, 0x48, 0x71, 0x02, 0xa5, 0xd8, 0x13, 0x05, 0x95, 0xe5, 0x78, 0xe7,
	0x36, 0x46, 0xbb, 0xf6, 0xca, 0xe3, 0x00, 0xfb, 0x0c, 0x14, 0xf0, 0x1a, 0x34, 0xd0, 0xf0, 0x04,
	0x94, 0x3c, 0x0e, 0x4f, 0x80, 0xd6, 0xbb, 0xde, 0x88, 0x23, 0x7d, 0xe8, 0x66, 0xe6, 0x67, 0xcd,
	0x7c, 0xf3, 0x49, 0x63, 0x78, 0xa2, 0x49, 0x93, 0xa0, 0x6b, 0xe1, 0x51, 0x14, 0x36, 0x17, 0xe4,
	0xdd, 0x8d, 0x4a, 0x2a, 0x67, 0xbd, 0xe5, 0x1f, 0x94, 0x26, 0x65, 0x85, 0xb6, 0x24, 0x3e, 0x3a,
	0xa1, 0x0a, 0x43, 0x22, 0xbc, 0xb6, 0x15, 0xba, 0xa4, 0x89, 0x12, 0x6d, 0xc8, 0x4b, 0xa3, 0xf0,
	0x36, 0x4a, 0xbc, 0xad, 0x6c, 0x61, 0x73, 0x8d, 0x14, 0xc3, 0xba, 0x0f, 0x44, 0x81, 0xef, 0xb1,
	0xa0, 0xbd, 0x3c, 0xf1, 0x28, 0x64, 0xf6, 0x4e, 0x2a, 0x34, 0xaa, 0x6e, 0x44, 0xac, 0xbe, 0x33,
	0x58, 0xde, 0xa5, 0x4b, 0xbc, 0xba, 0x78, 0xbb, 0xe5, 0x67, 0x30, 0x8f, 0xd3, 0x84, 0x91, 0x25,
	0x2e, 0xd8, 0x29, 0x3b, 0x9f, 0xa4, 0xb3, 0x58, 0xbc, 0x94, 0x25, 0xf2, 0x13, 0x18, 0xc9, 0x5d,
	0x8b, 0x07, 0x01, 0x0f, 0xe5, 0x2e, 0x80, 0x25, 0x8c, 0x29, 0x92, 0x83, 0x40, 0x46, 0xd4, 0xa1,
	0x33, 0x98, 0xf7, 0xca, 0x02, 0x7f, 0xd0, 0x36, 0x8e, 0xc5, 0xf0, 0xe8, 0x08, 0x0e, 0x83, 0xea,
	0xc5, 0x61, 0x80, 0x6d, 0xb2, 0xfa, 0xc9, 0xe0, 0xe8, 0x2e, 0xc5, 0xfc, 0x2b, 0x83, 0x49, 0x93,
	0xa1, 0xf1, 0xae, 0x5e, 0xac, 0x4f, 0x0f, 0xce, 0xa7, 0xeb, 0x4f, 0x2c, 0xb9, 0x27, 0x67, 0x93,
	0x3d, 0x8d, 0x68, 0x7c, 0x3a, 0x2e, 0x6c, 0x7e, 0xd1, 0xa8, 0x5b, 0xbd, 0x81, 0xe3, 0x9e, 0xeb,
	0x12, 0xc9, 0xcb, 0xb2, 0x12, 0xbe, 0xae, 0x90, 0x2f, 0x60, 0x44, 0xa8, 0xac, 0xc9, 0x28, 0x98,
	0x3d, 0x4f, 0x63, 0xca, 0x9f, 0xc2, 0xcc, 0x48, 0x63, 0x45, 0xc4, 0x83, 0x80, 0xa7, 0x4d, 0x6d,
	0xdb, 0x96, 0x56, 0xbf, 0x18, 0x9c, 0xc4, 0xbe, 0x39, 0x1a, 0x74, 0x5a, 0xc5, 0xe1, 0xfc, 0x1b,
	0x83, 0x49, 0x3f, 0x2b, 0xf4, 0x9e, 0xae, 0x3f, 0xff, 0x07, 0xf6, 0xfc, 0xb5, 0x7e, 0x7a, 0x2b,
	0x71, 0xf5, 0x7b, 0x00, 0xfc, 0x5f, 0x13, 0xf9, 0x0f, 0x06, 0xb3, 0xb8, 0x5b, 0x26, 0xbd, 0xec,
	0x56, 0xf9, 0x72, 0xff, 0xab, 0xec, 0x39, 0x9e, 0x4e, 0xbb, 0xc2, 0x4b, 0xe9, 0x25, 0x4f, 0xe0,
	0x91, 0x41, 0x9d, 0x5f, 0x5f, 0x59, 0x27, 0x74, 0x25, 0x64, 0x96, 0x39, 0x24, 0xea, 0x2e, 0xe6,
	0x61, 0x44, 0x9b, 0xea, 0x45, 0x0b, 0xf8, 0x31, 0x0c, 0xc9, 0x4b, 0x7f, 0x43, 0xe1, 0x74, 0xc6,
	0x69, 0x97, 0x35, 0x97, 0xd3, 0xf4, 0xd7, 0xc6, 0xa3, 0xdb, 0x49, 0xd5, 0x5f, 0x4e, 0x61, 0xf3,
	0x4d, 0xac, 0xf1, 0xe7, 0xb0, 0xec, 0x1c, 0xeb, 0x67, 0x52, 0x4d, 0x1e, 0x4b, 0xa1, 0xb3, 0xee,
	0x9a, 0x1e, 0x7b, 0x7c, 0x6d, 0xf3, 0xcb, 0x0e, 0x6f, 0x03, 0xdd, 0x64, 0x57, 0xc3, 0xf0, 0x1f,
	0x3d, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xa9, 0xc8, 0xf6, 0xad, 0x04, 0x00, 0x00,
}
