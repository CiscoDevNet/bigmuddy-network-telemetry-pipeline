// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_nsr_status_global.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status is a generated protocol buffer package.

It is generated from these files:
	isis_sh_nsr_status_global.proto

It has these top-level messages:
	IsisShNsrStatusGlobal_KEYS
	IsisShNsrStatusGlobal
	IsisShTimestampType
	NsrStatusGen
	NsrStatusNcd
	NsrStatusPm
	NsrStatusIsm
	NsrStatusDs
	NsrStatusNiiIntf
	NsrStatusTe
	NsrStatusInfraType
	NsrStatusGblType
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IS-IS process NSR status
type IsisShNsrStatusGlobal_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *IsisShNsrStatusGlobal_KEYS) Reset()                    { *m = IsisShNsrStatusGlobal_KEYS{} }
func (m *IsisShNsrStatusGlobal_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShNsrStatusGlobal_KEYS) ProtoMessage()               {}
func (*IsisShNsrStatusGlobal_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShNsrStatusGlobal_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

type IsisShNsrStatusGlobal struct {
	// ISIS VM STATE
	IsisVmState uint32 `protobuf:"varint,50,opt,name=isis_vm_state,json=isisVmState" json:"isis_vm_state,omitempty"`
	// ISIS NSR PEER STATUS
	IsisNsrPeer *NsrStatusGblType `protobuf:"bytes,51,opt,name=isis_nsr_peer,json=isisNsrPeer" json:"isis_nsr_peer,omitempty"`
	// ISIS NSR Infra
	IsisNsrInfra *NsrStatusInfraType `protobuf:"bytes,52,opt,name=isis_nsr_infra,json=isisNsrInfra" json:"isis_nsr_infra,omitempty"`
}

func (m *IsisShNsrStatusGlobal) Reset()                    { *m = IsisShNsrStatusGlobal{} }
func (m *IsisShNsrStatusGlobal) String() string            { return proto.CompactTextString(m) }
func (*IsisShNsrStatusGlobal) ProtoMessage()               {}
func (*IsisShNsrStatusGlobal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShNsrStatusGlobal) GetIsisVmState() uint32 {
	if m != nil {
		return m.IsisVmState
	}
	return 0
}

func (m *IsisShNsrStatusGlobal) GetIsisNsrPeer() *NsrStatusGblType {
	if m != nil {
		return m.IsisNsrPeer
	}
	return nil
}

func (m *IsisShNsrStatusGlobal) GetIsisNsrInfra() *NsrStatusInfraType {
	if m != nil {
		return m.IsisNsrInfra
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds" json:"nano_seconds,omitempty"`
}

func (m *IsisShTimestampType) Reset()                    { *m = IsisShTimestampType{} }
func (m *IsisShTimestampType) String() string            { return proto.CompactTextString(m) }
func (*IsisShTimestampType) ProtoMessage()               {}
func (*IsisShTimestampType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisShTimestampType) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IsisShTimestampType) GetNanoSeconds() uint32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

type NsrStatusGen struct {
	MyNodeid       uint32 `protobuf:"varint,1,opt,name=my_nodeid,json=myNodeid" json:"my_nodeid,omitempty"`
	MyProcessId    uint32 `protobuf:"varint,2,opt,name=my_process_id,json=myProcessId" json:"my_process_id,omitempty"`
	PmIssuRole     uint32 `protobuf:"varint,3,opt,name=pm_issu_role,json=pmIssuRole" json:"pm_issu_role,omitempty"`
	PmHaRole       uint32 `protobuf:"varint,4,opt,name=pm_ha_role,json=pmHaRole" json:"pm_ha_role,omitempty"`
	SysmgrHaRole   uint32 `protobuf:"varint,5,opt,name=sysmgr_ha_role,json=sysmgrHaRole" json:"sysmgr_ha_role,omitempty"`
	NsrSendReady   uint32 `protobuf:"varint,6,opt,name=nsr_send_ready,json=nsrSendReady" json:"nsr_send_ready,omitempty"`
	NsrSendUnready uint32 `protobuf:"varint,7,opt,name=nsr_send_unready,json=nsrSendUnready" json:"nsr_send_unready,omitempty"`
	NsrSendErr     uint32 `protobuf:"varint,8,opt,name=nsr_send_err,json=nsrSendErr" json:"nsr_send_err,omitempty"`
	NsrRecvErr     uint32 `protobuf:"varint,9,opt,name=nsr_recv_err,json=nsrRecvErr" json:"nsr_recv_err,omitempty"`
	RetryFlag      uint32 `protobuf:"varint,10,opt,name=retry_flag,json=retryFlag" json:"retry_flag,omitempty"`
	NsrEnabled     bool   `protobuf:"varint,11,opt,name=nsr_enabled,json=nsrEnabled" json:"nsr_enabled,omitempty"`
	NsrConfigured  bool   `protobuf:"varint,12,opt,name=nsr_configured,json=nsrConfigured" json:"nsr_configured,omitempty"`
	NsfConfigured  bool   `protobuf:"varint,13,opt,name=nsf_configured,json=nsfConfigured" json:"nsf_configured,omitempty"`
	Failover       bool   `protobuf:"varint,14,opt,name=failover" json:"failover,omitempty"`
	LanidReqNeeded bool   `protobuf:"varint,15,opt,name=lanid_req_needed,json=lanidReqNeeded" json:"lanid_req_needed,omitempty"`
}

func (m *NsrStatusGen) Reset()                    { *m = NsrStatusGen{} }
func (m *NsrStatusGen) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusGen) ProtoMessage()               {}
func (*NsrStatusGen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NsrStatusGen) GetMyNodeid() uint32 {
	if m != nil {
		return m.MyNodeid
	}
	return 0
}

func (m *NsrStatusGen) GetMyProcessId() uint32 {
	if m != nil {
		return m.MyProcessId
	}
	return 0
}

func (m *NsrStatusGen) GetPmIssuRole() uint32 {
	if m != nil {
		return m.PmIssuRole
	}
	return 0
}

func (m *NsrStatusGen) GetPmHaRole() uint32 {
	if m != nil {
		return m.PmHaRole
	}
	return 0
}

func (m *NsrStatusGen) GetSysmgrHaRole() uint32 {
	if m != nil {
		return m.SysmgrHaRole
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendReady() uint32 {
	if m != nil {
		return m.NsrSendReady
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendUnready() uint32 {
	if m != nil {
		return m.NsrSendUnready
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendErr() uint32 {
	if m != nil {
		return m.NsrSendErr
	}
	return 0
}

func (m *NsrStatusGen) GetNsrRecvErr() uint32 {
	if m != nil {
		return m.NsrRecvErr
	}
	return 0
}

func (m *NsrStatusGen) GetRetryFlag() uint32 {
	if m != nil {
		return m.RetryFlag
	}
	return 0
}

func (m *NsrStatusGen) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *NsrStatusGen) GetNsrConfigured() bool {
	if m != nil {
		return m.NsrConfigured
	}
	return false
}

func (m *NsrStatusGen) GetNsfConfigured() bool {
	if m != nil {
		return m.NsfConfigured
	}
	return false
}

func (m *NsrStatusGen) GetFailover() bool {
	if m != nil {
		return m.Failover
	}
	return false
}

func (m *NsrStatusGen) GetLanidReqNeeded() bool {
	if m != nil {
		return m.LanidReqNeeded
	}
	return false
}

type NsrStatusNcd struct {
	VmIdx      uint32 `protobuf:"varint,1,opt,name=vm_idx,json=vmIdx" json:"vm_idx,omitempty"`
	ConnUp     bool   `protobuf:"varint,2,opt,name=conn_up,json=connUp" json:"conn_up,omitempty"`
	EndpHdl    uint32 `protobuf:"varint,3,opt,name=endp_hdl,json=endpHdl" json:"endp_hdl,omitempty"`
	Chksum     uint32 `protobuf:"varint,4,opt,name=chksum" json:"chksum,omitempty"`
	SendSeqnum uint32 `protobuf:"varint,5,opt,name=send_seqnum,json=sendSeqnum" json:"send_seqnum,omitempty"`
	RecvCnt    uint32 `protobuf:"varint,6,opt,name=recv_cnt,json=recvCnt" json:"recv_cnt,omitempty"`
}

func (m *NsrStatusNcd) Reset()                    { *m = NsrStatusNcd{} }
func (m *NsrStatusNcd) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusNcd) ProtoMessage()               {}
func (*NsrStatusNcd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NsrStatusNcd) GetVmIdx() uint32 {
	if m != nil {
		return m.VmIdx
	}
	return 0
}

func (m *NsrStatusNcd) GetConnUp() bool {
	if m != nil {
		return m.ConnUp
	}
	return false
}

func (m *NsrStatusNcd) GetEndpHdl() uint32 {
	if m != nil {
		return m.EndpHdl
	}
	return 0
}

func (m *NsrStatusNcd) GetChksum() uint32 {
	if m != nil {
		return m.Chksum
	}
	return 0
}

func (m *NsrStatusNcd) GetSendSeqnum() uint32 {
	if m != nil {
		return m.SendSeqnum
	}
	return 0
}

func (m *NsrStatusNcd) GetRecvCnt() uint32 {
	if m != nil {
		return m.RecvCnt
	}
	return 0
}

type NsrStatusPm struct {
	Reg        uint32 `protobuf:"varint,1,opt,name=reg" json:"reg,omitempty"`
	ConnCb     uint32 `protobuf:"varint,2,opt,name=conn_cb,json=connCb" json:"conn_cb,omitempty"`
	DisconnCb  uint32 `protobuf:"varint,3,opt,name=disconn_cb,json=disconnCb" json:"disconn_cb,omitempty"`
	ConnStatus bool   `protobuf:"varint,4,opt,name=conn_status,json=connStatus" json:"conn_status,omitempty"`
}

func (m *NsrStatusPm) Reset()                    { *m = NsrStatusPm{} }
func (m *NsrStatusPm) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusPm) ProtoMessage()               {}
func (*NsrStatusPm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NsrStatusPm) GetReg() uint32 {
	if m != nil {
		return m.Reg
	}
	return 0
}

func (m *NsrStatusPm) GetConnCb() uint32 {
	if m != nil {
		return m.ConnCb
	}
	return 0
}

func (m *NsrStatusPm) GetDisconnCb() uint32 {
	if m != nil {
		return m.DisconnCb
	}
	return 0
}

func (m *NsrStatusPm) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

type NsrStatusIsm struct {
	Conn       uint32 `protobuf:"varint,1,opt,name=conn" json:"conn,omitempty"`
	ConnCb     uint32 `protobuf:"varint,2,opt,name=conn_cb,json=connCb" json:"conn_cb,omitempty"`
	Disconn    uint32 `protobuf:"varint,3,opt,name=disconn" json:"disconn,omitempty"`
	DisconnCb  uint32 `protobuf:"varint,4,opt,name=disconn_cb,json=disconnCb" json:"disconn_cb,omitempty"`
	HaOpt      uint32 `protobuf:"varint,5,opt,name=ha_opt,json=haOpt" json:"ha_opt,omitempty"`
	HaOptCb    uint32 `protobuf:"varint,6,opt,name=ha_opt_cb,json=haOptCb" json:"ha_opt_cb,omitempty"`
	WaitReady  uint32 `protobuf:"varint,7,opt,name=wait_ready,json=waitReady" json:"wait_ready,omitempty"`
	SendReady  uint32 `protobuf:"varint,8,opt,name=send_ready,json=sendReady" json:"send_ready,omitempty"`
	EvtRspCb   uint32 `protobuf:"varint,9,opt,name=evt_rsp_cb,json=evtRspCb" json:"evt_rsp_cb,omitempty"`
	RegRspCb   uint32 `protobuf:"varint,10,opt,name=reg_rsp_cb,json=regRspCb" json:"reg_rsp_cb,omitempty"`
	ConnStatus bool   `protobuf:"varint,11,opt,name=conn_status,json=connStatus" json:"conn_status,omitempty"`
}

func (m *NsrStatusIsm) Reset()                    { *m = NsrStatusIsm{} }
func (m *NsrStatusIsm) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusIsm) ProtoMessage()               {}
func (*NsrStatusIsm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NsrStatusIsm) GetConn() uint32 {
	if m != nil {
		return m.Conn
	}
	return 0
}

func (m *NsrStatusIsm) GetConnCb() uint32 {
	if m != nil {
		return m.ConnCb
	}
	return 0
}

func (m *NsrStatusIsm) GetDisconn() uint32 {
	if m != nil {
		return m.Disconn
	}
	return 0
}

func (m *NsrStatusIsm) GetDisconnCb() uint32 {
	if m != nil {
		return m.DisconnCb
	}
	return 0
}

func (m *NsrStatusIsm) GetHaOpt() uint32 {
	if m != nil {
		return m.HaOpt
	}
	return 0
}

func (m *NsrStatusIsm) GetHaOptCb() uint32 {
	if m != nil {
		return m.HaOptCb
	}
	return 0
}

func (m *NsrStatusIsm) GetWaitReady() uint32 {
	if m != nil {
		return m.WaitReady
	}
	return 0
}

func (m *NsrStatusIsm) GetSendReady() uint32 {
	if m != nil {
		return m.SendReady
	}
	return 0
}

func (m *NsrStatusIsm) GetEvtRspCb() uint32 {
	if m != nil {
		return m.EvtRspCb
	}
	return 0
}

func (m *NsrStatusIsm) GetRegRspCb() uint32 {
	if m != nil {
		return m.RegRspCb
	}
	return 0
}

func (m *NsrStatusIsm) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

type NsrStatusDs struct {
	Conn         uint32                 `protobuf:"varint,1,opt,name=conn" json:"conn,omitempty"`
	ConnTs       *IsisShTimestampType   `protobuf:"bytes,2,opt,name=conn_ts,json=connTs" json:"conn_ts,omitempty"`
	ConnCb       uint32                 `protobuf:"varint,3,opt,name=conn_cb,json=connCb" json:"conn_cb,omitempty"`
	ConnCbTs     *IsisShTimestampType   `protobuf:"bytes,4,opt,name=conn_cb_ts,json=connCbTs" json:"conn_cb_ts,omitempty"`
	Pub          uint32                 `protobuf:"varint,5,opt,name=pub" json:"pub,omitempty"`
	PubTs        *IsisShTimestampType   `protobuf:"bytes,6,opt,name=pub_ts,json=pubTs" json:"pub_ts,omitempty"`
	PubCb        uint32                 `protobuf:"varint,7,opt,name=pub_cb,json=pubCb" json:"pub_cb,omitempty"`
	PubCbTs      *IsisShTimestampType   `protobuf:"bytes,8,opt,name=pub_cb_ts,json=pubCbTs" json:"pub_cb_ts,omitempty"`
	Reg          uint32                 `protobuf:"varint,9,opt,name=reg" json:"reg,omitempty"`
	RegTs        *IsisShTimestampType   `protobuf:"bytes,10,opt,name=reg_ts,json=regTs" json:"reg_ts,omitempty"`
	RegCb        uint32                 `protobuf:"varint,11,opt,name=reg_cb,json=regCb" json:"reg_cb,omitempty"`
	RegCbTs      *IsisShTimestampType   `protobuf:"bytes,12,opt,name=reg_cb_ts,json=regCbTs" json:"reg_cb_ts,omitempty"`
	Unreg        uint32                 `protobuf:"varint,13,opt,name=unreg" json:"unreg,omitempty"`
	UnregTs      *IsisShTimestampType   `protobuf:"bytes,14,opt,name=unreg_ts,json=unregTs" json:"unreg_ts,omitempty"`
	UnregCb      uint32                 `protobuf:"varint,15,opt,name=unreg_cb,json=unregCb" json:"unreg_cb,omitempty"`
	UnregCbTs    *IsisShTimestampType   `protobuf:"bytes,16,opt,name=unreg_cb_ts,json=unregCbTs" json:"unreg_cb_ts,omitempty"`
	DisconnCb    uint32                 `protobuf:"varint,17,opt,name=disconn_cb,json=disconnCb" json:"disconn_cb,omitempty"`
	DisconnCbTs  *IsisShTimestampType   `protobuf:"bytes,18,opt,name=disconn_cb_ts,json=disconnCbTs" json:"disconn_cb_ts,omitempty"`
	NotifyCb     uint32                 `protobuf:"varint,19,opt,name=notify_cb,json=notifyCb" json:"notify_cb,omitempty"`
	NotifyCbTs   *IsisShTimestampType   `protobuf:"bytes,20,opt,name=notify_cb_ts,json=notifyCbTs" json:"notify_cb_ts,omitempty"`
	NotifyPeer   []byte                 `protobuf:"bytes,21,opt,name=notify_peer,json=notifyPeer,proto3" json:"notify_peer,omitempty"`
	NotifyPeerTs []*IsisShTimestampType `protobuf:"bytes,22,rep,name=notify_peer_ts,json=notifyPeerTs" json:"notify_peer_ts,omitempty"`
	DelCb        uint32                 `protobuf:"varint,23,opt,name=del_cb,json=delCb" json:"del_cb,omitempty"`
	DelCbTs      *IsisShTimestampType   `protobuf:"bytes,24,opt,name=del_cb_ts,json=delCbTs" json:"del_cb_ts,omitempty"`
	RemoveSrv    uint32                 `protobuf:"varint,25,opt,name=remove_srv,json=removeSrv" json:"remove_srv,omitempty"`
	RemoveSrvTs  *IsisShTimestampType   `protobuf:"bytes,26,opt,name=remove_srv_ts,json=removeSrvTs" json:"remove_srv_ts,omitempty"`
	ConnStatus   bool                   `protobuf:"varint,27,opt,name=conn_status,json=connStatus" json:"conn_status,omitempty"`
	ConnStatusTs *IsisShTimestampType   `protobuf:"bytes,28,opt,name=conn_status_ts,json=connStatusTs" json:"conn_status_ts,omitempty"`
}

func (m *NsrStatusDs) Reset()                    { *m = NsrStatusDs{} }
func (m *NsrStatusDs) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusDs) ProtoMessage()               {}
func (*NsrStatusDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NsrStatusDs) GetConn() uint32 {
	if m != nil {
		return m.Conn
	}
	return 0
}

func (m *NsrStatusDs) GetConnTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnTs
	}
	return nil
}

func (m *NsrStatusDs) GetConnCb() uint32 {
	if m != nil {
		return m.ConnCb
	}
	return 0
}

func (m *NsrStatusDs) GetConnCbTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetPub() uint32 {
	if m != nil {
		return m.Pub
	}
	return 0
}

func (m *NsrStatusDs) GetPubTs() *IsisShTimestampType {
	if m != nil {
		return m.PubTs
	}
	return nil
}

func (m *NsrStatusDs) GetPubCb() uint32 {
	if m != nil {
		return m.PubCb
	}
	return 0
}

func (m *NsrStatusDs) GetPubCbTs() *IsisShTimestampType {
	if m != nil {
		return m.PubCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetReg() uint32 {
	if m != nil {
		return m.Reg
	}
	return 0
}

func (m *NsrStatusDs) GetRegTs() *IsisShTimestampType {
	if m != nil {
		return m.RegTs
	}
	return nil
}

func (m *NsrStatusDs) GetRegCb() uint32 {
	if m != nil {
		return m.RegCb
	}
	return 0
}

func (m *NsrStatusDs) GetRegCbTs() *IsisShTimestampType {
	if m != nil {
		return m.RegCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetUnreg() uint32 {
	if m != nil {
		return m.Unreg
	}
	return 0
}

func (m *NsrStatusDs) GetUnregTs() *IsisShTimestampType {
	if m != nil {
		return m.UnregTs
	}
	return nil
}

func (m *NsrStatusDs) GetUnregCb() uint32 {
	if m != nil {
		return m.UnregCb
	}
	return 0
}

func (m *NsrStatusDs) GetUnregCbTs() *IsisShTimestampType {
	if m != nil {
		return m.UnregCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetDisconnCb() uint32 {
	if m != nil {
		return m.DisconnCb
	}
	return 0
}

func (m *NsrStatusDs) GetDisconnCbTs() *IsisShTimestampType {
	if m != nil {
		return m.DisconnCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyCb() uint32 {
	if m != nil {
		return m.NotifyCb
	}
	return 0
}

func (m *NsrStatusDs) GetNotifyCbTs() *IsisShTimestampType {
	if m != nil {
		return m.NotifyCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyPeer() []byte {
	if m != nil {
		return m.NotifyPeer
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyPeerTs() []*IsisShTimestampType {
	if m != nil {
		return m.NotifyPeerTs
	}
	return nil
}

func (m *NsrStatusDs) GetDelCb() uint32 {
	if m != nil {
		return m.DelCb
	}
	return 0
}

func (m *NsrStatusDs) GetDelCbTs() *IsisShTimestampType {
	if m != nil {
		return m.DelCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetRemoveSrv() uint32 {
	if m != nil {
		return m.RemoveSrv
	}
	return 0
}

func (m *NsrStatusDs) GetRemoveSrvTs() *IsisShTimestampType {
	if m != nil {
		return m.RemoveSrvTs
	}
	return nil
}

func (m *NsrStatusDs) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

func (m *NsrStatusDs) GetConnStatusTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnStatusTs
	}
	return nil
}

type NsrStatusNiiIntf struct {
	Exist      bool `protobuf:"varint,1,opt,name=exist" json:"exist,omitempty"`
	BroughtUp  bool `protobuf:"varint,2,opt,name=brought_up,json=broughtUp" json:"brought_up,omitempty"`
	RetryTimer bool `protobuf:"varint,3,opt,name=retry_timer,json=retryTimer" json:"retry_timer,omitempty"`
	Running    bool `protobuf:"varint,4,opt,name=running" json:"running,omitempty"`
	HasAdj     bool `protobuf:"varint,5,opt,name=has_adj,json=hasAdj" json:"has_adj,omitempty"`
}

func (m *NsrStatusNiiIntf) Reset()                    { *m = NsrStatusNiiIntf{} }
func (m *NsrStatusNiiIntf) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusNiiIntf) ProtoMessage()               {}
func (*NsrStatusNiiIntf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NsrStatusNiiIntf) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (m *NsrStatusNiiIntf) GetBroughtUp() bool {
	if m != nil {
		return m.BroughtUp
	}
	return false
}

func (m *NsrStatusNiiIntf) GetRetryTimer() bool {
	if m != nil {
		return m.RetryTimer
	}
	return false
}

func (m *NsrStatusNiiIntf) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *NsrStatusNiiIntf) GetHasAdj() bool {
	if m != nil {
		return m.HasAdj
	}
	return false
}

type NsrStatusTe struct {
	Enabled           uint32 `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	ConnUp            uint32 `protobuf:"varint,2,opt,name=conn_up,json=connUp" json:"conn_up,omitempty"`
	TeLinkCb          uint32 `protobuf:"varint,3,opt,name=te_link_cb,json=teLinkCb" json:"te_link_cb,omitempty"`
	TeTunnelCb        uint32 `protobuf:"varint,4,opt,name=te_tunnel_cb,json=teTunnelCb" json:"te_tunnel_cb,omitempty"`
	AdvSyncData       uint32 `protobuf:"varint,5,opt,name=adv_sync_data,json=advSyncData" json:"adv_sync_data,omitempty"`
	LinkPurgeTimeOn   uint32 `protobuf:"varint,6,opt,name=link_purge_time_on,json=linkPurgeTimeOn" json:"link_purge_time_on,omitempty"`
	TunnelPurgeTimeOn uint32 `protobuf:"varint,7,opt,name=tunnel_purge_time_on,json=tunnelPurgeTimeOn" json:"tunnel_purge_time_on,omitempty"`
	HasInfoFromTe     uint32 `protobuf:"varint,8,opt,name=has_info_from_te,json=hasInfoFromTe" json:"has_info_from_te,omitempty"`
}

func (m *NsrStatusTe) Reset()                    { *m = NsrStatusTe{} }
func (m *NsrStatusTe) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusTe) ProtoMessage()               {}
func (*NsrStatusTe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NsrStatusTe) GetEnabled() uint32 {
	if m != nil {
		return m.Enabled
	}
	return 0
}

func (m *NsrStatusTe) GetConnUp() uint32 {
	if m != nil {
		return m.ConnUp
	}
	return 0
}

func (m *NsrStatusTe) GetTeLinkCb() uint32 {
	if m != nil {
		return m.TeLinkCb
	}
	return 0
}

func (m *NsrStatusTe) GetTeTunnelCb() uint32 {
	if m != nil {
		return m.TeTunnelCb
	}
	return 0
}

func (m *NsrStatusTe) GetAdvSyncData() uint32 {
	if m != nil {
		return m.AdvSyncData
	}
	return 0
}

func (m *NsrStatusTe) GetLinkPurgeTimeOn() uint32 {
	if m != nil {
		return m.LinkPurgeTimeOn
	}
	return 0
}

func (m *NsrStatusTe) GetTunnelPurgeTimeOn() uint32 {
	if m != nil {
		return m.TunnelPurgeTimeOn
	}
	return 0
}

func (m *NsrStatusTe) GetHasInfoFromTe() uint32 {
	if m != nil {
		return m.HasInfoFromTe
	}
	return 0
}

type NsrStatusInfraType struct {
	Gen    *NsrStatusGen       `protobuf:"bytes,1,opt,name=gen" json:"gen,omitempty"`
	Ncd    []*NsrStatusNcd     `protobuf:"bytes,2,rep,name=ncd" json:"ncd,omitempty"`
	Pm     *NsrStatusPm        `protobuf:"bytes,3,opt,name=pm" json:"pm,omitempty"`
	Ism    *NsrStatusIsm       `protobuf:"bytes,4,opt,name=ism" json:"ism,omitempty"`
	Ds     *NsrStatusDs        `protobuf:"bytes,5,opt,name=ds" json:"ds,omitempty"`
	Te     *NsrStatusTe        `protobuf:"bytes,6,opt,name=te" json:"te,omitempty"`
	NiiIdb []*NsrStatusNiiIntf `protobuf:"bytes,7,rep,name=nii_idb,json=niiIdb" json:"nii_idb,omitempty"`
}

func (m *NsrStatusInfraType) Reset()                    { *m = NsrStatusInfraType{} }
func (m *NsrStatusInfraType) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusInfraType) ProtoMessage()               {}
func (*NsrStatusInfraType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NsrStatusInfraType) GetGen() *NsrStatusGen {
	if m != nil {
		return m.Gen
	}
	return nil
}

func (m *NsrStatusInfraType) GetNcd() []*NsrStatusNcd {
	if m != nil {
		return m.Ncd
	}
	return nil
}

func (m *NsrStatusInfraType) GetPm() *NsrStatusPm {
	if m != nil {
		return m.Pm
	}
	return nil
}

func (m *NsrStatusInfraType) GetIsm() *NsrStatusIsm {
	if m != nil {
		return m.Ism
	}
	return nil
}

func (m *NsrStatusInfraType) GetDs() *NsrStatusDs {
	if m != nil {
		return m.Ds
	}
	return nil
}

func (m *NsrStatusInfraType) GetTe() *NsrStatusTe {
	if m != nil {
		return m.Te
	}
	return nil
}

func (m *NsrStatusInfraType) GetNiiIdb() []*NsrStatusNiiIntf {
	if m != nil {
		return m.NiiIdb
	}
	return nil
}

type NsrStatusGblType struct {
	FullSyncAchieved []uint32 `protobuf:"varint,1,rep,packed,name=full_sync_achieved,json=fullSyncAchieved" json:"full_sync_achieved,omitempty"`
	ManSyncCount     []uint32 `protobuf:"varint,2,rep,packed,name=man_sync_count,json=manSyncCount" json:"man_sync_count,omitempty"`
	NsrChgCount      []uint32 `protobuf:"varint,3,rep,packed,name=nsr_chg_count,json=nsrChgCount" json:"nsr_chg_count,omitempty"`
	UptimeValid      []bool   `protobuf:"varint,4,rep,packed,name=uptime_valid,json=uptimeValid" json:"uptime_valid,omitempty"`
	Uptime           []uint32 `protobuf:"varint,5,rep,packed,name=uptime" json:"uptime,omitempty"`
}

func (m *NsrStatusGblType) Reset()                    { *m = NsrStatusGblType{} }
func (m *NsrStatusGblType) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusGblType) ProtoMessage()               {}
func (*NsrStatusGblType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NsrStatusGblType) GetFullSyncAchieved() []uint32 {
	if m != nil {
		return m.FullSyncAchieved
	}
	return nil
}

func (m *NsrStatusGblType) GetManSyncCount() []uint32 {
	if m != nil {
		return m.ManSyncCount
	}
	return nil
}

func (m *NsrStatusGblType) GetNsrChgCount() []uint32 {
	if m != nil {
		return m.NsrChgCount
	}
	return nil
}

func (m *NsrStatusGblType) GetUptimeValid() []bool {
	if m != nil {
		return m.UptimeValid
	}
	return nil
}

func (m *NsrStatusGblType) GetUptime() []uint32 {
	if m != nil {
		return m.Uptime
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShNsrStatusGlobal_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global_KEYS")
	proto.RegisterType((*IsisShNsrStatusGlobal)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global")
	proto.RegisterType((*IsisShTimestampType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type")
	proto.RegisterType((*NsrStatusGen)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gen")
	proto.RegisterType((*NsrStatusNcd)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ncd")
	proto.RegisterType((*NsrStatusPm)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_pm")
	proto.RegisterType((*NsrStatusIsm)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ism")
	proto.RegisterType((*NsrStatusDs)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds")
	proto.RegisterType((*NsrStatusNiiIntf)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_nii_intf")
	proto.RegisterType((*NsrStatusTe)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_te")
	proto.RegisterType((*NsrStatusInfraType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type")
	proto.RegisterType((*NsrStatusGblType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gbl_type")
}

func init() { proto.RegisterFile("isis_sh_nsr_status_global.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x6e, 0x23, 0xb7,
	0x15, 0x86, 0x2c, 0x5b, 0x1e, 0x1d, 0xfd, 0xac, 0xc3, 0xac, 0x37, 0xb3, 0x9b, 0x4d, 0xe3, 0xa8,
	0x29, 0x6a, 0xa0, 0x85, 0x0b, 0x38, 0xbd, 0x2e, 0x10, 0xa8, 0x1b, 0xc4, 0x68, 0xeb, 0x2c, 0x46,
	0xf2, 0x02, 0xbd, 0x28, 0x58, 0xce, 0x90, 0x92, 0x26, 0x3b, 0xe4, 0x8c, 0x49, 0xce, 0xc4, 0x4a,
	0xfb, 0x2c, 0xed, 0x13, 0x14, 0xbd, 0xea, 0x1b, 0xf4, 0x22, 0x2f, 0xd3, 0x77, 0x28, 0x0e, 0xc9,
	0x91, 0x64, 0x67, 0xf7, 0x2a, 0xd6, 0xdd, 0xf0, 0x3b, 0xdf, 0xf0, 0x7c, 0x3c, 0x3c, 0x87, 0x3c,
	0x33, 0xf0, 0x69, 0x6e, 0x72, 0x43, 0xcd, 0x8a, 0x2a, 0xa3, 0xa9, 0xb1, 0xcc, 0xd6, 0x86, 0x2e,
	0x8b, 0x32, 0x65, 0xc5, 0x45, 0xa5, 0x4b, 0x5b, 0x92, 0xdf, 0x65, 0xb9, 0xc9, 0x4a, 0x9a, 0x97,
	0x86, 0xde, 0x69, 0x9a, 0x15, 0xca, 0x50, 0xf7, 0x4a, 0x59, 0x09, 0x7d, 0x81, 0x4f, 0x17, 0xb9,
	0x32, 0x96, 0xa9, 0x4c, 0x6c, 0x9f, 0x2e, 0xb6, 0x93, 0x4d, 0x5e, 0xc1, 0xcf, 0xde, 0xeb, 0x82,
	0xfe, 0xe1, 0xd5, 0x9f, 0x67, 0xe4, 0xe7, 0x30, 0x6a, 0x5f, 0xa4, 0x8a, 0x49, 0x11, 0x77, 0xce,
	0x3a, 0xe7, 0xfd, 0x64, 0xd8, 0x82, 0xd7, 0x4c, 0x8a, 0xc9, 0x7f, 0x0e, 0xe0, 0xf9, 0x7b, 0xe7,
	0x21, 0x13, 0x18, 0x39, 0x63, 0x23, 0x9d, 0x41, 0xc4, 0x97, 0x67, 0x9d, 0xf3, 0x51, 0x32, 0x40,
	0xf0, 0x8d, 0x9c, 0x21, 0x44, 0xbe, 0x0b, 0x1c, 0x7c, 0xbb, 0x12, 0x42, 0xc7, 0x5f, 0x9c, 0x75,
	0xce, 0x07, 0x97, 0xb3, 0x8b, 0x9f, 0xb6, 0xc0, 0x8b, 0x5d, 0x35, 0x69, 0x41, 0xed, 0xba, 0x12,
	0xde, 0xf1, 0xb5, 0xd1, 0xaf, 0x85, 0xd0, 0xe4, 0x6f, 0x30, 0xde, 0x38, 0xce, 0xd5, 0x42, 0xb3,
	0xf8, 0xb7, 0xce, 0xf3, 0xcd, 0x23, 0x7a, 0x76, 0xf3, 0x7a, 0xdf, 0xc3, 0xe0, 0xfb, 0x0a, 0xa1,
	0xc9, 0x0d, 0x3c, 0x6b, 0xc3, 0x66, 0x73, 0x29, 0x8c, 0x65, 0xb2, 0x72, 0x3c, 0x12, 0xc3, 0xb1,
	0x11, 0x59, 0xa9, 0xb8, 0x71, 0x01, 0x1f, 0x25, 0xed, 0x90, 0x7c, 0x06, 0x43, 0xc5, 0x54, 0x49,
	0x5b, 0xf3, 0x81, 0x0f, 0x26, 0x62, 0x33, 0x0f, 0x4d, 0xfe, 0x79, 0x08, 0xe3, 0xdd, 0x85, 0x0b,
	0x45, 0x3e, 0x86, 0xbe, 0x5c, 0x53, 0x55, 0x72, 0x91, 0xf3, 0x30, 0x63, 0x24, 0xd7, 0xd7, 0x6e,
	0x8c, 0x1b, 0x24, 0xd7, 0xb4, 0xd2, 0x65, 0x26, 0x8c, 0xa1, 0x39, 0x6f, 0xe7, 0x94, 0xeb, 0xd7,
	0x1e, 0xbb, 0xe2, 0xe4, 0x0c, 0x86, 0x95, 0xa4, 0xb9, 0x31, 0x35, 0xd5, 0x65, 0x21, 0xe2, 0xae,
	0xa3, 0x40, 0x25, 0xaf, 0x8c, 0xa9, 0x93, 0xb2, 0x10, 0xe4, 0x25, 0x40, 0x25, 0xe9, 0x8a, 0x79,
	0xfb, 0xa1, 0xf7, 0x51, 0xc9, 0xaf, 0x99, 0xb3, 0x7e, 0x0e, 0x63, 0xb3, 0x36, 0x72, 0xa9, 0x37,
	0x8c, 0x23, 0xc7, 0x18, 0x7a, 0x74, 0xcb, 0x72, 0xc2, 0x85, 0xe2, 0x54, 0x0b, 0xc6, 0xd7, 0x71,
	0xcf, 0xb3, 0x94, 0xd1, 0x33, 0xa1, 0x78, 0x82, 0x18, 0x39, 0x87, 0x93, 0x0d, 0xab, 0x56, 0x9e,
	0x77, 0xec, 0x78, 0xe3, 0xc0, 0xbb, 0xf1, 0x28, 0xaa, 0xde, 0x30, 0x85, 0xd6, 0x71, 0xe4, 0x55,
	0x07, 0xd6, 0x2b, 0xad, 0x5b, 0x86, 0x16, 0x59, 0xe3, 0x18, 0xfd, 0x0d, 0x23, 0x11, 0x59, 0x83,
	0x8c, 0x4f, 0x00, 0xb4, 0xb0, 0x7a, 0x4d, 0x17, 0x05, 0x5b, 0xc6, 0xe0, 0xec, 0x7d, 0x87, 0x7c,
	0x55, 0xb0, 0x25, 0xf9, 0x14, 0x06, 0x38, 0x81, 0x50, 0x2c, 0x2d, 0x04, 0x8f, 0x07, 0x67, 0x9d,
	0xf3, 0xc8, 0xbd, 0xff, 0xca, 0x23, 0xe4, 0x17, 0x7e, 0x4d, 0x59, 0xa9, 0x16, 0xf9, 0xb2, 0xd6,
	0x82, 0xc7, 0x43, 0xc7, 0x19, 0x29, 0xa3, 0xa7, 0x1b, 0xd0, 0xd3, 0x16, 0xbb, 0xb4, 0x51, 0x4b,
	0x5b, 0xec, 0xd0, 0x5e, 0x40, 0xb4, 0x60, 0x79, 0x51, 0x36, 0x42, 0xc7, 0x63, 0x47, 0xd8, 0x8c,
	0x31, 0x2e, 0x05, 0x53, 0x39, 0x86, 0xee, 0x96, 0x2a, 0x21, 0xb8, 0xe0, 0xf1, 0x13, 0xc7, 0x19,
	0x3b, 0x3c, 0x11, 0xb7, 0xd7, 0x0e, 0x9d, 0xfc, 0xbb, 0x73, 0x2f, 0x43, 0x54, 0xc6, 0xc9, 0x29,
	0xf4, 0x1a, 0x49, 0x73, 0x7e, 0x17, 0xd2, 0xe3, 0xa8, 0x91, 0x57, 0xfc, 0x8e, 0x7c, 0x04, 0xc7,
	0x59, 0xa9, 0x14, 0xad, 0x2b, 0x97, 0x15, 0x51, 0xd2, 0xc3, 0xe1, 0x4d, 0x45, 0x9e, 0x43, 0x24,
	0x14, 0xaf, 0xe8, 0x8a, 0x17, 0x21, 0x19, 0x8e, 0x71, 0xfc, 0x35, 0x2f, 0xc8, 0x33, 0xe8, 0x65,
	0xab, 0xb7, 0xa6, 0x96, 0x21, 0x0b, 0xc2, 0x08, 0x43, 0xe5, 0x76, 0xc2, 0x88, 0x5b, 0x55, 0xcb,
	0x90, 0x00, 0x80, 0xd0, 0xcc, 0x21, 0x38, 0xa7, 0xdb, 0x88, 0x4c, 0xd9, 0xb0, 0xf1, 0xc7, 0x38,
	0x9e, 0x2a, 0x3b, 0xf9, 0x1e, 0x46, 0x3b, 0x82, 0x2b, 0x49, 0x4e, 0xa0, 0xab, 0xc5, 0x32, 0x88,
	0xc5, 0xc7, 0x8d, 0xd4, 0x2c, 0x0d, 0x09, 0xec, 0xa4, 0x4e, 0x53, 0xdc, 0x41, 0x8e, 0xc5, 0xec,
	0x6d, 0x5e, 0x6c, 0x3f, 0x20, 0xd3, 0x14, 0x65, 0x39, 0x9b, 0x9f, 0xdb, 0x69, 0x8e, 0x12, 0x40,
	0x68, 0xe6, 0x4f, 0xc9, 0xff, 0x1e, 0xdc, 0x8b, 0x56, 0x6e, 0x24, 0x21, 0x70, 0x88, 0x84, 0xe0,
	0xde, 0x3d, 0xbf, 0xdf, 0x7f, 0x0c, 0xc7, 0xc1, 0x5b, 0x1b, 0xa9, 0x30, 0x7c, 0xa0, 0xec, 0xf0,
	0xa1, 0xb2, 0x53, 0xe8, 0xad, 0x18, 0x2d, 0x2b, 0x1b, 0x62, 0x75, 0xb4, 0x62, 0xdf, 0x54, 0x96,
	0xbc, 0x80, 0xbe, 0x87, 0xf1, 0xa5, 0x10, 0x27, 0x67, 0xf1, 0x6b, 0xfd, 0x8e, 0xe5, 0x96, 0xee,
	0x56, 0x45, 0x1f, 0x11, 0x5f, 0x3a, 0x9f, 0x00, 0xec, 0x14, 0x97, 0x2f, 0x87, 0xbe, 0xd9, 0x54,
	0xd6, 0x4b, 0x00, 0xd1, 0x58, 0xaa, 0x4d, 0x85, 0x53, 0xfb, 0x5a, 0x88, 0x44, 0x63, 0x13, 0x53,
	0x4d, 0x53, 0xb4, 0x6a, 0xb1, 0x6c, 0xad, 0xbe, 0x12, 0x22, 0x2d, 0x96, 0xde, 0xfa, 0x20, 0x8c,
	0x83, 0x1f, 0x85, 0xf1, 0x7f, 0x4f, 0xee, 0xed, 0x21, 0x37, 0xef, 0x8c, 0x62, 0x19, 0xa2, 0x68,
	0xfd, 0xd1, 0x36, 0xb8, 0x7c, 0xf3, 0x53, 0x4f, 0xe2, 0x77, 0x1f, 0xb1, 0x7e, 0x77, 0xe6, 0x66,
	0x77, 0xdb, 0xba, 0xf7, 0xb6, 0xcd, 0x02, 0x04, 0x03, 0x8a, 0x39, 0xdc, 0xab, 0x98, 0xc8, 0xfb,
	0x9c, 0x1b, 0xcc, 0xeb, 0xaa, 0x4e, 0xc3, 0x86, 0xe3, 0x23, 0x91, 0xd0, 0xab, 0x6a, 0xa7, 0xa1,
	0xb7, 0x57, 0x0d, 0x47, 0x55, 0x8d, 0x02, 0x4e, 0xbd, 0xbb, 0x2c, 0x0d, 0xd9, 0x83, 0xf0, 0x34,
	0x25, 0x1a, 0xfa, 0x1e, 0x46, 0x21, 0xd1, 0x5e, 0x85, 0x1c, 0x3b, 0x8f, 0x3e, 0x16, 0x58, 0xe3,
	0xfd, 0x6d, 0x8d, 0x4b, 0xe8, 0x61, 0x0a, 0x5a, 0xe3, 0xd2, 0x6f, 0x8f, 0xb1, 0xd0, 0x62, 0xe9,
	0x63, 0x81, 0xee, 0xb2, 0xd4, 0xa5, 0xf3, 0xc8, 0xc1, 0x3e, 0x16, 0x1e, 0x46, 0x21, 0xc3, 0xfd,
	0xc6, 0xc2, 0x79, 0x9c, 0x1b, 0xf2, 0x14, 0x8e, 0xf0, 0xae, 0x5b, 0xba, 0x6b, 0x61, 0x94, 0xf8,
	0x01, 0xb9, 0x85, 0xc8, 0x3d, 0xa0, 0x90, 0xf1, 0x7e, 0x85, 0x38, 0x3f, 0x73, 0x83, 0x87, 0xb4,
	0x77, 0x99, 0xa5, 0xee, 0x76, 0x19, 0x05, 0xd3, 0x34, 0x25, 0x0d, 0x0c, 0x5a, 0x13, 0x0a, 0x3a,
	0xd9, 0xab, 0xa0, 0x7e, 0xf0, 0x3a, 0x37, 0x0f, 0x8e, 0xd1, 0x0f, 0x1e, 0x1e, 0xa3, 0xdf, 0xc3,
	0x68, 0x6b, 0x46, 0x61, 0x64, 0xaf, 0xc2, 0x06, 0x1b, 0xcf, 0x73, 0x83, 0x8d, 0x97, 0x2a, 0x6d,
	0xbe, 0x58, 0xa3, 0xb2, 0x0f, 0xfd, 0x91, 0xe9, 0x81, 0x69, 0x4a, 0xee, 0x60, 0xb8, 0x31, 0xa2,
	0xae, 0xa7, 0x7b, 0xd5, 0x05, 0xad, 0xdf, 0xb9, 0x71, 0x5d, 0x8b, 0xf7, 0xec, 0xba, 0xed, 0xd3,
	0xb3, 0xce, 0xf9, 0xb0, 0x25, 0xb8, 0xbe, 0xf8, 0xef, 0x30, 0xde, 0x21, 0xa0, 0xb8, 0x67, 0x67,
	0xdd, 0x3d, 0x8a, 0x1b, 0x6e, 0x7d, 0xfb, 0xba, 0xe3, 0xa2, 0xc0, 0x90, 0x7d, 0xe4, 0xb3, 0x9d,
	0x8b, 0xc2, 0xd7, 0x9d, 0x87, 0x51, 0x4f, 0xbc, 0xdf, 0x74, 0x77, 0x1e, 0x7d, 0x6e, 0x69, 0x21,
	0xcb, 0x46, 0x50, 0xa3, 0x9b, 0xf8, 0x79, 0xdb, 0xfe, 0x21, 0x32, 0xd3, 0x0d, 0xe6, 0xd6, 0xd6,
	0x8c, 0xb2, 0x5e, 0xec, 0x37, 0xb7, 0x36, 0x9e, 0xfd, 0x26, 0xee, 0xde, 0xb8, 0x1f, 0x3f, 0xbc,
	0x71, 0x71, 0x13, 0x77, 0x08, 0xa8, 0xee, 0xe5, 0x5e, 0xd5, 0x0d, 0xb7, 0xbe, 0xe7, 0x66, 0xf2,
	0x8f, 0x0e, 0x7c, 0xb8, 0xdb, 0x64, 0xe6, 0x39, 0xcd, 0x95, 0x5d, 0xe0, 0x49, 0x26, 0xee, 0x72,
	0x63, 0xdd, 0xb5, 0x1f, 0x25, 0x7e, 0x80, 0x71, 0x4e, 0x75, 0x59, 0x2f, 0x57, 0x76, 0xdb, 0x6b,
	0xf6, 0x03, 0x72, 0x53, 0xe1, 0x5a, 0x7d, 0x17, 0x8e, 0x2e, 0xb5, 0xbb, 0xa9, 0xa3, 0xc4, 0x37,
	0xe6, 0x73, 0x44, 0xb0, 0xc9, 0xd2, 0xb5, 0x52, 0xb9, 0x5a, 0x86, 0x0e, 0xae, 0x1d, 0xe2, 0x05,
	0xbf, 0x62, 0x86, 0x32, 0xfe, 0xad, 0xbb, 0x55, 0xa3, 0xa4, 0xb7, 0x62, 0xe6, 0x4b, 0xfe, 0xed,
	0xe4, 0x5f, 0x07, 0xf7, 0x1a, 0x12, 0xeb, 0x3e, 0xbb, 0xda, 0x46, 0xbe, 0xd3, 0xf6, 0xb4, 0xbe,
	0x8b, 0x7f, 0xd0, 0x07, 0x8f, 0x36, 0x7d, 0xf0, 0x4b, 0x00, 0x2b, 0x68, 0x91, 0xab, 0xb7, 0xdb,
	0x0e, 0x22, 0xb2, 0xe2, 0x8f, 0xb9, 0x7a, 0x3b, 0x4d, 0xf1, 0xf3, 0xc2, 0x0a, 0x6a, 0x6b, 0xa5,
	0x7c, 0x3a, 0xfb, 0x16, 0x0f, 0xac, 0x98, 0x3b, 0x68, 0x9a, 0xe2, 0xc7, 0x17, 0xe3, 0x0d, 0x35,
	0x6b, 0x95, 0x51, 0xce, 0x2c, 0x0b, 0x37, 0xff, 0x80, 0xf1, 0x66, 0xb6, 0x56, 0xd9, 0xef, 0x99,
	0x65, 0xe4, 0x57, 0x40, 0x9c, 0x83, 0xaa, 0xd6, 0x4b, 0xe1, 0x22, 0x40, 0x4b, 0x15, 0x3a, 0xbf,
	0x27, 0x68, 0x79, 0x8d, 0x06, 0x8c, 0xc3, 0x37, 0x8a, 0xfc, 0x06, 0x9e, 0x06, 0x7f, 0xf7, 0xe9,
	0xfe, 0x36, 0xff, 0xc0, 0xdb, 0x76, 0x5f, 0xf8, 0x25, 0x9c, 0x60, 0x7c, 0x72, 0xb5, 0x28, 0xe9,
	0x42, 0x97, 0x92, 0x5a, 0x11, 0x3a, 0xc3, 0xd1, 0x8a, 0x99, 0x2b, 0xb5, 0x28, 0xbf, 0xd2, 0xa5,
	0x9c, 0x8b, 0xc9, 0x0f, 0x47, 0x70, 0xfa, 0xce, 0xcf, 0x5a, 0xf2, 0x57, 0xe8, 0x2e, 0x85, 0xef,
	0xe3, 0x06, 0x97, 0xd7, 0x8f, 0xf9, 0xd1, 0x2e, 0x54, 0x82, 0x53, 0xa3, 0x07, 0x95, 0xe1, 0x97,
	0x69, 0xf7, 0x91, 0x3d, 0xa8, 0x8c, 0x27, 0x38, 0x35, 0xf9, 0x0b, 0x1c, 0x54, 0xd2, 0x6d, 0xe0,
	0xe0, 0xf2, 0x4f, 0x8f, 0xe8, 0xa0, 0x92, 0xc9, 0x41, 0x25, 0x71, 0x01, 0xb9, 0x91, 0xa1, 0x8d,
	0x7c, 0xcc, 0x05, 0xe4, 0x46, 0x26, 0x38, 0x35, 0x2e, 0x80, 0x1b, 0x97, 0x3e, 0x8f, 0xbb, 0x00,
	0x6e, 0x92, 0x03, 0x6e, 0x70, 0x7a, 0x2b, 0x42, 0x0b, 0xfa, 0x98, 0xd3, 0x5b, 0x91, 0x1c, 0x58,
	0x41, 0x0a, 0x38, 0x76, 0x27, 0x04, 0xc7, 0xbe, 0xb3, 0xfb, 0xc8, 0xff, 0x7e, 0xda, 0xb3, 0x27,
	0xe9, 0xa9, 0x3c, 0xbf, 0xe2, 0xe9, 0xe4, 0x87, 0xfb, 0x67, 0x53, 0xfb, 0x6f, 0x88, 0xfc, 0x1a,
	0xc8, 0xa2, 0x2e, 0x0a, 0x5f, 0x8e, 0x2c, 0x5b, 0xe5, 0xa2, 0x71, 0x67, 0x41, 0xf7, 0x7c, 0x94,
	0x9c, 0xa0, 0x05, 0x6b, 0xf2, 0xcb, 0x80, 0x93, 0xcf, 0x61, 0x2c, 0x99, 0xf2, 0xe4, 0xac, 0xac,
	0x95, 0x75, 0xf9, 0x39, 0x4a, 0x86, 0x92, 0x29, 0x24, 0x4e, 0x11, 0xc3, 0x0a, 0x77, 0x3f, 0x00,
	0x56, 0xcb, 0x40, 0xea, 0x3a, 0xd2, 0x00, 0xbf, 0xff, 0x57, 0x4b, 0xcf, 0xf9, 0x0c, 0x86, 0x75,
	0xe5, 0x2a, 0xb5, 0x61, 0x45, 0xce, 0xe3, 0xc3, 0xb3, 0xee, 0x79, 0x94, 0x0c, 0x3c, 0xf6, 0x06,
	0x21, 0xfc, 0xaa, 0xf6, 0xc3, 0xf8, 0xc8, 0xbd, 0x1f, 0x46, 0x69, 0xcf, 0xfd, 0x0a, 0xfc, 0xe2,
	0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x3c, 0x9f, 0x96, 0x2d, 0x14, 0x00, 0x00,
}
