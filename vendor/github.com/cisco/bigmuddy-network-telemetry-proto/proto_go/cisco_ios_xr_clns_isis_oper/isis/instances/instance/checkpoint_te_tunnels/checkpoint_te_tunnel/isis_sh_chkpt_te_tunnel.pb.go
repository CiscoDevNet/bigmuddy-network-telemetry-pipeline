// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_chkpt_te_tunnel.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_te_tunnels_checkpoint_te_tunnel is a generated protocol buffer package.

It is generated from these files:
	isis_sh_chkpt_te_tunnel.proto

It has these top-level messages:
	IsisShChkptTeTunnel_KEYS
	IsisShChkptTeTunnel
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_te_tunnels_checkpoint_te_tunnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Checkpointed TE tunnel
type IsisShChkptTeTunnel_KEYS struct {
	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	Level         string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *IsisShChkptTeTunnel_KEYS) Reset()                    { *m = IsisShChkptTeTunnel_KEYS{} }
func (m *IsisShChkptTeTunnel_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShChkptTeTunnel_KEYS) ProtoMessage()               {}
func (*IsisShChkptTeTunnel_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShChkptTeTunnel_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShChkptTeTunnel_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShChkptTeTunnel_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IsisShChkptTeTunnel struct {
	// TE database level
	CheckpointTeLevel string `protobuf:"bytes,50,opt,name=checkpoint_te_level,json=checkpointTeLevel" json:"checkpoint_te_level,omitempty"`
	// Destination system ID
	CheckpointTeSystemId string `protobuf:"bytes,51,opt,name=checkpoint_te_system_id,json=checkpointTeSystemId" json:"checkpoint_te_system_id,omitempty"`
	// Tunnel interface
	CheckpointTeInterface string `protobuf:"bytes,52,opt,name=checkpoint_te_interface,json=checkpointTeInterface" json:"checkpoint_te_interface,omitempty"`
	// Tunnel flags
	CheckpointTeFlags uint32 `protobuf:"varint,53,opt,name=checkpoint_te_flags,json=checkpointTeFlags" json:"checkpoint_te_flags,omitempty"`
	// Tunnel next-hop IP address
	CheckpointTeNexthop string `protobuf:"bytes,54,opt,name=checkpoint_te_nexthop,json=checkpointTeNexthop" json:"checkpoint_te_nexthop,omitempty"`
	// Tunnel metric
	CheckpointTeMetric int32 `protobuf:"zigzag32,55,opt,name=checkpoint_te_metric,json=checkpointTeMetric" json:"checkpoint_te_metric,omitempty"`
	// Tunnel metric mode
	CheckpointTeMetricMode string `protobuf:"bytes,56,opt,name=checkpoint_te_metric_mode,json=checkpointTeMetricMode" json:"checkpoint_te_metric_mode,omitempty"`
	// Tunnel bandwidth
	CheckpointTeBandwidth uint32 `protobuf:"varint,57,opt,name=checkpoint_te_bandwidth,json=checkpointTeBandwidth" json:"checkpoint_te_bandwidth,omitempty"`
	// Tunnel checkpoint object ID
	CheckpointTeObjectId uint32 `protobuf:"varint,58,opt,name=checkpoint_te_object_id,json=checkpointTeObjectId" json:"checkpoint_te_object_id,omitempty"`
}

func (m *IsisShChkptTeTunnel) Reset()                    { *m = IsisShChkptTeTunnel{} }
func (m *IsisShChkptTeTunnel) String() string            { return proto.CompactTextString(m) }
func (*IsisShChkptTeTunnel) ProtoMessage()               {}
func (*IsisShChkptTeTunnel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShChkptTeTunnel) GetCheckpointTeLevel() string {
	if m != nil {
		return m.CheckpointTeLevel
	}
	return ""
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeSystemId() string {
	if m != nil {
		return m.CheckpointTeSystemId
	}
	return ""
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeInterface() string {
	if m != nil {
		return m.CheckpointTeInterface
	}
	return ""
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeFlags() uint32 {
	if m != nil {
		return m.CheckpointTeFlags
	}
	return 0
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeNexthop() string {
	if m != nil {
		return m.CheckpointTeNexthop
	}
	return ""
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeMetric() int32 {
	if m != nil {
		return m.CheckpointTeMetric
	}
	return 0
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeMetricMode() string {
	if m != nil {
		return m.CheckpointTeMetricMode
	}
	return ""
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeBandwidth() uint32 {
	if m != nil {
		return m.CheckpointTeBandwidth
	}
	return 0
}

func (m *IsisShChkptTeTunnel) GetCheckpointTeObjectId() uint32 {
	if m != nil {
		return m.CheckpointTeObjectId
	}
	return 0
}

func init() {
	proto.RegisterType((*IsisShChkptTeTunnel_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_te_tunnels.checkpoint_te_tunnel.isis_sh_chkpt_te_tunnel_KEYS")
	proto.RegisterType((*IsisShChkptTeTunnel)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_te_tunnels.checkpoint_te_tunnel.isis_sh_chkpt_te_tunnel")
}

func init() { proto.RegisterFile("isis_sh_chkpt_te_tunnel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6b, 0xe2, 0x40,
	0x14, 0x87, 0xc9, 0xca, 0x2e, 0xec, 0xb0, 0x2e, 0x38, 0xea, 0x3a, 0x0b, 0xbb, 0x20, 0x2e, 0x0b,
	0x9e, 0x42, 0xd1, 0x6a, 0x6b, 0x8f, 0x85, 0x16, 0xa4, 0xd5, 0x82, 0xf6, 0xd2, 0x4b, 0x87, 0x38,
	0x79, 0x36, 0x53, 0x93, 0x99, 0x90, 0x99, 0xb6, 0xf6, 0xd6, 0x3f, 0xbb, 0xc7, 0x92, 0x27, 0xd1,
	0xa4, 0xd1, 0xdb, 0xe4, 0x7d, 0xf3, 0xbd, 0xf7, 0xcb, 0x63, 0xc8, 0x5f, 0x69, 0xa4, 0xe1, 0x26,
	0xe0, 0x22, 0x58, 0xc5, 0x96, 0x5b, 0xe0, 0xf6, 0x49, 0x29, 0x08, 0xdd, 0x38, 0xd1, 0x56, 0xd3,
	0x7b, 0x21, 0x8d, 0xd0, 0x5c, 0x6a, 0xc3, 0xd7, 0x09, 0x17, 0xa1, 0x32, 0x1c, 0x05, 0x1d, 0x43,
	0xe2, 0xa6, 0x27, 0x57, 0x2a, 0x63, 0x3d, 0x25, 0x60, 0x77, 0x72, 0x45, 0x00, 0x62, 0x15, 0x6b,
	0xa9, 0x72, 0xfd, 0xcc, 0xde, 0x6a, 0xe7, 0xcd, 0x21, 0x7f, 0x0e, 0x24, 0xe0, 0x57, 0x17, 0x77,
	0x73, 0xfa, 0x8f, 0x54, 0xb3, 0xbe, 0x5c, 0x79, 0x11, 0x30, 0xa7, 0xed, 0x74, 0xbf, 0xcf, 0x7e,
	0x64, 0xc5, 0xa9, 0x17, 0x01, 0x6d, 0x90, 0xaf, 0x21, 0x3c, 0x43, 0xc8, 0xbe, 0x20, 0xdc, 0x7c,
	0xd0, 0xff, 0xe4, 0xa7, 0x54, 0x16, 0x92, 0xa5, 0x97, 0xb9, 0x15, 0xc4, 0xd5, 0x6d, 0x35, 0x95,
	0x3b, 0xef, 0x15, 0xd2, 0x3a, 0x10, 0x81, 0xba, 0xa4, 0x5e, 0x8c, 0xbd, 0x19, 0xd3, 0xc3, 0x3e,
	0xb5, 0x1d, 0xba, 0x85, 0x6b, 0x1c, 0x39, 0x20, 0xad, 0xe2, 0x7d, 0xf3, 0x6a, 0x2c, 0x44, 0x5c,
	0xfa, 0xac, 0x8f, 0x4e, 0x23, 0xef, 0xcc, 0x11, 0x8e, 0x7d, 0x3a, 0xfc, 0xac, 0x6d, 0x13, 0xb2,
	0x63, 0xd4, 0x9a, 0x79, 0x6d, 0x9c, 0xc1, 0x72, 0xbc, 0x65, 0xe8, 0x3d, 0x18, 0x36, 0x68, 0x3b,
	0xdd, 0x6a, 0x31, 0xde, 0x65, 0x0a, 0x68, 0x8f, 0x34, 0x8b, 0xf7, 0x15, 0xac, 0x6d, 0xa0, 0x63,
	0x36, 0xc4, 0x29, 0xf5, 0xbc, 0x31, 0xdd, 0x20, 0x7a, 0x44, 0x1a, 0x45, 0x27, 0x02, 0x9b, 0x48,
	0xc1, 0x4e, 0xda, 0x4e, 0xb7, 0x36, 0xa3, 0x79, 0x65, 0x82, 0x84, 0x8e, 0xc8, 0xef, 0x7d, 0x06,
	0x8f, 0xb4, 0x0f, 0xec, 0x14, 0x27, 0xfd, 0x2a, 0x6b, 0x13, 0xed, 0x43, 0x79, 0x11, 0x0b, 0x4f,
	0xf9, 0x2f, 0xd2, 0xb7, 0x01, 0x1b, 0xe1, 0x4f, 0x15, 0x16, 0x71, 0x9e, 0xc1, 0xf2, 0xde, 0xf5,
	0xe2, 0x11, 0x84, 0x4d, 0xf7, 0x7e, 0x86, 0x5e, 0x61, 0xef, 0x37, 0x08, 0xc7, 0xfe, 0xe2, 0x1b,
	0x3e, 0xf2, 0xfe, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xbc, 0x1e, 0xf9, 0x05, 0x03, 0x00,
	0x00,
}
