// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_spf_log_struc.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log is a generated protocol buffer package.

It is generated from these files:
	isis_sh_spf_log_struc.proto

It has these top-level messages:
	IsisShSpfLogStruc_KEYS
	IsisShSpfLogStruc
	IsisSystemIdType
	IsisNodeIdType
	IsisIpv4PrefixType
	IsisIpv6PrefixType
	IsisIpPrefixType
	IsisLspIdType
	IsisPerPriorityCounts
	IsisTimingsType
	IsisPerPriorityTimings
	IsisShTimestampType
	IsisShGenericLogEnt
	IsisShSpfLogTriggers
	IsisShSpfLogSptCalcNodeCounts
	IsisShSpfLogSptCalc
	IsisShSpfLogRouteUpdateNodeCounts
	IsisShSpfLogRouteUpdatePrefixCounts
	IsisShSpfLogRouteUpdateTimingsBreakdown
	IsisShSpfLogRouteUpdate
	IsisShSpfLogEnt
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Log of IS-IS route calculations
type IsisShSpfLogStruc_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
	Level        string `protobuf:"bytes,5,opt,name=level" json:"level,omitempty"`
}

func (m *IsisShSpfLogStruc_KEYS) Reset()                    { *m = IsisShSpfLogStruc_KEYS{} }
func (m *IsisShSpfLogStruc_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogStruc_KEYS) ProtoMessage()               {}
func (*IsisShSpfLogStruc_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShSpfLogStruc_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShSpfLogStruc_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShSpfLogStruc_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisShSpfLogStruc_KEYS) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

func (m *IsisShSpfLogStruc_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type IsisShSpfLogStruc struct {
	// SPF Log entries
	LogEntry []*IsisShSpfLogEnt `protobuf:"bytes,50,rep,name=log_entry,json=logEntry" json:"log_entry,omitempty"`
}

func (m *IsisShSpfLogStruc) Reset()                    { *m = IsisShSpfLogStruc{} }
func (m *IsisShSpfLogStruc) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogStruc) ProtoMessage()               {}
func (*IsisShSpfLogStruc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShSpfLogStruc) GetLogEntry() []*IsisShSpfLogEnt {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

type IsisSystemIdType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisSystemIdType) Reset()                    { *m = IsisSystemIdType{} }
func (m *IsisSystemIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisSystemIdType) ProtoMessage()               {}
func (*IsisSystemIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisSystemIdType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IsisNodeIdType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisNodeIdType) Reset()                    { *m = IsisNodeIdType{} }
func (m *IsisNodeIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisNodeIdType) ProtoMessage()               {}
func (*IsisNodeIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisNodeIdType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisIpv4PrefixType) Reset()                    { *m = IsisIpv4PrefixType{} }
func (m *IsisIpv4PrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv4PrefixType) ProtoMessage()               {}
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsisIpv4PrefixType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

// IPv4 address and prefix length
type IsisIpv6PrefixType struct {
	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisIpv6PrefixType) Reset()                    { *m = IsisIpv6PrefixType{} }
func (m *IsisIpv6PrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6PrefixType) ProtoMessage()               {}
func (*IsisIpv6PrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsisIpv6PrefixType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisIpv6PrefixType) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type IsisIpPrefixType struct {
	AfName string              `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	Ipv4   *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6   *IsisIpv6PrefixType `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *IsisIpPrefixType) Reset()                    { *m = IsisIpPrefixType{} }
func (m *IsisIpPrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpPrefixType) ProtoMessage()               {}
func (*IsisIpPrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsisIpPrefixType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisIpPrefixType) GetIpv4() *IsisIpv4PrefixType {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *IsisIpPrefixType) GetIpv6() *IsisIpv6PrefixType {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type IsisLspIdType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisLspIdType) Reset()                    { *m = IsisLspIdType{} }
func (m *IsisLspIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisLspIdType) ProtoMessage()               {}
func (*IsisLspIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsisLspIdType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Per-priority counts
type IsisPerPriorityCounts struct {
	// Critical priority
	Critical uint32 `protobuf:"varint,1,opt,name=critical" json:"critical,omitempty"`
	// High priority
	High uint32 `protobuf:"varint,2,opt,name=high" json:"high,omitempty"`
	// Medium priority
	Medium uint32 `protobuf:"varint,3,opt,name=medium" json:"medium,omitempty"`
	// Low priority
	Low uint32 `protobuf:"varint,4,opt,name=low" json:"low,omitempty"`
}

func (m *IsisPerPriorityCounts) Reset()                    { *m = IsisPerPriorityCounts{} }
func (m *IsisPerPriorityCounts) String() string            { return proto.CompactTextString(m) }
func (*IsisPerPriorityCounts) ProtoMessage()               {}
func (*IsisPerPriorityCounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IsisPerPriorityCounts) GetCritical() uint32 {
	if m != nil {
		return m.Critical
	}
	return 0
}

func (m *IsisPerPriorityCounts) GetHigh() uint32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *IsisPerPriorityCounts) GetMedium() uint32 {
	if m != nil {
		return m.Medium
	}
	return 0
}

func (m *IsisPerPriorityCounts) GetLow() uint32 {
	if m != nil {
		return m.Low
	}
	return 0
}

// Duration of an event in real and CPU time
type IsisTimingsType struct {
	// Real time duration in milliseconds
	RealDuration uint32 `protobuf:"varint,1,opt,name=real_duration,json=realDuration" json:"real_duration,omitempty"`
	// CPU time duration in milliseconds
	CpuDuration uint32 `protobuf:"varint,2,opt,name=cpu_duration,json=cpuDuration" json:"cpu_duration,omitempty"`
}

func (m *IsisTimingsType) Reset()                    { *m = IsisTimingsType{} }
func (m *IsisTimingsType) String() string            { return proto.CompactTextString(m) }
func (*IsisTimingsType) ProtoMessage()               {}
func (*IsisTimingsType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IsisTimingsType) GetRealDuration() uint32 {
	if m != nil {
		return m.RealDuration
	}
	return 0
}

func (m *IsisTimingsType) GetCpuDuration() uint32 {
	if m != nil {
		return m.CpuDuration
	}
	return 0
}

// Per-priority timings
type IsisPerPriorityTimings struct {
	// Critical priority
	Critical *IsisTimingsType `protobuf:"bytes,1,opt,name=critical" json:"critical,omitempty"`
	// High priority
	High *IsisTimingsType `protobuf:"bytes,2,opt,name=high" json:"high,omitempty"`
	// Medium priority
	Medium *IsisTimingsType `protobuf:"bytes,3,opt,name=medium" json:"medium,omitempty"`
	// Low priority
	Low *IsisTimingsType `protobuf:"bytes,4,opt,name=low" json:"low,omitempty"`
}

func (m *IsisPerPriorityTimings) Reset()                    { *m = IsisPerPriorityTimings{} }
func (m *IsisPerPriorityTimings) String() string            { return proto.CompactTextString(m) }
func (*IsisPerPriorityTimings) ProtoMessage()               {}
func (*IsisPerPriorityTimings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IsisPerPriorityTimings) GetCritical() *IsisTimingsType {
	if m != nil {
		return m.Critical
	}
	return nil
}

func (m *IsisPerPriorityTimings) GetHigh() *IsisTimingsType {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *IsisPerPriorityTimings) GetMedium() *IsisTimingsType {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (m *IsisPerPriorityTimings) GetLow() *IsisTimingsType {
	if m != nil {
		return m.Low
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds" json:"nano_seconds,omitempty"`
}

func (m *IsisShTimestampType) Reset()                    { *m = IsisShTimestampType{} }
func (m *IsisShTimestampType) String() string            { return proto.CompactTextString(m) }
func (*IsisShTimestampType) ProtoMessage()               {}
func (*IsisShTimestampType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IsisShTimestampType) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IsisShTimestampType) GetNanoSeconds() uint32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

// Generic portion of a log entry
type IsisShGenericLogEnt struct {
	// Time in UTC relative to Jan 1st, 1970
	Timestamp *IsisShTimestampType `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *IsisShGenericLogEnt) Reset()                    { *m = IsisShGenericLogEnt{} }
func (m *IsisShGenericLogEnt) String() string            { return proto.CompactTextString(m) }
func (*IsisShGenericLogEnt) ProtoMessage()               {}
func (*IsisShGenericLogEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IsisShGenericLogEnt) GetTimestamp() *IsisShTimestampType {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// The reasons for running a calculation
type IsisShSpfLogTriggers struct {
	// Triggers applying to this log entry
	Triggers []string `protobuf:"bytes,1,rep,name=triggers" json:"triggers,omitempty"`
	// Number of unique triggers on this run
	UniqueTriggerCount uint32 `protobuf:"varint,2,opt,name=unique_trigger_count,json=uniqueTriggerCount" json:"unique_trigger_count,omitempty"`
	// ID of the first LSP to trigger the calculation, if any
	FirstTriggerLspId *IsisLspIdType `protobuf:"bytes,3,opt,name=first_trigger_lsp_id,json=firstTriggerLspId" json:"first_trigger_lsp_id,omitempty"`
	// ID of a changed link in the first trigger LSP, if any
	TriggerLink *IsisNodeIdType `protobuf:"bytes,4,opt,name=trigger_link,json=triggerLink" json:"trigger_link,omitempty"`
	// ID of a changed prefix in the first trigger LSP, if any
	TriggerPrefix *IsisIpPrefixType `protobuf:"bytes,5,opt,name=trigger_prefix,json=triggerPrefix" json:"trigger_prefix,omitempty"`
	// ID of a changed next hop, if any
	TriggerNextHopId *IsisSystemIdType `protobuf:"bytes,6,opt,name=trigger_next_hop_id,json=triggerNextHopId" json:"trigger_next_hop_id,omitempty"`
	// Is this SR micro loop calculation?
	IsSrUloopCalculation bool `protobuf:"varint,7,opt,name=is_sr_uloop_calculation,json=isSrUloopCalculation" json:"is_sr_uloop_calculation,omitempty"`
	// Is this SR micro loop calculation for link down?
	IsSrUloopLinkDown bool `protobuf:"varint,8,opt,name=is_sr_uloop_link_down,json=isSrUloopLinkDown" json:"is_sr_uloop_link_down,omitempty"`
}

func (m *IsisShSpfLogTriggers) Reset()                    { *m = IsisShSpfLogTriggers{} }
func (m *IsisShSpfLogTriggers) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogTriggers) ProtoMessage()               {}
func (*IsisShSpfLogTriggers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IsisShSpfLogTriggers) GetTriggers() []string {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *IsisShSpfLogTriggers) GetUniqueTriggerCount() uint32 {
	if m != nil {
		return m.UniqueTriggerCount
	}
	return 0
}

func (m *IsisShSpfLogTriggers) GetFirstTriggerLspId() *IsisLspIdType {
	if m != nil {
		return m.FirstTriggerLspId
	}
	return nil
}

func (m *IsisShSpfLogTriggers) GetTriggerLink() *IsisNodeIdType {
	if m != nil {
		return m.TriggerLink
	}
	return nil
}

func (m *IsisShSpfLogTriggers) GetTriggerPrefix() *IsisIpPrefixType {
	if m != nil {
		return m.TriggerPrefix
	}
	return nil
}

func (m *IsisShSpfLogTriggers) GetTriggerNextHopId() *IsisSystemIdType {
	if m != nil {
		return m.TriggerNextHopId
	}
	return nil
}

func (m *IsisShSpfLogTriggers) GetIsSrUloopCalculation() bool {
	if m != nil {
		return m.IsSrUloopCalculation
	}
	return false
}

func (m *IsisShSpfLogTriggers) GetIsSrUloopLinkDown() bool {
	if m != nil {
		return m.IsSrUloopLinkDown
	}
	return false
}

// Node counts for the SPT calculation phase
type IsisShSpfLogSptCalcNodeCounts struct {
	// Number of unreachable nodes in the database
	Unreachable uint32 `protobuf:"varint,1,opt,name=unreachable" json:"unreachable,omitempty"`
	// Number of reachable nodes in the database
	Reachable uint32 `protobuf:"varint,2,opt,name=reachable" json:"reachable,omitempty"`
	// Number of nodes added to the SPT
	Added uint32 `protobuf:"varint,3,opt,name=added" json:"added,omitempty"`
	// Number of nodes deleted from the SPT
	Deleted uint32 `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
	// Number of modified nodes (first hop and/or metric change)
	Modified uint32 `protobuf:"varint,5,opt,name=modified" json:"modified,omitempty"`
	// Number of nodes touched whilst calculating the SPT
	Touched uint32 `protobuf:"varint,6,opt,name=touched" json:"touched,omitempty"`
}

func (m *IsisShSpfLogSptCalcNodeCounts) Reset()                    { *m = IsisShSpfLogSptCalcNodeCounts{} }
func (m *IsisShSpfLogSptCalcNodeCounts) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogSptCalcNodeCounts) ProtoMessage()               {}
func (*IsisShSpfLogSptCalcNodeCounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IsisShSpfLogSptCalcNodeCounts) GetUnreachable() uint32 {
	if m != nil {
		return m.Unreachable
	}
	return 0
}

func (m *IsisShSpfLogSptCalcNodeCounts) GetReachable() uint32 {
	if m != nil {
		return m.Reachable
	}
	return 0
}

func (m *IsisShSpfLogSptCalcNodeCounts) GetAdded() uint32 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *IsisShSpfLogSptCalcNodeCounts) GetDeleted() uint32 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *IsisShSpfLogSptCalcNodeCounts) GetModified() uint32 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *IsisShSpfLogSptCalcNodeCounts) GetTouched() uint32 {
	if m != nil {
		return m.Touched
	}
	return 0
}

// Statistics for the SPT calculation phase
type IsisShSpfLogSptCalc struct {
	// Duration of the SPT calculation
	Duration *IsisTimingsType `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	// Node counts
	NodeCounts *IsisShSpfLogSptCalcNodeCounts `protobuf:"bytes,2,opt,name=node_counts,json=nodeCounts" json:"node_counts,omitempty"`
}

func (m *IsisShSpfLogSptCalc) Reset()                    { *m = IsisShSpfLogSptCalc{} }
func (m *IsisShSpfLogSptCalc) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogSptCalc) ProtoMessage()               {}
func (*IsisShSpfLogSptCalc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IsisShSpfLogSptCalc) GetDuration() *IsisTimingsType {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *IsisShSpfLogSptCalc) GetNodeCounts() *IsisShSpfLogSptCalcNodeCounts {
	if m != nil {
		return m.NodeCounts
	}
	return nil
}

// Node counts for the route update phase
type IsisShSpfLogRouteUpdateNodeCounts struct {
	// Per-priority count of nodes considered during route update
	PerPriorityTouched *IsisPerPriorityCounts `protobuf:"bytes,1,opt,name=per_priority_touched,json=perPriorityTouched" json:"per_priority_touched,omitempty"`
	// Total number of nodes considered during route update
	TotalTouched uint32 `protobuf:"varint,2,opt,name=total_touched,json=totalTouched" json:"total_touched,omitempty"`
}

func (m *IsisShSpfLogRouteUpdateNodeCounts) Reset()         { *m = IsisShSpfLogRouteUpdateNodeCounts{} }
func (m *IsisShSpfLogRouteUpdateNodeCounts) String() string { return proto.CompactTextString(m) }
func (*IsisShSpfLogRouteUpdateNodeCounts) ProtoMessage()    {}
func (*IsisShSpfLogRouteUpdateNodeCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *IsisShSpfLogRouteUpdateNodeCounts) GetPerPriorityTouched() *IsisPerPriorityCounts {
	if m != nil {
		return m.PerPriorityTouched
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdateNodeCounts) GetTotalTouched() uint32 {
	if m != nil {
		return m.TotalTouched
	}
	return 0
}

// Prefix item counts for the route update phase
type IsisShSpfLogRouteUpdatePrefixCounts struct {
	// Number of unreachable prefixes in the database
	Unreachable *IsisPerPriorityCounts `protobuf:"bytes,1,opt,name=unreachable" json:"unreachable,omitempty"`
	// Number of reachable prefixes in the database
	Reachable *IsisPerPriorityCounts `protobuf:"bytes,2,opt,name=reachable" json:"reachable,omitempty"`
	// Number of prefixes added during calculation
	Added *IsisPerPriorityCounts `protobuf:"bytes,3,opt,name=added" json:"added,omitempty"`
	// Number of prefixes deleted during calculation
	Deleted *IsisPerPriorityCounts `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// Number of prefixes modified, i.e. a first hop and/or metric change
	Modified *IsisPerPriorityCounts `protobuf:"bytes,5,opt,name=modified" json:"modified,omitempty"`
	// Number of prefixes considered whilst updating the routing table
	Touched *IsisPerPriorityCounts `protobuf:"bytes,6,opt,name=touched" json:"touched,omitempty"`
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) Reset()         { *m = IsisShSpfLogRouteUpdatePrefixCounts{} }
func (m *IsisShSpfLogRouteUpdatePrefixCounts) String() string { return proto.CompactTextString(m) }
func (*IsisShSpfLogRouteUpdatePrefixCounts) ProtoMessage()    {}
func (*IsisShSpfLogRouteUpdatePrefixCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetUnreachable() *IsisPerPriorityCounts {
	if m != nil {
		return m.Unreachable
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetReachable() *IsisPerPriorityCounts {
	if m != nil {
		return m.Reachable
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetAdded() *IsisPerPriorityCounts {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetDeleted() *IsisPerPriorityCounts {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetModified() *IsisPerPriorityCounts {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdatePrefixCounts) GetTouched() *IsisPerPriorityCounts {
	if m != nil {
		return m.Touched
	}
	return nil
}

// Breakdown of the time taken to perform the route update
type IsisShSpfLogRouteUpdateTimingsBreakdown struct {
	// Time to update IS-IS's local RIB
	LocalRibUpdate *IsisPerPriorityTimings `protobuf:"bytes,1,opt,name=local_rib_update,json=localRibUpdate" json:"local_rib_update,omitempty"`
	// Time to build the update to send to the global RIB
	GlobalRibBuild *IsisPerPriorityTimings `protobuf:"bytes,2,opt,name=global_rib_build,json=globalRibBuild" json:"global_rib_build,omitempty"`
	// Time to send the update to the global RIB
	GlobalRibSend *IsisPerPriorityTimings `protobuf:"bytes,3,opt,name=global_rib_send,json=globalRibSend" json:"global_rib_send,omitempty"`
}

func (m *IsisShSpfLogRouteUpdateTimingsBreakdown) Reset() {
	*m = IsisShSpfLogRouteUpdateTimingsBreakdown{}
}
func (m *IsisShSpfLogRouteUpdateTimingsBreakdown) String() string { return proto.CompactTextString(m) }
func (*IsisShSpfLogRouteUpdateTimingsBreakdown) ProtoMessage()    {}
func (*IsisShSpfLogRouteUpdateTimingsBreakdown) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *IsisShSpfLogRouteUpdateTimingsBreakdown) GetLocalRibUpdate() *IsisPerPriorityTimings {
	if m != nil {
		return m.LocalRibUpdate
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdateTimingsBreakdown) GetGlobalRibBuild() *IsisPerPriorityTimings {
	if m != nil {
		return m.GlobalRibBuild
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdateTimingsBreakdown) GetGlobalRibSend() *IsisPerPriorityTimings {
	if m != nil {
		return m.GlobalRibSend
	}
	return nil
}

// Statistics for the route update phase of the calculation
type IsisShSpfLogRouteUpdate struct {
	// Duration of the routing table update
	Duration *IsisTimingsType `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	// Breakdown of the time taken by the routing table update
	DurationBreakdown *IsisShSpfLogRouteUpdateTimingsBreakdown `protobuf:"bytes,2,opt,name=duration_breakdown,json=durationBreakdown" json:"duration_breakdown,omitempty"`
	// Node counts
	NodeCounts *IsisShSpfLogRouteUpdateNodeCounts `protobuf:"bytes,3,opt,name=node_counts,json=nodeCounts" json:"node_counts,omitempty"`
	// Prefix item counts
	ItemCounts *IsisShSpfLogRouteUpdatePrefixCounts `protobuf:"bytes,4,opt,name=item_counts,json=itemCounts" json:"item_counts,omitempty"`
	// Distinct prefix counts
	RouteCounts *IsisShSpfLogRouteUpdatePrefixCounts `protobuf:"bytes,5,opt,name=route_counts,json=routeCounts" json:"route_counts,omitempty"`
	// Number of RIB batches sent
	RibBatchCounts *IsisPerPriorityCounts `protobuf:"bytes,6,opt,name=rib_batch_counts,json=ribBatchCounts" json:"rib_batch_counts,omitempty"`
}

func (m *IsisShSpfLogRouteUpdate) Reset()                    { *m = IsisShSpfLogRouteUpdate{} }
func (m *IsisShSpfLogRouteUpdate) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogRouteUpdate) ProtoMessage()               {}
func (*IsisShSpfLogRouteUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IsisShSpfLogRouteUpdate) GetDuration() *IsisTimingsType {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdate) GetDurationBreakdown() *IsisShSpfLogRouteUpdateTimingsBreakdown {
	if m != nil {
		return m.DurationBreakdown
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdate) GetNodeCounts() *IsisShSpfLogRouteUpdateNodeCounts {
	if m != nil {
		return m.NodeCounts
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdate) GetItemCounts() *IsisShSpfLogRouteUpdatePrefixCounts {
	if m != nil {
		return m.ItemCounts
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdate) GetRouteCounts() *IsisShSpfLogRouteUpdatePrefixCounts {
	if m != nil {
		return m.RouteCounts
	}
	return nil
}

func (m *IsisShSpfLogRouteUpdate) GetRibBatchCounts() *IsisPerPriorityCounts {
	if m != nil {
		return m.RibBatchCounts
	}
	return nil
}

// IS-IS route calculation log entry
type IsisShSpfLogEnt struct {
	// Generic entry data.
	GenericData *IsisShGenericLogEnt `protobuf:"bytes,1,opt,name=generic_data,json=genericData" json:"generic_data,omitempty"`
	// Type of calculation.
	Class string `protobuf:"bytes,2,opt,name=class" json:"class,omitempty"`
	// Trigger information
	Triggers *IsisShSpfLogTriggers `protobuf:"bytes,3,opt,name=triggers" json:"triggers,omitempty"`
	// Statistics for the SPT calculation phase
	SptCalculationStatistics *IsisShSpfLogSptCalc `protobuf:"bytes,4,opt,name=spt_calculation_statistics,json=sptCalculationStatistics" json:"spt_calculation_statistics,omitempty"`
	// Statistics for the route update phase
	RouteUpdateStatistics *IsisShSpfLogRouteUpdate `protobuf:"bytes,5,opt,name=route_update_statistics,json=routeUpdateStatistics" json:"route_update_statistics,omitempty"`
	// Time between the first trigger and the start of the route calculation, in milliseconds.
	WaitEnforced uint32 `protobuf:"varint,6,opt,name=wait_enforced,json=waitEnforced" json:"wait_enforced,omitempty"`
	// Minimum time from end of this route calculation until the start of the next, in milliseconds
	NextWaitInterval uint32 `protobuf:"varint,7,opt,name=next_wait_interval,json=nextWaitInterval" json:"next_wait_interval,omitempty"`
	// Number of LSPs which arrived during the route calculation
	UpdatedLspCount uint32 `protobuf:"varint,8,opt,name=updated_lsp_count,json=updatedLspCount" json:"updated_lsp_count,omitempty"`
}

func (m *IsisShSpfLogEnt) Reset()                    { *m = IsisShSpfLogEnt{} }
func (m *IsisShSpfLogEnt) String() string            { return proto.CompactTextString(m) }
func (*IsisShSpfLogEnt) ProtoMessage()               {}
func (*IsisShSpfLogEnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *IsisShSpfLogEnt) GetGenericData() *IsisShGenericLogEnt {
	if m != nil {
		return m.GenericData
	}
	return nil
}

func (m *IsisShSpfLogEnt) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *IsisShSpfLogEnt) GetTriggers() *IsisShSpfLogTriggers {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *IsisShSpfLogEnt) GetSptCalculationStatistics() *IsisShSpfLogSptCalc {
	if m != nil {
		return m.SptCalculationStatistics
	}
	return nil
}

func (m *IsisShSpfLogEnt) GetRouteUpdateStatistics() *IsisShSpfLogRouteUpdate {
	if m != nil {
		return m.RouteUpdateStatistics
	}
	return nil
}

func (m *IsisShSpfLogEnt) GetWaitEnforced() uint32 {
	if m != nil {
		return m.WaitEnforced
	}
	return 0
}

func (m *IsisShSpfLogEnt) GetNextWaitInterval() uint32 {
	if m != nil {
		return m.NextWaitInterval
	}
	return 0
}

func (m *IsisShSpfLogEnt) GetUpdatedLspCount() uint32 {
	if m != nil {
		return m.UpdatedLspCount
	}
	return 0
}

func init() {
	proto.RegisterType((*IsisShSpfLogStruc_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_struc_KEYS")
	proto.RegisterType((*IsisShSpfLogStruc)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_struc")
	proto.RegisterType((*IsisSystemIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_system_id_type")
	proto.RegisterType((*IsisNodeIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_node_id_type")
	proto.RegisterType((*IsisIpv4PrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv4_prefix_type")
	proto.RegisterType((*IsisIpv6PrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv6_prefix_type")
	proto.RegisterType((*IsisIpPrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ip_prefix_type")
	proto.RegisterType((*IsisLspIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_lsp_id_type")
	proto.RegisterType((*IsisPerPriorityCounts)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts")
	proto.RegisterType((*IsisTimingsType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type")
	proto.RegisterType((*IsisPerPriorityTimings)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings")
	proto.RegisterType((*IsisShTimestampType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_timestamp_type")
	proto.RegisterType((*IsisShGenericLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_generic_log_ent")
	proto.RegisterType((*IsisShSpfLogTriggers)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers")
	proto.RegisterType((*IsisShSpfLogSptCalcNodeCounts)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc_node_counts")
	proto.RegisterType((*IsisShSpfLogSptCalc)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc")
	proto.RegisterType((*IsisShSpfLogRouteUpdateNodeCounts)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_node_counts")
	proto.RegisterType((*IsisShSpfLogRouteUpdatePrefixCounts)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts")
	proto.RegisterType((*IsisShSpfLogRouteUpdateTimingsBreakdown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown")
	proto.RegisterType((*IsisShSpfLogRouteUpdate)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update")
	proto.RegisterType((*IsisShSpfLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent")
}

func init() { proto.RegisterFile("isis_sh_spf_log_struc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4b, 0x8f, 0x1c, 0xb5,
	0x13, 0x97, 0xf7, 0x39, 0xeb, 0x99, 0x4e, 0x76, 0x3b, 0x9b, 0x64, 0x92, 0x7f, 0x0e, 0xfb, 0xef,
	0xe5, 0xb0, 0x04, 0x34, 0x8a, 0x16, 0xd8, 0x0f, 0x90, 0x87, 0x44, 0xc4, 0x2a, 0x42, 0xbd, 0x89,
	0x10, 0xe2, 0x60, 0x79, 0xba, 0x3d, 0x33, 0x56, 0x7a, 0xec, 0xa6, 0xed, 0xde, 0xc7, 0x0d, 0x14,
	0xf1, 0x88, 0x04, 0x97, 0x28, 0x42, 0x68, 0x0f, 0x41, 0x08, 0x45, 0x1c, 0x72, 0x41, 0x04, 0x71,
	0x20, 0x08, 0x89, 0x03, 0xe2, 0x82, 0xb8, 0xf0, 0x25, 0xf8, 0x00, 0x7c, 0x00, 0xe4, 0x57, 0x4f,
	0xf7, 0xec, 0xb2, 0xb9, 0x20, 0xba, 0x6f, 0xae, 0x87, 0xdb, 0xbf, 0x2a, 0x97, 0xab, 0xca, 0x6e,
	0xf8, 0x3f, 0x2a, 0xa8, 0x40, 0x62, 0x84, 0x44, 0x3a, 0x40, 0x09, 0x1f, 0x22, 0x21, 0xb3, 0x3c,
	0xea, 0xa5, 0x19, 0x97, 0xdc, 0x67, 0x11, 0x15, 0x11, 0x47, 0x94, 0x0b, 0xb4, 0x9f, 0xa1, 0x28,
	0x61, 0x02, 0x69, 0x75, 0x9e, 0x92, 0xac, 0xa7, 0x46, 0x3d, 0xca, 0x84, 0xc4, 0x2c, 0x22, 0x93,
	0x51, 0x4f, 0xf2, 0x94, 0x27, 0x7c, 0x48, 0x89, 0x70, 0xc3, 0x83, 0x62, 0x80, 0x12, 0xb2, 0x4b,
	0x12, 0x31, 0x45, 0xf7, 0xec, 0xda, 0xc1, 0x37, 0x00, 0x5e, 0x3c, 0x16, 0x0f, 0x7a, 0xe3, 0xc6,
	0xdb, 0x3b, 0xfe, 0x3a, 0xf4, 0xdc, 0x2a, 0x88, 0xe1, 0x31, 0xe9, 0x82, 0x35, 0xb0, 0xb1, 0x14,
	0x76, 0x1c, 0xf3, 0x16, 0x1e, 0x13, 0xff, 0x3c, 0x5c, 0xc4, 0x03, 0x23, 0x9e, 0xd1, 0xe2, 0x05,
	0x3c, 0xd0, 0x82, 0x0b, 0xb0, 0x25, 0x9c, 0x64, 0x56, 0x4b, 0x16, 0x85, 0x15, 0xad, 0x43, 0xaf,
	0x40, 0xa4, 0xe5, 0x73, 0xe6, 0xc3, 0x8e, 0xa9, 0x95, 0x56, 0xe1, 0xbc, 0x46, 0xdb, 0x9d, 0xd7,
	0x42, 0x43, 0x04, 0xcf, 0x00, 0x3c, 0x7b, 0x2c, 0x64, 0xff, 0x4b, 0x00, 0x97, 0x14, 0x45, 0x98,
	0xcc, 0x0e, 0xba, 0x9b, 0x6b, 0xb3, 0x1b, 0xed, 0xcd, 0x7b, 0xa0, 0xf7, 0xdf, 0xba, 0xb4, 0x37,
	0x8d, 0x8d, 0x30, 0x19, 0xb6, 0x12, 0x3e, 0xbc, 0xa1, 0x50, 0x05, 0x2f, 0xc1, 0x33, 0x46, 0xe1,
	0x40, 0x48, 0x32, 0x46, 0x34, 0x46, 0xf2, 0x20, 0xd5, 0xa6, 0xee, 0xe2, 0x24, 0x77, 0x0e, 0x36,
	0x44, 0xf0, 0x22, 0x5c, 0xd1, 0xca, 0x8c, 0xc7, 0xe4, 0x39, 0xaa, 0xb7, 0xad, 0x53, 0x68, 0xba,
	0xfb, 0x2a, 0x4a, 0x33, 0x32, 0xa0, 0xfb, 0x46, 0xfd, 0x1c, 0x5c, 0x30, 0xa4, 0xd5, 0xb7, 0x94,
	0xda, 0x01, 0xab, 0x96, 0x10, 0x36, 0x94, 0x23, 0xbd, 0x77, 0x5e, 0xd8, 0x31, 0xcc, 0x6d, 0xcd,
	0x2b, 0x7f, 0x75, 0xeb, 0xdf, 0xfb, 0xea, 0x9f, 0x33, 0xd6, 0x09, 0x34, 0xad, 0x7c, 0xb4, 0x14,
	0x48, 0xa0, 0x12, 0x48, 0x87, 0x00, 0xce, 0x29, 0xc3, 0xf4, 0xd7, 0xda, 0x9b, 0x1f, 0xd4, 0xb3,
	0xa7, 0xd3, 0xae, 0x0d, 0x35, 0x26, 0x07, 0x6e, 0x4b, 0x87, 0x78, 0x9d, 0xe0, 0xb6, 0x8e, 0x80,
	0xdb, 0x0a, 0x36, 0xe0, 0xb2, 0x16, 0x27, 0x22, 0x7d, 0x4e, 0x00, 0x49, 0xd8, 0xd5, 0x9a, 0x29,
	0xc9, 0x50, 0x9a, 0x51, 0x9e, 0x51, 0x79, 0x80, 0x22, 0x9e, 0x33, 0x29, 0xfc, 0x8b, 0xb0, 0x15,
	0x65, 0x54, 0xd2, 0x08, 0x27, 0x7a, 0x92, 0x17, 0x16, 0xb4, 0xef, 0xc3, 0xb9, 0x11, 0x1d, 0xba,
	0x8d, 0xd6, 0x63, 0x15, 0x1d, 0x63, 0x12, 0xd3, 0x7c, 0xac, 0x7d, 0xe2, 0x85, 0x96, 0xf2, 0x97,
	0xe1, 0x6c, 0xc2, 0xf7, 0xf4, 0x59, 0xf7, 0x42, 0x35, 0x0c, 0xde, 0xb1, 0x11, 0x2e, 0xe9, 0x98,
	0xb2, 0xa1, 0x30, 0x00, 0xd7, 0xa1, 0x97, 0x11, 0x9c, 0xa0, 0x38, 0xcf, 0xb0, 0xa4, 0x9c, 0xd9,
	0x35, 0x3b, 0x8a, 0x79, 0xdd, 0xf2, 0xfc, 0xff, 0xc3, 0x4e, 0x94, 0xe6, 0x13, 0x1d, 0xb3, 0x7e,
	0x3b, 0x4a, 0x73, 0xa7, 0x12, 0xdc, 0x9f, 0x87, 0x17, 0x8e, 0xda, 0x64, 0x97, 0xf2, 0x1f, 0x81,
	0x29, 0xab, 0xda, 0x9b, 0xef, 0xd7, 0xb3, 0x77, 0x65, 0xe3, 0x4b, 0x9e, 0xfd, 0x0c, 0x94, 0x5c,
	0xdb, 0x0c, 0x70, 0x66, 0x7b, 0x0f, 0x41, 0x65, 0x7f, 0x9b, 0x01, 0xcd, 0xc5, 0xd8, 0x43, 0x30,
	0x09, 0xb2, 0x66, 0x20, 0xd3, 0x81, 0x7e, 0x07, 0x9e, 0x73, 0x85, 0x41, 0xd2, 0x31, 0x11, 0x12,
	0x8f, 0x53, 0x13, 0xed, 0x5d, 0xb8, 0x28, 0x48, 0xc4, 0x59, 0x2c, 0x6c, 0x9c, 0x3b, 0x52, 0x85,
	0x38, 0xc3, 0x8c, 0x23, 0x27, 0xb6, 0x21, 0xae, 0x78, 0x3b, 0x86, 0x15, 0xfc, 0x0c, 0xe0, 0x79,
	0xf7, 0xdd, 0x21, 0x61, 0x24, 0xa3, 0x91, 0x2b, 0x3a, 0xfe, 0x63, 0x00, 0x97, 0x8a, 0xb5, 0x6c,
	0x84, 0x7f, 0x58, 0x5b, 0x39, 0xac, 0x5a, 0x1d, 0x4e, 0x90, 0x05, 0x0f, 0x16, 0x6d, 0xea, 0x29,
	0x15, 0x4d, 0x99, 0xd1, 0xe1, 0x90, 0x64, 0x3a, 0xf5, 0xb8, 0x71, 0x17, 0xac, 0xcd, 0x6e, 0x2c,
	0x85, 0x05, 0xed, 0x5f, 0x81, 0xab, 0x39, 0xa3, 0xef, 0xe6, 0xc4, 0xa9, 0x9b, 0x7c, 0x65, 0xfd,
	0xe4, 0x1b, 0xd9, 0x6d, 0x23, 0xba, 0xa6, 0x24, 0xfe, 0xb7, 0x00, 0xae, 0x0e, 0x68, 0x26, 0x64,
	0x31, 0xc3, 0x24, 0x46, 0x1b, 0xc7, 0xef, 0xd5, 0xe3, 0x9d, 0x52, 0x72, 0x0e, 0x57, 0x34, 0x3c,
	0x0b, 0x7a, 0x5b, 0xa4, 0x37, 0x63, 0xb5, 0x8f, 0x9d, 0x02, 0x2e, 0x65, 0x77, 0xeb, 0x0d, 0xed,
	0x72, 0x2f, 0x12, 0xb6, 0x2d, 0xae, 0x6d, 0xca, 0xee, 0xfa, 0x4f, 0x00, 0x3c, 0xe5, 0x70, 0xda,
	0xe6, 0x60, 0x5e, 0x23, 0xbd, 0x57, 0x57, 0x49, 0xac, 0x14, 0x44, 0xcf, 0x62, 0x7b, 0xd3, 0x74,
	0x2a, 0x4f, 0x01, 0x3c, 0xe3, 0xd0, 0x32, 0xb2, 0x2f, 0xd1, 0x88, 0xeb, 0x48, 0x58, 0xa8, 0x13,
	0x72, 0xb5, 0x2b, 0x0c, 0x97, 0x2d, 0xc0, 0x5b, 0x64, 0x5f, 0xbe, 0xce, 0x55, 0x2c, 0xbc, 0xa6,
	0x8e, 0x3b, 0x12, 0x19, 0xca, 0x13, 0xce, 0x53, 0x14, 0xe1, 0x24, 0xca, 0x13, 0x53, 0x00, 0x17,
	0xd7, 0xc0, 0x46, 0x2b, 0x5c, 0xa5, 0x62, 0x27, 0xbb, 0xa3, 0x84, 0xd7, 0x26, 0x32, 0xff, 0x8a,
	0xea, 0xe3, 0x26, 0xd3, 0x54, 0x14, 0xa1, 0x98, 0xef, 0xb1, 0x6e, 0x4b, 0x4f, 0x5a, 0x29, 0x26,
	0xa9, 0x8d, 0xbc, 0xce, 0xf7, 0x58, 0xf0, 0x1b, 0x80, 0x2f, 0x1c, 0xe9, 0xb2, 0x53, 0xa9, 0x57,
	0x34, 0x31, 0x60, 0x7b, 0x83, 0x35, 0xd8, 0xce, 0x59, 0x46, 0x70, 0x34, 0xc2, 0xfd, 0x84, 0xd8,
	0x14, 0x56, 0x66, 0xf9, 0x97, 0xe0, 0xd2, 0x44, 0x6e, 0xce, 0xe6, 0x84, 0xa1, 0xba, 0x11, 0x1c,
	0xc7, 0x24, 0xb6, 0xad, 0x82, 0x21, 0x54, 0x52, 0x8c, 0x49, 0x42, 0x24, 0x89, 0x6d, 0xb7, 0xe0,
	0x48, 0x95, 0x10, 0xc6, 0x3c, 0xa6, 0x03, 0x4a, 0x62, 0x1d, 0x5e, 0x5e, 0x58, 0xd0, 0x6a, 0x96,
	0xe4, 0x79, 0x34, 0x22, 0x66, 0x1b, 0xbd, 0xd0, 0x91, 0xc1, 0x5f, 0x33, 0x47, 0x73, 0x8c, 0x33,
	0x47, 0x77, 0x02, 0x95, 0x5e, 0xa3, 0x21, 0x9d, 0x80, 0xc3, 0xe4, 0x7f, 0x0f, 0x60, 0xbb, 0xe4,
	0x73, 0xdb, 0x10, 0x3c, 0xac, 0xfd, 0x6a, 0x73, 0x5c, 0x40, 0x84, 0x50, 0x11, 0x3a, 0xdd, 0x8a,
	0xe0, 0xd3, 0x19, 0xb8, 0x31, 0x3d, 0x29, 0xe3, 0xb9, 0x24, 0x28, 0x4f, 0x63, 0x2c, 0x49, 0x25,
	0x92, 0x9e, 0x01, 0xb8, 0x5a, 0xed, 0xd4, 0xec, 0x5e, 0x9a, 0x2d, 0xf9, 0xb8, 0x1e, 0x73, 0x8f,
	0xe9, 0x87, 0x43, 0x3f, 0x55, 0x69, 0xc4, 0xf0, 0x6e, 0x1b, 0x90, 0xe6, 0x46, 0x2b, 0x71, 0x52,
	0xa0, 0xb6, 0x37, 0x1f, 0xcd, 0xb4, 0x4a, 0xc1, 0x61, 0x0b, 0x5e, 0x3e, 0xd1, 0x1f, 0x36, 0x61,
	0x59, 0x8f, 0x3c, 0x01, 0x47, 0x0f, 0x57, 0xa3, 0x1c, 0x51, 0x39, 0xe7, 0x5f, 0x83, 0xe9, 0x83,
	0xde, 0x28, 0xac, 0xa5, 0x9c, 0xf3, 0x05, 0x28, 0x27, 0x9d, 0x46, 0xa1, 0xb4, 0xf9, 0xef, 0x2b,
	0x50, 0x4d, 0x80, 0x8d, 0xc2, 0x58, 0xe4, 0xe2, 0xc7, 0x60, 0x2a, 0x19, 0x37, 0x0a, 0xe6, 0xa4,
	0x2e, 0x28, 0x6f, 0x96, 0x0b, 0x43, 0xb3, 0xbc, 0xe9, 0x6a, 0xd4, 0x1f, 0x73, 0xb0, 0x77, 0x62,
	0x72, 0x70, 0xd5, 0xa1, 0x9f, 0x11, 0x7c, 0x57, 0x95, 0x6f, 0xff, 0x3b, 0x00, 0x97, 0x13, 0x1e,
	0xe1, 0x04, 0x65, 0xb4, 0x6f, 0xd5, 0x6c, 0x96, 0xb8, 0xdf, 0x00, 0x0b, 0x2d, 0xe0, 0xf0, 0x94,
	0xc6, 0x18, 0xd2, 0xfe, 0x1d, 0x8d, 0x50, 0xc3, 0x1e, 0x26, 0xbc, 0x6f, 0x71, 0xf7, 0x73, 0x9a,
	0xc4, 0x36, 0x61, 0x34, 0x0a, 0xb6, 0xc1, 0x18, 0xd2, 0xfe, 0x55, 0x85, 0x50, 0xdd, 0x1e, 0x4e,
	0x97, 0x60, 0x0b, 0xc2, 0x5c, 0x02, 0x69, 0x12, 0x6a, 0xaf, 0x40, 0xbd, 0x43, 0x58, 0x1c, 0xdc,
	0x5b, 0x82, 0x97, 0x4e, 0x8a, 0xaa, 0xe6, 0x77, 0x3f, 0xbf, 0x03, 0xe8, 0x3b, 0x62, 0x12, 0xfb,
	0x36, 0x5e, 0x1e, 0xd5, 0xde, 0x04, 0x9d, 0x7c, 0x44, 0xc3, 0x15, 0x07, 0xfd, 0x6a, 0x71, 0x6a,
	0x7f, 0x98, 0x6a, 0xe7, 0x4c, 0x0c, 0x7d, 0xde, 0x2c, 0x4b, 0xfe, 0xa1, 0xa5, 0xf3, 0x7f, 0x04,
	0xb0, 0x4d, 0xd5, 0x25, 0xc5, 0x82, 0x37, 0xd5, 0xe9, 0xb0, 0x59, 0xe0, 0x2b, 0x6d, 0x54, 0x08,
	0x15, 0x5e, 0x0b, 0xff, 0x27, 0x00, 0x3b, 0x46, 0xd5, 0xe2, 0x9f, 0x6f, 0x3e, 0xfe, 0xb6, 0x96,
	0x59, 0x03, 0x9e, 0x02, 0xb8, 0xac, 0x93, 0x26, 0x96, 0xd1, 0xc8, 0x19, 0xd1, 0xb8, 0xa2, 0x76,
	0x2a, 0xa3, 0xfd, 0xab, 0x0a, 0xa1, 0xbd, 0x08, 0x3c, 0x58, 0x74, 0xff, 0x3d, 0x2a, 0x3f, 0x46,
	0x54, 0x87, 0xdb, 0x71, 0xef, 0x56, 0x31, 0x96, 0xd8, 0x26, 0xa0, 0x8f, 0x6a, 0xdb, 0x8e, 0xa9,
	0x47, 0xb4, 0xb0, 0x6d, 0x19, 0xd7, 0xb1, 0xc4, 0xea, 0xae, 0x1a, 0x25, 0x58, 0x08, 0xfb, 0x9f,
	0xcb, 0x10, 0xba, 0x0b, 0x2a, 0xde, 0xa8, 0x6a, 0x6d, 0x28, 0x8f, 0x79, 0x40, 0x2b, 0x3d, 0x97,
	0xfd, 0x0a, 0xe0, 0x45, 0x77, 0x63, 0xb3, 0x0f, 0x03, 0x48, 0x48, 0x2c, 0xa9, 0x90, 0x34, 0x12,
	0xf5, 0xb6, 0x99, 0xc7, 0x5c, 0x2a, 0xc3, 0xae, 0x48, 0x65, 0xe9, 0x11, 0x63, 0xa7, 0x80, 0xea,
	0xff, 0x02, 0xe0, 0xf9, 0xca, 0x79, 0x29, 0x99, 0x61, 0xce, 0xf3, 0x27, 0x8d, 0x3a, 0xcf, 0xe1,
	0x59, 0x4d, 0x99, 0xee, 0xa7, 0x64, 0xc7, 0x3a, 0xf4, 0xf6, 0x30, 0x95, 0x88, 0xb0, 0x01, 0xcf,
	0xa2, 0xe2, 0xd5, 0xa2, 0xa3, 0x98, 0x37, 0x2c, 0xcf, 0x7f, 0x19, 0xfa, 0xfa, 0x7d, 0x4a, 0x6b,
	0x52, 0x26, 0x49, 0xb6, 0x8b, 0x13, 0xfd, 0xda, 0xe3, 0x85, 0xcb, 0x4a, 0xf2, 0x16, 0xa6, 0xf2,
	0xa6, 0xe5, 0xfb, 0x97, 0xe1, 0x8a, 0x59, 0x33, 0xd6, 0xcf, 0x8a, 0xe6, 0x41, 0xb4, 0xa5, 0x95,
	0x4f, 0x5b, 0xc1, 0xb6, 0x48, 0xf5, 0xa9, 0xec, 0x2f, 0xe8, 0x7f, 0xce, 0xaf, 0xfc, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x76, 0xb0, 0x89, 0x34, 0x92, 0x1e, 0x00, 0x00,
}
