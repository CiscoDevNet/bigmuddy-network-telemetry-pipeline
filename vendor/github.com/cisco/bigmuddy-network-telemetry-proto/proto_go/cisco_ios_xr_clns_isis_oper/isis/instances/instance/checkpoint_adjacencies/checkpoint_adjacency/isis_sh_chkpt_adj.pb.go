// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_chkpt_adj.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency is a generated protocol buffer package.

It is generated from these files:
	isis_sh_chkpt_adj.proto

It has these top-level messages:
	IsisShChkptAdj_KEYS
	IsisShChkptAdj
	IsisIpv6AddressType
	IsisIpAddrType
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Checkpointed adjacency
type IsisShChkptAdj_KEYS struct {
	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	Level         string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	SystemId      string `protobuf:"bytes,3,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *IsisShChkptAdj_KEYS) Reset()                    { *m = IsisShChkptAdj_KEYS{} }
func (m *IsisShChkptAdj_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShChkptAdj_KEYS) ProtoMessage()               {}
func (*IsisShChkptAdj_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShChkptAdj_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IsisShChkptAdj struct {
	// Checkpoint object ID
	CheckpointAdjacencyObjectId uint32 `protobuf:"varint,50,opt,name=checkpoint_adjacency_object_id,json=checkpointAdjacencyObjectId" json:"checkpoint_adjacency_object_id,omitempty"`
	// Neighbor system ID
	CheckpointAdjacencySystemId string `protobuf:"bytes,51,opt,name=checkpoint_adjacency_system_id,json=checkpointAdjacencySystemId" json:"checkpoint_adjacency_system_id,omitempty"`
	// Neighbor SNPA
	CheckpointAdjacencySnpa string `protobuf:"bytes,52,opt,name=checkpoint_adjacency_snpa,json=checkpointAdjacencySnpa" json:"checkpoint_adjacency_snpa,omitempty"`
	// Local interface
	CheckpointAdjacencyInterface string `protobuf:"bytes,53,opt,name=checkpoint_adjacency_interface,json=checkpointAdjacencyInterface" json:"checkpoint_adjacency_interface,omitempty"`
	// Adjacency level
	CheckpointAdjacencyLevel string `protobuf:"bytes,54,opt,name=checkpoint_adjacency_level,json=checkpointAdjacencyLevel" json:"checkpoint_adjacency_level,omitempty"`
	// Adjacency holdtime (s)
	CheckpointAdjacencyHoldtime uint32 `protobuf:"varint,55,opt,name=checkpoint_adjacency_holdtime,json=checkpointAdjacencyHoldtime" json:"checkpoint_adjacency_holdtime,omitempty"`
	// Adjacency LAN priority
	CheckpointAdjacencyLanPriority uint32 `protobuf:"varint,56,opt,name=checkpoint_adjacency_lan_priority,json=checkpointAdjacencyLanPriority" json:"checkpoint_adjacency_lan_priority,omitempty"`
	// Neighbor circuit number
	CheckpointAdjacencyCircuitNumber uint32 `protobuf:"varint,57,opt,name=checkpoint_adjacency_circuit_number,json=checkpointAdjacencyCircuitNumber" json:"checkpoint_adjacency_circuit_number,omitempty"`
	// Per address family next hops
	CheckpointAdjacencyPerAddressFamilyNextHop []*IsisIpAddrType `protobuf:"bytes,58,rep,name=checkpoint_adjacency_per_address_family_next_hop,json=checkpointAdjacencyPerAddressFamilyNextHop" json:"checkpoint_adjacency_per_address_family_next_hop,omitempty"`
}

func (m *IsisShChkptAdj) Reset()                    { *m = IsisShChkptAdj{} }
func (m *IsisShChkptAdj) String() string            { return proto.CompactTextString(m) }
func (*IsisShChkptAdj) ProtoMessage()               {}
func (*IsisShChkptAdj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShChkptAdj) GetCheckpointAdjacencyObjectId() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyObjectId
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencySystemId() string {
	if m != nil {
		return m.CheckpointAdjacencySystemId
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencySnpa() string {
	if m != nil {
		return m.CheckpointAdjacencySnpa
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyInterface() string {
	if m != nil {
		return m.CheckpointAdjacencyInterface
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyLevel() string {
	if m != nil {
		return m.CheckpointAdjacencyLevel
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyHoldtime() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyHoldtime
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyLanPriority() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyLanPriority
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyCircuitNumber() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyCircuitNumber
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyPerAddressFamilyNextHop() []*IsisIpAddrType {
	if m != nil {
		return m.CheckpointAdjacencyPerAddressFamilyNextHop
	}
	return nil
}

type IsisIpv6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisIpv6AddressType) Reset()                    { *m = IsisIpv6AddressType{} }
func (m *IsisIpv6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6AddressType) ProtoMessage()               {}
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisIpv6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IsisIpAddrType struct {
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// IPV4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// IPV6 address type
	Ipv6 *IsisIpv6AddressType `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *IsisIpAddrType) Reset()                    { *m = IsisIpAddrType{} }
func (m *IsisIpAddrType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpAddrType) ProtoMessage()               {}
func (*IsisIpAddrType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv6() *IsisIpv6AddressType {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShChkptAdj_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj_KEYS")
	proto.RegisterType((*IsisShChkptAdj)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj")
	proto.RegisterType((*IsisIpv6AddressType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ipv6_address_type")
	proto.RegisterType((*IsisIpAddrType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ip_addr_type")
}

func init() { proto.RegisterFile("isis_sh_chkpt_adj.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb5, 0xb4, 0x04, 0xea, 0x12, 0x24, 0x2c, 0x44, 0x16, 0x0a, 0x55, 0x48, 0x85, 0x14,
	0x71, 0x58, 0xa1, 0xb4, 0x04, 0xa8, 0xb8, 0x94, 0x02, 0x6a, 0x04, 0x84, 0x2a, 0x3d, 0x71, 0xb2,
	0x1c, 0xef, 0x44, 0x71, 0xbb, 0x6b, 0x5b, 0xb6, 0x13, 0x92, 0x67, 0xe0, 0x0e, 0x6f, 0xc5, 0x99,
	0xc7, 0x41, 0x99, 0xdd, 0x4d, 0x2a, 0xea, 0x1c, 0xe9, 0xcd, 0x3b, 0xfe, 0xfd, 0xf9, 0x9f, 0xb1,
	0xfe, 0x25, 0x0d, 0xe9, 0xa4, 0x63, 0x6e, 0xcc, 0xc4, 0xf8, 0xc2, 0x78, 0xc6, 0xd3, 0xf3, 0xc4,
	0x58, 0xed, 0x35, 0x65, 0x42, 0x3a, 0xa1, 0x99, 0xd4, 0x8e, 0xcd, 0x2c, 0x13, 0x99, 0x72, 0x0c,
	0xa5, 0xda, 0x80, 0x4d, 0x16, 0xab, 0x44, 0x2a, 0xe7, 0xb9, 0x12, 0xb0, 0x5a, 0x25, 0x62, 0x0c,
	0xe2, 0xc2, 0x68, 0xa9, 0x90, 0xc4, 0x05, 0x28, 0x21, 0xc1, 0x85, 0xca, 0xf3, 0xd6, 0xaf, 0x88,
	0x3c, 0xb8, 0x72, 0x39, 0xfb, 0xf4, 0xe1, 0xdb, 0x19, 0xdd, 0x23, 0xf5, 0x0a, 0xc9, 0x14, 0xcf,
	0x21, 0x8e, 0x9a, 0x51, 0x7b, 0x6b, 0x70, 0xa7, 0x2a, 0xf6, 0x79, 0x0e, 0xf4, 0x3e, 0xb9, 0x99,
	0xc1, 0x14, 0xb2, 0xf8, 0x06, 0x6e, 0x16, 0x1f, 0x74, 0x87, 0x6c, 0xb9, 0xb9, 0xf3, 0x90, 0x33,
	0x99, 0xc6, 0x1b, 0xb8, 0x73, 0xbb, 0x28, 0xf4, 0x52, 0xfa, 0x8c, 0xdc, 0x95, 0xca, 0x83, 0x1d,
	0xf1, 0x0a, 0xbc, 0x89, 0x8a, 0xfa, 0xb2, 0xba, 0x20, 0xb7, 0x7e, 0xd6, 0xc8, 0xbd, 0x2b, 0xce,
	0xe8, 0x31, 0xd9, 0x0d, 0xf5, 0xc1, 0xf4, 0xf0, 0x1c, 0x84, 0x5f, 0x5c, 0xd7, 0x69, 0x46, 0xed,
	0xfa, 0x60, 0x67, 0xa5, 0x3a, 0xaa, 0x44, 0x5f, 0x51, 0xd3, 0x4b, 0xd7, 0x42, 0x56, 0x9e, 0xf7,
	0xd1, 0x51, 0x08, 0x72, 0x56, 0xb5, 0x71, 0x48, 0x1e, 0x86, 0x21, 0xca, 0xf0, 0xf8, 0x00, 0xcf,
	0x37, 0x42, 0xe7, 0x95, 0xe1, 0xf4, 0xfd, 0x1a, 0x03, 0xcb, 0x09, 0xc4, 0x2f, 0x11, 0xf0, 0x38,
	0x00, 0xe8, 0x55, 0x1a, 0xfa, 0x96, 0x3c, 0x0a, 0x52, 0x8a, 0x07, 0xe9, 0x22, 0x21, 0x0e, 0x10,
	0x3e, 0xe3, 0x1b, 0xbd, 0x23, 0x4f, 0x82, 0xa7, 0xc7, 0x3a, 0x4b, 0xbd, 0xcc, 0x21, 0x7e, 0xb5,
	0x76, 0x90, 0x27, 0xa5, 0x84, 0xf6, 0xc8, 0xd3, 0xb0, 0x03, 0xae, 0x98, 0xb1, 0x52, 0x5b, 0xe9,
	0xe7, 0xf1, 0x6b, 0xe4, 0xec, 0x86, 0x8c, 0x70, 0x75, 0x5a, 0xaa, 0xe8, 0x17, 0xb2, 0x17, 0x44,
	0x09, 0x69, 0xc5, 0x44, 0x7a, 0xa6, 0x26, 0xf9, 0x10, 0x6c, 0xfc, 0x06, 0x61, 0xcd, 0x00, 0xec,
	0xb8, 0x10, 0xf6, 0x51, 0x47, 0xff, 0x44, 0xe4, 0x45, 0x90, 0x67, 0xc0, 0x32, 0x9e, 0xa6, 0x16,
	0x9c, 0x63, 0x23, 0x9e, 0xcb, 0x6c, 0xce, 0x14, 0xcc, 0x3c, 0x1b, 0x6b, 0x13, 0x1f, 0x36, 0x37,
	0xda, 0xdb, 0x1d, 0x9b, 0xfc, 0xe7, 0xd0, 0x21, 0x83, 0x49, 0x83, 0x3e, 0x98, 0x9f, 0x1b, 0x18,
	0x3c, 0x0f, 0x34, 0x74, 0x0a, 0xf6, 0xa8, 0x30, 0xfa, 0x11, 0x7d, 0xf6, 0x61, 0xe6, 0x4f, 0xb4,
	0x69, 0x25, 0x65, 0x62, 0xa5, 0x99, 0x76, 0x97, 0xad, 0x2c, 0x28, 0x8b, 0x30, 0x4e, 0x79, 0x36,
	0xa9, 0x92, 0x5a, 0x7c, 0xb4, 0x7e, 0x47, 0x65, 0x90, 0x2e, 0xdf, 0x48, 0x1b, 0xe4, 0x16, 0x1f,
	0x5d, 0xce, 0x75, 0x8d, 0x8f, 0x30, 0xd1, 0x94, 0x6c, 0x4a, 0x33, 0x3d, 0x28, 0x03, 0x8d, 0x6b,
	0xfa, 0x23, 0xc2, 0x62, 0x17, 0xb3, 0xbc, 0xdd, 0xf9, 0x7e, 0x5d, 0x13, 0xfa, 0xa7, 0x41, 0x74,
	0xd3, 0x1d, 0xd6, 0xf0, 0xdf, 0xb8, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa1, 0x6d, 0xce,
	0x36, 0x05, 0x00, 0x00,
}
