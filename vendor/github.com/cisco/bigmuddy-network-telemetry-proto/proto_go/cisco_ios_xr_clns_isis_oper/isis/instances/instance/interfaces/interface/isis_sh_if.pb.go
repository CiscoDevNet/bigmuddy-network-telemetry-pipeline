// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_if.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface is a generated protocol buffer package.

It is generated from these files:
	isis_sh_if.proto

It has these top-level messages:
	IsisShIf_KEYS
	IsisShIf
	IsisIpv6AddressType
	IsisIpv4PrefixType
	IsisIpv6PrefixType
	IsisIpAddrType
	IsisIpPrefixType
	IsisTopoIdType
	IsisShIfDisabled
	IsisShIfAdjFormDisabled
	IsisShIfAdjFormStatus
	IsisShIfAdvPrefixDisabled
	IsisShIfAdvPrefixStatus
	IsisShIfCfgStatus
	IsisShIfClnsProtoDown
	IsisShIfClnsStatus
	IsisShIfClnsMtuInvalid
	IsisShIfClnsMtuStatus
	IsisShIfClnsSnpaUnknown
	IsisShIfClnsSnpaKnown
	IsisShIfClnsSnpaStatus
	IsisShIfMcastInvalid
	IsisShIfMcastStatus
	IsisShIfAreaClns
	IsisShIfClnsLan
	IsisShIfClnsP2POverLan
	IsisShIfClnsP2P
	IsisShIfClnsMediaSpecificStatus
	IsisShIfClns
	IsisShIfAreaActiveLan
	IsisShIfAreaActive
	IsisShIfTopoAdjFormDisabled
	IsisShIfTopoAdjFormStatus
	IsisShIfTopoAdvPrefixDisabled
	IsisShIfTopoAdvPrefixStatus
	IsisShIfTopoEnabled
	IsisShIfTopoDisabled
	IsisShIfTopoStatus
	IsisShIfTopo
	IsisShIfAfPrefixUnknown
	IsisShIfAfPrefixData
	IsisShIfAfPrefixStatus
	IsisShIfAfFwdAddrData
	IsisShIfAfFwdAddrUnknown
	IsisShIfAfFwdAddrStatus
	IsisShIfAfProtoDown
	IsisShIfAfProtoStatus
	IsisShIfAfDisabled
	IsisShIfAfEnabled
	IsisShIfAfStatus
	IsisShIfAf
	IsisShIfActiveP2P
	IsisShIfBfdType
	IsisShIfEnabled
	IsisShIfStatus
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// All the Information of an IS-IS interface
type IsisShIf_KEYS struct {
	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *IsisShIf_KEYS) Reset()                    { *m = IsisShIf_KEYS{} }
func (m *IsisShIf_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShIf_KEYS) ProtoMessage()               {}
func (*IsisShIf_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShIf_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShIf_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IsisShIf struct {
	// Configured circuit type for the interface
	ConfiguredCircuitType string `protobuf:"bytes,50,opt,name=configured_circuit_type,json=configuredCircuitType" json:"configured_circuit_type,omitempty"`
	// Configured interface status
	ConfiguredStatus *IsisShIfCfgStatus `protobuf:"bytes,51,opt,name=configured_status,json=configuredStatus" json:"configured_status,omitempty"`
	// Interface mesh group
	MeshGroup uint32 `protobuf:"varint,52,opt,name=mesh_group,json=meshGroup" json:"mesh_group,omitempty"`
	// IS-type of the router
	IsType string `protobuf:"bytes,53,opt,name=is_type,json=isType" json:"is_type,omitempty"`
	// Information about the interface status and its data
	InterfaceStatusAndData *IsisShIfStatus `protobuf:"bytes,54,opt,name=interface_status_and_data,json=interfaceStatusAndData" json:"interface_status_and_data,omitempty"`
	// ISIS NSR Interface
	NsrIntf bool `protobuf:"varint,55,opt,name=nsr_intf,json=nsrIntf" json:"nsr_intf,omitempty"`
}

func (m *IsisShIf) Reset()                    { *m = IsisShIf{} }
func (m *IsisShIf) String() string            { return proto.CompactTextString(m) }
func (*IsisShIf) ProtoMessage()               {}
func (*IsisShIf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShIf) GetConfiguredCircuitType() string {
	if m != nil {
		return m.ConfiguredCircuitType
	}
	return ""
}

func (m *IsisShIf) GetConfiguredStatus() *IsisShIfCfgStatus {
	if m != nil {
		return m.ConfiguredStatus
	}
	return nil
}

func (m *IsisShIf) GetMeshGroup() uint32 {
	if m != nil {
		return m.MeshGroup
	}
	return 0
}

func (m *IsisShIf) GetIsType() string {
	if m != nil {
		return m.IsType
	}
	return ""
}

func (m *IsisShIf) GetInterfaceStatusAndData() *IsisShIfStatus {
	if m != nil {
		return m.InterfaceStatusAndData
	}
	return nil
}

func (m *IsisShIf) GetNsrIntf() bool {
	if m != nil {
		return m.NsrIntf
	}
	return false
}

type IsisIpv6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisIpv6AddressType) Reset()                    { *m = IsisIpv6AddressType{} }
func (m *IsisIpv6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6AddressType) ProtoMessage()               {}
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisIpv6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisIpv4PrefixType) Reset()                    { *m = IsisIpv4PrefixType{} }
func (m *IsisIpv4PrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv4PrefixType) ProtoMessage()               {}
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisIpv4PrefixType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

// IPv4 address and prefix length
type IsisIpv6PrefixType struct {
	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisIpv6PrefixType) Reset()                    { *m = IsisIpv6PrefixType{} }
func (m *IsisIpv6PrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6PrefixType) ProtoMessage()               {}
func (*IsisIpv6PrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsisIpv6PrefixType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisIpv6PrefixType) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type IsisIpAddrType struct {
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// IPV4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// IPV6 address type
	Ipv6 *IsisIpv6AddressType `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *IsisIpAddrType) Reset()                    { *m = IsisIpAddrType{} }
func (m *IsisIpAddrType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpAddrType) ProtoMessage()               {}
func (*IsisIpAddrType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsisIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv6() *IsisIpv6AddressType {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type IsisIpPrefixType struct {
	AfName string              `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	Ipv4   *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6   *IsisIpv6PrefixType `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *IsisIpPrefixType) Reset()                    { *m = IsisIpPrefixType{} }
func (m *IsisIpPrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpPrefixType) ProtoMessage()               {}
func (*IsisIpPrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsisIpPrefixType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisIpPrefixType) GetIpv4() *IsisIpv4PrefixType {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *IsisIpPrefixType) GetIpv6() *IsisIpv6PrefixType {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
}

func (m *IsisTopoIdType) Reset()                    { *m = IsisTopoIdType{} }
func (m *IsisTopoIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisTopoIdType) ProtoMessage()               {}
func (*IsisTopoIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsisTopoIdType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisTopoIdType) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisTopoIdType) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IsisTopoIdType) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

// Disabled interface info
type IsisShIfDisabled struct {
	// Reason why the interface is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfDisabled) Reset()                    { *m = IsisShIfDisabled{} }
func (m *IsisShIfDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfDisabled) ProtoMessage()               {}
func (*IsisShIfDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IsisShIfDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

// Interface info when adjacency formation is disabled
type IsisShIfAdjFormDisabled struct {
	// Reason why the interface is not able to form adjacencies
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAdjFormDisabled) Reset()                    { *m = IsisShIfAdjFormDisabled{} }
func (m *IsisShIfAdjFormDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAdjFormDisabled) ProtoMessage()               {}
func (*IsisShIfAdjFormDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IsisShIfAdjFormDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfAdjFormStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled info for the adjacency formation status
	Disabled *IsisShIfAdjFormDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *IsisShIfAdjFormStatus) Reset()                    { *m = IsisShIfAdjFormStatus{} }
func (m *IsisShIfAdjFormStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAdjFormStatus) ProtoMessage()               {}
func (*IsisShIfAdjFormStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IsisShIfAdjFormStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAdjFormStatus) GetDisabled() *IsisShIfAdjFormDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

// Interface info when prefix advertisement is disabled
type IsisShIfAdvPrefixDisabled struct {
	// Reason why the interface is not able to advertise prefixes
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAdvPrefixDisabled) Reset()                    { *m = IsisShIfAdvPrefixDisabled{} }
func (m *IsisShIfAdvPrefixDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAdvPrefixDisabled) ProtoMessage()               {}
func (*IsisShIfAdvPrefixDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IsisShIfAdvPrefixDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfAdvPrefixStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled info for the prefix advertisement status
	Disabled *IsisShIfAdvPrefixDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *IsisShIfAdvPrefixStatus) Reset()                    { *m = IsisShIfAdvPrefixStatus{} }
func (m *IsisShIfAdvPrefixStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAdvPrefixStatus) ProtoMessage()               {}
func (*IsisShIfAdvPrefixStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IsisShIfAdvPrefixStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAdvPrefixStatus) GetDisabled() *IsisShIfAdvPrefixDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

// Configured state of an interface
type IsisShIfCfgStatus struct {
	// Configured adjacency formation status
	AdjacencyFormStatus bool `protobuf:"varint,1,opt,name=adjacency_form_status,json=adjacencyFormStatus" json:"adjacency_form_status,omitempty"`
	// Configured prefix advertisement status
	AdvPrefixStatus bool `protobuf:"varint,2,opt,name=adv_prefix_status,json=advPrefixStatus" json:"adv_prefix_status,omitempty"`
}

func (m *IsisShIfCfgStatus) Reset()                    { *m = IsisShIfCfgStatus{} }
func (m *IsisShIfCfgStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfCfgStatus) ProtoMessage()               {}
func (*IsisShIfCfgStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IsisShIfCfgStatus) GetAdjacencyFormStatus() bool {
	if m != nil {
		return m.AdjacencyFormStatus
	}
	return false
}

func (m *IsisShIfCfgStatus) GetAdvPrefixStatus() bool {
	if m != nil {
		return m.AdvPrefixStatus
	}
	return false
}

// Interface info when CLNS is down
type IsisShIfClnsProtoDown struct {
	// Reason why CLNS is down
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfClnsProtoDown) Reset()                    { *m = IsisShIfClnsProtoDown{} }
func (m *IsisShIfClnsProtoDown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsProtoDown) ProtoMessage()               {}
func (*IsisShIfClnsProtoDown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IsisShIfClnsProtoDown) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfClnsStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// State describing why CLNS is down
	ClnsDownInfo *IsisShIfClnsProtoDown `protobuf:"bytes,2,opt,name=clns_down_info,json=clnsDownInfo" json:"clns_down_info,omitempty"`
}

func (m *IsisShIfClnsStatus) Reset()                    { *m = IsisShIfClnsStatus{} }
func (m *IsisShIfClnsStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsStatus) ProtoMessage()               {}
func (*IsisShIfClnsStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IsisShIfClnsStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfClnsStatus) GetClnsDownInfo() *IsisShIfClnsProtoDown {
	if m != nil {
		return m.ClnsDownInfo
	}
	return nil
}

// Interface info with invalid MTU
type IsisShIfClnsMtuInvalid struct {
	// Reason why the MTU is invalid
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfClnsMtuInvalid) Reset()                    { *m = IsisShIfClnsMtuInvalid{} }
func (m *IsisShIfClnsMtuInvalid) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsMtuInvalid) ProtoMessage()               {}
func (*IsisShIfClnsMtuInvalid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IsisShIfClnsMtuInvalid) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfClnsMtuStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Information pertaining to the invalid CLNS MTU
	Invalid *IsisShIfClnsMtuInvalid `protobuf:"bytes,2,opt,name=invalid" json:"invalid,omitempty"`
	// Valid MTU
	Mtu uint32 `protobuf:"varint,3,opt,name=mtu" json:"mtu,omitempty"`
}

func (m *IsisShIfClnsMtuStatus) Reset()                    { *m = IsisShIfClnsMtuStatus{} }
func (m *IsisShIfClnsMtuStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsMtuStatus) ProtoMessage()               {}
func (*IsisShIfClnsMtuStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *IsisShIfClnsMtuStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfClnsMtuStatus) GetInvalid() *IsisShIfClnsMtuInvalid {
	if m != nil {
		return m.Invalid
	}
	return nil
}

func (m *IsisShIfClnsMtuStatus) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

// Interface info with CLNS SNPA unknown
type IsisShIfClnsSnpaUnknown struct {
	// Reason why the SNPA is unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfClnsSnpaUnknown) Reset()                    { *m = IsisShIfClnsSnpaUnknown{} }
func (m *IsisShIfClnsSnpaUnknown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsSnpaUnknown) ProtoMessage()               {}
func (*IsisShIfClnsSnpaUnknown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *IsisShIfClnsSnpaUnknown) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

// CLNS SNPA info
type IsisShIfClnsSnpaKnown struct {
	// Valid SNPA
	Snpa string `protobuf:"bytes,1,opt,name=snpa" json:"snpa,omitempty"`
}

func (m *IsisShIfClnsSnpaKnown) Reset()                    { *m = IsisShIfClnsSnpaKnown{} }
func (m *IsisShIfClnsSnpaKnown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsSnpaKnown) ProtoMessage()               {}
func (*IsisShIfClnsSnpaKnown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IsisShIfClnsSnpaKnown) GetSnpa() string {
	if m != nil {
		return m.Snpa
	}
	return ""
}

type IsisShIfClnsSnpaStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Information pertaining to the unknown SNPA state
	Unknown *IsisShIfClnsSnpaUnknown `protobuf:"bytes,2,opt,name=unknown" json:"unknown,omitempty"`
	// Information pertaining to the known SNPA state
	Known *IsisShIfClnsSnpaKnown `protobuf:"bytes,3,opt,name=known" json:"known,omitempty"`
}

func (m *IsisShIfClnsSnpaStatus) Reset()                    { *m = IsisShIfClnsSnpaStatus{} }
func (m *IsisShIfClnsSnpaStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsSnpaStatus) ProtoMessage()               {}
func (*IsisShIfClnsSnpaStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *IsisShIfClnsSnpaStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfClnsSnpaStatus) GetUnknown() *IsisShIfClnsSnpaUnknown {
	if m != nil {
		return m.Unknown
	}
	return nil
}

func (m *IsisShIfClnsSnpaStatus) GetKnown() *IsisShIfClnsSnpaKnown {
	if m != nil {
		return m.Known
	}
	return nil
}

// Invalid multicast info
type IsisShIfMcastInvalid struct {
	// Reason why the multicast status is invalid
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfMcastInvalid) Reset()                    { *m = IsisShIfMcastInvalid{} }
func (m *IsisShIfMcastInvalid) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfMcastInvalid) ProtoMessage()               {}
func (*IsisShIfMcastInvalid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IsisShIfMcastInvalid) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfMcastStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Information pertaining to the invalid multicast status
	Invalid *IsisShIfMcastInvalid `protobuf:"bytes,2,opt,name=invalid" json:"invalid,omitempty"`
}

func (m *IsisShIfMcastStatus) Reset()                    { *m = IsisShIfMcastStatus{} }
func (m *IsisShIfMcastStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfMcastStatus) ProtoMessage()               {}
func (*IsisShIfMcastStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *IsisShIfMcastStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfMcastStatus) GetInvalid() *IsisShIfMcastInvalid {
	if m != nil {
		return m.Invalid
	}
	return nil
}

// Per interface per area CLNS state
type IsisShIfAreaClns struct {
	// Level of the area
	Level string `protobuf:"bytes,1,opt,name=level" json:"level,omitempty"`
	// Multicast group membership status
	MulticastStatus *IsisShIfMcastStatus `protobuf:"bytes,2,opt,name=multicast_status,json=multicastStatus" json:"multicast_status,omitempty"`
}

func (m *IsisShIfAreaClns) Reset()                    { *m = IsisShIfAreaClns{} }
func (m *IsisShIfAreaClns) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAreaClns) ProtoMessage()               {}
func (*IsisShIfAreaClns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *IsisShIfAreaClns) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShIfAreaClns) GetMulticastStatus() *IsisShIfMcastStatus {
	if m != nil {
		return m.MulticastStatus
	}
	return nil
}

// LAN specific CLNS state
type IsisShIfClnsLan struct {
	// Array of per area CLNS data
	PerAreaData []*IsisShIfAreaClns `protobuf:"bytes,1,rep,name=per_area_data,json=perAreaData" json:"per_area_data,omitempty"`
}

func (m *IsisShIfClnsLan) Reset()                    { *m = IsisShIfClnsLan{} }
func (m *IsisShIfClnsLan) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsLan) ProtoMessage()               {}
func (*IsisShIfClnsLan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *IsisShIfClnsLan) GetPerAreaData() []*IsisShIfAreaClns {
	if m != nil {
		return m.PerAreaData
	}
	return nil
}

// Point-to-point over LAN specific CLNS state
type IsisShIfClnsP2POverLan struct {
	// Multicast group membership status
	MulticastStatus *IsisShIfMcastStatus `protobuf:"bytes,1,opt,name=multicast_status,json=multicastStatus" json:"multicast_status,omitempty"`
}

func (m *IsisShIfClnsP2POverLan) Reset()                    { *m = IsisShIfClnsP2POverLan{} }
func (m *IsisShIfClnsP2POverLan) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsP2POverLan) ProtoMessage()               {}
func (*IsisShIfClnsP2POverLan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *IsisShIfClnsP2POverLan) GetMulticastStatus() *IsisShIfMcastStatus {
	if m != nil {
		return m.MulticastStatus
	}
	return nil
}

// Point-to-point CLNS state
type IsisShIfClnsP2P struct {
	// Point-to-point over LAN data
	P2POverLanData *IsisShIfClnsP2POverLan `protobuf:"bytes,1,opt,name=p2_p_over_lan_data,json=p2POverLanData" json:"p2_p_over_lan_data,omitempty"`
}

func (m *IsisShIfClnsP2P) Reset()                    { *m = IsisShIfClnsP2P{} }
func (m *IsisShIfClnsP2P) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClnsP2P) ProtoMessage()               {}
func (*IsisShIfClnsP2P) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *IsisShIfClnsP2P) GetP2POverLanData() *IsisShIfClnsP2POverLan {
	if m != nil {
		return m.P2POverLanData
	}
	return nil
}

// Media Specific CLNS state
type IsisShIfClnsMediaSpecificStatus struct {
	ClnsMediaType string `protobuf:"bytes,1,opt,name=clns_media_type,json=clnsMediaType" json:"clns_media_type,omitempty"`
	// LAN state
	ClnsLanData *IsisShIfClnsLan `protobuf:"bytes,2,opt,name=clns_lan_data,json=clnsLanData" json:"clns_lan_data,omitempty"`
	// Point-to-point state
	ClnsP2PData *IsisShIfClnsP2P `protobuf:"bytes,3,opt,name=clns_p2_p_data,json=clnsP2PData" json:"clns_p2_p_data,omitempty"`
}

func (m *IsisShIfClnsMediaSpecificStatus) Reset()         { *m = IsisShIfClnsMediaSpecificStatus{} }
func (m *IsisShIfClnsMediaSpecificStatus) String() string { return proto.CompactTextString(m) }
func (*IsisShIfClnsMediaSpecificStatus) ProtoMessage()    {}
func (*IsisShIfClnsMediaSpecificStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *IsisShIfClnsMediaSpecificStatus) GetClnsMediaType() string {
	if m != nil {
		return m.ClnsMediaType
	}
	return ""
}

func (m *IsisShIfClnsMediaSpecificStatus) GetClnsLanData() *IsisShIfClnsLan {
	if m != nil {
		return m.ClnsLanData
	}
	return nil
}

func (m *IsisShIfClnsMediaSpecificStatus) GetClnsP2PData() *IsisShIfClnsP2P {
	if m != nil {
		return m.ClnsP2PData
	}
	return nil
}

// CLNS I/O data for an interface
type IsisShIfClns struct {
	// Is CLNS protcol up or if not, the reason why it is not up
	ClnsStatus *IsisShIfClnsStatus `protobuf:"bytes,1,opt,name=clns_status,json=clnsStatus" json:"clns_status,omitempty"`
	// A valid MTU or the reason for the MTU being invalid
	MtuInfo *IsisShIfClnsMtuStatus `protobuf:"bytes,2,opt,name=mtu_info,json=mtuInfo" json:"mtu_info,omitempty"`
	// SNPA state
	SnpaState *IsisShIfClnsSnpaStatus `protobuf:"bytes,3,opt,name=snpa_state,json=snpaState" json:"snpa_state,omitempty"`
	// Media Specific CLNS state
	MediaSpecificState *IsisShIfClnsMediaSpecificStatus `protobuf:"bytes,4,opt,name=media_specific_state,json=mediaSpecificState" json:"media_specific_state,omitempty"`
	// Time until next LSP may be sent (ms)
	TimeUntilNextLsp uint32 `protobuf:"varint,5,opt,name=time_until_next_lsp,json=timeUntilNextLsp" json:"time_until_next_lsp,omitempty"`
	// TRUE if an LSP transmission has been requested
	LspTransmitRequestedFlag bool `protobuf:"varint,6,opt,name=lsp_transmit_requested_flag,json=lspTransmitRequestedFlag" json:"lsp_transmit_requested_flag,omitempty"`
	// TRUE if an LSP transmission has been sent, indicates LastLSPLevelTransmitted and LastLSP_IDTransmitted valid
	LspTransmittedFlag bool `protobuf:"varint,7,opt,name=lsp_transmitted_flag,json=lspTransmittedFlag" json:"lsp_transmitted_flag,omitempty"`
	// Number of LSPs that can be sent back to back in the current window without exceeding the pacing limit
	LspTxmitdB2BLimit uint32 `protobuf:"varint,8,opt,name=lsp_txmitd_b2_b_limit,json=lspTxmitdB2BLimit" json:"lsp_txmitd_b2_b_limit,omitempty"`
	// Time im msecs indicating the end of the window in which the 'back to back lsps to be sent' counter applies
	LspTxmtB2BMsecs uint32 `protobuf:"varint,9,opt,name=lsp_txmt_b2_b_msecs,json=lspTxmtB2BMsecs" json:"lsp_txmt_b2_b_msecs,omitempty"`
	// Level of the Last LSP Transmitted
	LastLspLevelTransmitted string `protobuf:"bytes,10,opt,name=last_lsp_level_transmitted,json=lastLspLevelTransmitted" json:"last_lsp_level_transmitted,omitempty"`
	// Last LSP ID Transmitted
	LastLspIdTransmitted string `protobuf:"bytes,11,opt,name=last_lsp_id_transmitted,json=lastLspIdTransmitted" json:"last_lsp_id_transmitted,omitempty"`
}

func (m *IsisShIfClns) Reset()                    { *m = IsisShIfClns{} }
func (m *IsisShIfClns) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfClns) ProtoMessage()               {}
func (*IsisShIfClns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *IsisShIfClns) GetClnsStatus() *IsisShIfClnsStatus {
	if m != nil {
		return m.ClnsStatus
	}
	return nil
}

func (m *IsisShIfClns) GetMtuInfo() *IsisShIfClnsMtuStatus {
	if m != nil {
		return m.MtuInfo
	}
	return nil
}

func (m *IsisShIfClns) GetSnpaState() *IsisShIfClnsSnpaStatus {
	if m != nil {
		return m.SnpaState
	}
	return nil
}

func (m *IsisShIfClns) GetMediaSpecificState() *IsisShIfClnsMediaSpecificStatus {
	if m != nil {
		return m.MediaSpecificState
	}
	return nil
}

func (m *IsisShIfClns) GetTimeUntilNextLsp() uint32 {
	if m != nil {
		return m.TimeUntilNextLsp
	}
	return 0
}

func (m *IsisShIfClns) GetLspTransmitRequestedFlag() bool {
	if m != nil {
		return m.LspTransmitRequestedFlag
	}
	return false
}

func (m *IsisShIfClns) GetLspTransmittedFlag() bool {
	if m != nil {
		return m.LspTransmittedFlag
	}
	return false
}

func (m *IsisShIfClns) GetLspTxmitdB2BLimit() uint32 {
	if m != nil {
		return m.LspTxmitdB2BLimit
	}
	return 0
}

func (m *IsisShIfClns) GetLspTxmtB2BMsecs() uint32 {
	if m != nil {
		return m.LspTxmtB2BMsecs
	}
	return 0
}

func (m *IsisShIfClns) GetLastLspLevelTransmitted() string {
	if m != nil {
		return m.LastLspLevelTransmitted
	}
	return ""
}

func (m *IsisShIfClns) GetLastLspIdTransmitted() string {
	if m != nil {
		return m.LastLspIdTransmitted
	}
	return ""
}

// Per-interface, per-area data for active LAN interface
type IsisShIfAreaActiveLan struct {
	// Circuit LAN ID
	CircuitLanId []byte `protobuf:"bytes,1,opt,name=circuit_lan_id,json=circuitLanId,proto3" json:"circuit_lan_id,omitempty"`
	// Time (ms) until next IIH
	TimeUntilNextIih uint32 `protobuf:"varint,2,opt,name=time_until_next_iih,json=timeUntilNextIih" json:"time_until_next_iih,omitempty"`
	// Interface's DIS-election priority
	InterfacePriority uint32 `protobuf:"varint,3,opt,name=interface_priority,json=interfacePriority" json:"interface_priority,omitempty"`
	// Priority of current DIS on this LAN
	DisPriority uint32 `protobuf:"varint,4,opt,name=dis_priority,json=disPriority" json:"dis_priority,omitempty"`
	// Flag indicating if this LAN circuit is the DIS
	AreWeDis bool `protobuf:"varint,5,opt,name=are_we_dis,json=areWeDis" json:"are_we_dis,omitempty"`
}

func (m *IsisShIfAreaActiveLan) Reset()                    { *m = IsisShIfAreaActiveLan{} }
func (m *IsisShIfAreaActiveLan) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAreaActiveLan) ProtoMessage()               {}
func (*IsisShIfAreaActiveLan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *IsisShIfAreaActiveLan) GetCircuitLanId() []byte {
	if m != nil {
		return m.CircuitLanId
	}
	return nil
}

func (m *IsisShIfAreaActiveLan) GetTimeUntilNextIih() uint32 {
	if m != nil {
		return m.TimeUntilNextIih
	}
	return 0
}

func (m *IsisShIfAreaActiveLan) GetInterfacePriority() uint32 {
	if m != nil {
		return m.InterfacePriority
	}
	return 0
}

func (m *IsisShIfAreaActiveLan) GetDisPriority() uint32 {
	if m != nil {
		return m.DisPriority
	}
	return 0
}

func (m *IsisShIfAreaActiveLan) GetAreWeDis() bool {
	if m != nil {
		return m.AreWeDis
	}
	return false
}

// Per-area data for an interface
type IsisShIfAreaActive struct {
	// Level of the area
	Level string `protobuf:"bytes,1,opt,name=level" json:"level,omitempty"`
	// Number of adjacencies
	AdjacencyCount uint32 `protobuf:"varint,2,opt,name=adjacency_count,json=adjacencyCount" json:"adjacency_count,omitempty"`
	// LSP pacing time period (ms)
	LspPacingInterval uint32 `protobuf:"varint,3,opt,name=lsp_pacing_interval,json=lspPacingInterval" json:"lsp_pacing_interval,omitempty"`
	// No. of SNP entries queued to be transmitted
	PsnpTransmitQueueSize uint32 `protobuf:"varint,4,opt,name=psnp_transmit_queue_size,json=psnpTransmitQueueSize" json:"psnp_transmit_queue_size,omitempty"`
	// LAN data, NULL iff interface has non-LAN media type
	LanData *IsisShIfAreaActiveLan `protobuf:"bytes,5,opt,name=lan_data,json=lanData" json:"lan_data,omitempty"`
}

func (m *IsisShIfAreaActive) Reset()                    { *m = IsisShIfAreaActive{} }
func (m *IsisShIfAreaActive) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAreaActive) ProtoMessage()               {}
func (*IsisShIfAreaActive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *IsisShIfAreaActive) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShIfAreaActive) GetAdjacencyCount() uint32 {
	if m != nil {
		return m.AdjacencyCount
	}
	return 0
}

func (m *IsisShIfAreaActive) GetLspPacingInterval() uint32 {
	if m != nil {
		return m.LspPacingInterval
	}
	return 0
}

func (m *IsisShIfAreaActive) GetPsnpTransmitQueueSize() uint32 {
	if m != nil {
		return m.PsnpTransmitQueueSize
	}
	return 0
}

func (m *IsisShIfAreaActive) GetLanData() *IsisShIfAreaActiveLan {
	if m != nil {
		return m.LanData
	}
	return nil
}

// Topology info when adjacency formation is disabled
type IsisShIfTopoAdjFormDisabled struct {
	// Reason why the adjacency formation status of a topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfTopoAdjFormDisabled) Reset()                    { *m = IsisShIfTopoAdjFormDisabled{} }
func (m *IsisShIfTopoAdjFormDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoAdjFormDisabled) ProtoMessage()               {}
func (*IsisShIfTopoAdjFormDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *IsisShIfTopoAdjFormDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfTopoAdjFormStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled state for the adjacency formation status of a topology
	Disabled *IsisShIfTopoAdjFormDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *IsisShIfTopoAdjFormStatus) Reset()                    { *m = IsisShIfTopoAdjFormStatus{} }
func (m *IsisShIfTopoAdjFormStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoAdjFormStatus) ProtoMessage()               {}
func (*IsisShIfTopoAdjFormStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *IsisShIfTopoAdjFormStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfTopoAdjFormStatus) GetDisabled() *IsisShIfTopoAdjFormDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

// Topology info when prefix advertisement is disabled
type IsisShIfTopoAdvPrefixDisabled struct {
	// Reason why the prefix advertisement status of a topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfTopoAdvPrefixDisabled) Reset()                    { *m = IsisShIfTopoAdvPrefixDisabled{} }
func (m *IsisShIfTopoAdvPrefixDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoAdvPrefixDisabled) ProtoMessage()               {}
func (*IsisShIfTopoAdvPrefixDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *IsisShIfTopoAdvPrefixDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfTopoAdvPrefixStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled state for the prefix advertisement status of a topology
	Disabled *IsisShIfTopoAdvPrefixDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *IsisShIfTopoAdvPrefixStatus) Reset()                    { *m = IsisShIfTopoAdvPrefixStatus{} }
func (m *IsisShIfTopoAdvPrefixStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoAdvPrefixStatus) ProtoMessage()               {}
func (*IsisShIfTopoAdvPrefixStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *IsisShIfTopoAdvPrefixStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfTopoAdvPrefixStatus) GetDisabled() *IsisShIfTopoAdvPrefixDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

// Enabled topology info of an interface
type IsisShIfTopoEnabled struct {
	// Adjacency formation status of a topology
	AdjacencyFormStatus *IsisShIfTopoAdjFormStatus `protobuf:"bytes,1,opt,name=adjacency_form_status,json=adjacencyFormStatus" json:"adjacency_form_status,omitempty"`
	// Prefix advertisement status of a topology
	AdvPrefixStatus *IsisShIfTopoAdvPrefixStatus `protobuf:"bytes,2,opt,name=adv_prefix_status,json=advPrefixStatus" json:"adv_prefix_status,omitempty"`
	// L1 metric for this topology
	Level1Metric uint32 `protobuf:"varint,3,opt,name=level1_metric,json=level1Metric" json:"level1_metric,omitempty"`
	// L2 metric for this topology
	Level2Metric uint32 `protobuf:"varint,4,opt,name=level2_metric,json=level2Metric" json:"level2_metric,omitempty"`
	// L1 metric for this topology
	Level1Weight uint32 `protobuf:"varint,5,opt,name=level1_weight,json=level1Weight" json:"level1_weight,omitempty"`
	// L2 metric for this topology
	Level2Weight uint32 `protobuf:"varint,6,opt,name=level2_weight,json=level2Weight" json:"level2_weight,omitempty"`
	// MPLS maximum number of pri labels supported
	MaxLabelSupported uint32 `protobuf:"varint,7,opt,name=max_label_supported,json=maxLabelSupported" json:"max_label_supported,omitempty"`
	// MPLS maximum number of backup labels supported
	MaxBkpLabelSupported uint32 `protobuf:"varint,8,opt,name=max_bkp_label_supported,json=maxBkpLabelSupported" json:"max_bkp_label_supported,omitempty"`
	// MPLS maximum number of srte labels supported
	MaxSrteLabelSupported uint32 `protobuf:"varint,9,opt,name=max_srte_label_supported,json=maxSrteLabelSupported" json:"max_srte_label_supported,omitempty"`
	// MPLS LDP sync enabled status for L1
	Level1LdpSyncEnabled bool `protobuf:"varint,10,opt,name=level1_ldp_sync_enabled,json=level1LdpSyncEnabled" json:"level1_ldp_sync_enabled,omitempty"`
	// MPLS LDP sync enabled status for L2
	Level2LdpSyncEnabled bool `protobuf:"varint,11,opt,name=level2_ldp_sync_enabled,json=level2LdpSyncEnabled" json:"level2_ldp_sync_enabled,omitempty"`
	// Status of MPLS LDP synchronization
	LdpSyncStatus bool `protobuf:"varint,12,opt,name=ldp_sync_status,json=ldpSyncStatus" json:"ldp_sync_status,omitempty"`
	// Status of MPLS LDPv6 synchronization
	LdPv6SyncStatus bool `protobuf:"varint,13,opt,name=ld_pv6_sync_status,json=ldPv6SyncStatus" json:"ld_pv6_sync_status,omitempty"`
	// L1 metric-offset for this topology
	Level1OffsetMetric uint32 `protobuf:"varint,14,opt,name=level1_offset_metric,json=level1OffsetMetric" json:"level1_offset_metric,omitempty"`
	// L2 metric-offset for this topology
	Level2OffsetMetric uint32 `protobuf:"varint,15,opt,name=level2_offset_metric,json=level2OffsetMetric" json:"level2_offset_metric,omitempty"`
	// Link-Group configure status for L1
	Level1LkgpConfigured bool `protobuf:"varint,16,opt,name=level1_lkgp_configured,json=level1LkgpConfigured" json:"level1_lkgp_configured,omitempty"`
	// Link-Group configure status for L2
	Level2LkgpConfigured bool `protobuf:"varint,17,opt,name=level2_lkgp_configured,json=level2LkgpConfigured" json:"level2_lkgp_configured,omitempty"`
	// L1 PP-metric for this topology
	Level1PpMetric uint32 `protobuf:"varint,18,opt,name=level1_pp_metric,json=level1PpMetric" json:"level1_pp_metric,omitempty"`
	// L2 PP-metric for this topology
	Level2PpMetric uint32 `protobuf:"varint,19,opt,name=level2_pp_metric,json=level2PpMetric" json:"level2_pp_metric,omitempty"`
	// PP configure status for L1
	Level1PpConfigured bool `protobuf:"varint,20,opt,name=level1_pp_configured,json=level1PpConfigured" json:"level1_pp_configured,omitempty"`
	// PP configure status for L2
	Level2PpConfigured bool `protobuf:"varint,21,opt,name=level2_pp_configured,json=level2PpConfigured" json:"level2_pp_configured,omitempty"`
}

func (m *IsisShIfTopoEnabled) Reset()                    { *m = IsisShIfTopoEnabled{} }
func (m *IsisShIfTopoEnabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoEnabled) ProtoMessage()               {}
func (*IsisShIfTopoEnabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *IsisShIfTopoEnabled) GetAdjacencyFormStatus() *IsisShIfTopoAdjFormStatus {
	if m != nil {
		return m.AdjacencyFormStatus
	}
	return nil
}

func (m *IsisShIfTopoEnabled) GetAdvPrefixStatus() *IsisShIfTopoAdvPrefixStatus {
	if m != nil {
		return m.AdvPrefixStatus
	}
	return nil
}

func (m *IsisShIfTopoEnabled) GetLevel1Metric() uint32 {
	if m != nil {
		return m.Level1Metric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel2Metric() uint32 {
	if m != nil {
		return m.Level2Metric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel1Weight() uint32 {
	if m != nil {
		return m.Level1Weight
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel2Weight() uint32 {
	if m != nil {
		return m.Level2Weight
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetMaxLabelSupported() uint32 {
	if m != nil {
		return m.MaxLabelSupported
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetMaxBkpLabelSupported() uint32 {
	if m != nil {
		return m.MaxBkpLabelSupported
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetMaxSrteLabelSupported() uint32 {
	if m != nil {
		return m.MaxSrteLabelSupported
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel1LdpSyncEnabled() bool {
	if m != nil {
		return m.Level1LdpSyncEnabled
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLevel2LdpSyncEnabled() bool {
	if m != nil {
		return m.Level2LdpSyncEnabled
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLdpSyncStatus() bool {
	if m != nil {
		return m.LdpSyncStatus
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLdPv6SyncStatus() bool {
	if m != nil {
		return m.LdPv6SyncStatus
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLevel1OffsetMetric() uint32 {
	if m != nil {
		return m.Level1OffsetMetric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel2OffsetMetric() uint32 {
	if m != nil {
		return m.Level2OffsetMetric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel1LkgpConfigured() bool {
	if m != nil {
		return m.Level1LkgpConfigured
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLevel2LkgpConfigured() bool {
	if m != nil {
		return m.Level2LkgpConfigured
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLevel1PpMetric() uint32 {
	if m != nil {
		return m.Level1PpMetric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel2PpMetric() uint32 {
	if m != nil {
		return m.Level2PpMetric
	}
	return 0
}

func (m *IsisShIfTopoEnabled) GetLevel1PpConfigured() bool {
	if m != nil {
		return m.Level1PpConfigured
	}
	return false
}

func (m *IsisShIfTopoEnabled) GetLevel2PpConfigured() bool {
	if m != nil {
		return m.Level2PpConfigured
	}
	return false
}

// Disabled topology info of an interface
type IsisShIfTopoDisabled struct {
	// Reason why the topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfTopoDisabled) Reset()                    { *m = IsisShIfTopoDisabled{} }
func (m *IsisShIfTopoDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoDisabled) ProtoMessage()               {}
func (*IsisShIfTopoDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *IsisShIfTopoDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfTopoStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled information of a topology
	Disabled *IsisShIfTopoDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
	// Enabled information of a topology
	Enabled *IsisShIfTopoEnabled `protobuf:"bytes,3,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *IsisShIfTopoStatus) Reset()                    { *m = IsisShIfTopoStatus{} }
func (m *IsisShIfTopoStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopoStatus) ProtoMessage()               {}
func (*IsisShIfTopoStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *IsisShIfTopoStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfTopoStatus) GetDisabled() *IsisShIfTopoDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

func (m *IsisShIfTopoStatus) GetEnabled() *IsisShIfTopoEnabled {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Per topology info of an interface
type IsisShIfTopo struct {
	// Topology identifier
	TopologyId *IsisTopoIdType `protobuf:"bytes,1,opt,name=topology_id,json=topologyId" json:"topology_id,omitempty"`
	// Status of the topology
	Status *IsisShIfTopoStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *IsisShIfTopo) Reset()                    { *m = IsisShIfTopo{} }
func (m *IsisShIfTopo) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfTopo) ProtoMessage()               {}
func (*IsisShIfTopo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *IsisShIfTopo) GetTopologyId() *IsisTopoIdType {
	if m != nil {
		return m.TopologyId
	}
	return nil
}

func (m *IsisShIfTopo) GetStatus() *IsisShIfTopoStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Address prefix unknown info
type IsisShIfAfPrefixUnknown struct {
	// Reason why the global prefix(es) is(are) unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAfPrefixUnknown) Reset()                    { *m = IsisShIfAfPrefixUnknown{} }
func (m *IsisShIfAfPrefixUnknown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfPrefixUnknown) ProtoMessage()               {}
func (*IsisShIfAfPrefixUnknown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *IsisShIfAfPrefixUnknown) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

// Address prefix info
type IsisShIfAfPrefixData struct {
	// Array of global prefixes
	Prefix []*IsisIpPrefixType `protobuf:"bytes,1,rep,name=prefix" json:"prefix,omitempty"`
	// Is the interface unnumbered
	IsUnnumbered bool `protobuf:"varint,2,opt,name=is_unnumbered,json=isUnnumbered" json:"is_unnumbered,omitempty"`
}

func (m *IsisShIfAfPrefixData) Reset()                    { *m = IsisShIfAfPrefixData{} }
func (m *IsisShIfAfPrefixData) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfPrefixData) ProtoMessage()               {}
func (*IsisShIfAfPrefixData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *IsisShIfAfPrefixData) GetPrefix() []*IsisIpPrefixType {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *IsisShIfAfPrefixData) GetIsUnnumbered() bool {
	if m != nil {
		return m.IsUnnumbered
	}
	return false
}

type IsisShIfAfPrefixStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Unknown state for the global prefixes
	Unknown *IsisShIfAfPrefixUnknown `protobuf:"bytes,2,opt,name=unknown" json:"unknown,omitempty"`
	// Global prefix data for the Address Family
	PrefixData *IsisShIfAfPrefixData `protobuf:"bytes,3,opt,name=prefix_data,json=prefixData" json:"prefix_data,omitempty"`
}

func (m *IsisShIfAfPrefixStatus) Reset()                    { *m = IsisShIfAfPrefixStatus{} }
func (m *IsisShIfAfPrefixStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfPrefixStatus) ProtoMessage()               {}
func (*IsisShIfAfPrefixStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *IsisShIfAfPrefixStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAfPrefixStatus) GetUnknown() *IsisShIfAfPrefixUnknown {
	if m != nil {
		return m.Unknown
	}
	return nil
}

func (m *IsisShIfAfPrefixStatus) GetPrefixData() *IsisShIfAfPrefixData {
	if m != nil {
		return m.PrefixData
	}
	return nil
}

// Address-family forwarding address data
type IsisShIfAfFwdAddrData struct {
	// Array of forwarding addresses
	ForwardingAddress []*IsisIpAddrType `protobuf:"bytes,1,rep,name=forwarding_address,json=forwardingAddress" json:"forwarding_address,omitempty"`
	// If the interface is unnumbered, then its name, else NULL
	UnnumberedInterfaceName string `protobuf:"bytes,2,opt,name=unnumbered_interface_name,json=unnumberedInterfaceName" json:"unnumbered_interface_name,omitempty"`
}

func (m *IsisShIfAfFwdAddrData) Reset()                    { *m = IsisShIfAfFwdAddrData{} }
func (m *IsisShIfAfFwdAddrData) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfFwdAddrData) ProtoMessage()               {}
func (*IsisShIfAfFwdAddrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *IsisShIfAfFwdAddrData) GetForwardingAddress() []*IsisIpAddrType {
	if m != nil {
		return m.ForwardingAddress
	}
	return nil
}

func (m *IsisShIfAfFwdAddrData) GetUnnumberedInterfaceName() string {
	if m != nil {
		return m.UnnumberedInterfaceName
	}
	return ""
}

// Forwarding address unknown data
type IsisShIfAfFwdAddrUnknown struct {
	// Reason why the forwarding address(es) of an AF is(are) unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAfFwdAddrUnknown) Reset()                    { *m = IsisShIfAfFwdAddrUnknown{} }
func (m *IsisShIfAfFwdAddrUnknown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfFwdAddrUnknown) ProtoMessage()               {}
func (*IsisShIfAfFwdAddrUnknown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *IsisShIfAfFwdAddrUnknown) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfAfFwdAddrStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Unknown forwarding address data
	Unknown *IsisShIfAfFwdAddrUnknown `protobuf:"bytes,2,opt,name=unknown" json:"unknown,omitempty"`
	// Known Forwarding address data
	ForwardingAddressData *IsisShIfAfFwdAddrData `protobuf:"bytes,3,opt,name=forwarding_address_data,json=forwardingAddressData" json:"forwarding_address_data,omitempty"`
}

func (m *IsisShIfAfFwdAddrStatus) Reset()                    { *m = IsisShIfAfFwdAddrStatus{} }
func (m *IsisShIfAfFwdAddrStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfFwdAddrStatus) ProtoMessage()               {}
func (*IsisShIfAfFwdAddrStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *IsisShIfAfFwdAddrStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAfFwdAddrStatus) GetUnknown() *IsisShIfAfFwdAddrUnknown {
	if m != nil {
		return m.Unknown
	}
	return nil
}

func (m *IsisShIfAfFwdAddrStatus) GetForwardingAddressData() *IsisShIfAfFwdAddrData {
	if m != nil {
		return m.ForwardingAddressData
	}
	return nil
}

// Address family protocol down info
type IsisShIfAfProtoDown struct {
	// Reason why the Address Family protocol status is down
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAfProtoDown) Reset()                    { *m = IsisShIfAfProtoDown{} }
func (m *IsisShIfAfProtoDown) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfProtoDown) ProtoMessage()               {}
func (*IsisShIfAfProtoDown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *IsisShIfAfProtoDown) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

type IsisShIfAfProtoStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled state of the Address Family protocol
	Disabled *IsisShIfAfProtoDown `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *IsisShIfAfProtoStatus) Reset()                    { *m = IsisShIfAfProtoStatus{} }
func (m *IsisShIfAfProtoStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfProtoStatus) ProtoMessage()               {}
func (*IsisShIfAfProtoStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *IsisShIfAfProtoStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAfProtoStatus) GetDisabled() *IsisShIfAfProtoDown {
	if m != nil {
		return m.Disabled
	}
	return nil
}

// Address family disabled info
type IsisShIfAfDisabled struct {
	// Reason why the Address Family is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (m *IsisShIfAfDisabled) Reset()                    { *m = IsisShIfAfDisabled{} }
func (m *IsisShIfAfDisabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfDisabled) ProtoMessage()               {}
func (*IsisShIfAfDisabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *IsisShIfAfDisabled) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

// Enabled address-family info of an interface
type IsisShIfAfEnabled struct {
	// Protocol status of the AF
	ProtocolStatus *IsisShIfAfProtoStatus `protobuf:"bytes,1,opt,name=protocol_status,json=protocolStatus" json:"protocol_status,omitempty"`
	// Forwarding status of the AF
	ForwardingAddressStatus *IsisShIfAfFwdAddrStatus `protobuf:"bytes,2,opt,name=forwarding_address_status,json=forwardingAddressStatus" json:"forwarding_address_status,omitempty"`
	// Prefix status of the AF
	PrefixStatus *IsisShIfAfPrefixStatus `protobuf:"bytes,3,opt,name=prefix_status,json=prefixStatus" json:"prefix_status,omitempty"`
}

func (m *IsisShIfAfEnabled) Reset()                    { *m = IsisShIfAfEnabled{} }
func (m *IsisShIfAfEnabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfEnabled) ProtoMessage()               {}
func (*IsisShIfAfEnabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *IsisShIfAfEnabled) GetProtocolStatus() *IsisShIfAfProtoStatus {
	if m != nil {
		return m.ProtocolStatus
	}
	return nil
}

func (m *IsisShIfAfEnabled) GetForwardingAddressStatus() *IsisShIfAfFwdAddrStatus {
	if m != nil {
		return m.ForwardingAddressStatus
	}
	return nil
}

func (m *IsisShIfAfEnabled) GetPrefixStatus() *IsisShIfAfPrefixStatus {
	if m != nil {
		return m.PrefixStatus
	}
	return nil
}

type IsisShIfAfStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Disabled info for the AF of an interface
	Disabled *IsisShIfAfDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
	// Enabled data for the AF of an interface
	AfData *IsisShIfAfEnabled `protobuf:"bytes,3,opt,name=af_data,json=afData" json:"af_data,omitempty"`
}

func (m *IsisShIfAfStatus) Reset()                    { *m = IsisShIfAfStatus{} }
func (m *IsisShIfAfStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAfStatus) ProtoMessage()               {}
func (*IsisShIfAfStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *IsisShIfAfStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfAfStatus) GetDisabled() *IsisShIfAfDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

func (m *IsisShIfAfStatus) GetAfData() *IsisShIfAfEnabled {
	if m != nil {
		return m.AfData
	}
	return nil
}

// Per Address family info
type IsisShIfAf struct {
	// Address Family Identifier of the interface
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Address Family status of the interface
	AfStatus *IsisShIfAfStatus `protobuf:"bytes,2,opt,name=af_status,json=afStatus" json:"af_status,omitempty"`
}

func (m *IsisShIfAf) Reset()                    { *m = IsisShIfAf{} }
func (m *IsisShIfAf) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfAf) ProtoMessage()               {}
func (*IsisShIfAf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *IsisShIfAf) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShIfAf) GetAfStatus() *IsisShIfAfStatus {
	if m != nil {
		return m.AfStatus
	}
	return nil
}

// Per-interface data
type IsisShIfActiveP2P struct {
	// Time in ms before the next IIH can be sent
	TimeUntilNextIih uint32 `protobuf:"varint,1,opt,name=time_until_next_iih,json=timeUntilNextIih" json:"time_until_next_iih,omitempty"`
	// No. of LSPs queued to be retransmitted
	RetransmitLspQueueSize uint32 `protobuf:"varint,2,opt,name=retransmit_lsp_queue_size,json=retransmitLspQueueSize" json:"retransmit_lsp_queue_size,omitempty"`
	// Time in ms until the next scheduled LSP is retransmitted
	RetransmitLspInterval uint32 `protobuf:"varint,3,opt,name=retransmit_lsp_interval,json=retransmitLspInterval" json:"retransmit_lsp_interval,omitempty"`
	// Extended Circuit Number valid for a P2P interface
	ExtendedCircuitNumber uint32 `protobuf:"varint,4,opt,name=extended_circuit_number,json=extendedCircuitNumber" json:"extended_circuit_number,omitempty"`
}

func (m *IsisShIfActiveP2P) Reset()                    { *m = IsisShIfActiveP2P{} }
func (m *IsisShIfActiveP2P) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfActiveP2P) ProtoMessage()               {}
func (*IsisShIfActiveP2P) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *IsisShIfActiveP2P) GetTimeUntilNextIih() uint32 {
	if m != nil {
		return m.TimeUntilNextIih
	}
	return 0
}

func (m *IsisShIfActiveP2P) GetRetransmitLspQueueSize() uint32 {
	if m != nil {
		return m.RetransmitLspQueueSize
	}
	return 0
}

func (m *IsisShIfActiveP2P) GetRetransmitLspInterval() uint32 {
	if m != nil {
		return m.RetransmitLspInterval
	}
	return 0
}

func (m *IsisShIfActiveP2P) GetExtendedCircuitNumber() uint32 {
	if m != nil {
		return m.ExtendedCircuitNumber
	}
	return 0
}

// Per-interface BFD data
type IsisShIfBfdType struct {
	// IPv4 BFD enabled status
	Enabled bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	// IPv6 BFD enabled status
	Ipv6Enabled bool `protobuf:"varint,2,opt,name=ipv6_enabled,json=ipv6Enabled" json:"ipv6_enabled,omitempty"`
	// BFD hello minimum interval in milliseconds
	Interval uint32 `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
	// BFD hello multiplier
	Multiplier uint32 `protobuf:"varint,4,opt,name=multiplier" json:"multiplier,omitempty"`
}

func (m *IsisShIfBfdType) Reset()                    { *m = IsisShIfBfdType{} }
func (m *IsisShIfBfdType) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfBfdType) ProtoMessage()               {}
func (*IsisShIfBfdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *IsisShIfBfdType) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IsisShIfBfdType) GetIpv6Enabled() bool {
	if m != nil {
		return m.Ipv6Enabled
	}
	return false
}

func (m *IsisShIfBfdType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *IsisShIfBfdType) GetMultiplier() uint32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

// State of an enabled interface
type IsisShIfEnabled struct {
	// Interface's Adjacency Formation status
	AdjacencyFormStatus *IsisShIfAdjFormStatus `protobuf:"bytes,1,opt,name=adjacency_form_status,json=adjacencyFormStatus" json:"adjacency_form_status,omitempty"`
	// Interface's Prefix Advertisement status
	AdvPrefixStatus *IsisShIfAdvPrefixStatus `protobuf:"bytes,2,opt,name=adv_prefix_status,json=advPrefixStatus" json:"adv_prefix_status,omitempty"`
	// Media type of the interface
	InterfaceMediaType string `protobuf:"bytes,3,opt,name=interface_media_type,json=interfaceMediaType" json:"interface_media_type,omitempty"`
	// Enabled Circuit type of the interface
	EnabledCircuitType string `protobuf:"bytes,4,opt,name=enabled_circuit_type,json=enabledCircuitType" json:"enabled_circuit_type,omitempty"`
	// Local Circuit Number of the interface
	LocalCircuitNumber uint32 `protobuf:"varint,5,opt,name=local_circuit_number,json=localCircuitNumber" json:"local_circuit_number,omitempty"`
	// Data for an active P2P interface, NULL if not active or P2P
	P2PData *IsisShIfActiveP2P `protobuf:"bytes,6,opt,name=p2_p_data,json=p2PData" json:"p2_p_data,omitempty"`
	// The BFD data for the given interface
	BfdData *IsisShIfBfdType `protobuf:"bytes,7,opt,name=bfd_data,json=bfdData" json:"bfd_data,omitempty"`
	// Rsi Srlg Registered
	RsiSrlgRegistered bool `protobuf:"varint,8,opt,name=rsi_srlg_registered,json=rsiSrlgRegistered" json:"rsi_srlg_registered,omitempty"`
	// Interface data specific to CLNS I/O services
	ClnsData *IsisShIfClns `protobuf:"bytes,9,opt,name=clns_data,json=clnsData" json:"clns_data,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []string `protobuf:"bytes,10,rep,name=underlying_interface_list,json=underlyingInterfaceList" json:"underlying_interface_list,omitempty"`
	// Array of area information for an active interface
	PerAreaData []*IsisShIfAreaActive `protobuf:"bytes,11,rep,name=per_area_data,json=perAreaData" json:"per_area_data,omitempty"`
	// Array of topology information
	PerTopologyData []*IsisShIfTopo `protobuf:"bytes,12,rep,name=per_topology_data,json=perTopologyData" json:"per_topology_data,omitempty"`
	// Array of address family information
	PerAddressFamilyData []*IsisShIfAf `protobuf:"bytes,13,rep,name=per_address_family_data,json=perAddressFamilyData" json:"per_address_family_data,omitempty"`
}

func (m *IsisShIfEnabled) Reset()                    { *m = IsisShIfEnabled{} }
func (m *IsisShIfEnabled) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfEnabled) ProtoMessage()               {}
func (*IsisShIfEnabled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *IsisShIfEnabled) GetAdjacencyFormStatus() *IsisShIfAdjFormStatus {
	if m != nil {
		return m.AdjacencyFormStatus
	}
	return nil
}

func (m *IsisShIfEnabled) GetAdvPrefixStatus() *IsisShIfAdvPrefixStatus {
	if m != nil {
		return m.AdvPrefixStatus
	}
	return nil
}

func (m *IsisShIfEnabled) GetInterfaceMediaType() string {
	if m != nil {
		return m.InterfaceMediaType
	}
	return ""
}

func (m *IsisShIfEnabled) GetEnabledCircuitType() string {
	if m != nil {
		return m.EnabledCircuitType
	}
	return ""
}

func (m *IsisShIfEnabled) GetLocalCircuitNumber() uint32 {
	if m != nil {
		return m.LocalCircuitNumber
	}
	return 0
}

func (m *IsisShIfEnabled) GetP2PData() *IsisShIfActiveP2P {
	if m != nil {
		return m.P2PData
	}
	return nil
}

func (m *IsisShIfEnabled) GetBfdData() *IsisShIfBfdType {
	if m != nil {
		return m.BfdData
	}
	return nil
}

func (m *IsisShIfEnabled) GetRsiSrlgRegistered() bool {
	if m != nil {
		return m.RsiSrlgRegistered
	}
	return false
}

func (m *IsisShIfEnabled) GetClnsData() *IsisShIfClns {
	if m != nil {
		return m.ClnsData
	}
	return nil
}

func (m *IsisShIfEnabled) GetUnderlyingInterfaceList() []string {
	if m != nil {
		return m.UnderlyingInterfaceList
	}
	return nil
}

func (m *IsisShIfEnabled) GetPerAreaData() []*IsisShIfAreaActive {
	if m != nil {
		return m.PerAreaData
	}
	return nil
}

func (m *IsisShIfEnabled) GetPerTopologyData() []*IsisShIfTopo {
	if m != nil {
		return m.PerTopologyData
	}
	return nil
}

func (m *IsisShIfEnabled) GetPerAddressFamilyData() []*IsisShIfAf {
	if m != nil {
		return m.PerAddressFamilyData
	}
	return nil
}

type IsisShIfStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// The interface state if disabled
	Disabled *IsisShIfDisabled `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
	// The interface state if enabled
	Enabled *IsisShIfEnabled `protobuf:"bytes,3,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *IsisShIfStatus) Reset()                    { *m = IsisShIfStatus{} }
func (m *IsisShIfStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIfStatus) ProtoMessage()               {}
func (*IsisShIfStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *IsisShIfStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IsisShIfStatus) GetDisabled() *IsisShIfDisabled {
	if m != nil {
		return m.Disabled
	}
	return nil
}

func (m *IsisShIfStatus) GetEnabled() *IsisShIfEnabled {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShIf_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_KEYS")
	proto.RegisterType((*IsisShIf)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if")
	proto.RegisterType((*IsisIpv6AddressType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_address_type")
	proto.RegisterType((*IsisIpv4PrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv4_prefix_type")
	proto.RegisterType((*IsisIpv6PrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_prefix_type")
	proto.RegisterType((*IsisIpAddrType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_addr_type")
	proto.RegisterType((*IsisIpPrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_prefix_type")
	proto.RegisterType((*IsisTopoIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_topo_id_type")
	proto.RegisterType((*IsisShIfDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_disabled")
	proto.RegisterType((*IsisShIfAdjFormDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_disabled")
	proto.RegisterType((*IsisShIfAdjFormStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_status")
	proto.RegisterType((*IsisShIfAdvPrefixDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_disabled")
	proto.RegisterType((*IsisShIfAdvPrefixStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_status")
	proto.RegisterType((*IsisShIfCfgStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_cfg_status")
	proto.RegisterType((*IsisShIfClnsProtoDown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_proto_down")
	proto.RegisterType((*IsisShIfClnsStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_status")
	proto.RegisterType((*IsisShIfClnsMtuInvalid)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_invalid")
	proto.RegisterType((*IsisShIfClnsMtuStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_status")
	proto.RegisterType((*IsisShIfClnsSnpaUnknown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_unknown")
	proto.RegisterType((*IsisShIfClnsSnpaKnown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_known")
	proto.RegisterType((*IsisShIfClnsSnpaStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_status")
	proto.RegisterType((*IsisShIfMcastInvalid)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_invalid")
	proto.RegisterType((*IsisShIfMcastStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_status")
	proto.RegisterType((*IsisShIfAreaClns)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_clns")
	proto.RegisterType((*IsisShIfClnsLan)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_lan")
	proto.RegisterType((*IsisShIfClnsP2POverLan)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p_over_lan")
	proto.RegisterType((*IsisShIfClnsP2P)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p")
	proto.RegisterType((*IsisShIfClnsMediaSpecificStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_media_specific_status")
	proto.RegisterType((*IsisShIfClns)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns")
	proto.RegisterType((*IsisShIfAreaActiveLan)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active_lan")
	proto.RegisterType((*IsisShIfAreaActive)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active")
	proto.RegisterType((*IsisShIfTopoAdjFormDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_disabled")
	proto.RegisterType((*IsisShIfTopoAdjFormStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_status")
	proto.RegisterType((*IsisShIfTopoAdvPrefixDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_disabled")
	proto.RegisterType((*IsisShIfTopoAdvPrefixStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_status")
	proto.RegisterType((*IsisShIfTopoEnabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_enabled")
	proto.RegisterType((*IsisShIfTopoDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_disabled")
	proto.RegisterType((*IsisShIfTopoStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_status")
	proto.RegisterType((*IsisShIfTopo)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo")
	proto.RegisterType((*IsisShIfAfPrefixUnknown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_unknown")
	proto.RegisterType((*IsisShIfAfPrefixData)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_data")
	proto.RegisterType((*IsisShIfAfPrefixStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_status")
	proto.RegisterType((*IsisShIfAfFwdAddrData)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_data")
	proto.RegisterType((*IsisShIfAfFwdAddrUnknown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_unknown")
	proto.RegisterType((*IsisShIfAfFwdAddrStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_status")
	proto.RegisterType((*IsisShIfAfProtoDown)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_down")
	proto.RegisterType((*IsisShIfAfProtoStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_status")
	proto.RegisterType((*IsisShIfAfDisabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_disabled")
	proto.RegisterType((*IsisShIfAfEnabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled")
	proto.RegisterType((*IsisShIfAfStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_status")
	proto.RegisterType((*IsisShIfAf)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af")
	proto.RegisterType((*IsisShIfActiveP2P)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_active_p2p")
	proto.RegisterType((*IsisShIfBfdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_bfd_type")
	proto.RegisterType((*IsisShIfEnabled)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled")
	proto.RegisterType((*IsisShIfStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_status")
}

func init() { proto.RegisterFile("isis_sh_if.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2849 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x1a, 0x4d, 0x6f, 0x24, 0x47,
	0x55, 0x6d, 0xef, 0x7a, 0xc6, 0x6f, 0x3c, 0xfe, 0x68, 0xdb, 0xeb, 0x71, 0x3e, 0x37, 0xb3, 0x24,
	0xac, 0x80, 0x58, 0x9b, 0x4e, 0xe2, 0x28, 0x44, 0x01, 0xed, 0x47, 0x16, 0x2c, 0x9c, 0xc4, 0xb4,
	0x37, 0x8a, 0xa2, 0x90, 0xd4, 0xb6, 0xa7, 0xab, 0xc7, 0x95, 0xed, 0xe9, 0xae, 0x74, 0xf5, 0x8c,
	0xc7, 0x49, 0x04, 0x04, 0x05, 0x45, 0x89, 0x20, 0x87, 0x1c, 0x20, 0x42, 0x0a, 0x12, 0x42, 0x70,
	0x40, 0x8a, 0xb8, 0x04, 0x10, 0x42, 0x28, 0x42, 0x1c, 0x72, 0x47, 0x42, 0x42, 0x88, 0x0b, 0x17,
	0xee, 0xfc, 0x03, 0x54, 0x5f, 0xdd, 0xd5, 0xdd, 0xe3, 0xb5, 0x13, 0x6d, 0x87, 0xdc, 0xba, 0xeb,
	0xbd, 0x57, 0xef, 0xa3, 0x5e, 0xbd, 0xf7, 0xea, 0x55, 0xc1, 0x22, 0x61, 0x84, 0x21, 0xb6, 0x8f,
	0x48, 0xb0, 0x41, 0x93, 0x38, 0x8d, 0xed, 0x6f, 0xf6, 0x08, 0xeb, 0xc5, 0x88, 0xc4, 0x0c, 0x8d,
	0x13, 0xd4, 0x0b, 0x23, 0x86, 0x04, 0x4e, 0x4c, 0x71, 0xb2, 0xc1, 0xbf, 0x36, 0x48, 0xc4, 0x52,
	0x2f, 0xea, 0xe1, 0xfc, 0x6b, 0x83, 0x44, 0x29, 0x4e, 0x02, 0x4f, 0x8e, 0xa9, 0xcf, 0xee, 0x0b,
	0xb0, 0x90, 0xcf, 0x8e, 0xbe, 0xf5, 0xc4, 0x73, 0xbb, 0xf6, 0x39, 0x68, 0x6b, 0x1a, 0x14, 0x79,
	0x03, 0xdc, 0xb1, 0xce, 0x5a, 0xe7, 0x67, 0xdd, 0x39, 0x3d, 0xf8, 0x94, 0x37, 0xc0, 0xf6, 0xbd,
	0x30, 0x9f, 0x4d, 0x22, 0xb1, 0xa6, 0x04, 0x56, 0x3b, 0x1b, 0xe5, 0x68, 0xdd, 0x8f, 0xa6, 0x01,
	0xf2, 0xf9, 0xed, 0x4d, 0x58, 0xeb, 0xc5, 0x51, 0x40, 0xfa, 0xc3, 0x04, 0xfb, 0xa8, 0x47, 0x92,
	0xde, 0x90, 0xa4, 0x28, 0x3d, 0xa4, 0xb8, 0xe3, 0x08, 0xf2, 0xd5, 0x1c, 0x7c, 0x59, 0x42, 0xaf,
	0x1d, 0x52, 0x6c, 0xff, 0xc8, 0x82, 0x25, 0x83, 0x90, 0xa5, 0x5e, 0x3a, 0x64, 0x9d, 0x07, 0xcf,
	0x5a, 0xe7, 0x5b, 0x0e, 0xda, 0xb8, 0x55, 0xc6, 0xd8, 0x30, 0x2c, 0xd1, 0x0b, 0xfa, 0x8a, 0x8d,
	0xbb, 0x98, 0x73, 0xde, 0x15, 0x23, 0xf6, 0x9d, 0x00, 0x03, 0xcc, 0xf6, 0x51, 0x3f, 0x89, 0x87,
	0xb4, 0xf3, 0xd0, 0x59, 0xeb, 0x7c, 0xdb, 0x9d, 0xe5, 0x23, 0xdf, 0xe0, 0x03, 0xf6, 0x1a, 0x34,
	0x08, 0x93, 0x5a, 0x3d, 0x2c, 0xb4, 0x9a, 0x21, 0x4c, 0xa8, 0xf1, 0x13, 0x0b, 0xd6, 0x73, 0xab,
	0xc9, 0xe9, 0x91, 0x17, 0xf9, 0xc8, 0xf7, 0x52, 0xaf, 0xb3, 0x29, 0xd4, 0x79, 0xbe, 0x16, 0x75,
	0x94, 0x2a, 0x67, 0x32, 0xa0, 0xd4, 0xe4, 0x62, 0xe4, 0x5f, 0xf1, 0x52, 0xcf, 0x5e, 0x87, 0x66,
	0xc4, 0x12, 0x44, 0xa2, 0x34, 0xe8, 0x3c, 0x72, 0xd6, 0x3a, 0xdf, 0x74, 0x1b, 0x11, 0x4b, 0xb6,
	0xa2, 0x34, 0xe8, 0x6e, 0xc0, 0x19, 0x31, 0x0f, 0xa1, 0xa3, 0x4d, 0xe4, 0xf9, 0x7e, 0x82, 0x99,
	0xd4, 0xcd, 0x5e, 0x81, 0xd3, 0x23, 0x2f, 0x1c, 0x6a, 0xff, 0x90, 0x3f, 0xdd, 0x6b, 0xb0, 0xaa,
	0xf1, 0x1f, 0x42, 0x34, 0xc1, 0x01, 0x19, 0x4b, 0xf4, 0x33, 0x30, 0x23, 0x7f, 0x15, 0xbe, 0xfa,
	0xe3, 0xee, 0xa6, 0xd0, 0x42, 0x1c, 0xf5, 0xd3, 0x7d, 0xe1, 0x48, 0x6d, 0x77, 0x4e, 0x0e, 0x6e,
	0x8b, 0x31, 0x73, 0xd6, 0xcd, 0x5b, 0x37, 0xeb, 0xef, 0x2d, 0x58, 0x52, 0xd3, 0x0a, 0xd5, 0xe4,
	0x94, 0x6b, 0xd0, 0xf0, 0x02, 0xd3, 0xf3, 0x67, 0xbc, 0x40, 0xf8, 0xbc, 0x0d, 0xa7, 0xb8, 0x56,
	0xca, 0xd3, 0xc5, 0xb7, 0x9d, 0x8a, 0xb1, 0xcd, 0xce, 0xb4, 0x58, 0xbc, 0xeb, 0xb7, 0x78, 0xf1,
	0x2a, 0x46, 0x17, 0x5c, 0x37, 0xbb, 0xef, 0x4d, 0xc1, 0xb2, 0x16, 0xdc, 0xb4, 0xc6, 0x91, 0xa2,
	0x33, 0x43, 0xf4, 0x5b, 0xbf, 0x65, 0xca, 0x6b, 0xad, 0x6c, 0xc3, 0x0a, 0xb6, 0x41, 0x75, 0xd8,
	0xa6, 0xcc, 0x74, 0xb3, 0xfb, 0xa6, 0x5e, 0xd3, 0x34, 0xa6, 0x31, 0x22, 0xfe, 0x31, 0x86, 0x59,
	0x87, 0x26, 0xd3, 0x10, 0xb9, 0xae, 0x0d, 0x96, 0x83, 0x46, 0x89, 0x02, 0x4d, 0x4b, 0xd0, 0x28,
	0x91, 0xa0, 0x73, 0xd0, 0xe6, 0xd3, 0x87, 0x71, 0xff, 0x50, 0xc2, 0x4f, 0xc9, 0x10, 0xa9, 0x07,
	0x45, 0xec, 0xdb, 0x54, 0x6b, 0x24, 0x77, 0xa0, 0x4f, 0x98, 0xb7, 0x17, 0x62, 0xdf, 0xbe, 0x1b,
	0x5a, 0x09, 0xf6, 0x58, 0x1c, 0xa1, 0x5e, 0xec, 0x6b, 0x71, 0x40, 0x0e, 0x5d, 0x8e, 0x7d, 0xdc,
	0xfd, 0x3a, 0xdc, 0x61, 0xd0, 0x79, 0xfe, 0x4b, 0x28, 0x88, 0x93, 0xc1, 0x27, 0x98, 0xe0, 0x8f,
	0x16, 0xdc, 0x36, 0x69, 0x06, 0x19, 0x04, 0xf8, 0x96, 0x51, 0x01, 0x54, 0x99, 0x42, 0x8d, 0xff,
	0xc0, 0x82, 0xa6, 0x66, 0xa2, 0x1c, 0x25, 0xa8, 0x25, 0x18, 0x55, 0x54, 0x72, 0x33, 0xbe, 0xdd,
	0x8b, 0x70, 0x57, 0x01, 0x73, 0xa4, 0x97, 0xf8, 0xe4, 0xea, 0xff, 0xd9, 0x2a, 0x19, 0x30, 0x9b,
	0xe3, 0x18, 0x03, 0xbc, 0x51, 0x35, 0xc0, 0x7e, 0x4d, 0x06, 0xa8, 0xa8, 0x65, 0x98, 0xe0, 0x40,
	0xc5, 0xba, 0x72, 0x22, 0xb2, 0x1d, 0x58, 0xf5, 0xfc, 0x97, 0xbc, 0x1e, 0x8e, 0x7a, 0x87, 0xe6,
	0x8a, 0x0a, 0x35, 0x9a, 0xee, 0x72, 0x06, 0xbc, 0x1a, 0x27, 0x03, 0x95, 0xaa, 0xbe, 0x04, 0x4b,
	0x15, 0x03, 0x08, 0xdd, 0x9a, 0xee, 0x82, 0xe7, 0x8f, 0x76, 0xc4, 0xb8, 0xc4, 0xed, 0x3e, 0x5e,
	0x70, 0x1b, 0xa1, 0xab, 0x28, 0x37, 0x90, 0x1f, 0x1f, 0x44, 0x27, 0xb2, 0xfb, 0x99, 0x32, 0xfd,
	0x31, 0x16, 0x7f, 0xdb, 0x82, 0x79, 0x81, 0xc7, 0x39, 0x20, 0x12, 0x05, 0xb1, 0xb2, 0xbb, 0x5f,
	0x4f, 0x52, 0x2f, 0xaa, 0xe4, 0xce, 0xf1, 0x81, 0x2b, 0xf1, 0x41, 0xb4, 0x15, 0x05, 0x71, 0xf7,
	0x6b, 0x70, 0x7b, 0x19, 0x77, 0x90, 0x0e, 0x11, 0x89, 0x46, 0x5e, 0x48, 0x4e, 0xe0, 0x77, 0x1f,
	0x5b, 0x55, 0xfb, 0xf1, 0x09, 0x8e, 0xb1, 0xc1, 0xf7, 0xa0, 0xa1, 0x58, 0x28, 0xdd, 0x71, 0x7d,
	0xba, 0x1b, 0xfa, 0xb8, 0x9a, 0xab, 0xbd, 0x08, 0xd3, 0x83, 0x74, 0x28, 0x42, 0x5c, 0xdb, 0xe5,
	0x9f, 0xa5, 0x08, 0x24, 0x17, 0x32, 0xa2, 0x1e, 0x1a, 0x46, 0x37, 0xa2, 0x13, 0xb9, 0xc2, 0x85,
	0xaa, 0x25, 0xc4, 0x04, 0x92, 0xdc, 0x86, 0x53, 0xfc, 0x4f, 0xd1, 0x89, 0xef, 0xee, 0x87, 0x53,
	0x55, 0xeb, 0x0b, 0x92, 0x63, 0xac, 0xf7, 0x7d, 0x0b, 0x1a, 0x4a, 0xac, 0x5a, 0x63, 0x56, 0xc5,
	0x08, 0xae, 0x66, 0x6b, 0xbf, 0x02, 0xa7, 0x25, 0xff, 0xe9, 0xba, 0x5d, 0x37, 0xb7, 0xa1, 0x2b,
	0x59, 0x76, 0x1f, 0x83, 0x8e, 0x81, 0x34, 0xe8, 0x79, 0x2c, 0x3d, 0xb9, 0xc3, 0xfe, 0xd6, 0x82,
	0xb5, 0x0a, 0xf5, 0x31, 0xf6, 0x7e, 0xad, 0xec, 0xad, 0x7b, 0xb5, 0xa8, 0x5b, 0xd0, 0x24, 0x73,
	0xd5, 0xee, 0x9f, 0x2c, 0x58, 0x31, 0xe3, 0x68, 0x82, 0x3d, 0xc1, 0x91, 0xd7, 0xa2, 0x21, 0x1e,
	0xe1, 0x50, 0xd7, 0xa2, 0xe2, 0x87, 0x1f, 0x1b, 0x16, 0x07, 0xc3, 0x30, 0x25, 0x86, 0x66, 0x4a,
	0x6c, 0xaf, 0x46, 0xb1, 0x55, 0xb1, 0xbd, 0x90, 0xb1, 0x56, 0xf1, 0xf5, 0x67, 0x56, 0xa1, 0x22,
	0x10, 0x3c, 0x43, 0x2f, 0xe2, 0x89, 0xb7, 0x4d, 0x71, 0x22, 0xd5, 0x11, 0x47, 0x01, 0xeb, 0xec,
	0xf4, 0xf9, 0x96, 0xf3, 0x62, 0x3d, 0xc9, 0x47, 0x1b, 0xcd, 0x6d, 0x51, 0x9c, 0x5c, 0x4c, 0xb0,
	0xc7, 0x8f, 0x00, 0xdd, 0x0f, 0xac, 0xea, 0xa6, 0xa7, 0x0e, 0x45, 0xf1, 0x08, 0x27, 0x42, 0xca,
	0x89, 0xc6, 0xb4, 0xfe, 0x6f, 0xc6, 0xfc, 0xcd, 0x04, 0x63, 0x52, 0x87, 0xda, 0xef, 0x5a, 0x60,
	0x53, 0x07, 0xe5, 0x82, 0x6b, 0x8b, 0xd6, 0x1c, 0x1b, 0x4c, 0x5b, 0xb9, 0xf3, 0xd4, 0xd9, 0x79,
	0x7a, 0x84, 0x93, 0x6d, 0x2f, 0x12, 0xc6, 0xfd, 0xc7, 0x14, 0xdc, 0x5b, 0x89, 0xc5, 0xd8, 0x27,
	0x1e, 0x62, 0x14, 0xf7, 0x48, 0x40, 0x7a, 0x7a, 0xdf, 0xdd, 0x07, 0x0b, 0x06, 0x54, 0x9c, 0x21,
	0xa5, 0x4b, 0xb7, 0xf9, 0xf0, 0x93, 0x7c, 0x54, 0x1c, 0x25, 0x5f, 0xb7, 0xa0, 0xad, 0x1d, 0x48,
	0x6a, 0x28, 0xfd, 0xfa, 0x85, 0xfa, 0x34, 0xe4, 0x8a, 0xb5, 0xf8, 0x97, 0xd2, 0x8a, 0xfb, 0xed,
	0xbc, 0xd2, 0x1d, 0x51, 0x29, 0xc4, 0x74, 0xdd, 0x42, 0x50, 0x87, 0x4a, 0x21, 0x76, 0x9c, 0x1d,
	0x61, 0xda, 0xdf, 0x35, 0x0a, 0x1d, 0x0c, 0x11, 0x0d, 0x5e, 0xb7, 0xa0, 0x65, 0x94, 0x1f, 0x6a,
	0xf1, 0xaf, 0xd7, 0x18, 0x98, 0xa5, 0x93, 0x02, 0xff, 0xd9, 0xd5, 0x69, 0xbd, 0x29, 0xb3, 0xed,
	0x67, 0x51, 0xd3, 0xe4, 0x65, 0x86, 0xdb, 0x18, 0xa4, 0x43, 0x5e, 0xce, 0xf0, 0x6a, 0x16, 0xb2,
	0x0c, 0x8a, 0xd5, 0xca, 0xe0, 0x9a, 0x93, 0x93, 0x12, 0x62, 0x96, 0xff, 0x70, 0x43, 0x60, 0xfb,
	0x17, 0x16, 0xac, 0x4c, 0x70, 0x75, 0x79, 0x64, 0x6a, 0x39, 0x71, 0x8d, 0x46, 0x99, 0xb4, 0xc1,
	0x5c, 0x5b, 0x0c, 0xef, 0xaa, 0x51, 0x29, 0xe3, 0xfd, 0xb0, 0x9c, 0x92, 0x01, 0x46, 0xc3, 0x28,
	0x25, 0x21, 0x8a, 0xf0, 0x38, 0x45, 0x21, 0xa3, 0x9d, 0xd3, 0xa2, 0x22, 0x5a, 0xe4, 0xa0, 0x67,
	0x38, 0xe4, 0x29, 0x3c, 0x4e, 0xb7, 0x19, 0xb5, 0x1f, 0x87, 0xdb, 0x43, 0x46, 0x51, 0x9a, 0x78,
	0x11, 0x1b, 0x90, 0x14, 0x25, 0xf8, 0xe5, 0x21, 0x66, 0x29, 0xf6, 0x51, 0x10, 0x7a, 0xfd, 0xce,
	0x8c, 0xa8, 0xae, 0x3b, 0x21, 0xa3, 0xd7, 0x14, 0x86, 0xab, 0x11, 0xae, 0x86, 0x5e, 0xdf, 0xbe,
	0x00, 0x2b, 0x26, 0x79, 0x46, 0xd7, 0x10, 0x74, 0xb6, 0x41, 0x97, 0x53, 0xac, 0x0a, 0x8a, 0xf1,
	0x80, 0xa4, 0x3e, 0xda, 0x73, 0xd0, 0x1e, 0x0a, 0xc9, 0x80, 0xa4, 0x9d, 0xa6, 0x90, 0x70, 0x89,
	0x93, 0x08, 0xd8, 0x25, 0xe7, 0xd2, 0x36, 0x07, 0xd8, 0x5f, 0x81, 0x65, 0x45, 0x91, 0x4a, 0xfc,
	0x01, 0xc3, 0x3d, 0xd6, 0x99, 0x15, 0xf8, 0x0b, 0x12, 0x3f, 0xbd, 0xe4, 0x5c, 0x7a, 0x92, 0x0f,
	0xdb, 0x8f, 0xc1, 0x6d, 0x21, 0x8f, 0xb5, 0x9c, 0x44, 0x64, 0x4e, 0x53, 0xb8, 0x0e, 0x88, 0xf8,
	0xb3, 0xc6, 0x31, 0xb6, 0x19, 0xdd, 0xe6, 0x70, 0x43, 0x40, 0xfb, 0x61, 0x58, 0xcb, 0x88, 0xf9,
	0x71, 0xdb, 0xa0, 0x6c, 0x09, 0xca, 0x15, 0x45, 0xb9, 0xe5, 0x1b, 0x64, 0xdd, 0x7f, 0x97, 0x0e,
	0xa9, 0x3c, 0x2b, 0x79, 0xbd, 0x94, 0x8c, 0xb0, 0xc8, 0x36, 0x5f, 0x80, 0x79, 0xdd, 0x1e, 0xe4,
	0x11, 0x8e, 0xf8, 0x62, 0x13, 0xcf, 0xb9, 0x73, 0x6a, 0x74, 0xdb, 0x8b, 0xb6, 0xfc, 0x49, 0x0b,
	0x47, 0x88, 0xee, 0xf5, 0x14, 0x17, 0x6e, 0x8b, 0xec, 0xdb, 0xf7, 0x83, 0x9d, 0xb7, 0xdf, 0x68,
	0x42, 0xe2, 0x84, 0xa4, 0x87, 0xaa, 0xf0, 0x5d, 0xca, 0x20, 0x3b, 0x0a, 0x60, 0xdf, 0x03, 0x73,
	0x3e, 0x61, 0x39, 0xe2, 0x29, 0x81, 0xd8, 0xf2, 0x09, 0xcb, 0x50, 0xee, 0x00, 0xf0, 0x12, 0x8c,
	0x0e, 0x30, 0x3f, 0xc8, 0x09, 0x87, 0x69, 0xba, 0x4d, 0x2f, 0xc1, 0xcf, 0xe2, 0x2b, 0x84, 0x75,
	0xff, 0x32, 0x55, 0x38, 0x11, 0x19, 0x3a, 0x1e, 0x51, 0xb0, 0x7c, 0x11, 0x16, 0xf2, 0x13, 0x5e,
	0x2f, 0x1e, 0x46, 0xa9, 0xd2, 0x65, 0x3e, 0x1b, 0xbe, 0xcc, 0x47, 0xed, 0x0d, 0xb9, 0xbe, 0xd4,
	0xeb, 0x91, 0xa8, 0x8f, 0x84, 0xe8, 0x23, 0x2f, 0xd4, 0xaa, 0x84, 0x8c, 0xee, 0x08, 0xc8, 0x96,
	0x02, 0xd8, 0x8f, 0x40, 0x87, 0xb2, 0xc8, 0xf0, 0xd9, 0x97, 0x87, 0x78, 0x88, 0x11, 0x23, 0xaf,
	0x60, 0xa5, 0xd6, 0x2a, 0x87, 0xeb, 0x05, 0xfa, 0x36, 0x87, 0xee, 0x92, 0x57, 0x30, 0x0f, 0x63,
	0x59, 0x86, 0x39, 0x5d, 0x63, 0x18, 0x2b, 0xad, 0xbf, 0xdb, 0x08, 0x55, 0xea, 0xbc, 0x02, 0xf7,
	0x18, 0x68, 0xa2, 0xa9, 0xf3, 0x29, 0x5a, 0x22, 0x7f, 0xb5, 0xe0, 0xee, 0x23, 0xa7, 0x39, 0xa6,
	0xe4, 0x7d, 0xb3, 0xda, 0x16, 0xb8, 0x51, 0x8b, 0x0d, 0x26, 0x2b, 0x67, 0x74, 0x06, 0xae, 0xc2,
	0xb9, 0x2a, 0xfa, 0xa7, 0xe8, 0x90, 0x7c, 0x6c, 0x4d, 0x32, 0xea, 0x49, 0xdb, 0x24, 0x6f, 0x55,
	0xed, 0x31, 0xa8, 0xd3, 0x1e, 0x37, 0xeb, 0x95, 0xfc, 0x6d, 0xb6, 0x70, 0x84, 0x11, 0x14, 0x38,
	0x92, 0x66, 0x78, 0xdf, 0xba, 0x59, 0xbf, 0xa4, 0xe5, 0x90, 0xcf, 0x60, 0x11, 0x55, 0xd2, 0x99,
	0xd8, 0x9a, 0xf9, 0xa9, 0x75, 0x54, 0x6f, 0xa6, 0x66, 0x07, 0x2b, 0xb1, 0xac, 0x34, 0x82, 0xec,
	0x73, 0xd0, 0x16, 0xf1, 0xe8, 0x01, 0x34, 0xc0, 0x69, 0x42, 0x7a, 0x2a, 0xae, 0xcc, 0xc9, 0xc1,
	0x27, 0xc5, 0x58, 0x86, 0xe4, 0x68, 0xa4, 0x53, 0x06, 0x92, 0x53, 0x42, 0x7a, 0x00, 0x1d, 0x60,
	0xd2, 0xdf, 0x4f, 0x55, 0x4e, 0x55, 0x33, 0x3d, 0x2b, 0xc6, 0x8c, 0x99, 0x14, 0xd2, 0x8c, 0x39,
	0x93, 0x42, 0xda, 0x80, 0xe5, 0x81, 0x37, 0x46, 0xa1, 0xb7, 0x87, 0x43, 0xc4, 0x86, 0x94, 0xc6,
	0x09, 0x4f, 0x31, 0x0d, 0x19, 0xf1, 0x06, 0xde, 0x78, 0x9b, 0x43, 0x76, 0x35, 0x80, 0xa7, 0x25,
	0x8e, 0xbf, 0x77, 0x83, 0x56, 0x68, 0x64, 0xd6, 0x5c, 0x19, 0x78, 0xe3, 0x4b, 0x37, 0x68, 0x89,
	0xec, 0x11, 0xe8, 0x70, 0x32, 0x96, 0xa4, 0xb8, 0x42, 0x27, 0xb3, 0xe7, 0xea, 0xc0, 0x1b, 0xef,
	0x26, 0x29, 0xae, 0xf2, 0x53, 0x9a, 0x86, 0x3e, 0x45, 0xec, 0x30, 0xea, 0x69, 0x47, 0x14, 0x09,
	0xb4, 0xe9, 0xae, 0x48, 0xf0, 0xb6, 0x4f, 0x77, 0x0f, 0xa3, 0xde, 0x13, 0xca, 0x49, 0x35, 0x99,
	0x53, 0x25, 0x6b, 0x19, 0x64, 0x4e, 0x89, 0xec, 0x3e, 0x58, 0xc8, 0xf0, 0x95, 0xe3, 0xcc, 0x09,
	0xf4, 0x76, 0x28, 0x11, 0xd5, 0x4a, 0x7e, 0x19, 0xec, 0xd0, 0x47, 0x74, 0xb4, 0x59, 0x40, 0x6d,
	0xcb, 0xfe, 0x5f, 0xe8, 0xef, 0x8c, 0x36, 0x0d, 0x64, 0x5e, 0x98, 0x48, 0x15, 0xe2, 0x20, 0x60,
	0x38, 0xd5, 0x0b, 0x3b, 0x2f, 0xf4, 0xb6, 0x25, 0xec, 0x69, 0x01, 0x52, 0xcb, 0xab, 0x29, 0x9c,
	0x12, 0xc5, 0x82, 0x41, 0xe1, 0x14, 0x28, 0x1e, 0x82, 0x33, 0xda, 0x4c, 0x37, 0xfa, 0x14, 0xe5,
	0x57, 0x6b, 0x9d, 0xc5, 0x82, 0x95, 0x6e, 0xf4, 0xe9, 0xe5, 0x0c, 0x96, 0x51, 0x39, 0x15, 0xaa,
	0xa5, 0x82, 0x91, 0x8a, 0x54, 0xe7, 0x61, 0x51, 0xf1, 0xa2, 0x54, 0x4b, 0x66, 0xcb, 0x74, 0x2a,
	0xc7, 0x77, 0xa8, 0x92, 0x4a, 0x63, 0x3a, 0x06, 0xe6, 0xb2, 0x81, 0xe9, 0x64, 0x98, 0xb9, 0x8d,
	0x68, 0x41, 0x8e, 0x15, 0x55, 0xbc, 0xa9, 0x79, 0x0d, 0x29, 0x72, 0x1b, 0x15, 0x29, 0x56, 0x0d,
	0x0a, 0xc7, 0xa4, 0x28, 0x35, 0x75, 0xc4, 0xa6, 0x3d, 0x79, 0x6c, 0xff, 0xa0, 0x58, 0x73, 0x08,
	0xea, 0x63, 0x02, 0xfa, 0x77, 0x2b, 0xf1, 0x7c, 0xaf, 0xbe, 0xf0, 0x53, 0x0d, 0xe2, 0xf6, 0xab,
	0xd0, 0xd0, 0x3e, 0x3f, 0x5d, 0x63, 0x3f, 0xc1, 0x4c, 0x0e, 0xae, 0xe6, 0xd8, 0x7d, 0x6b, 0xaa,
	0x70, 0x7e, 0xe4, 0x48, 0xf6, 0x6b, 0xd0, 0xca, 0xae, 0x77, 0x54, 0xe5, 0x79, 0xeb, 0x2f, 0x66,
	0xcd, 0xfb, 0x29, 0x17, 0x34, 0xbf, 0x2d, 0xdf, 0x1e, 0x67, 0xcb, 0x34, 0x55, 0xe3, 0xb9, 0xd5,
	0x70, 0x0c, 0xed, 0x08, 0xe5, 0x9b, 0xa7, 0x40, 0xe7, 0x89, 0x13, 0xf7, 0x7d, 0xff, 0x60, 0xc1,
	0xfa, 0xc4, 0x19, 0x78, 0xfd, 0x68, 0x0f, 0x8d, 0xbb, 0xda, 0xe9, 0x1a, 0xda, 0x04, 0xc5, 0xcb,
	0x50, 0xf3, 0x2a, 0x98, 0x30, 0x34, 0x8c, 0xa2, 0xe1, 0x60, 0x0f, 0x27, 0xca, 0xc7, 0x9b, 0xee,
	0x1c, 0x61, 0xcf, 0x64, 0x63, 0xdd, 0x8f, 0x8a, 0xfd, 0xe7, 0x5c, 0xf2, 0xcf, 0x49, 0xff, 0xb9,
	0xb2, 0x18, 0x79, 0xff, 0xf9, 0x0d, 0x0b, 0x5a, 0x86, 0x99, 0xd5, 0x1e, 0xea, 0xd5, 0x2c, 0x06,
	0x67, 0xe5, 0x82, 0xfc, 0x11, 0x85, 0xfa, 0x7f, 0xac, 0xb2, 0x05, 0x83, 0x03, 0x5f, 0x5e, 0xab,
	0x8b, 0xd5, 0x7f, 0xdb, 0x02, 0x3b, 0x88, 0x93, 0x03, 0x2f, 0xf1, 0xf9, 0x99, 0x45, 0xdd, 0x6a,
	0x2b, 0x57, 0x78, 0xfe, 0xd6, 0xbb, 0x42, 0x76, 0xa1, 0xef, 0x2e, 0xe5, 0x6c, 0x2f, 0x4a, 0xae,
	0xf6, 0x57, 0x61, 0x3d, 0x77, 0x08, 0x34, 0xf1, 0x25, 0xcb, 0x5a, 0x8e, 0xb0, 0x55, 0x78, 0xd3,
	0x52, 0xba, 0xa2, 0x34, 0xf4, 0x3c, 0xf1, 0x3e, 0xf9, 0xd7, 0x14, 0xdc, 0x79, 0xc4, 0x1c, 0xc7,
	0x5f, 0xd2, 0x96, 0xfc, 0x6d, 0xbf, 0xae, 0x85, 0x2e, 0xab, 0x95, 0x7b, 0xdc, 0xfb, 0x16, 0xac,
	0x55, 0x97, 0xd2, 0xf4, 0x3e, 0x5c, 0xbb, 0x50, 0xc2, 0xff, 0x56, 0x2b, 0x2b, 0x2b, 0x5c, 0xb1,
	0x98, 0x40, 0x85, 0xcf, 0x9e, 0xfc, 0x1a, 0xf3, 0xc3, 0x52, 0x63, 0x42, 0x53, 0x7f, 0x4e, 0x92,
	0x68, 0x41, 0x1b, 0xe3, 0x24, 0xf4, 0x68, 0xb1, 0xd5, 0xf0, 0x49, 0x1e, 0x1c, 0xfc, 0x73, 0xba,
	0x70, 0xe3, 0xec, 0x05, 0xd9, 0x11, 0xea, 0xc7, 0x16, 0x2c, 0x08, 0x6e, 0xbd, 0x38, 0x2c, 0x1e,
	0x9e, 0xfc, 0x7a, 0x95, 0x53, 0x89, 0x69, 0x5e, 0x33, 0x57, 0x15, 0xea, 0x2f, 0x2d, 0x58, 0x9f,
	0xe0, 0x78, 0x85, 0x74, 0xd9, 0xaf, 0xdd, 0xf5, 0x94, 0x70, 0x6b, 0x15, 0xe7, 0xdb, 0xcd, 0x6e,
	0xb5, 0xdb, 0xc5, 0x43, 0x5d, 0xcd, 0x9b, 0xa2, 0x78, 0x9c, 0x53, 0x6f, 0x9c, 0xd4, 0x3d, 0xc9,
	0xaf, 0xa7, 0x8a, 0x57, 0x66, 0xc1, 0xf1, 0x37, 0x7c, 0x65, 0x47, 0xbe, 0x5e, 0x97, 0xdc, 0x13,
	0x6a, 0xc1, 0xb1, 0x78, 0xa8, 0x63, 0x44, 0x12, 0x54, 0x17, 0x73, 0x5d, 0x09, 0xce, 0x78, 0x81,
	0x08, 0x1a, 0xbf, 0xb2, 0x78, 0x9d, 0x60, 0x60, 0x1c, 0xfd, 0x68, 0xe8, 0x55, 0x98, 0xcd, 0xec,
	0xa8, 0x6c, 0xf4, 0x62, 0x5d, 0x62, 0xaa, 0x45, 0x6d, 0x7a, 0x81, 0x5a, 0xd0, 0xff, 0x5a, 0xc5,
	0xdd, 0x2a, 0x7b, 0x66, 0xd4, 0xa1, 0x47, 0x75, 0x43, 0xad, 0x23, 0xba, 0xa1, 0x8f, 0xc2, 0x7a,
	0x82, 0xb3, 0x86, 0x60, 0xc8, 0xa8, 0xd9, 0x14, 0x94, 0x6d, 0xc7, 0x33, 0x39, 0xc2, 0x36, 0xa3,
	0x79, 0x57, 0x70, 0x13, 0xd6, 0x4a, 0xa4, 0xa5, 0x16, 0xe4, 0x6a, 0x81, 0x30, 0x6b, 0x43, 0x6e,
	0xc2, 0x1a, 0x1e, 0xa7, 0x38, 0xf2, 0x8d, 0xd7, 0x9f, 0x32, 0xc9, 0xea, 0x2e, 0xa4, 0x06, 0xab,
	0xd7, 0x9f, 0x4f, 0x09, 0x60, 0xf7, 0x9d, 0xe2, 0x65, 0xdf, 0x5e, 0xa0, 0x9e, 0x75, 0x75, 0xf2,
	0x93, 0x83, 0x7c, 0x03, 0xa3, 0x7f, 0xed, 0x7b, 0x60, 0x4e, 0x3c, 0x10, 0xd3, 0x60, 0x59, 0xf3,
	0xb5, 0xf8, 0x98, 0x3e, 0x43, 0xdf, 0x06, 0xcd, 0x92, 0xd4, 0xd9, 0xbf, 0x7d, 0x17, 0x80, 0xb8,
	0x70, 0xa4, 0x21, 0xc9, 0x64, 0x33, 0x46, 0xba, 0x7f, 0x07, 0xb0, 0x0d, 0x81, 0x34, 0xd7, 0xf7,
	0x8e, 0x69, 0x39, 0xf9, 0xf5, 0xbe, 0xa7, 0xba, 0x59, 0xb7, 0xe9, 0xdd, 0x9b, 0x74, 0x9b, 0x82,
	0xba, 0x5f, 0x39, 0x1d, 0xd5, 0x68, 0xba, 0x00, 0x2b, 0x79, 0xed, 0x65, 0x5c, 0x79, 0xca, 0xe7,
	0x76, 0x79, 0xb3, 0x3e, 0xbf, 0xf7, 0xbc, 0x00, 0x2b, 0xca, 0xd8, 0xc5, 0xe7, 0xc3, 0xf2, 0x01,
	0x9e, 0xad, 0x60, 0xe6, 0xdb, 0x61, 0x7e, 0xfe, 0x8e, 0x7b, 0x5e, 0x58, 0x76, 0xb8, 0xd3, 0xaa,
	0x47, 0xc1, 0x61, 0x05, 0x6f, 0xe3, 0xdb, 0x3b, 0xbf, 0xd1, 0x9c, 0xa9, 0x33, 0x0a, 0x65, 0x7b,
	0xd7, 0x6d, 0x50, 0x79, 0x9f, 0x69, 0x8f, 0xa1, 0xc9, 0xdd, 0x5b, 0xf0, 0x6e, 0xd4, 0x78, 0x9b,
	0xaa, 0xf7, 0x90, 0xdb, 0xd8, 0x0b, 0xe4, 0x23, 0xe0, 0x0d, 0x58, 0x4e, 0x18, 0x41, 0x2c, 0x09,
	0xfb, 0x28, 0xc1, 0x7d, 0xc2, 0x52, 0x71, 0x5a, 0x6a, 0x8a, 0x9d, 0xb3, 0x94, 0x30, 0xb2, 0x9b,
	0x84, 0x7d, 0x37, 0x03, 0xd8, 0x23, 0x98, 0x95, 0x6f, 0xb7, 0xb8, 0xa8, 0xb3, 0x42, 0xd4, 0xe7,
	0x6a, 0xbb, 0xcd, 0x73, 0x9b, 0xe2, 0xad, 0x16, 0x97, 0x53, 0xd4, 0xee, 0x3e, 0x4e, 0xc2, 0xc3,
	0xec, 0xee, 0x43, 0xf8, 0x4f, 0x48, 0x58, 0xda, 0x81, 0xb3, 0xd3, 0xb2, 0x76, 0xd7, 0x08, 0x59,
	0xed, 0xbe, 0x4d, 0x58, 0xca, 0xcf, 0x4a, 0xa5, 0xa7, 0x16, 0x2d, 0x71, 0xfe, 0xb8, 0x5e, 0xf7,
	0xa5, 0x46, 0xe1, 0xb1, 0x85, 0xfd, 0x43, 0x0b, 0x96, 0xb8, 0x18, 0x59, 0x97, 0x41, 0x88, 0x32,
	0x27, 0x44, 0x79, 0xae, 0xb6, 0xe3, 0xbe, 0xbb, 0x40, 0x71, 0x72, 0x4d, 0xb1, 0x14, 0x72, 0xbc,
	0x63, 0xc1, 0x9a, 0x30, 0x87, 0x2a, 0xa4, 0x02, 0x6f, 0x40, 0x42, 0x25, 0x4d, 0x5b, 0x48, 0xf3,
	0x6c, 0x4d, 0x79, 0xcd, 0x5d, 0xe1, 0xf6, 0x90, 0x6c, 0xaf, 0x0a, 0xae, 0x22, 0x09, 0xff, 0x7c,
	0x4a, 0xbd, 0xde, 0x35, 0x9f, 0xad, 0x1f, 0x59, 0xaa, 0x1c, 0x56, 0x4a, 0x95, 0x7a, 0xf6, 0xca,
	0x84, 0x3a, 0x65, 0x54, 0xee, 0x59, 0x7d, 0xa7, 0x16, 0xce, 0xe5, 0x76, 0xd5, 0xde, 0x8c, 0xa8,
	0x88, 0x1f, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x24, 0x10, 0xc7, 0x14, 0x32, 0x00,
	0x00,
}
