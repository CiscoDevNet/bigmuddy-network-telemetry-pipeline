// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_lsp_db_summary.proto

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary is a generated protocol buffer package.

It is generated from these files:
	isis_sh_lsp_db_summary.proto

It has these top-level messages:
	IsisShLspDbSummary_KEYS
	IsisShLspDbSummary
	IsisTopoIdType
	IsisShLspDbSummaryStatusClassCounters
	IsisShLspDbSummaryNodeClassCounters
	IsisShLspDbSummaryTopoClassCounters
	IsisShLspDbSummaryFragment_0Stats
	IsisShLspDbSummaryAllFragmentsStats
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Summary Statistics for an IS-IS LSP Database
type IsisShLspDbSummary_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	Level        string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
}

func (m *IsisShLspDbSummary_KEYS) Reset()                    { *m = IsisShLspDbSummary_KEYS{} }
func (m *IsisShLspDbSummary_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShLspDbSummary_KEYS) ProtoMessage()               {}
func (*IsisShLspDbSummary_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShLspDbSummary_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShLspDbSummary_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type IsisShLspDbSummary struct {
	// Statistics for fragment 0 LSPs
	Fragment0LspStats *IsisShLspDbSummaryFragment_0Stats `protobuf:"bytes,50,opt,name=fragment0_lsp_stats,json=fragment0LspStats" json:"fragment0_lsp_stats,omitempty"`
	// Statistics for all LSP fragments
	AllFragmentLspStats *IsisShLspDbSummaryAllFragmentsStats `protobuf:"bytes,51,opt,name=all_fragment_lsp_stats,json=allFragmentLspStats" json:"all_fragment_lsp_stats,omitempty"`
}

func (m *IsisShLspDbSummary) Reset()                    { *m = IsisShLspDbSummary{} }
func (m *IsisShLspDbSummary) String() string            { return proto.CompactTextString(m) }
func (*IsisShLspDbSummary) ProtoMessage()               {}
func (*IsisShLspDbSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShLspDbSummary) GetFragment0LspStats() *IsisShLspDbSummaryFragment_0Stats {
	if m != nil {
		return m.Fragment0LspStats
	}
	return nil
}

func (m *IsisShLspDbSummary) GetAllFragmentLspStats() *IsisShLspDbSummaryAllFragmentsStats {
	if m != nil {
		return m.AllFragmentLspStats
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
}

func (m *IsisTopoIdType) Reset()                    { *m = IsisTopoIdType{} }
func (m *IsisTopoIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisTopoIdType) ProtoMessage()               {}
func (*IsisTopoIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisTopoIdType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisTopoIdType) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisTopoIdType) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IsisTopoIdType) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

// LSP status counters
type IsisShLspDbSummaryStatusClassCounters struct {
	// Number of active LSPs
	ActiveLspCount uint32 `protobuf:"varint,1,opt,name=active_lsp_count,json=activeLspCount" json:"active_lsp_count,omitempty"`
	// Number of purged LSPs
	PurgedLspCount uint32 `protobuf:"varint,2,opt,name=purged_lsp_count,json=purgedLspCount" json:"purged_lsp_count,omitempty"`
}

func (m *IsisShLspDbSummaryStatusClassCounters) Reset()         { *m = IsisShLspDbSummaryStatusClassCounters{} }
func (m *IsisShLspDbSummaryStatusClassCounters) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbSummaryStatusClassCounters) ProtoMessage()    {}
func (*IsisShLspDbSummaryStatusClassCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *IsisShLspDbSummaryStatusClassCounters) GetActiveLspCount() uint32 {
	if m != nil {
		return m.ActiveLspCount
	}
	return 0
}

func (m *IsisShLspDbSummaryStatusClassCounters) GetPurgedLspCount() uint32 {
	if m != nil {
		return m.PurgedLspCount
	}
	return 0
}

// LSP node type counters
type IsisShLspDbSummaryNodeClassCounters struct {
	// Router LSPs
	RouteLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,1,opt,name=route_lsp_count,json=routeLspCount" json:"route_lsp_count,omitempty"`
	// Pseudonode LSPs
	PseudoNodeLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,2,opt,name=pseudo_node_lsp_count,json=pseudoNodeLspCount" json:"pseudo_node_lsp_count,omitempty"`
}

func (m *IsisShLspDbSummaryNodeClassCounters) Reset()         { *m = IsisShLspDbSummaryNodeClassCounters{} }
func (m *IsisShLspDbSummaryNodeClassCounters) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbSummaryNodeClassCounters) ProtoMessage()    {}
func (*IsisShLspDbSummaryNodeClassCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *IsisShLspDbSummaryNodeClassCounters) GetRouteLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if m != nil {
		return m.RouteLspCount
	}
	return nil
}

func (m *IsisShLspDbSummaryNodeClassCounters) GetPseudoNodeLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if m != nil {
		return m.PseudoNodeLspCount
	}
	return nil
}

// Per-topology related info
type IsisShLspDbSummaryTopoClassCounters struct {
	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Number of LSPs with their per-topology overload bit set
	OverloadedLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,2,opt,name=overloaded_lsp_count,json=overloadedLspCount" json:"overloaded_lsp_count,omitempty"`
	// Number of LSPs with their per-topology attached bit set
	AttachedLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,3,opt,name=attached_lsp_count,json=attachedLspCount" json:"attached_lsp_count,omitempty"`
}

func (m *IsisShLspDbSummaryTopoClassCounters) Reset()         { *m = IsisShLspDbSummaryTopoClassCounters{} }
func (m *IsisShLspDbSummaryTopoClassCounters) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbSummaryTopoClassCounters) ProtoMessage()    {}
func (*IsisShLspDbSummaryTopoClassCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *IsisShLspDbSummaryTopoClassCounters) GetId() *IsisTopoIdType {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IsisShLspDbSummaryTopoClassCounters) GetOverloadedLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if m != nil {
		return m.OverloadedLspCount
	}
	return nil
}

func (m *IsisShLspDbSummaryTopoClassCounters) GetAttachedLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if m != nil {
		return m.AttachedLspCount
	}
	return nil
}

// Fragment-0 counters
type IsisShLspDbSummaryFragment_0Stats struct {
	// Summary by class of node
	NodeCounters *IsisShLspDbSummaryNodeClassCounters `protobuf:"bytes,1,opt,name=node_counters,json=nodeCounters" json:"node_counters,omitempty"`
	// Per topology counters
	PerTopologyCounters []*IsisShLspDbSummaryTopoClassCounters `protobuf:"bytes,2,rep,name=per_topology_counters,json=perTopologyCounters" json:"per_topology_counters,omitempty"`
}

func (m *IsisShLspDbSummaryFragment_0Stats) Reset()         { *m = IsisShLspDbSummaryFragment_0Stats{} }
func (m *IsisShLspDbSummaryFragment_0Stats) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbSummaryFragment_0Stats) ProtoMessage()    {}
func (*IsisShLspDbSummaryFragment_0Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6}
}

func (m *IsisShLspDbSummaryFragment_0Stats) GetNodeCounters() *IsisShLspDbSummaryNodeClassCounters {
	if m != nil {
		return m.NodeCounters
	}
	return nil
}

func (m *IsisShLspDbSummaryFragment_0Stats) GetPerTopologyCounters() []*IsisShLspDbSummaryTopoClassCounters {
	if m != nil {
		return m.PerTopologyCounters
	}
	return nil
}

// All fragment counters
type IsisShLspDbSummaryAllFragmentsStats struct {
	// Summary by class of node
	NodeCounters *IsisShLspDbSummaryNodeClassCounters `protobuf:"bytes,1,opt,name=node_counters,json=nodeCounters" json:"node_counters,omitempty"`
}

func (m *IsisShLspDbSummaryAllFragmentsStats) Reset()         { *m = IsisShLspDbSummaryAllFragmentsStats{} }
func (m *IsisShLspDbSummaryAllFragmentsStats) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbSummaryAllFragmentsStats) ProtoMessage()    {}
func (*IsisShLspDbSummaryAllFragmentsStats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *IsisShLspDbSummaryAllFragmentsStats) GetNodeCounters() *IsisShLspDbSummaryNodeClassCounters {
	if m != nil {
		return m.NodeCounters
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShLspDbSummary_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_KEYS")
	proto.RegisterType((*IsisShLspDbSummary)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary")
	proto.RegisterType((*IsisTopoIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_topo_id_type")
	proto.RegisterType((*IsisShLspDbSummaryStatusClassCounters)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters")
	proto.RegisterType((*IsisShLspDbSummaryNodeClassCounters)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters")
	proto.RegisterType((*IsisShLspDbSummaryTopoClassCounters)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters")
	proto.RegisterType((*IsisShLspDbSummaryFragment_0Stats)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_fragment_0_stats")
	proto.RegisterType((*IsisShLspDbSummaryAllFragmentsStats)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_all_fragments_stats")
}

func init() { proto.RegisterFile("isis_sh_lsp_db_summary.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x96, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe5, 0x74, 0x6c, 0xe0, 0xad, 0xb0, 0xa5, 0x63, 0x14, 0xc1, 0xa1, 0xca, 0x0e, 0x54,
	0x08, 0x45, 0x53, 0xf7, 0x11, 0x26, 0xb8, 0x30, 0xed, 0x90, 0x71, 0x80, 0x93, 0xe5, 0x26, 0x6e,
	0x17, 0xc9, 0x8d, 0x23, 0x3f, 0xa7, 0xa2, 0x42, 0x42, 0x08, 0x21, 0x71, 0xe0, 0xc0, 0x87, 0xe0,
	0x84, 0x38, 0x20, 0x01, 0x9f, 0x84, 0xcf, 0xc3, 0x01, 0xd9, 0x8e, 0xd3, 0xae, 0x24, 0x12, 0x07,
	0xa8, 0xba, 0x53, 0xd3, 0xff, 0x7b, 0x7a, 0xfd, 0x3d, 0xff, 0xdf, 0x73, 0x83, 0xef, 0xa7, 0x90,
	0x02, 0x81, 0x0b, 0xc2, 0x21, 0x27, 0xc9, 0x90, 0x40, 0x31, 0x99, 0x50, 0x39, 0x0b, 0x73, 0x29,
	0x94, 0xf0, 0xa3, 0x38, 0x85, 0x58, 0x90, 0x54, 0x00, 0x79, 0x29, 0x49, 0xcc, 0x33, 0x20, 0x26,
	0x5f, 0xe4, 0x4c, 0x86, 0xfa, 0x29, 0x4c, 0x33, 0x50, 0x34, 0x8b, 0xd9, 0xfc, 0x29, 0xe4, 0x6c,
	0xca, 0x38, 0xd8, 0x8f, 0x50, 0x97, 0x55, 0x74, 0xc8, 0x99, 0xab, 0x1c, 0x3c, 0xc7, 0xf7, 0xea,
	0x7f, 0x93, 0x3c, 0x7d, 0xfc, 0xe2, 0xdc, 0x3f, 0xc4, 0x6d, 0x57, 0x89, 0x64, 0x74, 0xc2, 0xba,
	0xa8, 0x87, 0xfa, 0x37, 0xa2, 0x1d, 0x27, 0x9e, 0xd1, 0x09, 0xf3, 0xf7, 0xf1, 0x35, 0x53, 0xbe,
	0xeb, 0x99, 0xa0, 0xfd, 0x12, 0xfc, 0xf2, 0xf0, 0x41, 0x7d, 0x69, 0xff, 0x0b, 0xc2, 0x9d, 0x91,
	0xa4, 0xe3, 0x09, 0xcb, 0xd4, 0x91, 0x09, 0x82, 0xa2, 0x0a, 0xba, 0x83, 0x1e, 0xea, 0x6f, 0x0f,
	0x5e, 0x85, 0xff, 0xbe, 0xcf, 0xb0, 0xa1, 0x49, 0x47, 0x41, 0x8e, 0x2c, 0x42, 0xb4, 0x57, 0x71,
	0x9d, 0x42, 0x7e, 0xae, 0x25, 0xff, 0x3b, 0xc2, 0x07, 0x94, 0xf3, 0x79, 0xee, 0x1c, 0xf8, 0xd8,
	0x00, 0xbf, 0x5e, 0x21, 0xf0, 0x22, 0x08, 0x94, 0xcc, 0x1d, 0xca, 0xf9, 0x93, 0x52, 0x73, 0xd4,
	0xc1, 0x7b, 0x84, 0xf7, 0x4c, 0x0d, 0x25, 0x72, 0x41, 0xd2, 0x84, 0xa8, 0x59, 0xce, 0xfc, 0x3b,
	0x78, 0x8b, 0x8e, 0x16, 0x9d, 0xdc, 0xa4, 0x23, 0xe3, 0xe1, 0x5d, 0x7c, 0x1d, 0x5c, 0xc4, 0xda,
	0xb8, 0x05, 0xf3, 0xd0, 0x54, 0x96, 0xa1, 0x96, 0x0d, 0x4d, 0xa5, 0x0d, 0x1d, 0xe2, 0xb6, 0x2e,
	0xcf, 0xc5, 0x78, 0x66, 0xe3, 0x1b, 0x76, 0x3c, 0x9c, 0xa8, 0x93, 0x82, 0xb7, 0x08, 0x3f, 0x6a,
	0xe8, 0x46, 0xf3, 0x17, 0x40, 0x62, 0x4e, 0x01, 0x48, 0x2c, 0x8a, 0x4c, 0x31, 0x09, 0x7e, 0x1f,
	0xef, 0xd2, 0x58, 0xa5, 0x53, 0x66, 0xd2, 0x8d, 0x6c, 0x68, 0xdb, 0xd1, 0x4d, 0xab, 0x9f, 0x42,
	0x7e, 0xa2, 0x55, 0x9d, 0x99, 0x17, 0x72, 0xcc, 0x92, 0x85, 0x4c, 0xcf, 0x66, 0x5a, 0xdd, 0x65,
	0x06, 0x1f, 0x5b, 0xf8, 0x61, 0x03, 0x44, 0x26, 0x12, 0xb6, 0x8c, 0xf0, 0x19, 0xe1, 0x5b, 0x52,
	0x14, 0x6a, 0x19, 0x61, 0x7b, 0xf0, 0x06, 0xad, 0xd0, 0xed, 0xda, 0xf3, 0x89, 0xda, 0x86, 0xac,
	0x3a, 0x84, 0x1f, 0x08, 0xdf, 0xce, 0x81, 0x15, 0x89, 0xb0, 0xad, 0x5c, 0x3e, 0x8a, 0xb5, 0x20,
	0xf6, 0x2d, 0xdf, 0x99, 0x48, 0x2a, 0xec, 0xe0, 0xc3, 0x46, 0xa3, 0x23, 0x66, 0x64, 0x97, 0x1c,
	0x29, 0xb0, 0x97, 0x26, 0xa5, 0x07, 0xec, 0xbf, 0x35, 0xb4, 0xb8, 0x2c, 0x91, 0x97, 0x26, 0x7a,
	0xf9, 0xf7, 0xc5, 0x94, 0x49, 0x2e, 0x68, 0xf2, 0xc7, 0x98, 0xad, 0xc7, 0xd9, 0xce, 0xf1, 0xaa,
	0x91, 0xf8, 0x8a, 0xb0, 0x4f, 0x95, 0xa2, 0xf1, 0xc5, 0x25, 0xe6, 0xd6, 0xba, 0x30, 0xef, 0x3a,
	0xb8, 0x6a, 0x1a, 0xde, 0xb5, 0xf0, 0x83, 0xbf, 0xbc, 0xa3, 0xfd, 0x4f, 0x08, 0xb7, 0xed, 0xd2,
	0x96, 0xf5, 0xca, 0xb1, 0x58, 0xe5, 0x3d, 0x5c, 0x73, 0x69, 0x44, 0x3b, 0x5a, 0x3c, 0x71, 0x03,
	0xfb, 0x4d, 0xaf, 0x25, 0x93, 0xa4, 0xba, 0x20, 0x2b, 0x5a, 0xaf, 0xd7, 0x5a, 0x31, 0x6d, 0xcd,
	0x42, 0x45, 0x9d, 0x9c, 0xc9, 0x67, 0x25, 0x9b, 0x83, 0x0e, 0x7e, 0xa2, 0xc6, 0xa5, 0xac, 0xf9,
	0xe7, 0xb9, 0x1a, 0x4e, 0x0c, 0x37, 0xcd, 0xeb, 0xd3, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xed, 0xc8, 0x79, 0x44, 0x5e, 0x09, 0x00, 0x00,
}
