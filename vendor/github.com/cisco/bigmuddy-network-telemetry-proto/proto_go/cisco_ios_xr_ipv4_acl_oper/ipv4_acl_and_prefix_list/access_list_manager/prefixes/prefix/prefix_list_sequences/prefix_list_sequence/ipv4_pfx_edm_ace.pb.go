// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv4_pfx_edm_ace.proto

/*
Package cisco_ios_xr_ipv4_acl_oper_ipv4_acl_and_prefix_list_access_list_manager_prefixes_prefix_prefix_list_sequences_prefix_list_sequence is a generated protocol buffer package.

It is generated from these files:
	ipv4_pfx_edm_ace.proto

It has these top-level messages:
	Ipv4PfxEdmAce_KEYS
	Ipv4PfxEdmAce
*/
package cisco_ios_xr_ipv4_acl_oper_ipv4_acl_and_prefix_list_access_list_manager_prefixes_prefix_prefix_list_sequences_prefix_list_sequence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Prefix list entry BAG
type Ipv4PfxEdmAce_KEYS struct {
	PrefixListName string `protobuf:"bytes,1,opt,name=prefix_list_name,json=prefixListName" json:"prefix_list_name,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (m *Ipv4PfxEdmAce_KEYS) Reset()                    { *m = Ipv4PfxEdmAce_KEYS{} }
func (m *Ipv4PfxEdmAce_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv4PfxEdmAce_KEYS) ProtoMessage()               {}
func (*Ipv4PfxEdmAce_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv4PfxEdmAce_KEYS) GetPrefixListName() string {
	if m != nil {
		return m.PrefixListName
	}
	return ""
}

func (m *Ipv4PfxEdmAce_KEYS) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type Ipv4PfxEdmAce struct {
	// ACE type (prefix, remark)
	ItemType string `protobuf:"bytes,50,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	// ACLE sequence number
	Sequence uint32 `protobuf:"varint,51,opt,name=sequence" json:"sequence,omitempty"`
	// Grant value permit/deny
	Grant string `protobuf:"bytes,52,opt,name=grant" json:"grant,omitempty"`
	// Prefix
	Prefix string `protobuf:"bytes,53,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,54,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// Port Operator
	Operator string `protobuf:"bytes,55,opt,name=operator" json:"operator,omitempty"`
	// Min length
	MinimumLength uint32 `protobuf:"varint,56,opt,name=minimum_length,json=minimumLength" json:"minimum_length,omitempty"`
	// Maximum length
	MaximumLength uint32 `protobuf:"varint,57,opt,name=maximum_length,json=maximumLength" json:"maximum_length,omitempty"`
	// Number of hits
	Hits uint32 `protobuf:"varint,58,opt,name=hits" json:"hits,omitempty"`
	// Remark String
	Remark string `protobuf:"bytes,59,opt,name=remark" json:"remark,omitempty"`
	// ACL Name
	AclName string `protobuf:"bytes,60,opt,name=acl_name,json=aclName" json:"acl_name,omitempty"`
}

func (m *Ipv4PfxEdmAce) Reset()                    { *m = Ipv4PfxEdmAce{} }
func (m *Ipv4PfxEdmAce) String() string            { return proto.CompactTextString(m) }
func (*Ipv4PfxEdmAce) ProtoMessage()               {}
func (*Ipv4PfxEdmAce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv4PfxEdmAce) GetItemType() string {
	if m != nil {
		return m.ItemType
	}
	return ""
}

func (m *Ipv4PfxEdmAce) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Ipv4PfxEdmAce) GetGrant() string {
	if m != nil {
		return m.Grant
	}
	return ""
}

func (m *Ipv4PfxEdmAce) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ipv4PfxEdmAce) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ipv4PfxEdmAce) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Ipv4PfxEdmAce) GetMinimumLength() uint32 {
	if m != nil {
		return m.MinimumLength
	}
	return 0
}

func (m *Ipv4PfxEdmAce) GetMaximumLength() uint32 {
	if m != nil {
		return m.MaximumLength
	}
	return 0
}

func (m *Ipv4PfxEdmAce) GetHits() uint32 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Ipv4PfxEdmAce) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Ipv4PfxEdmAce) GetAclName() string {
	if m != nil {
		return m.AclName
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipv4PfxEdmAce_KEYS)(nil), "cisco_ios_xr_ipv4_acl_oper.ipv4_acl_and_prefix_list.access_list_manager.prefixes.prefix.prefix_list_sequences.prefix_list_sequence.ipv4_pfx_edm_ace_KEYS")
	proto.RegisterType((*Ipv4PfxEdmAce)(nil), "cisco_ios_xr_ipv4_acl_oper.ipv4_acl_and_prefix_list.access_list_manager.prefixes.prefix.prefix_list_sequences.prefix_list_sequence.ipv4_pfx_edm_ace")
}

func init() { proto.RegisterFile("ipv4_pfx_edm_ace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0xcd, 0x12, 0x45, 0x68, 0x04, 0x49, 0xa3, 0xa4, 0xea, 0x85, 0x60, 0x8c, 0x9c, 0xf6, 0x20,
	0xf8, 0xed, 0xd5, 0x93, 0x86, 0x03, 0x7a, 0xf1, 0xd4, 0x94, 0x32, 0x40, 0x95, 0x76, 0xd7, 0xb6,
	0x98, 0xe5, 0xea, 0x1f, 0xf4, 0x2f, 0x99, 0x9d, 0xee, 0x12, 0xe4, 0x36, 0xef, 0xcd, 0xeb, 0x9b,
	0xd7, 0x76, 0x48, 0x5b, 0xa5, 0xdf, 0x03, 0x9e, 0x4e, 0x33, 0x0e, 0x13, 0xcd, 0x85, 0x84, 0x38,
	0xb5, 0x89, 0x4f, 0xe8, 0x4f, 0x24, 0x95, 0x93, 0x09, 0x57, 0x89, 0xe3, 0x99, 0xe5, 0xa8, 0x12,
	0x72, 0xc1, 0x93, 0x14, 0x6c, 0xbc, 0x46, 0xc2, 0x4c, 0x78, 0x6a, 0x61, 0xaa, 0x32, 0xbe, 0x50,
	0xce, 0xc7, 0x42, 0x4a, 0x70, 0x0e, 0x6b, 0xae, 0x85, 0x11, 0x33, 0xb0, 0x71, 0xe8, 0x83, 0x2b,
	0x8a, 0x78, 0x43, 0xcf, 0x1d, 0x7c, 0x2d, 0xc1, 0xc8, 0x75, 0xf3, 0x3f, 0xdb, 0xfd, 0x20, 0x47,
	0xdb, 0xf1, 0xf8, 0xf3, 0xd3, 0xfb, 0x2b, 0xed, 0x91, 0xd6, 0xe6, 0x01, 0x23, 0x34, 0xb0, 0xa8,
	0x13, 0xf5, 0xea, 0xa3, 0x66, 0xe0, 0x5f, 0x94, 0xf3, 0x43, 0xa1, 0x81, 0x5e, 0x90, 0x83, 0xd2,
	0x8e, 0x9b, 0xa5, 0x1e, 0x83, 0x65, 0x95, 0x4e, 0xd4, 0x6b, 0x8c, 0x9a, 0x25, 0x3d, 0x44, 0xb6,
	0xfb, 0x5b, 0x21, 0xad, 0xed, 0x61, 0xf4, 0x94, 0xd4, 0x95, 0x07, 0xcd, 0xfd, 0x2a, 0x05, 0x76,
	0x89, 0x03, 0x6a, 0x39, 0xf1, 0xb6, 0x4a, 0x81, 0x9e, 0x90, 0x5a, 0xe9, 0xc1, 0xfa, 0xe8, 0xb9,
	0xc6, 0xf4, 0x90, 0xec, 0xce, 0xac, 0x30, 0x9e, 0x0d, 0xf0, 0x50, 0x00, 0xb4, 0x4d, 0xaa, 0x21,
	0x1e, 0xbb, 0x42, 0xba, 0x40, 0xf4, 0x8c, 0x34, 0xca, 0xeb, 0x80, 0x99, 0xf9, 0x39, 0xbb, 0x46,
	0xbb, 0xfd, 0xe2, 0x2e, 0xc8, 0xe5, 0xe3, 0xf2, 0xc7, 0x17, 0x3e, 0xb1, 0xec, 0x26, 0x44, 0x29,
	0x31, 0x3d, 0x27, 0x4d, 0xad, 0x8c, 0xd2, 0x4b, 0x5d, 0x3a, 0xdc, 0xa2, 0x43, 0xa3, 0x60, 0x0b,
	0x8b, 0x5c, 0x26, 0xb2, 0x4d, 0xd9, 0x5d, 0x21, 0x0b, 0x6c, 0x21, 0xa3, 0x64, 0x67, 0xae, 0xbc,
	0x63, 0xf7, 0xd8, 0xc4, 0x3a, 0x8f, 0x6e, 0x41, 0x0b, 0xfb, 0xc9, 0x1e, 0x42, 0xf4, 0x80, 0xe8,
	0x31, 0xa9, 0xe5, 0x8b, 0x80, 0x3f, 0xf0, 0x88, 0x9d, 0x3d, 0x21, 0x17, 0xf9, 0xd3, 0x8f, 0xab,
	0xb8, 0x49, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x3f, 0x28, 0x7d, 0x63, 0x02, 0x00,
	0x00,
}
