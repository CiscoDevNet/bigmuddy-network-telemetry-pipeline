// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optics_edm_lane_data.proto

/*
Package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_optics_lanes_optics_lane is a generated protocol buffer package.

It is generated from these files:
	optics_edm_lane_data.proto

It has these top-level messages:
	OpticsEdmLaneData_KEYS
	OpticsEdmLaneData
	LaneAlarmDetail
	LaneEdmAlarmInfo
*/
package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_optics_lanes_optics_lane

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Grey lane data
type OpticsEdmLaneData_KEYS struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number uint32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *OpticsEdmLaneData_KEYS) Reset()                    { *m = OpticsEdmLaneData_KEYS{} }
func (m *OpticsEdmLaneData_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmLaneData_KEYS) ProtoMessage()               {}
func (*OpticsEdmLaneData_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpticsEdmLaneData_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpticsEdmLaneData_KEYS) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type OpticsEdmLaneData struct {
	// The index number of the lane
	LaneIndex uint32 `protobuf:"varint,50,opt,name=lane_index,json=laneIndex" json:"lane_index,omitempty"`
	// Laser Bias Current in units of 0.01 percentage
	LaserBiasCurrentPercent uint32 `protobuf:"varint,51,opt,name=laser_bias_current_percent,json=laserBiasCurrentPercent" json:"laser_bias_current_percent,omitempty"`
	// Laser Bias Current in units of 0.01mA
	LaserBiasCurrentMilliAmps uint32 `protobuf:"varint,52,opt,name=laser_bias_current_milli_amps,json=laserBiasCurrentMilliAmps" json:"laser_bias_current_milli_amps,omitempty"`
	// Transmit power in the unit of 0.01dBm
	TransmitPower int32 `protobuf:"zigzag32,53,opt,name=transmit_power,json=transmitPower" json:"transmit_power,omitempty"`
	// Transponder receive power in the unit of 0.01dBm
	ReceivePower int32 `protobuf:"zigzag32,54,opt,name=receive_power,json=receivePower" json:"receive_power,omitempty"`
	// Transponder receive signal power in the unit of 0.01dBm
	ReceiveSignalPower int32 `protobuf:"zigzag32,55,opt,name=receive_signal_power,json=receiveSignalPower" json:"receive_signal_power,omitempty"`
	// Transmit Signal power in the unit of 0.01dBm
	TransmitSignalPower int32 `protobuf:"zigzag32,56,opt,name=transmit_signal_power,json=transmitSignalPower" json:"transmit_signal_power,omitempty"`
	// Output frequency read from hw in the unit 0.01THz
	OutputFrequency int32 `protobuf:"zigzag32,57,opt,name=output_frequency,json=outputFrequency" json:"output_frequency,omitempty"`
	// Lane Alarm Information
	LaneAlarmInfo *LaneEdmAlarmInfo `protobuf:"bytes,58,opt,name=lane_alarm_info,json=laneAlarmInfo" json:"lane_alarm_info,omitempty"`
}

func (m *OpticsEdmLaneData) Reset()                    { *m = OpticsEdmLaneData{} }
func (m *OpticsEdmLaneData) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmLaneData) ProtoMessage()               {}
func (*OpticsEdmLaneData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpticsEdmLaneData) GetLaneIndex() uint32 {
	if m != nil {
		return m.LaneIndex
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentPercent() uint32 {
	if m != nil {
		return m.LaserBiasCurrentPercent
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentMilliAmps() uint32 {
	if m != nil {
		return m.LaserBiasCurrentMilliAmps
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitPower() int32 {
	if m != nil {
		return m.TransmitPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceivePower() int32 {
	if m != nil {
		return m.ReceivePower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceiveSignalPower() int32 {
	if m != nil {
		return m.ReceiveSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitSignalPower() int32 {
	if m != nil {
		return m.TransmitSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetOutputFrequency() int32 {
	if m != nil {
		return m.OutputFrequency
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaneAlarmInfo() *LaneEdmAlarmInfo {
	if m != nil {
		return m.LaneAlarmInfo
	}
	return nil
}

//  Lane Alarm Detail
type LaneAlarmDetail struct {
	// Is defect detected?
	IsDetected bool `protobuf:"varint,1,opt,name=is_detected,json=isDetected" json:"is_detected,omitempty"`
	// Alarm counter
	Counter uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
}

func (m *LaneAlarmDetail) Reset()                    { *m = LaneAlarmDetail{} }
func (m *LaneAlarmDetail) String() string            { return proto.CompactTextString(m) }
func (*LaneAlarmDetail) ProtoMessage()               {}
func (*LaneAlarmDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LaneAlarmDetail) GetIsDetected() bool {
	if m != nil {
		return m.IsDetected
	}
	return false
}

func (m *LaneAlarmDetail) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

//  Lane Information Detail
type LaneEdmAlarmInfo struct {
	// High Rx Power
	HighRxPower *LaneAlarmDetail `protobuf:"bytes,1,opt,name=high_rx_power,json=highRxPower" json:"high_rx_power,omitempty"`
	// Low Rx Power
	LowRxPower *LaneAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower" json:"low_rx_power,omitempty"`
	// High Tx Power
	HighTxPower *LaneAlarmDetail `protobuf:"bytes,3,opt,name=high_tx_power,json=highTxPower" json:"high_tx_power,omitempty"`
	// Low Tx Power
	LowTxPower *LaneAlarmDetail `protobuf:"bytes,4,opt,name=low_tx_power,json=lowTxPower" json:"low_tx_power,omitempty"`
	// High laser bias current
	HighLbc *LaneAlarmDetail `protobuf:"bytes,5,opt,name=high_lbc,json=highLbc" json:"high_lbc,omitempty"`
}

func (m *LaneEdmAlarmInfo) Reset()                    { *m = LaneEdmAlarmInfo{} }
func (m *LaneEdmAlarmInfo) String() string            { return proto.CompactTextString(m) }
func (*LaneEdmAlarmInfo) ProtoMessage()               {}
func (*LaneEdmAlarmInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LaneEdmAlarmInfo) GetHighRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighLbc() *LaneAlarmDetail {
	if m != nil {
		return m.HighLbc
	}
	return nil
}

func init() {
	proto.RegisterType((*OpticsEdmLaneData_KEYS)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_lanes.optics_lane.optics_edm_lane_data_KEYS")
	proto.RegisterType((*OpticsEdmLaneData)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_lanes.optics_lane.optics_edm_lane_data")
	proto.RegisterType((*LaneAlarmDetail)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_lanes.optics_lane.lane_alarm_detail")
	proto.RegisterType((*LaneEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_lanes.optics_lane.lane_edm_alarm_info")
}

func init() { proto.RegisterFile("optics_edm_lane_data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0xf4, 0xcb, 0x97, 0xb6, 0x37, 0x0d, 0xa5, 0x6e, 0x01, 0xb7, 0x52, 0x45, 0x14, 0x84,
	0x14, 0x36, 0x11, 0x4a, 0xf9, 0x67, 0x43, 0xf9, 0x55, 0xc5, 0x8f, 0xaa, 0x29, 0x1b, 0x56, 0x96,
	0xe3, 0xdc, 0xb4, 0x96, 0x3c, 0xf6, 0x60, 0x7b, 0x9a, 0xf0, 0x14, 0xdd, 0x21, 0x56, 0x3c, 0x04,
	0x4f, 0x88, 0xec, 0x99, 0x49, 0x43, 0x95, 0x2d, 0x64, 0xe7, 0x73, 0xee, 0x39, 0xb9, 0x27, 0x27,
	0x57, 0x0a, 0xec, 0x99, 0xdc, 0x4b, 0xe1, 0x18, 0x8e, 0x32, 0xa6, 0xb8, 0x46, 0x36, 0xe2, 0x9e,
	0xf7, 0x73, 0x6b, 0xbc, 0x21, 0x5c, 0x48, 0x27, 0x0c, 0x93, 0xc6, 0xb1, 0xa9, 0x65, 0xc2, 0x68,
	0x6f, 0x8d, 0x52, 0x68, 0x59, 0xe5, 0x31, 0x39, 0xda, 0xfe, 0x82, 0x77, 0x6e, 0xac, 0x77, 0xf3,
	0xa0, 0x7e, 0x87, 0x05, 0x6e, 0x1e, 0x74, 0xdf, 0xc1, 0xee, 0xa2, 0x00, 0xec, 0xfd, 0x9b, 0x2f,
	0x27, 0x84, 0x40, 0x43, 0xf3, 0x0c, 0x69, 0xd2, 0x49, 0x7a, 0xeb, 0x69, 0x7c, 0x93, 0x9b, 0xd0,
	0xd4, 0x45, 0x36, 0x44, 0x4b, 0x57, 0x3a, 0x49, 0xaf, 0x9d, 0x56, 0xa8, 0xfb, 0xab, 0x01, 0x3b,
	0x8b, 0x3e, 0x89, 0xec, 0x03, 0x44, 0x20, 0xf5, 0x08, 0xa7, 0x74, 0x10, 0x4d, 0xeb, 0x81, 0x39,
	0x0a, 0x04, 0x79, 0x0e, 0x7b, 0x8a, 0x3b, 0xb4, 0x6c, 0x28, 0xb9, 0x63, 0xa2, 0xb0, 0x16, 0xb5,
	0x67, 0x39, 0x5a, 0x81, 0xda, 0xd3, 0x83, 0x28, 0xbf, 0x15, 0x15, 0x2f, 0x25, 0x77, 0xaf, 0xca,
	0xf9, 0x71, 0x39, 0x26, 0x2f, 0x60, 0x7f, 0x81, 0x39, 0x93, 0x4a, 0x49, 0xc6, 0xb3, 0xdc, 0xd1,
	0x07, 0xd1, 0xbf, 0x7b, 0xd5, 0xff, 0x31, 0x28, 0x0e, 0xb3, 0xdc, 0x91, 0xbb, 0x70, 0xcd, 0x5b,
	0xae, 0x5d, 0x26, 0x3d, 0xcb, 0xcd, 0x04, 0x2d, 0x7d, 0xd8, 0x49, 0x7a, 0x5b, 0x69, 0xbb, 0x66,
	0x8f, 0x03, 0x49, 0xee, 0x40, 0xdb, 0xa2, 0x40, 0x79, 0x8e, 0x95, 0xea, 0x51, 0x54, 0x6d, 0x54,
	0x64, 0x29, 0xba, 0x0f, 0x3b, 0xb5, 0xc8, 0xc9, 0x53, 0xcd, 0x55, 0xa5, 0x7d, 0x1c, 0xb5, 0xa4,
	0x9a, 0x9d, 0xc4, 0x51, 0xe9, 0x18, 0xc0, 0x8d, 0xd9, 0xf6, 0x3f, 0x2c, 0x4f, 0xa2, 0x65, 0xbb,
	0x1e, 0xce, 0x7b, 0xee, 0xc1, 0x75, 0x53, 0xf8, 0xbc, 0xf0, 0x6c, 0x6c, 0xf1, 0x6b, 0x81, 0x5a,
	0x7c, 0xa3, 0x4f, 0xa3, 0x7c, 0xb3, 0xe4, 0xdf, 0xd6, 0x34, 0xf9, 0x99, 0xc0, 0x66, 0xec, 0x9e,
	0x2b, 0x6e, 0x33, 0x26, 0xf5, 0xd8, 0xd0, 0x67, 0x9d, 0xa4, 0xd7, 0x1a, 0x9c, 0xf7, 0xff, 0xfa,
	0x69, 0xf5, 0xe3, 0xe6, 0x70, 0x0b, 0x97, 0xdb, 0xd3, 0x76, 0x20, 0x0f, 0x03, 0x3e, 0xd2, 0x63,
	0xd3, 0xfd, 0x04, 0x5b, 0x73, 0xf9, 0x46, 0xe8, 0xb9, 0x54, 0xe4, 0x36, 0xb4, 0xa4, 0x0b, 0x00,
	0x85, 0xc7, 0x51, 0x3c, 0xbe, 0xb5, 0x14, 0xa4, 0x7b, 0x5d, 0x31, 0x84, 0xc2, 0xaa, 0x30, 0x85,
	0xf6, 0xb3, 0x1b, 0xac, 0x61, 0xf7, 0xa2, 0x09, 0xdb, 0x0b, 0xd6, 0x92, 0x1f, 0x09, 0xb4, 0xcf,
	0xe4, 0xe9, 0x19, 0xb3, 0xd3, 0xaa, 0xe0, 0x24, 0xd6, 0xe0, 0xff, 0x55, 0x0d, 0xf3, 0x5f, 0x30,
	0x6d, 0x85, 0x28, 0xe9, 0xb4, 0xfc, 0x39, 0xbf, 0x27, 0xb0, 0xa1, 0xcc, 0xe4, 0x32, 0xd9, 0xca,
	0x12, 0x93, 0x81, 0x32, 0x93, 0x3a, 0xd8, 0xac, 0x33, 0x5f, 0x27, 0xfb, 0x6f, 0xd9, 0x9d, 0x7d,
	0xbe, 0xd2, 0xd9, 0x2c, 0x59, 0x63, 0xc9, 0x9d, 0xd5, 0xc1, 0x2e, 0x12, 0x58, 0x8b, 0x9d, 0xa9,
	0xa1, 0xa0, 0xff, 0x2f, 0x31, 0xd4, 0x6a, 0x48, 0xf1, 0x61, 0x28, 0x86, 0xcd, 0xf8, 0x4f, 0x72,
	0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x14, 0x38, 0x49, 0xe0, 0x67, 0x06, 0x00, 0x00,
}
