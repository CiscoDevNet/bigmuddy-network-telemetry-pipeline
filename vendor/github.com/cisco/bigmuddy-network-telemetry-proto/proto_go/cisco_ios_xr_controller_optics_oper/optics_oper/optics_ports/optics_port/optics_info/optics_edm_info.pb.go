// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optics_edm_info.proto

/*
Package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_optics_info is a generated protocol buffer package.

It is generated from these files:
	optics_edm_info.proto

It has these top-level messages:
	OpticsEdmInfo_KEYS
	OpticsEdmInfo
	LaneAlarmDetail
	LaneEdmAlarmInfo
	OpticsEdmLaneData
	OpticsTransceiverData
	OpticsEdmNetworkSrlgStructure
	OpticsEdmNetworkSrlgInfo
	OpticsAlarmDetail
	OpticsEdmAlarmInfo
	OtsEdmAlarmInfo
	OpticsExtParam
	OpticsExtThresholdParam
	OpticsEdmInfo_COMBINED
*/
package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_optics_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// optics transponder information
type OpticsEdmInfo_KEYS struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *OpticsEdmInfo_KEYS) Reset()                    { *m = OpticsEdmInfo_KEYS{} }
func (m *OpticsEdmInfo_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmInfo_KEYS) ProtoMessage()               {}
func (*OpticsEdmInfo_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpticsEdmInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OpticsEdmInfo struct {
	// Transport Admin State
	TransportAdminState string `protobuf:"bytes,50,opt,name=transport_admin_state,json=transportAdminState" json:"transport_admin_state,omitempty"`
	// Is Optics Present?
	OpticsPresent bool `protobuf:"varint,51,opt,name=optics_present,json=opticsPresent" json:"optics_present,omitempty"`
	// Optics type name
	OpticsType string `protobuf:"bytes,52,opt,name=optics_type,json=opticsType" json:"optics_type,omitempty"`
	// Optics module name
	OpticsModule string `protobuf:"bytes,53,opt,name=optics_module,json=opticsModule" json:"optics_module,omitempty"`
	// DWDM Carrier Band information
	DwdmCarrierBand string `protobuf:"bytes,54,opt,name=dwdm_carrier_band,json=dwdmCarrierBand" json:"dwdm_carrier_band,omitempty"`
	// Current ITU DWDM Carrier channel number
	DwdmCarrierChannel string `protobuf:"bytes,55,opt,name=dwdm_carrier_channel,json=dwdmCarrierChannel" json:"dwdm_carrier_channel,omitempty"`
	// DWDM Carrier frequency read from hw in the unit 0.01THz
	DwdmCarrierFrequency string `protobuf:"bytes,56,opt,name=dwdm_carrier_frequency,json=dwdmCarrierFrequency" json:"dwdm_carrier_frequency,omitempty"`
	// Wavelength of color optics 0.001nm
	DwdmCarrierWavelength string `protobuf:"bytes,57,opt,name=dwdm_carrier_wavelength,json=dwdmCarrierWavelength" json:"dwdm_carrier_wavelength,omitempty"`
	// Wavelength of grey optics 0.01nm
	GreyWavelength uint32 `protobuf:"varint,58,opt,name=grey_wavelength,json=greyWavelength" json:"grey_wavelength,omitempty"`
	// Rx Low threshold value in units of 0.1dBm
	RxLowThreshold int32 `protobuf:"zigzag32,59,opt,name=rx_low_threshold,json=rxLowThreshold" json:"rx_low_threshold,omitempty"`
	// Rx High threshold value in units of 0.1dBm
	RxHighThreshold int32 `protobuf:"zigzag32,60,opt,name=rx_high_threshold,json=rxHighThreshold" json:"rx_high_threshold,omitempty"`
	// LBC High threshold value in units of percentage
	LbcHighThreshold int32 `protobuf:"zigzag32,61,opt,name=lbc_high_threshold,json=lbcHighThreshold" json:"lbc_high_threshold,omitempty"`
	// Tx Low threshold value in units of 0.1dBm
	TxLowThreshold int32 `protobuf:"zigzag32,62,opt,name=tx_low_threshold,json=txLowThreshold" json:"tx_low_threshold,omitempty"`
	// Tx High threshold value in units of 0.1dBm
	TxHighThreshold int32 `protobuf:"zigzag32,63,opt,name=tx_high_threshold,json=txHighThreshold" json:"tx_high_threshold,omitempty"`
	// LBC high threshold default value in unit of 0.001mA
	LbcThHighDefault int32 `protobuf:"zigzag32,64,opt,name=lbc_th_high_default,json=lbcThHighDefault" json:"lbc_th_high_default,omitempty"`
	// LBC low threshold default value in units of 0.001mA
	LbcThLowDefault int32 `protobuf:"zigzag32,65,opt,name=lbc_th_low_default,json=lbcThLowDefault" json:"lbc_th_low_default,omitempty"`
	// Temp Low threshold value in the units 0.01 C
	TempLowThreshold int32 `protobuf:"zigzag32,66,opt,name=temp_low_threshold,json=tempLowThreshold" json:"temp_low_threshold,omitempty"`
	// Temp High threshold value in the units of 0.01 C
	TempHighThreshold int32 `protobuf:"zigzag32,67,opt,name=temp_high_threshold,json=tempHighThreshold" json:"temp_high_threshold,omitempty"`
	// Volt Low threshold value
	VoltLowThreshold int32 `protobuf:"zigzag32,68,opt,name=volt_low_threshold,json=voltLowThreshold" json:"volt_low_threshold,omitempty"`
	// Volt High threshold value
	VoltHighThreshold int32 `protobuf:"zigzag32,69,opt,name=volt_high_threshold,json=voltHighThreshold" json:"volt_high_threshold,omitempty"`
	// Chromatic Dispersion ps/nm
	Cd int32 `protobuf:"zigzag32,70,opt,name=cd" json:"cd,omitempty"`
	// Chromatic Dispersion Min ps/nm
	CdMin int32 `protobuf:"zigzag32,71,opt,name=cd_min,json=cdMin" json:"cd_min,omitempty"`
	// Chromatic Dispersion Max ps/nm
	CdMax int32 `protobuf:"zigzag32,72,opt,name=cd_max,json=cdMax" json:"cd_max,omitempty"`
	// Chromatic Dispersion low threshold ps/nm
	CdLowThreshold int32 `protobuf:"zigzag32,73,opt,name=cd_low_threshold,json=cdLowThreshold" json:"cd_low_threshold,omitempty"`
	// Chromatic Dispersion high threshold ps/nm
	CdHighThreshold int32 `protobuf:"zigzag32,74,opt,name=cd_high_threshold,json=cdHighThreshold" json:"cd_high_threshold,omitempty"`
	// OSNR low threshold in 0.01 dB
	OsnrLowThreshold string `protobuf:"bytes,75,opt,name=osnr_low_threshold,json=osnrLowThreshold" json:"osnr_low_threshold,omitempty"`
	// DGD high threshold in 0.1 ps
	DgdHighThreshold string `protobuf:"bytes,76,opt,name=dgd_high_threshold,json=dgdHighThreshold" json:"dgd_high_threshold,omitempty"`
	// Polarization Mode Dispersion 0.1ps
	PolarizationModeDispersion string `protobuf:"bytes,77,opt,name=polarization_mode_dispersion,json=polarizationModeDispersion" json:"polarization_mode_dispersion,omitempty"`
	// Second Order Polarization Mode Dispersion 0.1ps^2
	SecondOrderPolarizationModeDispersion string `protobuf:"bytes,78,opt,name=second_order_polarization_mode_dispersion,json=secondOrderPolarizationModeDispersion" json:"second_order_polarization_mode_dispersion,omitempty"`
	// Optical Signal to Noise Ratio dB
	OpticalSignalToNoiseRatio string `protobuf:"bytes,79,opt,name=optical_signal_to_noise_ratio,json=opticalSignalToNoiseRatio" json:"optical_signal_to_noise_ratio,omitempty"`
	// Polarization Dependent Loss dB
	PolarizationDependentLoss string `protobuf:"bytes,80,opt,name=polarization_dependent_loss,json=polarizationDependentLoss" json:"polarization_dependent_loss,omitempty"`
	// Polarization Change Rate rad/s
	PolarizationChangeRate string `protobuf:"bytes,81,opt,name=polarization_change_rate,json=polarizationChangeRate" json:"polarization_change_rate,omitempty"`
	// Differential Group Delay ps
	DifferentialGroupDelay string `protobuf:"bytes,82,opt,name=differential_group_delay,json=differentialGroupDelay" json:"differential_group_delay,omitempty"`
	// Phase Noise dB
	PhaseNoise string `protobuf:"bytes,83,opt,name=phase_noise,json=phaseNoise" json:"phase_noise,omitempty"`
	// PmEable or Disable
	PmEnable uint32 `protobuf:"varint,84,opt,name=pm_enable,json=pmEnable" json:"pm_enable,omitempty"`
	// Showing laser state.Either ON or OFF or unknown
	LaserState string `protobuf:"bytes,85,opt,name=laser_state,json=laserState" json:"laser_state,omitempty"`
	// Showing Current Colour of led state
	LedState string `protobuf:"bytes,86,opt,name=led_state,json=ledState" json:"led_state,omitempty"`
	// Network SRLG information
	NetworkSrlgInfo *OpticsEdmNetworkSrlgInfo `protobuf:"bytes,87,opt,name=network_srlg_info,json=networkSrlgInfo" json:"network_srlg_info,omitempty"`
	// Lane information
	LaneData []*OpticsEdmLaneData `protobuf:"bytes,88,rep,name=lane_data,json=laneData" json:"lane_data,omitempty"`
	// Optics controller state: Up, Down or Administratively Down
	ControllerState string `protobuf:"bytes,89,opt,name=controller_state,json=controllerState" json:"controller_state,omitempty"`
	// Optics form factor
	FormFactor string `protobuf:"bytes,90,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	// Optics physical type
	PhyType string `protobuf:"bytes,91,opt,name=phy_type,json=phyType" json:"phy_type,omitempty"`
	// Optics Alarm Information
	OpticsAlarmInfo *OpticsEdmAlarmInfo `protobuf:"bytes,92,opt,name=optics_alarm_info,json=opticsAlarmInfo" json:"optics_alarm_info,omitempty"`
	// Ots Alarm Information
	OtsAlarmInfo *OtsEdmAlarmInfo `protobuf:"bytes,93,opt,name=ots_alarm_info,json=otsAlarmInfo" json:"ots_alarm_info,omitempty"`
	// Receive Power in 0.01 dB
	RxPower int32 `protobuf:"zigzag32,94,opt,name=rx_power,json=rxPower" json:"rx_power,omitempty"`
	// Transmit Power in 0.01 dB
	TxPower int32 `protobuf:"zigzag32,95,opt,name=tx_power,json=txPower" json:"tx_power,omitempty"`
	// Configured Tx power value in 0.01 dB
	CfgTxPower int32 `protobuf:"zigzag32,96,opt,name=cfg_tx_power,json=cfgTxPower" json:"cfg_tx_power,omitempty"`
	// TX Power Configuration is supported or not
	CfgTxPowerConfigurable bool `protobuf:"varint,97,opt,name=cfg_tx_power_configurable,json=cfgTxPowerConfigurable" json:"cfg_tx_power_configurable,omitempty"`
	// Temperature value
	Temperature int32 `protobuf:"zigzag32,98,opt,name=temperature" json:"temperature,omitempty"`
	// Voltage value
	Voltage int32 `protobuf:"zigzag32,99,opt,name=voltage" json:"voltage,omitempty"`
	// Display Volt/Temp ?
	DisplayVoltTemp bool `protobuf:"varint,100,opt,name=display_volt_temp,json=displayVoltTemp" json:"display_volt_temp,omitempty"`
	// CD Configurable is supported or not
	CdConfigurable bool `protobuf:"varint,101,opt,name=cd_configurable,json=cdConfigurable" json:"cd_configurable,omitempty"`
	// Optics FEC
	OpticsFec string `protobuf:"bytes,102,opt,name=optics_fec,json=opticsFec" json:"optics_fec,omitempty"`
	// Showing port type
	PortType string `protobuf:"bytes,103,opt,name=port_type,json=portType" json:"port_type,omitempty"`
	// Showing port status
	PortStatus string `protobuf:"bytes,104,opt,name=port_status,json=portStatus" json:"port_status,omitempty"`
	// Rx Voa Attenuation in the unit of 0.01dBm
	RxVoaAttenuation int32 `protobuf:"zigzag32,105,opt,name=rx_voa_attenuation,json=rxVoaAttenuation" json:"rx_voa_attenuation,omitempty"`
	// Tx Voa Attenuation in the unit of 0.01dBm
	TxVoaAttenuation int32 `protobuf:"zigzag32,106,opt,name=tx_voa_attenuation,json=txVoaAttenuation" json:"tx_voa_attenuation,omitempty"`
	// Ampli Gain in the unit of 0.01dBm
	AmpliGain int32 `protobuf:"zigzag32,107,opt,name=ampli_gain,json=ampliGain" json:"ampli_gain,omitempty"`
	// Ampli Tilt in the unit of 0.01dBm
	AmpliTilt                     int32  `protobuf:"zigzag32,108,opt,name=ampli_tilt,json=ampliTilt" json:"ampli_tilt,omitempty"`
	RxPowerThConfigurable         bool   `protobuf:"varint,109,opt,name=rx_power_th_configurable,json=rxPowerThConfigurable" json:"rx_power_th_configurable,omitempty"`
	TxPowerThConfigurable         bool   `protobuf:"varint,110,opt,name=tx_power_th_configurable,json=txPowerThConfigurable" json:"tx_power_th_configurable,omitempty"`
	RxVoaAttenuationConfigVal     int32  `protobuf:"zigzag32,111,opt,name=rx_voa_attenuation_config_val,json=rxVoaAttenuationConfigVal" json:"rx_voa_attenuation_config_val,omitempty"`
	TxVoaAttenuationConfigVal     int32  `protobuf:"zigzag32,112,opt,name=tx_voa_attenuation_config_val,json=txVoaAttenuationConfigVal" json:"tx_voa_attenuation_config_val,omitempty"`
	AmpliControlModeConfigVal     string `protobuf:"bytes,113,opt,name=ampli_control_mode_config_val,json=ampliControlModeConfigVal" json:"ampli_control_mode_config_val,omitempty"`
	AmpliGainRangeConfigVal       string `protobuf:"bytes,114,opt,name=ampli_gain_range_config_val,json=ampliGainRangeConfigVal" json:"ampli_gain_range_config_val,omitempty"`
	AmpliGainConfigVal            int32  `protobuf:"zigzag32,115,opt,name=ampli_gain_config_val,json=ampliGainConfigVal" json:"ampli_gain_config_val,omitempty"`
	AmpliTiltConfigVal            int32  `protobuf:"zigzag32,116,opt,name=ampli_tilt_config_val,json=ampliTiltConfigVal" json:"ampli_tilt_config_val,omitempty"`
	AmpliChannelPowerConfigVal    int32  `protobuf:"zigzag32,117,opt,name=ampli_channel_power_config_val,json=ampliChannelPowerConfigVal" json:"ampli_channel_power_config_val,omitempty"`
	ChannelPowerMaxDeltaConfigVal int32  `protobuf:"zigzag32,118,opt,name=channel_power_max_delta_config_val,json=channelPowerMaxDeltaConfigVal" json:"channel_power_max_delta_config_val,omitempty"`
	AmpliGainThrDegLowConfigVal   int32  `protobuf:"zigzag32,119,opt,name=ampli_gain_thr_deg_low_config_val,json=ampliGainThrDegLowConfigVal" json:"ampli_gain_thr_deg_low_config_val,omitempty"`
	AmpliGainThrDegHighConfigVal  int32  `protobuf:"zigzag32,120,opt,name=ampli_gain_thr_deg_high_config_val,json=ampliGainThrDegHighConfigVal" json:"ampli_gain_thr_deg_high_config_val,omitempty"`
	OsriConfigVal                 bool   `protobuf:"varint,121,opt,name=osri_config_val,json=osriConfigVal" json:"osri_config_val,omitempty"`
	SafetyControlModeConfigVal    string `protobuf:"bytes,122,opt,name=safety_control_mode_config_val,json=safetyControlModeConfigVal" json:"safety_control_mode_config_val,omitempty"`
	// Total Receive Power for Multi_Lane Optics in dBm
	TotalRxPower int32 `protobuf:"zigzag32,123,opt,name=total_rx_power,json=totalRxPower" json:"total_rx_power,omitempty"`
	// Total Transmit Power for Multi_Lane Optics in dBm
	TotalTxPower int32 `protobuf:"zigzag32,124,opt,name=total_tx_power,json=totalTxPower" json:"total_tx_power,omitempty"`
	// Transceiver Vendor Details
	TransceiverInfo *OpticsTransceiverData `protobuf:"bytes,125,opt,name=transceiver_info,json=transceiverInfo" json:"transceiver_info,omitempty"`
	// Is BO configured ?
	IsBoConfigured bool `protobuf:"varint,126,opt,name=is_bo_configured,json=isBoConfigured" json:"is_bo_configured,omitempty"`
	// Are the Extended Parameters Valid ?
	IsExtParamValid bool `protobuf:"varint,127,opt,name=is_ext_param_valid,json=isExtParamValid" json:"is_ext_param_valid,omitempty"`
	// Extended optics parameters
	ExtParamVal *OpticsExtParam `protobuf:"bytes,128,opt,name=ext_param_val,json=extParamVal" json:"ext_param_val,omitempty"`
	// Extended optics parameters threshold values
	ExtParamThresholdVal *OpticsExtThresholdParam `protobuf:"bytes,129,opt,name=ext_param_threshold_val,json=extParamThresholdVal" json:"ext_param_threshold_val,omitempty"`
	// Are there any alarms ?
	AlarmDetected bool `protobuf:"varint,130,opt,name=alarm_detected,json=alarmDetected" json:"alarm_detected,omitempty"`
	// Rx Low Warning threshold value in units of 0.1dBm
	RxLowWarningThreshold int32 `protobuf:"zigzag32,131,opt,name=rx_low_warning_threshold,json=rxLowWarningThreshold" json:"rx_low_warning_threshold,omitempty"`
	// Rx High Warning threshold value in units of 0.1dBm
	RxHighWarningThreshold int32 `protobuf:"zigzag32,132,opt,name=rx_high_warning_threshold,json=rxHighWarningThreshold" json:"rx_high_warning_threshold,omitempty"`
	// Tx Low Warning threshold value in units of 0.1dBm
	TxLowWarningThreshold int32 `protobuf:"zigzag32,133,opt,name=tx_low_warning_threshold,json=txLowWarningThreshold" json:"tx_low_warning_threshold,omitempty"`
	// Tx High Warning threshold value in units of 0.1dBm
	TxHighWarningThreshold int32 `protobuf:"zigzag32,134,opt,name=tx_high_warning_threshold,json=txHighWarningThreshold" json:"tx_high_warning_threshold,omitempty"`
	// LBC high Warning threshold default value in unit of 0.001mA
	LbcThHighWarningDefault int32 `protobuf:"zigzag32,135,opt,name=lbc_th_high_warning_default,json=lbcThHighWarningDefault" json:"lbc_th_high_warning_default,omitempty"`
	// LBC low warning threshold default value in units of 0.001mA
	LbcThLowWarningDefault int32 `protobuf:"zigzag32,136,opt,name=lbc_th_low_warning_default,json=lbcThLowWarningDefault" json:"lbc_th_low_warning_default,omitempty"`
	// Temp Low warning threshold value in the units 0.01 C
	TempLowWarningThreshold int32 `protobuf:"zigzag32,137,opt,name=temp_low_warning_threshold,json=tempLowWarningThreshold" json:"temp_low_warning_threshold,omitempty"`
	// Temp High warning threshold value in the units of 0.01 C
	TempHighWarningThreshold int32 `protobuf:"zigzag32,138,opt,name=temp_high_warning_threshold,json=tempHighWarningThreshold" json:"temp_high_warning_threshold,omitempty"`
	// Volt Low warning threshold value
	VoltLowWarningThreshold int32 `protobuf:"zigzag32,139,opt,name=volt_low_warning_threshold,json=voltLowWarningThreshold" json:"volt_low_warning_threshold,omitempty"`
	// Volt High warning threshold value
	VoltHighWarningThreshold int32 `protobuf:"zigzag32,140,opt,name=volt_high_warning_threshold,json=voltHighWarningThreshold" json:"volt_high_warning_threshold,omitempty"`
}

func (m *OpticsEdmInfo) Reset()                    { *m = OpticsEdmInfo{} }
func (m *OpticsEdmInfo) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmInfo) ProtoMessage()               {}
func (*OpticsEdmInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpticsEdmInfo) GetTransportAdminState() string {
	if m != nil {
		return m.TransportAdminState
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsPresent() bool {
	if m != nil {
		return m.OpticsPresent
	}
	return false
}

func (m *OpticsEdmInfo) GetOpticsType() string {
	if m != nil {
		return m.OpticsType
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsModule() string {
	if m != nil {
		return m.OpticsModule
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierBand() string {
	if m != nil {
		return m.DwdmCarrierBand
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierChannel() string {
	if m != nil {
		return m.DwdmCarrierChannel
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierFrequency() string {
	if m != nil {
		return m.DwdmCarrierFrequency
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierWavelength() string {
	if m != nil {
		return m.DwdmCarrierWavelength
	}
	return ""
}

func (m *OpticsEdmInfo) GetGreyWavelength() uint32 {
	if m != nil {
		return m.GreyWavelength
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxLowThreshold() int32 {
	if m != nil {
		return m.RxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxHighThreshold() int32 {
	if m != nil {
		return m.RxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcHighThreshold() int32 {
	if m != nil {
		return m.LbcHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxLowThreshold() int32 {
	if m != nil {
		return m.TxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxHighThreshold() int32 {
	if m != nil {
		return m.TxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThHighDefault() int32 {
	if m != nil {
		return m.LbcThHighDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThLowDefault() int32 {
	if m != nil {
		return m.LbcThLowDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempLowThreshold() int32 {
	if m != nil {
		return m.TempLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempHighThreshold() int32 {
	if m != nil {
		return m.TempHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltLowThreshold() int32 {
	if m != nil {
		return m.VoltLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltHighThreshold() int32 {
	if m != nil {
		return m.VoltHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetCd() int32 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdMin() int32 {
	if m != nil {
		return m.CdMin
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdMax() int32 {
	if m != nil {
		return m.CdMax
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdLowThreshold() int32 {
	if m != nil {
		return m.CdLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdHighThreshold() int32 {
	if m != nil {
		return m.CdHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetOsnrLowThreshold() string {
	if m != nil {
		return m.OsnrLowThreshold
	}
	return ""
}

func (m *OpticsEdmInfo) GetDgdHighThreshold() string {
	if m != nil {
		return m.DgdHighThreshold
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationModeDispersion() string {
	if m != nil {
		return m.PolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo) GetSecondOrderPolarizationModeDispersion() string {
	if m != nil {
		return m.SecondOrderPolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticalSignalToNoiseRatio() string {
	if m != nil {
		return m.OpticalSignalToNoiseRatio
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationDependentLoss() string {
	if m != nil {
		return m.PolarizationDependentLoss
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationChangeRate() string {
	if m != nil {
		return m.PolarizationChangeRate
	}
	return ""
}

func (m *OpticsEdmInfo) GetDifferentialGroupDelay() string {
	if m != nil {
		return m.DifferentialGroupDelay
	}
	return ""
}

func (m *OpticsEdmInfo) GetPhaseNoise() string {
	if m != nil {
		return m.PhaseNoise
	}
	return ""
}

func (m *OpticsEdmInfo) GetPmEnable() uint32 {
	if m != nil {
		return m.PmEnable
	}
	return 0
}

func (m *OpticsEdmInfo) GetLaserState() string {
	if m != nil {
		return m.LaserState
	}
	return ""
}

func (m *OpticsEdmInfo) GetLedState() string {
	if m != nil {
		return m.LedState
	}
	return ""
}

func (m *OpticsEdmInfo) GetNetworkSrlgInfo() *OpticsEdmNetworkSrlgInfo {
	if m != nil {
		return m.NetworkSrlgInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetLaneData() []*OpticsEdmLaneData {
	if m != nil {
		return m.LaneData
	}
	return nil
}

func (m *OpticsEdmInfo) GetControllerState() string {
	if m != nil {
		return m.ControllerState
	}
	return ""
}

func (m *OpticsEdmInfo) GetFormFactor() string {
	if m != nil {
		return m.FormFactor
	}
	return ""
}

func (m *OpticsEdmInfo) GetPhyType() string {
	if m != nil {
		return m.PhyType
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsAlarmInfo() *OpticsEdmAlarmInfo {
	if m != nil {
		return m.OpticsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetOtsAlarmInfo() *OtsEdmAlarmInfo {
	if m != nil {
		return m.OtsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetRxPower() int32 {
	if m != nil {
		return m.RxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetCfgTxPower() int32 {
	if m != nil {
		return m.CfgTxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetCfgTxPowerConfigurable() bool {
	if m != nil {
		return m.CfgTxPowerConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltage() int32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *OpticsEdmInfo) GetDisplayVoltTemp() bool {
	if m != nil {
		return m.DisplayVoltTemp
	}
	return false
}

func (m *OpticsEdmInfo) GetCdConfigurable() bool {
	if m != nil {
		return m.CdConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetOpticsFec() string {
	if m != nil {
		return m.OpticsFec
	}
	return ""
}

func (m *OpticsEdmInfo) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *OpticsEdmInfo) GetPortStatus() string {
	if m != nil {
		return m.PortStatus
	}
	return ""
}

func (m *OpticsEdmInfo) GetRxVoaAttenuation() int32 {
	if m != nil {
		return m.RxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxVoaAttenuation() int32 {
	if m != nil {
		return m.TxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGain() int32 {
	if m != nil {
		return m.AmpliGain
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliTilt() int32 {
	if m != nil {
		return m.AmpliTilt
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxPowerThConfigurable() bool {
	if m != nil {
		return m.RxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetTxPowerThConfigurable() bool {
	if m != nil {
		return m.TxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetRxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.RxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.TxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliControlModeConfigVal() string {
	if m != nil {
		return m.AmpliControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetAmpliGainRangeConfigVal() string {
	if m != nil {
		return m.AmpliGainRangeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetAmpliGainConfigVal() int32 {
	if m != nil {
		return m.AmpliGainConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliTiltConfigVal() int32 {
	if m != nil {
		return m.AmpliTiltConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliChannelPowerConfigVal() int32 {
	if m != nil {
		return m.AmpliChannelPowerConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetChannelPowerMaxDeltaConfigVal() int32 {
	if m != nil {
		return m.ChannelPowerMaxDeltaConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGainThrDegLowConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegLowConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGainThrDegHighConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegHighConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetOsriConfigVal() bool {
	if m != nil {
		return m.OsriConfigVal
	}
	return false
}

func (m *OpticsEdmInfo) GetSafetyControlModeConfigVal() string {
	if m != nil {
		return m.SafetyControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetTotalRxPower() int32 {
	if m != nil {
		return m.TotalRxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetTotalTxPower() int32 {
	if m != nil {
		return m.TotalTxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetTransceiverInfo() *OpticsTransceiverData {
	if m != nil {
		return m.TransceiverInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetIsBoConfigured() bool {
	if m != nil {
		return m.IsBoConfigured
	}
	return false
}

func (m *OpticsEdmInfo) GetIsExtParamValid() bool {
	if m != nil {
		return m.IsExtParamValid
	}
	return false
}

func (m *OpticsEdmInfo) GetExtParamVal() *OpticsExtParam {
	if m != nil {
		return m.ExtParamVal
	}
	return nil
}

func (m *OpticsEdmInfo) GetExtParamThresholdVal() *OpticsExtThresholdParam {
	if m != nil {
		return m.ExtParamThresholdVal
	}
	return nil
}

func (m *OpticsEdmInfo) GetAlarmDetected() bool {
	if m != nil {
		return m.AlarmDetected
	}
	return false
}

func (m *OpticsEdmInfo) GetRxLowWarningThreshold() int32 {
	if m != nil {
		return m.RxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxHighWarningThreshold() int32 {
	if m != nil {
		return m.RxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxLowWarningThreshold() int32 {
	if m != nil {
		return m.TxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxHighWarningThreshold() int32 {
	if m != nil {
		return m.TxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThHighWarningDefault() int32 {
	if m != nil {
		return m.LbcThHighWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThLowWarningDefault() int32 {
	if m != nil {
		return m.LbcThLowWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempLowWarningThreshold() int32 {
	if m != nil {
		return m.TempLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempHighWarningThreshold() int32 {
	if m != nil {
		return m.TempHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltLowWarningThreshold() int32 {
	if m != nil {
		return m.VoltLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltHighWarningThreshold() int32 {
	if m != nil {
		return m.VoltHighWarningThreshold
	}
	return 0
}

//  Lane Alarm Detail
type LaneAlarmDetail struct {
	// Is defect detected?
	IsDetected bool `protobuf:"varint,1,opt,name=is_detected,json=isDetected" json:"is_detected,omitempty"`
	// Alarm counter
	Counter uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
}

func (m *LaneAlarmDetail) Reset()                    { *m = LaneAlarmDetail{} }
func (m *LaneAlarmDetail) String() string            { return proto.CompactTextString(m) }
func (*LaneAlarmDetail) ProtoMessage()               {}
func (*LaneAlarmDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LaneAlarmDetail) GetIsDetected() bool {
	if m != nil {
		return m.IsDetected
	}
	return false
}

func (m *LaneAlarmDetail) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

//  Lane Information Detail
type LaneEdmAlarmInfo struct {
	// High Rx Power
	HighRxPower *LaneAlarmDetail `protobuf:"bytes,1,opt,name=high_rx_power,json=highRxPower" json:"high_rx_power,omitempty"`
	// Low Rx Power
	LowRxPower *LaneAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower" json:"low_rx_power,omitempty"`
	// High Tx Power
	HighTxPower *LaneAlarmDetail `protobuf:"bytes,3,opt,name=high_tx_power,json=highTxPower" json:"high_tx_power,omitempty"`
	// Low Tx Power
	LowTxPower *LaneAlarmDetail `protobuf:"bytes,4,opt,name=low_tx_power,json=lowTxPower" json:"low_tx_power,omitempty"`
	// High laser bias current
	HighLbc *LaneAlarmDetail `protobuf:"bytes,5,opt,name=high_lbc,json=highLbc" json:"high_lbc,omitempty"`
}

func (m *LaneEdmAlarmInfo) Reset()                    { *m = LaneEdmAlarmInfo{} }
func (m *LaneEdmAlarmInfo) String() string            { return proto.CompactTextString(m) }
func (*LaneEdmAlarmInfo) ProtoMessage()               {}
func (*LaneEdmAlarmInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LaneEdmAlarmInfo) GetHighRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighLbc() *LaneAlarmDetail {
	if m != nil {
		return m.HighLbc
	}
	return nil
}

// Grey lane data
type OpticsEdmLaneData struct {
	// The index number of the lane
	LaneIndex uint32 `protobuf:"varint,1,opt,name=lane_index,json=laneIndex" json:"lane_index,omitempty"`
	// Laser Bias Current in units of 0.01 percentage
	LaserBiasCurrentPercent uint32 `protobuf:"varint,2,opt,name=laser_bias_current_percent,json=laserBiasCurrentPercent" json:"laser_bias_current_percent,omitempty"`
	// Laser Bias Current in units of 0.01mA
	LaserBiasCurrentMilliAmps uint32 `protobuf:"varint,3,opt,name=laser_bias_current_milli_amps,json=laserBiasCurrentMilliAmps" json:"laser_bias_current_milli_amps,omitempty"`
	// Transmit power in the unit of 0.01dBm
	TransmitPower int32 `protobuf:"zigzag32,4,opt,name=transmit_power,json=transmitPower" json:"transmit_power,omitempty"`
	// Transponder receive power in the unit of 0.01dBm
	ReceivePower int32 `protobuf:"zigzag32,5,opt,name=receive_power,json=receivePower" json:"receive_power,omitempty"`
	// Transponder receive signal power in the unit of 0.01dBm
	ReceiveSignalPower int32 `protobuf:"zigzag32,6,opt,name=receive_signal_power,json=receiveSignalPower" json:"receive_signal_power,omitempty"`
	// Transmit Signal power in the unit of 0.01dBm
	TransmitSignalPower int32 `protobuf:"zigzag32,7,opt,name=transmit_signal_power,json=transmitSignalPower" json:"transmit_signal_power,omitempty"`
	// Output frequency read from hw in the unit 0.01THz
	OutputFrequency int32 `protobuf:"zigzag32,8,opt,name=output_frequency,json=outputFrequency" json:"output_frequency,omitempty"`
	// Lane Alarm Information
	LaneAlarmInfo *LaneEdmAlarmInfo `protobuf:"bytes,9,opt,name=lane_alarm_info,json=laneAlarmInfo" json:"lane_alarm_info,omitempty"`
}

func (m *OpticsEdmLaneData) Reset()                    { *m = OpticsEdmLaneData{} }
func (m *OpticsEdmLaneData) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmLaneData) ProtoMessage()               {}
func (*OpticsEdmLaneData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OpticsEdmLaneData) GetLaneIndex() uint32 {
	if m != nil {
		return m.LaneIndex
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentPercent() uint32 {
	if m != nil {
		return m.LaserBiasCurrentPercent
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentMilliAmps() uint32 {
	if m != nil {
		return m.LaserBiasCurrentMilliAmps
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitPower() int32 {
	if m != nil {
		return m.TransmitPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceivePower() int32 {
	if m != nil {
		return m.ReceivePower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceiveSignalPower() int32 {
	if m != nil {
		return m.ReceiveSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitSignalPower() int32 {
	if m != nil {
		return m.TransmitSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetOutputFrequency() int32 {
	if m != nil {
		return m.OutputFrequency
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaneAlarmInfo() *LaneEdmAlarmInfo {
	if m != nil {
		return m.LaneAlarmInfo
	}
	return nil
}

// Optics Transceiver Details
type OpticsTransceiverData struct {
	// Vendor Information
	VendorInfo string `protobuf:"bytes,1,opt,name=vendor_info,json=vendorInfo" json:"vendor_info,omitempty"`
	// Date in Transceiver
	Date string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
	// Transceiver vendors revision number
	OpticsVendorRev string `protobuf:"bytes,3,opt,name=optics_vendor_rev,json=opticsVendorRev" json:"optics_vendor_rev,omitempty"`
	// Transceiver serial number
	OpticsSerialNo string `protobuf:"bytes,4,opt,name=optics_serial_no,json=opticsSerialNo" json:"optics_serial_no,omitempty"`
	// Transceiver vendors part number
	OpticsVendorPart string `protobuf:"bytes,5,opt,name=optics_vendor_part,json=opticsVendorPart" json:"optics_vendor_part,omitempty"`
	// Connector type
	ConnectorType string `protobuf:"bytes,6,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	// Otn Application Code
	OtnApplicationCode string `protobuf:"bytes,7,opt,name=otn_application_code,json=otnApplicationCode" json:"otn_application_code,omitempty"`
	// Sonet Application Code
	SonetApplicationCode string `protobuf:"bytes,8,opt,name=sonet_application_code,json=sonetApplicationCode" json:"sonet_application_code,omitempty"`
	// Ethernet Compliance Code
	EthernetComplianceCode string `protobuf:"bytes,9,opt,name=ethernet_compliance_code,json=ethernetComplianceCode" json:"ethernet_compliance_code,omitempty"`
	// Internal Temperature in C
	InternalTemperature int32 `protobuf:"zigzag32,10,opt,name=internal_temperature,json=internalTemperature" json:"internal_temperature,omitempty"`
}

func (m *OpticsTransceiverData) Reset()                    { *m = OpticsTransceiverData{} }
func (m *OpticsTransceiverData) String() string            { return proto.CompactTextString(m) }
func (*OpticsTransceiverData) ProtoMessage()               {}
func (*OpticsTransceiverData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OpticsTransceiverData) GetVendorInfo() string {
	if m != nil {
		return m.VendorInfo
	}
	return ""
}

func (m *OpticsTransceiverData) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsVendorRev() string {
	if m != nil {
		return m.OpticsVendorRev
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsSerialNo() string {
	if m != nil {
		return m.OpticsSerialNo
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsVendorPart() string {
	if m != nil {
		return m.OpticsVendorPart
	}
	return ""
}

func (m *OpticsTransceiverData) GetConnectorType() string {
	if m != nil {
		return m.ConnectorType
	}
	return ""
}

func (m *OpticsTransceiverData) GetOtnApplicationCode() string {
	if m != nil {
		return m.OtnApplicationCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetSonetApplicationCode() string {
	if m != nil {
		return m.SonetApplicationCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetEthernetComplianceCode() string {
	if m != nil {
		return m.EthernetComplianceCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetInternalTemperature() int32 {
	if m != nil {
		return m.InternalTemperature
	}
	return 0
}

// Network SRLG Information
type OpticsEdmNetworkSrlgStructure struct {
	// Array to maintain set number
	SetNumber uint32 `protobuf:"varint,1,opt,name=set_number,json=setNumber" json:"set_number,omitempty"`
	// Network Srlg
	NetworkSrlg []uint32 `protobuf:"varint,2,rep,packed,name=network_srlg,json=networkSrlg" json:"network_srlg,omitempty"`
}

func (m *OpticsEdmNetworkSrlgStructure) Reset()                    { *m = OpticsEdmNetworkSrlgStructure{} }
func (m *OpticsEdmNetworkSrlgStructure) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmNetworkSrlgStructure) ProtoMessage()               {}
func (*OpticsEdmNetworkSrlgStructure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpticsEdmNetworkSrlgStructure) GetSetNumber() uint32 {
	if m != nil {
		return m.SetNumber
	}
	return 0
}

func (m *OpticsEdmNetworkSrlgStructure) GetNetworkSrlg() []uint32 {
	if m != nil {
		return m.NetworkSrlg
	}
	return nil
}

// Network SRLG Information Array
type OpticsEdmNetworkSrlgInfo struct {
	// Network Srlg Array
	NetworkSrlgArray []*OpticsEdmNetworkSrlgStructure `protobuf:"bytes,1,rep,name=network_srlg_array,json=networkSrlgArray" json:"network_srlg_array,omitempty"`
}

func (m *OpticsEdmNetworkSrlgInfo) Reset()                    { *m = OpticsEdmNetworkSrlgInfo{} }
func (m *OpticsEdmNetworkSrlgInfo) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmNetworkSrlgInfo) ProtoMessage()               {}
func (*OpticsEdmNetworkSrlgInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OpticsEdmNetworkSrlgInfo) GetNetworkSrlgArray() []*OpticsEdmNetworkSrlgStructure {
	if m != nil {
		return m.NetworkSrlgArray
	}
	return nil
}

//  Optics Alarm Detail
type OpticsAlarmDetail struct {
	// Is defect detected?
	IsDetected bool `protobuf:"varint,1,opt,name=is_detected,json=isDetected" json:"is_detected,omitempty"`
	// Alarm counter
	Counter uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
}

func (m *OpticsAlarmDetail) Reset()                    { *m = OpticsAlarmDetail{} }
func (m *OpticsAlarmDetail) String() string            { return proto.CompactTextString(m) }
func (*OpticsAlarmDetail) ProtoMessage()               {}
func (*OpticsAlarmDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OpticsAlarmDetail) GetIsDetected() bool {
	if m != nil {
		return m.IsDetected
	}
	return false
}

func (m *OpticsAlarmDetail) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

// Optics Alarm Information
type OpticsEdmAlarmInfo struct {
	// High Rx Power in uints of 0.1 dBm
	HighRxPower *OpticsAlarmDetail `protobuf:"bytes,1,opt,name=high_rx_power,json=highRxPower" json:"high_rx_power,omitempty"`
	// Low Rx Power in uints of 0.1 dBm
	LowRxPower *OpticsAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower" json:"low_rx_power,omitempty"`
	// High Tx Power in uints of 0.1 dBm
	HighTxPower *OpticsAlarmDetail `protobuf:"bytes,3,opt,name=high_tx_power,json=highTxPower" json:"high_tx_power,omitempty"`
	// Low Tx Power in uints of 0.1 dBm
	LowTxPower *OpticsAlarmDetail `protobuf:"bytes,4,opt,name=low_tx_power,json=lowTxPower" json:"low_tx_power,omitempty"`
	// High laser bias current in units of percentage
	HighLbc *OpticsAlarmDetail `protobuf:"bytes,5,opt,name=high_lbc,json=highLbc" json:"high_lbc,omitempty"`
	// High Rx1 Power in uints of 0.1 dBm
	HighRx1Power *OpticsAlarmDetail `protobuf:"bytes,6,opt,name=high_rx1_power,json=highRx1Power" json:"high_rx1_power,omitempty"`
	// High Rx2 Power in uints of 0.1 dBm
	HighRx2Power *OpticsAlarmDetail `protobuf:"bytes,7,opt,name=high_rx2_power,json=highRx2Power" json:"high_rx2_power,omitempty"`
	// High Rx3 Power in uints of 0.1 dBm
	HighRx3Power *OpticsAlarmDetail `protobuf:"bytes,8,opt,name=high_rx3_power,json=highRx3Power" json:"high_rx3_power,omitempty"`
	// High Rx4 Power in uints of 0.1 dBm
	HighRx4Power *OpticsAlarmDetail `protobuf:"bytes,9,opt,name=high_rx4_power,json=highRx4Power" json:"high_rx4_power,omitempty"`
	// Low Rx1 Power in uints of 0.1 dBm
	LowRx1Power *OpticsAlarmDetail `protobuf:"bytes,10,opt,name=low_rx1_power,json=lowRx1Power" json:"low_rx1_power,omitempty"`
	// Low Rx2 Power in uints of 0.1 dBm
	LowRx2Power *OpticsAlarmDetail `protobuf:"bytes,11,opt,name=low_rx2_power,json=lowRx2Power" json:"low_rx2_power,omitempty"`
	// Low Rx3 Power in uints of 0.1 dBm
	LowRx3Power *OpticsAlarmDetail `protobuf:"bytes,12,opt,name=low_rx3_power,json=lowRx3Power" json:"low_rx3_power,omitempty"`
	// Low Rx4 Power in uints of 0.1 dBm
	LowRx4Power *OpticsAlarmDetail `protobuf:"bytes,13,opt,name=low_rx4_power,json=lowRx4Power" json:"low_rx4_power,omitempty"`
	// High Tx1 Power in uints of 0.1 dBm
	HighTx1Power *OpticsAlarmDetail `protobuf:"bytes,14,opt,name=high_tx1_power,json=highTx1Power" json:"high_tx1_power,omitempty"`
	// High Tx2 Power in uints of 0.1 dBm
	HighTx2Power *OpticsAlarmDetail `protobuf:"bytes,15,opt,name=high_tx2_power,json=highTx2Power" json:"high_tx2_power,omitempty"`
	// High Tx3 Power in uints of 0.1 dBm
	HighTx3Power *OpticsAlarmDetail `protobuf:"bytes,16,opt,name=high_tx3_power,json=highTx3Power" json:"high_tx3_power,omitempty"`
	// High Tx4 Power in uints of 0.1 dBm
	HighTx4Power *OpticsAlarmDetail `protobuf:"bytes,17,opt,name=high_tx4_power,json=highTx4Power" json:"high_tx4_power,omitempty"`
	// Low Tx1 Power in uints of 0.1 dBm
	LowTx1Power *OpticsAlarmDetail `protobuf:"bytes,18,opt,name=low_tx1_power,json=lowTx1Power" json:"low_tx1_power,omitempty"`
	// Low Tx2 Power in uints of 0.1 dBm
	LowTx2Power *OpticsAlarmDetail `protobuf:"bytes,19,opt,name=low_tx2_power,json=lowTx2Power" json:"low_tx2_power,omitempty"`
	// Low Tx3 Power in uints of 0.1 dBm
	LowTx3Power *OpticsAlarmDetail `protobuf:"bytes,20,opt,name=low_tx3_power,json=lowTx3Power" json:"low_tx3_power,omitempty"`
	// Low Tx4 Power in uints of 0.1 dBm
	LowTx4Power *OpticsAlarmDetail `protobuf:"bytes,21,opt,name=low_tx4_power,json=lowTx4Power" json:"low_tx4_power,omitempty"`
	// High Tx1 laser bias current in units of percentage
	HighTx1Lbc *OpticsAlarmDetail `protobuf:"bytes,22,opt,name=high_tx1_lbc,json=highTx1Lbc" json:"high_tx1_lbc,omitempty"`
	// High Tx2 laser bias current in units of percentage
	HighTx2Lbc *OpticsAlarmDetail `protobuf:"bytes,23,opt,name=high_tx2_lbc,json=highTx2Lbc" json:"high_tx2_lbc,omitempty"`
	// High Tx3 laser bias current in units of percentage
	HighTx3Lbc *OpticsAlarmDetail `protobuf:"bytes,24,opt,name=high_tx3_lbc,json=highTx3Lbc" json:"high_tx3_lbc,omitempty"`
	// High Tx4 laser bias current in units of percentage
	HighTx4Lbc *OpticsAlarmDetail `protobuf:"bytes,25,opt,name=high_tx4_lbc,json=highTx4Lbc" json:"high_tx4_lbc,omitempty"`
	// Low Tx1 laser bias current in units of percentage
	LowTx1Lbc *OpticsAlarmDetail `protobuf:"bytes,26,opt,name=low_tx1_lbc,json=lowTx1Lbc" json:"low_tx1_lbc,omitempty"`
	// Low Tx2 laser bias current in units of percentage
	LowTx2Lbc *OpticsAlarmDetail `protobuf:"bytes,27,opt,name=low_tx2_lbc,json=lowTx2Lbc" json:"low_tx2_lbc,omitempty"`
	// Low Tx3 laser bias current in units of percentage
	LowTx3Lbc *OpticsAlarmDetail `protobuf:"bytes,28,opt,name=low_tx3_lbc,json=lowTx3Lbc" json:"low_tx3_lbc,omitempty"`
	// Low Tx4 laser bias current in units of percentage
	LowTx4Lbc *OpticsAlarmDetail `protobuf:"bytes,29,opt,name=low_tx4_lbc,json=lowTx4Lbc" json:"low_tx4_lbc,omitempty"`
	// RX LOS
	RxLos *OpticsAlarmDetail `protobuf:"bytes,30,opt,name=rx_los,json=rxLos" json:"rx_los,omitempty"`
	// TX LOS
	TxLos *OpticsAlarmDetail `protobuf:"bytes,31,opt,name=tx_los,json=txLos" json:"tx_los,omitempty"`
	// RX LOL
	RxLol *OpticsAlarmDetail `protobuf:"bytes,32,opt,name=rx_lol,json=rxLol" json:"rx_lol,omitempty"`
	// TX LOL
	TxLol *OpticsAlarmDetail `protobuf:"bytes,33,opt,name=tx_lol,json=txLol" json:"tx_lol,omitempty"`
	// TX Fault
	TxFault *OpticsAlarmDetail `protobuf:"bytes,34,opt,name=tx_fault,json=txFault" json:"tx_fault,omitempty"`
	// HI_DGD
	Hidgd *OpticsAlarmDetail `protobuf:"bytes,35,opt,name=hidgd" json:"hidgd,omitempty"`
	// OOR_CD
	Oorcd *OpticsAlarmDetail `protobuf:"bytes,36,opt,name=oorcd" json:"oorcd,omitempty"`
	// OSNR
	Osnr *OpticsAlarmDetail `protobuf:"bytes,37,opt,name=osnr" json:"osnr,omitempty"`
	// WVL_OOL
	Wvlool *OpticsAlarmDetail `protobuf:"bytes,38,opt,name=wvlool" json:"wvlool,omitempty"`
	// MEA
	Mea *OpticsAlarmDetail `protobuf:"bytes,39,opt,name=mea" json:"mea,omitempty"`
	// IMPROPER_REM
	ImpRemoval *OpticsAlarmDetail `protobuf:"bytes,40,opt,name=imp_removal,json=impRemoval" json:"imp_removal,omitempty"`
	// Rx LOC
	RxLoc *OpticsAlarmDetail `protobuf:"bytes,41,opt,name=rx_loc,json=rxLoc" json:"rx_loc,omitempty"`
	// Ampli Gain Deg Low
	AmpGainDegLow *OpticsAlarmDetail `protobuf:"bytes,42,opt,name=amp_gain_deg_low,json=ampGainDegLow" json:"amp_gain_deg_low,omitempty"`
	// Ampli Gain Deg High
	AmpGainDegHigh *OpticsAlarmDetail `protobuf:"bytes,43,opt,name=amp_gain_deg_high,json=ampGainDegHigh" json:"amp_gain_deg_high,omitempty"`
}

func (m *OpticsEdmAlarmInfo) Reset()                    { *m = OpticsEdmAlarmInfo{} }
func (m *OpticsEdmAlarmInfo) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmAlarmInfo) ProtoMessage()               {}
func (*OpticsEdmAlarmInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *OpticsEdmAlarmInfo) GetHighRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighLbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighLbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx1Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx1Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx2Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx2Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx3Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx3Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx4Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx4Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx1Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx1Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx2Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx2Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx3Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx3Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx4Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx4Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLos() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLos
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxLos() *OpticsAlarmDetail {
	if m != nil {
		return m.TxLos
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLol() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLol
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxLol() *OpticsAlarmDetail {
	if m != nil {
		return m.TxLol
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxFault() *OpticsAlarmDetail {
	if m != nil {
		return m.TxFault
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHidgd() *OpticsAlarmDetail {
	if m != nil {
		return m.Hidgd
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetOorcd() *OpticsAlarmDetail {
	if m != nil {
		return m.Oorcd
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetOsnr() *OpticsAlarmDetail {
	if m != nil {
		return m.Osnr
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetWvlool() *OpticsAlarmDetail {
	if m != nil {
		return m.Wvlool
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetMea() *OpticsAlarmDetail {
	if m != nil {
		return m.Mea
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetImpRemoval() *OpticsAlarmDetail {
	if m != nil {
		return m.ImpRemoval
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLoc() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLoc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetAmpGainDegLow() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegLow
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetAmpGainDegHigh() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegHigh
	}
	return nil
}

// Ots Alarm Information
type OtsEdmAlarmInfo struct {
	// Low Tx Power in uints of 0.1 dBm
	LowTxPower *OpticsAlarmDetail `protobuf:"bytes,1,opt,name=low_tx_power,json=lowTxPower" json:"low_tx_power,omitempty"`
	// Low Rx Power in uints of 0.1 dBm
	LowRxPower *OpticsAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower" json:"low_rx_power,omitempty"`
	// Rx LOS_P
	RxLosP *OpticsAlarmDetail `protobuf:"bytes,3,opt,name=rx_los_p,json=rxLosP" json:"rx_los_p,omitempty"`
	// Rx LOC
	RxLoc *OpticsAlarmDetail `protobuf:"bytes,4,opt,name=rx_loc,json=rxLoc" json:"rx_loc,omitempty"`
	// Ampli Gain Deg Low
	AmpGainDegLow *OpticsAlarmDetail `protobuf:"bytes,5,opt,name=amp_gain_deg_low,json=ampGainDegLow" json:"amp_gain_deg_low,omitempty"`
	// Ampli Gain Deg High
	AmpGainDegHigh *OpticsAlarmDetail `protobuf:"bytes,6,opt,name=amp_gain_deg_high,json=ampGainDegHigh" json:"amp_gain_deg_high,omitempty"`
	// Auto Laser Shut
	AutoLaserShut *OpticsAlarmDetail `protobuf:"bytes,7,opt,name=auto_laser_shut,json=autoLaserShut" json:"auto_laser_shut,omitempty"`
	// Auto Power Red
	AutoPowerRed *OpticsAlarmDetail `protobuf:"bytes,8,opt,name=auto_power_red,json=autoPowerRed" json:"auto_power_red,omitempty"`
	// Auto Ampli Ctrl Disabled
	AutoAmpliCtrlDisabled *OpticsAlarmDetail `protobuf:"bytes,9,opt,name=auto_ampli_ctrl_disabled,json=autoAmpliCtrlDisabled" json:"auto_ampli_ctrl_disabled,omitempty"`
	// Auto Ampli Ctrl Config Mismatch
	AutoAmpliCtrlConfigMismatch *OpticsAlarmDetail `protobuf:"bytes,10,opt,name=auto_ampli_ctrl_config_mismatch,json=autoAmpliCtrlConfigMismatch" json:"auto_ampli_ctrl_config_mismatch,omitempty"`
	// Switch To Protect
	SwitchToProtect *OpticsAlarmDetail `protobuf:"bytes,11,opt,name=switch_to_protect,json=switchToProtect" json:"switch_to_protect,omitempty"`
}

func (m *OtsEdmAlarmInfo) Reset()                    { *m = OtsEdmAlarmInfo{} }
func (m *OtsEdmAlarmInfo) String() string            { return proto.CompactTextString(m) }
func (*OtsEdmAlarmInfo) ProtoMessage()               {}
func (*OtsEdmAlarmInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OtsEdmAlarmInfo) GetLowTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetLowRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetRxLosP() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLosP
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetRxLoc() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLoc
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAmpGainDegLow() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegLow
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAmpGainDegHigh() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegHigh
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoLaserShut() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoLaserShut
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoPowerRed() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoPowerRed
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoAmpliCtrlDisabled() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoAmpliCtrlDisabled
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoAmpliCtrlConfigMismatch() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoAmpliCtrlConfigMismatch
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetSwitchToProtect() *OpticsAlarmDetail {
	if m != nil {
		return m.SwitchToProtect
	}
	return nil
}

// extended monitored parameter information
type OpticsExtParam struct {
	// Signal to Noise Ratio on Lane 1
	SnrLane1 int32 `protobuf:"zigzag32,1,opt,name=snr_lane1,json=snrLane1" json:"snr_lane1,omitempty"`
	// Signal to Noise Ratio on Lane 2
	SnrLane2 int32 `protobuf:"zigzag32,2,opt,name=snr_lane2,json=snrLane2" json:"snr_lane2,omitempty"`
	// Inter symbol Interference correction on Lane 1
	IsiCorrectionLane1 int32 `protobuf:"zigzag32,3,opt,name=isi_correction_lane1,json=isiCorrectionLane1" json:"isi_correction_lane1,omitempty"`
	// Inter symbol Interference correction on Lane 2
	IsiCorrectionLane2 int32 `protobuf:"zigzag32,4,opt,name=isi_correction_lane2,json=isiCorrectionLane2" json:"isi_correction_lane2,omitempty"`
	// PAM Histogram parameter on Lane 1
	PamRateLane1 int32 `protobuf:"zigzag32,5,opt,name=pam_rate_lane1,json=pamRateLane1" json:"pam_rate_lane1,omitempty"`
	// PAM Histogram parameter on Lane 2
	PamRateLane2 int32 `protobuf:"zigzag32,6,opt,name=pam_rate_lane2,json=pamRateLane2" json:"pam_rate_lane2,omitempty"`
	// Pre FEC BER since last counter reset
	PreFecBer int64 `protobuf:"zigzag64,7,opt,name=pre_fec_ber,json=preFecBer" json:"pre_fec_ber,omitempty"`
	// Uncorrected BER since last counter reset
	UncorrectedBer int64 `protobuf:"zigzag64,8,opt,name=uncorrected_ber,json=uncorrectedBer" json:"uncorrected_ber,omitempty"`
	// Current flowing to the TEC of a cooled laser on Lane 1
	TecCurrentLane1 int32 `protobuf:"zigzag32,9,opt,name=tec_current_lane1,json=tecCurrentLane1" json:"tec_current_lane1,omitempty"`
	// Current flowing to the TEC of a cooled laser on Lane 2
	TecCurrentLane2 int32 `protobuf:"zigzag32,10,opt,name=tec_current_lane2,json=tecCurrentLane2" json:"tec_current_lane2,omitempty"`
	// Difference between target and actual center frequency on Lane 1
	LaserDiffFrequencyLane1 int32 `protobuf:"zigzag32,11,opt,name=laser_diff_frequency_lane1,json=laserDiffFrequencyLane1" json:"laser_diff_frequency_lane1,omitempty"`
	// Difference between target and actual center frequency on Lane 2
	LaserDiffFrequencyLane2 int32 `protobuf:"zigzag32,12,opt,name=laser_diff_frequency_lane2,json=laserDiffFrequencyLane2" json:"laser_diff_frequency_lane2,omitempty"`
	// Difference between target and actual temperature on Lane 1
	LaserDiffTemperatureLane1 int32 `protobuf:"zigzag32,13,opt,name=laser_diff_temperature_lane1,json=laserDiffTemperatureLane1" json:"laser_diff_temperature_lane1,omitempty"`
	// Difference between target and actual temperature on Lane 2
	LaserDiffTemperatureLane2 int32 `protobuf:"zigzag32,14,opt,name=laser_diff_temperature_lane2,json=laserDiffTemperatureLane2" json:"laser_diff_temperature_lane2,omitempty"`
	// Latched minimum Pre FEC BER value since last read, line ingress
	PreFecBerLatchedMin int64 `protobuf:"zigzag64,15,opt,name=pre_fec_ber_latched_min,json=preFecBerLatchedMin" json:"pre_fec_ber_latched_min,omitempty"`
	// Latched maximum Pre FEC BER value since last read, line ingress
	PreFecBerLatchedMax int64 `protobuf:"zigzag64,16,opt,name=pre_fec_ber_latched_max,json=preFecBerLatchedMax" json:"pre_fec_ber_latched_max,omitempty"`
	// Pre FEC BER value prior accumulation period, line ingress
	PreFecBerAccumulated int64 `protobuf:"zigzag64,17,opt,name=pre_fec_ber_accumulated,json=preFecBerAccumulated" json:"pre_fec_ber_accumulated,omitempty"`
	// Pre FEC BER value instantaneous line ingress
	PreFecBerInstantaneous int64 `protobuf:"zigzag64,18,opt,name=pre_fec_ber_instantaneous,json=preFecBerInstantaneous" json:"pre_fec_ber_instantaneous,omitempty"`
	// Latched minimum Uncorrected BER value since last read, line ingress
	UncorrectedBerLatchedMin int64 `protobuf:"zigzag64,19,opt,name=uncorrected_ber_latched_min,json=uncorrectedBerLatchedMin" json:"uncorrected_ber_latched_min,omitempty"`
	// Latched maximum Uncorrected BER value since last read, line ingress
	UncorrectedBerLatchedMax int64 `protobuf:"zigzag64,20,opt,name=uncorrected_ber_latched_max,json=uncorrectedBerLatchedMax" json:"uncorrected_ber_latched_max,omitempty"`
	// Uncorrected BER value prior accumulation period, line ingress
	UncorrectedBerAccumulated int64 `protobuf:"zigzag64,21,opt,name=uncorrected_ber_accumulated,json=uncorrectedBerAccumulated" json:"uncorrected_ber_accumulated,omitempty"`
	// Uncorrected BER value instantaneous line line ingress
	UncorrectedBerInstantaneous int64 `protobuf:"zigzag64,22,opt,name=uncorrected_ber_instantaneous,json=uncorrectedBerInstantaneous" json:"uncorrected_ber_instantaneous,omitempty"`
}

func (m *OpticsExtParam) Reset()                    { *m = OpticsExtParam{} }
func (m *OpticsExtParam) String() string            { return proto.CompactTextString(m) }
func (*OpticsExtParam) ProtoMessage()               {}
func (*OpticsExtParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OpticsExtParam) GetSnrLane1() int32 {
	if m != nil {
		return m.SnrLane1
	}
	return 0
}

func (m *OpticsExtParam) GetSnrLane2() int32 {
	if m != nil {
		return m.SnrLane2
	}
	return 0
}

func (m *OpticsExtParam) GetIsiCorrectionLane1() int32 {
	if m != nil {
		return m.IsiCorrectionLane1
	}
	return 0
}

func (m *OpticsExtParam) GetIsiCorrectionLane2() int32 {
	if m != nil {
		return m.IsiCorrectionLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPamRateLane1() int32 {
	if m != nil {
		return m.PamRateLane1
	}
	return 0
}

func (m *OpticsExtParam) GetPamRateLane2() int32 {
	if m != nil {
		return m.PamRateLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBer() int64 {
	if m != nil {
		return m.PreFecBer
	}
	return 0
}

func (m *OpticsExtParam) GetUncorrectedBer() int64 {
	if m != nil {
		return m.UncorrectedBer
	}
	return 0
}

func (m *OpticsExtParam) GetTecCurrentLane1() int32 {
	if m != nil {
		return m.TecCurrentLane1
	}
	return 0
}

func (m *OpticsExtParam) GetTecCurrentLane2() int32 {
	if m != nil {
		return m.TecCurrentLane2
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffFrequencyLane1() int32 {
	if m != nil {
		return m.LaserDiffFrequencyLane1
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffFrequencyLane2() int32 {
	if m != nil {
		return m.LaserDiffFrequencyLane2
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffTemperatureLane1() int32 {
	if m != nil {
		return m.LaserDiffTemperatureLane1
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffTemperatureLane2() int32 {
	if m != nil {
		return m.LaserDiffTemperatureLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBerLatchedMin() int64 {
	if m != nil {
		return m.PreFecBerLatchedMin
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBerLatchedMax() int64 {
	if m != nil {
		return m.PreFecBerLatchedMax
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBerAccumulated() int64 {
	if m != nil {
		return m.PreFecBerAccumulated
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBerInstantaneous() int64 {
	if m != nil {
		return m.PreFecBerInstantaneous
	}
	return 0
}

func (m *OpticsExtParam) GetUncorrectedBerLatchedMin() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMin
	}
	return 0
}

func (m *OpticsExtParam) GetUncorrectedBerLatchedMax() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMax
	}
	return 0
}

func (m *OpticsExtParam) GetUncorrectedBerAccumulated() int64 {
	if m != nil {
		return m.UncorrectedBerAccumulated
	}
	return 0
}

func (m *OpticsExtParam) GetUncorrectedBerInstantaneous() int64 {
	if m != nil {
		return m.UncorrectedBerInstantaneous
	}
	return 0
}

// extended monitored parameter threshold information
type OpticsExtThresholdParam struct {
	// High threshold alarm for SNR
	SnrAlarmHighThreshold int32 `protobuf:"zigzag32,1,opt,name=snr_alarm_high_threshold,json=snrAlarmHighThreshold" json:"snr_alarm_high_threshold,omitempty"`
	// Low threshold alarm for SNR
	SnrAlarmLowThreshold int32 `protobuf:"zigzag32,2,opt,name=snr_alarm_low_threshold,json=snrAlarmLowThreshold" json:"snr_alarm_low_threshold,omitempty"`
	// High threshold warning for SNR
	SnrWarnHighThreshold int32 `protobuf:"zigzag32,3,opt,name=snr_warn_high_threshold,json=snrWarnHighThreshold" json:"snr_warn_high_threshold,omitempty"`
	// Low threshold warning for SNR
	SnrWarnLowThreshold int32 `protobuf:"zigzag32,4,opt,name=snr_warn_low_threshold,json=snrWarnLowThreshold" json:"snr_warn_low_threshold,omitempty"`
	// High threshold alarm for ISI Correction
	IsiCorrectionAlarmHighThreshold int32 `protobuf:"zigzag32,5,opt,name=isi_correction_alarm_high_threshold,json=isiCorrectionAlarmHighThreshold" json:"isi_correction_alarm_high_threshold,omitempty"`
	// Low threshold alarm for ISI Correction
	IsiCorrectionAlarmLowThreshold int32 `protobuf:"zigzag32,6,opt,name=isi_correction_alarm_low_threshold,json=isiCorrectionAlarmLowThreshold" json:"isi_correction_alarm_low_threshold,omitempty"`
	// High threshold warning for ISI Correction
	IsiCorrectionWarnHighThreshold int32 `protobuf:"zigzag32,7,opt,name=isi_correction_warn_high_threshold,json=isiCorrectionWarnHighThreshold" json:"isi_correction_warn_high_threshold,omitempty"`
	// Low threshold warning for ISI Correction
	IsiCorrectionWarnLowThreshold int32 `protobuf:"zigzag32,8,opt,name=isi_correction_warn_low_threshold,json=isiCorrectionWarnLowThreshold" json:"isi_correction_warn_low_threshold,omitempty"`
	// High threshold alarm for PAM Rate
	PamRateAlarmHighThreshold int32 `protobuf:"zigzag32,9,opt,name=pam_rate_alarm_high_threshold,json=pamRateAlarmHighThreshold" json:"pam_rate_alarm_high_threshold,omitempty"`
	// Low threshold alarm for PAM Rate
	PamRateAlarmLowThreshold int32 `protobuf:"zigzag32,10,opt,name=pam_rate_alarm_low_threshold,json=pamRateAlarmLowThreshold" json:"pam_rate_alarm_low_threshold,omitempty"`
	// High threshold warning for PAM Rate
	PamRateWarnHighThreshold int32 `protobuf:"zigzag32,11,opt,name=pam_rate_warn_high_threshold,json=pamRateWarnHighThreshold" json:"pam_rate_warn_high_threshold,omitempty"`
	// Low threshold warning for PAM Rate
	PamRateWarnLowThreshold int32 `protobuf:"zigzag32,12,opt,name=pam_rate_warn_low_threshold,json=pamRateWarnLowThreshold" json:"pam_rate_warn_low_threshold,omitempty"`
	// High threshold alarm for Pre FEC BER
	PreFecBerAlarmHighThreshold int64 `protobuf:"zigzag64,13,opt,name=pre_fec_ber_alarm_high_threshold,json=preFecBerAlarmHighThreshold" json:"pre_fec_ber_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Pre FEC BER
	PreFecBerAlarmLowThreshold int64 `protobuf:"zigzag64,14,opt,name=pre_fec_ber_alarm_low_threshold,json=preFecBerAlarmLowThreshold" json:"pre_fec_ber_alarm_low_threshold,omitempty"`
	// High threshold warning for Pre FEC BER
	PreFecBerWarnHighThreshold int64 `protobuf:"zigzag64,15,opt,name=pre_fec_ber_warn_high_threshold,json=preFecBerWarnHighThreshold" json:"pre_fec_ber_warn_high_threshold,omitempty"`
	// Low threshold warning for Pre FEC BER
	PreFecBerWarnLowThreshold int64 `protobuf:"zigzag64,16,opt,name=pre_fec_ber_warn_low_threshold,json=preFecBerWarnLowThreshold" json:"pre_fec_ber_warn_low_threshold,omitempty"`
	// High threshold alarm for Uncorrected BER
	UncorrectedBerAlarmHighThreshold int64 `protobuf:"zigzag64,17,opt,name=uncorrected_ber_alarm_high_threshold,json=uncorrectedBerAlarmHighThreshold" json:"uncorrected_ber_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Uncorrected BER
	UncorrectedBerAlarmLowThreshold int64 `protobuf:"zigzag64,18,opt,name=uncorrected_ber_alarm_low_threshold,json=uncorrectedBerAlarmLowThreshold" json:"uncorrected_ber_alarm_low_threshold,omitempty"`
	// High threshold warning for Uncorrected BER
	UncorrectedBerWarnHighThreshold int64 `protobuf:"zigzag64,19,opt,name=uncorrected_ber_warn_high_threshold,json=uncorrectedBerWarnHighThreshold" json:"uncorrected_ber_warn_high_threshold,omitempty"`
	// Low threshold warning for Uncorrected BER
	UncorrectedBerWarnLowThreshold int64 `protobuf:"zigzag64,20,opt,name=uncorrected_ber_warn_low_threshold,json=uncorrectedBerWarnLowThreshold" json:"uncorrected_ber_warn_low_threshold,omitempty"`
	// High threshold alarm for TEC Current
	TecCurrentAlarmHighThreshold int32 `protobuf:"zigzag32,21,opt,name=tec_current_alarm_high_threshold,json=tecCurrentAlarmHighThreshold" json:"tec_current_alarm_high_threshold,omitempty"`
	// Low threshold alarm for TEC Current
	TecCurrentAlarmLowThreshold int32 `protobuf:"zigzag32,22,opt,name=tec_current_alarm_low_threshold,json=tecCurrentAlarmLowThreshold" json:"tec_current_alarm_low_threshold,omitempty"`
	// High threshold warning for TEC Current
	TecCurrentWarnHighThreshold int32 `protobuf:"zigzag32,23,opt,name=tec_current_warn_high_threshold,json=tecCurrentWarnHighThreshold" json:"tec_current_warn_high_threshold,omitempty"`
	// Low threshold warning for TEC Current
	TecCurrentWarnLowThreshold int32 `protobuf:"zigzag32,24,opt,name=tec_current_warn_low_threshold,json=tecCurrentWarnLowThreshold" json:"tec_current_warn_low_threshold,omitempty"`
	// High Threshold Alarm for Differential Laser Frequency
	LaserDiffFrequencyAlarmHighThreshold int32 `protobuf:"zigzag32,25,opt,name=laser_diff_frequency_alarm_high_threshold,json=laserDiffFrequencyAlarmHighThreshold" json:"laser_diff_frequency_alarm_high_threshold,omitempty"`
	// Low Threshold Alarm for Differential Laser Frequency
	LaserDiffFrequencyAlarmLowThreshold int32 `protobuf:"zigzag32,26,opt,name=laser_diff_frequency_alarm_low_threshold,json=laserDiffFrequencyAlarmLowThreshold" json:"laser_diff_frequency_alarm_low_threshold,omitempty"`
	// High Threshold Warning for Differential Laser Frequency
	LaserDiffFrequencyWarnHighThreshold int32 `protobuf:"zigzag32,27,opt,name=laser_diff_frequency_warn_high_threshold,json=laserDiffFrequencyWarnHighThreshold" json:"laser_diff_frequency_warn_high_threshold,omitempty"`
	// Low Threshold Warning for Differential Laser Frequency
	LaserDiffFrequencyWarnLowThreshold int32 `protobuf:"zigzag32,28,opt,name=laser_diff_frequency_warn_low_threshold,json=laserDiffFrequencyWarnLowThreshold" json:"laser_diff_frequency_warn_low_threshold,omitempty"`
	// High Threshold Alarm for Differential Laser Temperature
	LaserDiffTemperatureAlarmHighThreshold int32 `protobuf:"zigzag32,29,opt,name=laser_diff_temperature_alarm_high_threshold,json=laserDiffTemperatureAlarmHighThreshold" json:"laser_diff_temperature_alarm_high_threshold,omitempty"`
	// Low Threshold Alarm for Differential Laser Temperature
	LaserDiffTemperatureAlarmLowThreshold int32 `protobuf:"zigzag32,30,opt,name=laser_diff_temperature_alarm_low_threshold,json=laserDiffTemperatureAlarmLowThreshold" json:"laser_diff_temperature_alarm_low_threshold,omitempty"`
	// High Threshold Warning for Differential Laser Temperature
	LaserDiffTemperatureWarnHighThreshold int32 `protobuf:"zigzag32,31,opt,name=laser_diff_temperature_warn_high_threshold,json=laserDiffTemperatureWarnHighThreshold" json:"laser_diff_temperature_warn_high_threshold,omitempty"`
	// Low Threshold Warning for Differential Laser Temperature
	LaserDiffTemperatureWarnLowThreshold int32 `protobuf:"zigzag32,32,opt,name=laser_diff_temperature_warn_low_threshold,json=laserDiffTemperatureWarnLowThreshold" json:"laser_diff_temperature_warn_low_threshold,omitempty"`
	// High threshold alarm for Latched Min Pre FEC BER
	PreFecBerLatchedMinAlarmHighThreshold int64 `protobuf:"zigzag64,33,opt,name=pre_fec_ber_latched_min_alarm_high_threshold,json=preFecBerLatchedMinAlarmHighThreshold" json:"pre_fec_ber_latched_min_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Latched Min Pre FEC BER
	PreFecBerLatchedMinAlarmLowThreshold int64 `protobuf:"zigzag64,34,opt,name=pre_fec_ber_latched_min_alarm_low_threshold,json=preFecBerLatchedMinAlarmLowThreshold" json:"pre_fec_ber_latched_min_alarm_low_threshold,omitempty"`
	// High threshold warning for Latched Min Pre FEC BER
	PreFecBerLatchedMinWarnHighThreshold int64 `protobuf:"zigzag64,35,opt,name=pre_fec_ber_latched_min_warn_high_threshold,json=preFecBerLatchedMinWarnHighThreshold" json:"pre_fec_ber_latched_min_warn_high_threshold,omitempty"`
	// Low threshold warning for Latched Min Pre FEC BER
	PreFecBerLatchedMinWarnLowThreshold int64 `protobuf:"zigzag64,36,opt,name=pre_fec_ber_latched_min_warn_low_threshold,json=preFecBerLatchedMinWarnLowThreshold" json:"pre_fec_ber_latched_min_warn_low_threshold,omitempty"`
	// High threshold alarm for Latched Max Pre FEC BER
	PreFecBerLatchedMaxAlarmHighThreshold int64 `protobuf:"zigzag64,37,opt,name=pre_fec_ber_latched_max_alarm_high_threshold,json=preFecBerLatchedMaxAlarmHighThreshold" json:"pre_fec_ber_latched_max_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Latched Max Pre FEC BER
	PreFecBerLatchedMaxAlarmLowThreshold int64 `protobuf:"zigzag64,38,opt,name=pre_fec_ber_latched_max_alarm_low_threshold,json=preFecBerLatchedMaxAlarmLowThreshold" json:"pre_fec_ber_latched_max_alarm_low_threshold,omitempty"`
	// High threshold warning for Latched Max Pre FEC BER
	PreFecBerLatchedMaxWarnHighThreshold int64 `protobuf:"zigzag64,39,opt,name=pre_fec_ber_latched_max_warn_high_threshold,json=preFecBerLatchedMaxWarnHighThreshold" json:"pre_fec_ber_latched_max_warn_high_threshold,omitempty"`
	// Low threshold warning for Latched Max Pre FEC BER
	PreFecBerLatchedMaxWarnLowThreshold int64 `protobuf:"zigzag64,40,opt,name=pre_fec_ber_latched_max_warn_low_threshold,json=preFecBerLatchedMaxWarnLowThreshold" json:"pre_fec_ber_latched_max_warn_low_threshold,omitempty"`
	// High threshold alarm for Accumulated Pre FEC BER
	PreFecBerAccumulatedAlarmHighThreshold int64 `protobuf:"zigzag64,41,opt,name=pre_fec_ber_accumulated_alarm_high_threshold,json=preFecBerAccumulatedAlarmHighThreshold" json:"pre_fec_ber_accumulated_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Accumulated Pre FEC BER
	PreFecBerAccumulatedAlarmLowThreshold int64 `protobuf:"zigzag64,42,opt,name=pre_fec_ber_accumulated_alarm_low_threshold,json=preFecBerAccumulatedAlarmLowThreshold" json:"pre_fec_ber_accumulated_alarm_low_threshold,omitempty"`
	// High threshold warning for Accumulated Pre FEC BER
	PreFecBerAccumulatedWarnHighThreshold int64 `protobuf:"zigzag64,43,opt,name=pre_fec_ber_accumulated_warn_high_threshold,json=preFecBerAccumulatedWarnHighThreshold" json:"pre_fec_ber_accumulated_warn_high_threshold,omitempty"`
	// Low threshold warning for Accumulated Pre FEC BER
	PreFecBerAccumulatedWarnLowThreshold int64 `protobuf:"zigzag64,44,opt,name=pre_fec_ber_accumulated_warn_low_threshold,json=preFecBerAccumulatedWarnLowThreshold" json:"pre_fec_ber_accumulated_warn_low_threshold,omitempty"`
	// High threshold alarm for Instantaneous Pre FEC BER
	PreFecBerInstantaneousAlarmHighThreshold int64 `protobuf:"zigzag64,45,opt,name=pre_fec_ber_instantaneous_alarm_high_threshold,json=preFecBerInstantaneousAlarmHighThreshold" json:"pre_fec_ber_instantaneous_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Instantaneous Pre FEC BER
	PreFecBerInstantaneousAlarmLowThreshold int64 `protobuf:"zigzag64,46,opt,name=pre_fec_ber_instantaneous_alarm_low_threshold,json=preFecBerInstantaneousAlarmLowThreshold" json:"pre_fec_ber_instantaneous_alarm_low_threshold,omitempty"`
	// High threshold warning for Instantaneous Pre FEC BER
	PreFecBerInstantaneousWarnHighThreshold int64 `protobuf:"zigzag64,47,opt,name=pre_fec_ber_instantaneous_warn_high_threshold,json=preFecBerInstantaneousWarnHighThreshold" json:"pre_fec_ber_instantaneous_warn_high_threshold,omitempty"`
	// Low threshold warning for Instantaneous Pre FEC BER
	PreFecBerInstantaneousWarnLowThreshold int64 `protobuf:"zigzag64,48,opt,name=pre_fec_ber_instantaneous_warn_low_threshold,json=preFecBerInstantaneousWarnLowThreshold" json:"pre_fec_ber_instantaneous_warn_low_threshold,omitempty"`
	// High threshold alarm for  Latched Min Uncorrected BER
	UncorrectedBerLatchedMinAlarmHighThreshold int64 `protobuf:"zigzag64,49,opt,name=uncorrected_ber_latched_min_alarm_high_threshold,json=uncorrectedBerLatchedMinAlarmHighThreshold" json:"uncorrected_ber_latched_min_alarm_high_threshold,omitempty"`
	// Low threshold alarm for  Latched Min Uncorrected BER
	UncorrectedBerLatchedMinAlarmLowThreshold int64 `protobuf:"zigzag64,50,opt,name=uncorrected_ber_latched_min_alarm_low_threshold,json=uncorrectedBerLatchedMinAlarmLowThreshold" json:"uncorrected_ber_latched_min_alarm_low_threshold,omitempty"`
	// High threshold warning for  Latched Min Uncorrected BER
	UncorrectedBerLatchedMinWarnHighThreshold int64 `protobuf:"zigzag64,51,opt,name=uncorrected_ber_latched_min_warn_high_threshold,json=uncorrectedBerLatchedMinWarnHighThreshold" json:"uncorrected_ber_latched_min_warn_high_threshold,omitempty"`
	// Low threshold alarm for Latched Min Uncorrected BER
	UncorrectedBerLatchedMinWarnLowThreshold int64 `protobuf:"zigzag64,52,opt,name=uncorrected_ber_latched_min_warn_low_threshold,json=uncorrectedBerLatchedMinWarnLowThreshold" json:"uncorrected_ber_latched_min_warn_low_threshold,omitempty"`
	// High threshold alarm for Latched_Max Uncorrected BER
	UncorrectedBerLatchedMaxAlarmHighThreshold int64 `protobuf:"zigzag64,53,opt,name=uncorrected_ber_latched_max_alarm_high_threshold,json=uncorrectedBerLatchedMaxAlarmHighThreshold" json:"uncorrected_ber_latched_max_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Latched_Max Uncorrected BER
	UncorrectedBerLatchedMaxAlarmLowThreshold int64 `protobuf:"zigzag64,54,opt,name=uncorrected_ber_latched_max_alarm_low_threshold,json=uncorrectedBerLatchedMaxAlarmLowThreshold" json:"uncorrected_ber_latched_max_alarm_low_threshold,omitempty"`
	// High threshold warning Latched_Max for Uncorrected BER
	UncorrectedBerLatchedMaxWarnHighThreshold int64 `protobuf:"zigzag64,55,opt,name=uncorrected_ber_latched_max_warn_high_threshold,json=uncorrectedBerLatchedMaxWarnHighThreshold" json:"uncorrected_ber_latched_max_warn_high_threshold,omitempty"`
	// Low threshold warning Latched_Max for Uncorrected BER
	UncorrectedBerLatchedMaxWarnLowThreshold int64 `protobuf:"zigzag64,56,opt,name=uncorrected_ber_latched_max_warn_low_threshold,json=uncorrectedBerLatchedMaxWarnLowThreshold" json:"uncorrected_ber_latched_max_warn_low_threshold,omitempty"`
	// High threshold alarm for Accumulated Uncorrected BER
	UncorrectedBerAccumulatedAlarmHighThreshold int64 `protobuf:"zigzag64,57,opt,name=uncorrected_ber_accumulated_alarm_high_threshold,json=uncorrectedBerAccumulatedAlarmHighThreshold" json:"uncorrected_ber_accumulated_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Accumulated Uncorrected BER
	UncorrectedBerAccumulatedAlarmLowThreshold int64 `protobuf:"zigzag64,58,opt,name=uncorrected_ber_accumulated_alarm_low_threshold,json=uncorrectedBerAccumulatedAlarmLowThreshold" json:"uncorrected_ber_accumulated_alarm_low_threshold,omitempty"`
	// High threshold warning for Accumulated Uncorrected BER
	UncorrectedBerAccumulatedWarnHighThreshold int64 `protobuf:"zigzag64,59,opt,name=uncorrected_ber_accumulated_warn_high_threshold,json=uncorrectedBerAccumulatedWarnHighThreshold" json:"uncorrected_ber_accumulated_warn_high_threshold,omitempty"`
	// Low threshold warning for Accumulated Uncorrected BER
	UncorrectedBerAccumulatedWarnLowThreshold int64 `protobuf:"zigzag64,60,opt,name=uncorrected_ber_accumulated_warn_low_threshold,json=uncorrectedBerAccumulatedWarnLowThreshold" json:"uncorrected_ber_accumulated_warn_low_threshold,omitempty"`
	// High threshold alarm for Instantaneous Uncorrected BER
	UncorrectedBerInstantaneousAlarmHighThreshold int64 `protobuf:"zigzag64,61,opt,name=uncorrected_ber_instantaneous_alarm_high_threshold,json=uncorrectedBerInstantaneousAlarmHighThreshold" json:"uncorrected_ber_instantaneous_alarm_high_threshold,omitempty"`
	// Low threshold alarm for Instantaneous Uncorrected BER
	UncorrectedBerInstantaneousAlarmLowThreshold int64 `protobuf:"zigzag64,62,opt,name=uncorrected_ber_instantaneous_alarm_low_threshold,json=uncorrectedBerInstantaneousAlarmLowThreshold" json:"uncorrected_ber_instantaneous_alarm_low_threshold,omitempty"`
	// High threshold warning for Instantaneous Uncorrected BER
	UncorrectedBerInstantaneousWarnHighThreshold int64 `protobuf:"zigzag64,63,opt,name=uncorrected_ber_instantaneous_warn_high_threshold,json=uncorrectedBerInstantaneousWarnHighThreshold" json:"uncorrected_ber_instantaneous_warn_high_threshold,omitempty"`
	// Low threshold warning for Instantaneous Uncorrected BER
	UncorrectedBerInstantaneousWarnLowThreshold int64 `protobuf:"zigzag64,64,opt,name=uncorrected_ber_instantaneous_warn_low_threshold,json=uncorrectedBerInstantaneousWarnLowThreshold" json:"uncorrected_ber_instantaneous_warn_low_threshold,omitempty"`
}

func (m *OpticsExtThresholdParam) Reset()                    { *m = OpticsExtThresholdParam{} }
func (m *OpticsExtThresholdParam) String() string            { return proto.CompactTextString(m) }
func (*OpticsExtThresholdParam) ProtoMessage()               {}
func (*OpticsExtThresholdParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OpticsExtThresholdParam) GetSnrAlarmHighThreshold() int32 {
	if m != nil {
		return m.SnrAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrAlarmLowThreshold() int32 {
	if m != nil {
		return m.SnrAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrWarnHighThreshold() int32 {
	if m != nil {
		return m.SnrWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrWarnLowThreshold() int32 {
	if m != nil {
		return m.SnrWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionAlarmHighThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionAlarmLowThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionWarnHighThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionWarnLowThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateAlarmHighThreshold() int32 {
	if m != nil {
		return m.PamRateAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateAlarmLowThreshold() int32 {
	if m != nil {
		return m.PamRateAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateWarnHighThreshold() int32 {
	if m != nil {
		return m.PamRateWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateWarnLowThreshold() int32 {
	if m != nil {
		return m.PamRateWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAlarmHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAlarmLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerWarnHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerWarnLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAlarmHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAlarmLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerWarnHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerWarnLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentAlarmHighThreshold() int32 {
	if m != nil {
		return m.TecCurrentAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentAlarmLowThreshold() int32 {
	if m != nil {
		return m.TecCurrentAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentWarnHighThreshold() int32 {
	if m != nil {
		return m.TecCurrentWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentWarnLowThreshold() int32 {
	if m != nil {
		return m.TecCurrentWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyAlarmHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyAlarmLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyWarnHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyWarnLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureAlarmHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureAlarmLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureWarnHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureWarnLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinAlarmHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMinAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinAlarmLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMinAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinWarnHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMinWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinWarnLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMinWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxAlarmHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMaxAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxAlarmLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMaxAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxWarnHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMaxWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxWarnLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerLatchedMaxWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedAlarmHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerAccumulatedAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedAlarmLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerAccumulatedAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedWarnHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerAccumulatedWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedWarnLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerAccumulatedWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousAlarmHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerInstantaneousAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousAlarmLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerInstantaneousAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousWarnHighThreshold() int64 {
	if m != nil {
		return m.PreFecBerInstantaneousWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousWarnLowThreshold() int64 {
	if m != nil {
		return m.PreFecBerInstantaneousWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinAlarmHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMinAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinAlarmLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMinAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinWarnHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMinWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinWarnLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMinWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxAlarmHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMaxAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxAlarmLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMaxAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxWarnHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMaxWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxWarnLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerLatchedMaxWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedAlarmHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAccumulatedAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedAlarmLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAccumulatedAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedWarnHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAccumulatedWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedWarnLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerAccumulatedWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousAlarmHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerInstantaneousAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousAlarmLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerInstantaneousAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousWarnHighThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerInstantaneousWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousWarnLowThreshold() int64 {
	if m != nil {
		return m.UncorrectedBerInstantaneousWarnLowThreshold
	}
	return 0
}

type OpticsEdmInfo_COMBINED struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Transport Admin State
	TransportAdminState string `protobuf:"bytes,50,opt,name=transport_admin_state,json=transportAdminState" json:"transport_admin_state,omitempty"`
	// Is Optics Present?
	OpticsPresent bool `protobuf:"varint,51,opt,name=optics_present,json=opticsPresent" json:"optics_present,omitempty"`
	// Optics type name
	OpticsType string `protobuf:"bytes,52,opt,name=optics_type,json=opticsType" json:"optics_type,omitempty"`
	// Optics module name
	OpticsModule string `protobuf:"bytes,53,opt,name=optics_module,json=opticsModule" json:"optics_module,omitempty"`
	// DWDM Carrier Band information
	DwdmCarrierBand string `protobuf:"bytes,54,opt,name=dwdm_carrier_band,json=dwdmCarrierBand" json:"dwdm_carrier_band,omitempty"`
	// Current ITU DWDM Carrier channel number
	DwdmCarrierChannel string `protobuf:"bytes,55,opt,name=dwdm_carrier_channel,json=dwdmCarrierChannel" json:"dwdm_carrier_channel,omitempty"`
	// DWDM Carrier frequency read from hw in the unit 0.01THz
	DwdmCarrierFrequency string `protobuf:"bytes,56,opt,name=dwdm_carrier_frequency,json=dwdmCarrierFrequency" json:"dwdm_carrier_frequency,omitempty"`
	// Wavelength of color optics 0.001nm
	DwdmCarrierWavelength string `protobuf:"bytes,57,opt,name=dwdm_carrier_wavelength,json=dwdmCarrierWavelength" json:"dwdm_carrier_wavelength,omitempty"`
	// Wavelength of grey optics 0.01nm
	GreyWavelength uint32 `protobuf:"varint,58,opt,name=grey_wavelength,json=greyWavelength" json:"grey_wavelength,omitempty"`
	// Rx Low threshold value in units of 0.1dBm
	RxLowThreshold int32 `protobuf:"zigzag32,59,opt,name=rx_low_threshold,json=rxLowThreshold" json:"rx_low_threshold,omitempty"`
	// Rx High threshold value in units of 0.1dBm
	RxHighThreshold int32 `protobuf:"zigzag32,60,opt,name=rx_high_threshold,json=rxHighThreshold" json:"rx_high_threshold,omitempty"`
	// LBC High threshold value in units of percentage
	LbcHighThreshold int32 `protobuf:"zigzag32,61,opt,name=lbc_high_threshold,json=lbcHighThreshold" json:"lbc_high_threshold,omitempty"`
	// Tx Low threshold value in units of 0.1dBm
	TxLowThreshold int32 `protobuf:"zigzag32,62,opt,name=tx_low_threshold,json=txLowThreshold" json:"tx_low_threshold,omitempty"`
	// Tx High threshold value in units of 0.1dBm
	TxHighThreshold int32 `protobuf:"zigzag32,63,opt,name=tx_high_threshold,json=txHighThreshold" json:"tx_high_threshold,omitempty"`
	// LBC high threshold default value in unit of 0.001mA
	LbcThHighDefault int32 `protobuf:"zigzag32,64,opt,name=lbc_th_high_default,json=lbcThHighDefault" json:"lbc_th_high_default,omitempty"`
	// LBC low threshold default value in units of 0.001mA
	LbcThLowDefault int32 `protobuf:"zigzag32,65,opt,name=lbc_th_low_default,json=lbcThLowDefault" json:"lbc_th_low_default,omitempty"`
	// Temp Low threshold value in the units 0.01 C
	TempLowThreshold int32 `protobuf:"zigzag32,66,opt,name=temp_low_threshold,json=tempLowThreshold" json:"temp_low_threshold,omitempty"`
	// Temp High threshold value in the units of 0.01 C
	TempHighThreshold int32 `protobuf:"zigzag32,67,opt,name=temp_high_threshold,json=tempHighThreshold" json:"temp_high_threshold,omitempty"`
	// Volt Low threshold value
	VoltLowThreshold int32 `protobuf:"zigzag32,68,opt,name=volt_low_threshold,json=voltLowThreshold" json:"volt_low_threshold,omitempty"`
	// Volt High threshold value
	VoltHighThreshold int32 `protobuf:"zigzag32,69,opt,name=volt_high_threshold,json=voltHighThreshold" json:"volt_high_threshold,omitempty"`
	// Chromatic Dispersion ps/nm
	Cd int32 `protobuf:"zigzag32,70,opt,name=cd" json:"cd,omitempty"`
	// Chromatic Dispersion Min ps/nm
	CdMin int32 `protobuf:"zigzag32,71,opt,name=cd_min,json=cdMin" json:"cd_min,omitempty"`
	// Chromatic Dispersion Max ps/nm
	CdMax int32 `protobuf:"zigzag32,72,opt,name=cd_max,json=cdMax" json:"cd_max,omitempty"`
	// Chromatic Dispersion low threshold ps/nm
	CdLowThreshold int32 `protobuf:"zigzag32,73,opt,name=cd_low_threshold,json=cdLowThreshold" json:"cd_low_threshold,omitempty"`
	// Chromatic Dispersion high threshold ps/nm
	CdHighThreshold int32 `protobuf:"zigzag32,74,opt,name=cd_high_threshold,json=cdHighThreshold" json:"cd_high_threshold,omitempty"`
	// OSNR low threshold in 0.01 dB
	OsnrLowThreshold string `protobuf:"bytes,75,opt,name=osnr_low_threshold,json=osnrLowThreshold" json:"osnr_low_threshold,omitempty"`
	// DGD high threshold in 0.1 ps
	DgdHighThreshold string `protobuf:"bytes,76,opt,name=dgd_high_threshold,json=dgdHighThreshold" json:"dgd_high_threshold,omitempty"`
	// Polarization Mode Dispersion 0.1ps
	PolarizationModeDispersion string `protobuf:"bytes,77,opt,name=polarization_mode_dispersion,json=polarizationModeDispersion" json:"polarization_mode_dispersion,omitempty"`
	// Second Order Polarization Mode Dispersion 0.1ps^2
	SecondOrderPolarizationModeDispersion string `protobuf:"bytes,78,opt,name=second_order_polarization_mode_dispersion,json=secondOrderPolarizationModeDispersion" json:"second_order_polarization_mode_dispersion,omitempty"`
	// Optical Signal to Noise Ratio dB
	OpticalSignalToNoiseRatio string `protobuf:"bytes,79,opt,name=optical_signal_to_noise_ratio,json=opticalSignalToNoiseRatio" json:"optical_signal_to_noise_ratio,omitempty"`
	// Polarization Dependent Loss dB
	PolarizationDependentLoss string `protobuf:"bytes,80,opt,name=polarization_dependent_loss,json=polarizationDependentLoss" json:"polarization_dependent_loss,omitempty"`
	// Polarization Change Rate rad/s
	PolarizationChangeRate string `protobuf:"bytes,81,opt,name=polarization_change_rate,json=polarizationChangeRate" json:"polarization_change_rate,omitempty"`
	// Differential Group Delay ps
	DifferentialGroupDelay string `protobuf:"bytes,82,opt,name=differential_group_delay,json=differentialGroupDelay" json:"differential_group_delay,omitempty"`
	// Phase Noise dB
	PhaseNoise string `protobuf:"bytes,83,opt,name=phase_noise,json=phaseNoise" json:"phase_noise,omitempty"`
	// PmEable or Disable
	PmEnable uint32 `protobuf:"varint,84,opt,name=pm_enable,json=pmEnable" json:"pm_enable,omitempty"`
	// Showing laser state.Either ON or OFF or unknown
	LaserState string `protobuf:"bytes,85,opt,name=laser_state,json=laserState" json:"laser_state,omitempty"`
	// Showing Current Colour of led state
	LedState string `protobuf:"bytes,86,opt,name=led_state,json=ledState" json:"led_state,omitempty"`
	// Network SRLG information
	NetworkSrlgInfo *OpticsEdmNetworkSrlgInfo `protobuf:"bytes,87,opt,name=network_srlg_info,json=networkSrlgInfo" json:"network_srlg_info,omitempty"`
	// Lane information
	LaneData []*OpticsEdmLaneData `protobuf:"bytes,88,rep,name=lane_data,json=laneData" json:"lane_data,omitempty"`
	// Optics controller state: Up, Down or Administratively Down
	ControllerState string `protobuf:"bytes,89,opt,name=controller_state,json=controllerState" json:"controller_state,omitempty"`
	// Optics form factor
	FormFactor string `protobuf:"bytes,90,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	// Optics physical type
	PhyType string `protobuf:"bytes,91,opt,name=phy_type,json=phyType" json:"phy_type,omitempty"`
	// Optics Alarm Information
	OpticsAlarmInfo *OpticsEdmAlarmInfo `protobuf:"bytes,92,opt,name=optics_alarm_info,json=opticsAlarmInfo" json:"optics_alarm_info,omitempty"`
	// Ots Alarm Information
	OtsAlarmInfo *OtsEdmAlarmInfo `protobuf:"bytes,93,opt,name=ots_alarm_info,json=otsAlarmInfo" json:"ots_alarm_info,omitempty"`
	// Receive Power in 0.01 dB
	RxPower int32 `protobuf:"zigzag32,94,opt,name=rx_power,json=rxPower" json:"rx_power,omitempty"`
	// Transmit Power in 0.01 dB
	TxPower int32 `protobuf:"zigzag32,95,opt,name=tx_power,json=txPower" json:"tx_power,omitempty"`
	// Configured Tx power value in 0.01 dB
	CfgTxPower int32 `protobuf:"zigzag32,96,opt,name=cfg_tx_power,json=cfgTxPower" json:"cfg_tx_power,omitempty"`
	// TX Power Configuration is supported or not
	CfgTxPowerConfigurable bool `protobuf:"varint,97,opt,name=cfg_tx_power_configurable,json=cfgTxPowerConfigurable" json:"cfg_tx_power_configurable,omitempty"`
	// Temperature value
	Temperature int32 `protobuf:"zigzag32,98,opt,name=temperature" json:"temperature,omitempty"`
	// Voltage value
	Voltage int32 `protobuf:"zigzag32,99,opt,name=voltage" json:"voltage,omitempty"`
	// Display Volt/Temp ?
	DisplayVoltTemp bool `protobuf:"varint,100,opt,name=display_volt_temp,json=displayVoltTemp" json:"display_volt_temp,omitempty"`
	// CD Configurable is supported or not
	CdConfigurable bool `protobuf:"varint,101,opt,name=cd_configurable,json=cdConfigurable" json:"cd_configurable,omitempty"`
	// Optics FEC
	OpticsFec string `protobuf:"bytes,102,opt,name=optics_fec,json=opticsFec" json:"optics_fec,omitempty"`
	// Showing port type
	PortType string `protobuf:"bytes,103,opt,name=port_type,json=portType" json:"port_type,omitempty"`
	// Showing port status
	PortStatus string `protobuf:"bytes,104,opt,name=port_status,json=portStatus" json:"port_status,omitempty"`
	// Rx Voa Attenuation in the unit of 0.01dBm
	RxVoaAttenuation int32 `protobuf:"zigzag32,105,opt,name=rx_voa_attenuation,json=rxVoaAttenuation" json:"rx_voa_attenuation,omitempty"`
	// Tx Voa Attenuation in the unit of 0.01dBm
	TxVoaAttenuation int32 `protobuf:"zigzag32,106,opt,name=tx_voa_attenuation,json=txVoaAttenuation" json:"tx_voa_attenuation,omitempty"`
	// Ampli Gain in the unit of 0.01dBm
	AmpliGain int32 `protobuf:"zigzag32,107,opt,name=ampli_gain,json=ampliGain" json:"ampli_gain,omitempty"`
	// Ampli Tilt in the unit of 0.01dBm
	AmpliTilt                     int32  `protobuf:"zigzag32,108,opt,name=ampli_tilt,json=ampliTilt" json:"ampli_tilt,omitempty"`
	RxPowerThConfigurable         bool   `protobuf:"varint,109,opt,name=rx_power_th_configurable,json=rxPowerThConfigurable" json:"rx_power_th_configurable,omitempty"`
	TxPowerThConfigurable         bool   `protobuf:"varint,110,opt,name=tx_power_th_configurable,json=txPowerThConfigurable" json:"tx_power_th_configurable,omitempty"`
	RxVoaAttenuationConfigVal     int32  `protobuf:"zigzag32,111,opt,name=rx_voa_attenuation_config_val,json=rxVoaAttenuationConfigVal" json:"rx_voa_attenuation_config_val,omitempty"`
	TxVoaAttenuationConfigVal     int32  `protobuf:"zigzag32,112,opt,name=tx_voa_attenuation_config_val,json=txVoaAttenuationConfigVal" json:"tx_voa_attenuation_config_val,omitempty"`
	AmpliControlModeConfigVal     string `protobuf:"bytes,113,opt,name=ampli_control_mode_config_val,json=ampliControlModeConfigVal" json:"ampli_control_mode_config_val,omitempty"`
	AmpliGainRangeConfigVal       string `protobuf:"bytes,114,opt,name=ampli_gain_range_config_val,json=ampliGainRangeConfigVal" json:"ampli_gain_range_config_val,omitempty"`
	AmpliGainConfigVal            int32  `protobuf:"zigzag32,115,opt,name=ampli_gain_config_val,json=ampliGainConfigVal" json:"ampli_gain_config_val,omitempty"`
	AmpliTiltConfigVal            int32  `protobuf:"zigzag32,116,opt,name=ampli_tilt_config_val,json=ampliTiltConfigVal" json:"ampli_tilt_config_val,omitempty"`
	AmpliChannelPowerConfigVal    int32  `protobuf:"zigzag32,117,opt,name=ampli_channel_power_config_val,json=ampliChannelPowerConfigVal" json:"ampli_channel_power_config_val,omitempty"`
	ChannelPowerMaxDeltaConfigVal int32  `protobuf:"zigzag32,118,opt,name=channel_power_max_delta_config_val,json=channelPowerMaxDeltaConfigVal" json:"channel_power_max_delta_config_val,omitempty"`
	AmpliGainThrDegLowConfigVal   int32  `protobuf:"zigzag32,119,opt,name=ampli_gain_thr_deg_low_config_val,json=ampliGainThrDegLowConfigVal" json:"ampli_gain_thr_deg_low_config_val,omitempty"`
	AmpliGainThrDegHighConfigVal  int32  `protobuf:"zigzag32,120,opt,name=ampli_gain_thr_deg_high_config_val,json=ampliGainThrDegHighConfigVal" json:"ampli_gain_thr_deg_high_config_val,omitempty"`
	OsriConfigVal                 bool   `protobuf:"varint,121,opt,name=osri_config_val,json=osriConfigVal" json:"osri_config_val,omitempty"`
	SafetyControlModeConfigVal    string `protobuf:"bytes,122,opt,name=safety_control_mode_config_val,json=safetyControlModeConfigVal" json:"safety_control_mode_config_val,omitempty"`
	// Total Receive Power for Multi_Lane Optics in dBm
	TotalRxPower int32 `protobuf:"zigzag32,123,opt,name=total_rx_power,json=totalRxPower" json:"total_rx_power,omitempty"`
	// Total Transmit Power for Multi_Lane Optics in dBm
	TotalTxPower int32 `protobuf:"zigzag32,124,opt,name=total_tx_power,json=totalTxPower" json:"total_tx_power,omitempty"`
	// Transceiver Vendor Details
	TransceiverInfo *OpticsTransceiverData `protobuf:"bytes,125,opt,name=transceiver_info,json=transceiverInfo" json:"transceiver_info,omitempty"`
	// Is BO configured ?
	IsBoConfigured bool `protobuf:"varint,126,opt,name=is_bo_configured,json=isBoConfigured" json:"is_bo_configured,omitempty"`
	// Are the Extended Parameters Valid ?
	IsExtParamValid bool `protobuf:"varint,127,opt,name=is_ext_param_valid,json=isExtParamValid" json:"is_ext_param_valid,omitempty"`
	// Extended optics parameters
	ExtParamVal *OpticsExtParam `protobuf:"bytes,128,opt,name=ext_param_val,json=extParamVal" json:"ext_param_val,omitempty"`
	// Extended optics parameters threshold values
	ExtParamThresholdVal *OpticsExtThresholdParam `protobuf:"bytes,129,opt,name=ext_param_threshold_val,json=extParamThresholdVal" json:"ext_param_threshold_val,omitempty"`
	// Are there any alarms ?
	AlarmDetected bool `protobuf:"varint,130,opt,name=alarm_detected,json=alarmDetected" json:"alarm_detected,omitempty"`
	// Rx Low Warning threshold value in units of 0.1dBm
	RxLowWarningThreshold int32 `protobuf:"zigzag32,131,opt,name=rx_low_warning_threshold,json=rxLowWarningThreshold" json:"rx_low_warning_threshold,omitempty"`
	// Rx High Warning threshold value in units of 0.1dBm
	RxHighWarningThreshold int32 `protobuf:"zigzag32,132,opt,name=rx_high_warning_threshold,json=rxHighWarningThreshold" json:"rx_high_warning_threshold,omitempty"`
	// Tx Low Warning threshold value in units of 0.1dBm
	TxLowWarningThreshold int32 `protobuf:"zigzag32,133,opt,name=tx_low_warning_threshold,json=txLowWarningThreshold" json:"tx_low_warning_threshold,omitempty"`
	// Tx High Warning threshold value in units of 0.1dBm
	TxHighWarningThreshold int32 `protobuf:"zigzag32,134,opt,name=tx_high_warning_threshold,json=txHighWarningThreshold" json:"tx_high_warning_threshold,omitempty"`
	// LBC high Warning threshold default value in unit of 0.001mA
	LbcThHighWarningDefault int32 `protobuf:"zigzag32,135,opt,name=lbc_th_high_warning_default,json=lbcThHighWarningDefault" json:"lbc_th_high_warning_default,omitempty"`
	// LBC low warning threshold default value in units of 0.001mA
	LbcThLowWarningDefault int32 `protobuf:"zigzag32,136,opt,name=lbc_th_low_warning_default,json=lbcThLowWarningDefault" json:"lbc_th_low_warning_default,omitempty"`
	// Temp Low warning threshold value in the units 0.01 C
	TempLowWarningThreshold int32 `protobuf:"zigzag32,137,opt,name=temp_low_warning_threshold,json=tempLowWarningThreshold" json:"temp_low_warning_threshold,omitempty"`
	// Temp High warning threshold value in the units of 0.01 C
	TempHighWarningThreshold int32 `protobuf:"zigzag32,138,opt,name=temp_high_warning_threshold,json=tempHighWarningThreshold" json:"temp_high_warning_threshold,omitempty"`
	// Volt Low warning threshold value
	VoltLowWarningThreshold int32 `protobuf:"zigzag32,139,opt,name=volt_low_warning_threshold,json=voltLowWarningThreshold" json:"volt_low_warning_threshold,omitempty"`
	// Volt High warning threshold value
	VoltHighWarningThreshold int32 `protobuf:"zigzag32,140,opt,name=volt_high_warning_threshold,json=voltHighWarningThreshold" json:"volt_high_warning_threshold,omitempty"`
}

func (m *OpticsEdmInfo_COMBINED) Reset()                    { *m = OpticsEdmInfo_COMBINED{} }
func (m *OpticsEdmInfo_COMBINED) String() string            { return proto.CompactTextString(m) }
func (*OpticsEdmInfo_COMBINED) ProtoMessage()               {}
func (*OpticsEdmInfo_COMBINED) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OpticsEdmInfo_COMBINED) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetTransportAdminState() string {
	if m != nil {
		return m.TransportAdminState
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetOpticsPresent() bool {
	if m != nil {
		return m.OpticsPresent
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetOpticsType() string {
	if m != nil {
		return m.OpticsType
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetOpticsModule() string {
	if m != nil {
		return m.OpticsModule
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDwdmCarrierBand() string {
	if m != nil {
		return m.DwdmCarrierBand
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDwdmCarrierChannel() string {
	if m != nil {
		return m.DwdmCarrierChannel
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDwdmCarrierFrequency() string {
	if m != nil {
		return m.DwdmCarrierFrequency
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDwdmCarrierWavelength() string {
	if m != nil {
		return m.DwdmCarrierWavelength
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetGreyWavelength() uint32 {
	if m != nil {
		return m.GreyWavelength
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetRxLowThreshold() int32 {
	if m != nil {
		return m.RxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetRxHighThreshold() int32 {
	if m != nil {
		return m.RxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLbcHighThreshold() int32 {
	if m != nil {
		return m.LbcHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxLowThreshold() int32 {
	if m != nil {
		return m.TxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxHighThreshold() int32 {
	if m != nil {
		return m.TxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLbcThHighDefault() int32 {
	if m != nil {
		return m.LbcThHighDefault
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLbcThLowDefault() int32 {
	if m != nil {
		return m.LbcThLowDefault
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTempLowThreshold() int32 {
	if m != nil {
		return m.TempLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTempHighThreshold() int32 {
	if m != nil {
		return m.TempHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetVoltLowThreshold() int32 {
	if m != nil {
		return m.VoltLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetVoltHighThreshold() int32 {
	if m != nil {
		return m.VoltHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCd() int32 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCdMin() int32 {
	if m != nil {
		return m.CdMin
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCdMax() int32 {
	if m != nil {
		return m.CdMax
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCdLowThreshold() int32 {
	if m != nil {
		return m.CdLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCdHighThreshold() int32 {
	if m != nil {
		return m.CdHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetOsnrLowThreshold() string {
	if m != nil {
		return m.OsnrLowThreshold
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDgdHighThreshold() string {
	if m != nil {
		return m.DgdHighThreshold
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPolarizationModeDispersion() string {
	if m != nil {
		return m.PolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetSecondOrderPolarizationModeDispersion() string {
	if m != nil {
		return m.SecondOrderPolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetOpticalSignalToNoiseRatio() string {
	if m != nil {
		return m.OpticalSignalToNoiseRatio
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPolarizationDependentLoss() string {
	if m != nil {
		return m.PolarizationDependentLoss
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPolarizationChangeRate() string {
	if m != nil {
		return m.PolarizationChangeRate
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetDifferentialGroupDelay() string {
	if m != nil {
		return m.DifferentialGroupDelay
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPhaseNoise() string {
	if m != nil {
		return m.PhaseNoise
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPmEnable() uint32 {
	if m != nil {
		return m.PmEnable
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLaserState() string {
	if m != nil {
		return m.LaserState
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetLedState() string {
	if m != nil {
		return m.LedState
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetNetworkSrlgInfo() *OpticsEdmNetworkSrlgInfo {
	if m != nil {
		return m.NetworkSrlgInfo
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetLaneData() []*OpticsEdmLaneData {
	if m != nil {
		return m.LaneData
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetControllerState() string {
	if m != nil {
		return m.ControllerState
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetFormFactor() string {
	if m != nil {
		return m.FormFactor
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPhyType() string {
	if m != nil {
		return m.PhyType
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetOpticsAlarmInfo() *OpticsEdmAlarmInfo {
	if m != nil {
		return m.OpticsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetOtsAlarmInfo() *OtsEdmAlarmInfo {
	if m != nil {
		return m.OtsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetRxPower() int32 {
	if m != nil {
		return m.RxPower
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCfgTxPower() int32 {
	if m != nil {
		return m.CfgTxPower
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetCfgTxPowerConfigurable() bool {
	if m != nil {
		return m.CfgTxPowerConfigurable
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetVoltage() int32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetDisplayVoltTemp() bool {
	if m != nil {
		return m.DisplayVoltTemp
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetCdConfigurable() bool {
	if m != nil {
		return m.CdConfigurable
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetOpticsFec() string {
	if m != nil {
		return m.OpticsFec
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetPortStatus() string {
	if m != nil {
		return m.PortStatus
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetRxVoaAttenuation() int32 {
	if m != nil {
		return m.RxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxVoaAttenuation() int32 {
	if m != nil {
		return m.TxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliGain() int32 {
	if m != nil {
		return m.AmpliGain
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliTilt() int32 {
	if m != nil {
		return m.AmpliTilt
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetRxPowerThConfigurable() bool {
	if m != nil {
		return m.RxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetTxPowerThConfigurable() bool {
	if m != nil {
		return m.TxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetRxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.RxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.TxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliControlModeConfigVal() string {
	if m != nil {
		return m.AmpliControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliGainRangeConfigVal() string {
	if m != nil {
		return m.AmpliGainRangeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliGainConfigVal() int32 {
	if m != nil {
		return m.AmpliGainConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliTiltConfigVal() int32 {
	if m != nil {
		return m.AmpliTiltConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliChannelPowerConfigVal() int32 {
	if m != nil {
		return m.AmpliChannelPowerConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetChannelPowerMaxDeltaConfigVal() int32 {
	if m != nil {
		return m.ChannelPowerMaxDeltaConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliGainThrDegLowConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegLowConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetAmpliGainThrDegHighConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegHighConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetOsriConfigVal() bool {
	if m != nil {
		return m.OsriConfigVal
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetSafetyControlModeConfigVal() string {
	if m != nil {
		return m.SafetyControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo_COMBINED) GetTotalRxPower() int32 {
	if m != nil {
		return m.TotalRxPower
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTotalTxPower() int32 {
	if m != nil {
		return m.TotalTxPower
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTransceiverInfo() *OpticsTransceiverData {
	if m != nil {
		return m.TransceiverInfo
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetIsBoConfigured() bool {
	if m != nil {
		return m.IsBoConfigured
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetIsExtParamValid() bool {
	if m != nil {
		return m.IsExtParamValid
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetExtParamVal() *OpticsExtParam {
	if m != nil {
		return m.ExtParamVal
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetExtParamThresholdVal() *OpticsExtThresholdParam {
	if m != nil {
		return m.ExtParamThresholdVal
	}
	return nil
}

func (m *OpticsEdmInfo_COMBINED) GetAlarmDetected() bool {
	if m != nil {
		return m.AlarmDetected
	}
	return false
}

func (m *OpticsEdmInfo_COMBINED) GetRxLowWarningThreshold() int32 {
	if m != nil {
		return m.RxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetRxHighWarningThreshold() int32 {
	if m != nil {
		return m.RxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxLowWarningThreshold() int32 {
	if m != nil {
		return m.TxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTxHighWarningThreshold() int32 {
	if m != nil {
		return m.TxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLbcThHighWarningDefault() int32 {
	if m != nil {
		return m.LbcThHighWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetLbcThLowWarningDefault() int32 {
	if m != nil {
		return m.LbcThLowWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTempLowWarningThreshold() int32 {
	if m != nil {
		return m.TempLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetTempHighWarningThreshold() int32 {
	if m != nil {
		return m.TempHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetVoltLowWarningThreshold() int32 {
	if m != nil {
		return m.VoltLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo_COMBINED) GetVoltHighWarningThreshold() int32 {
	if m != nil {
		return m.VoltHighWarningThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*OpticsEdmInfo_KEYS)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_info_KEYS")
	proto.RegisterType((*OpticsEdmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_info")
	proto.RegisterType((*LaneAlarmDetail)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.lane_alarm_detail")
	proto.RegisterType((*LaneEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.lane_edm_alarm_info")
	proto.RegisterType((*OpticsEdmLaneData)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_lane_data")
	proto.RegisterType((*OpticsTransceiverData)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_transceiver_data")
	proto.RegisterType((*OpticsEdmNetworkSrlgStructure)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_network_srlg_structure")
	proto.RegisterType((*OpticsEdmNetworkSrlgInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_network_srlg_info")
	proto.RegisterType((*OpticsAlarmDetail)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_alarm_detail")
	proto.RegisterType((*OpticsEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_alarm_info")
	proto.RegisterType((*OtsEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.ots_edm_alarm_info")
	proto.RegisterType((*OpticsExtParam)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_ext_param")
	proto.RegisterType((*OpticsExtThresholdParam)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_ext_threshold_param")
	proto.RegisterType((*OpticsEdmInfo_COMBINED)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_info_COMBINED")
}

func init() { proto.RegisterFile("optics_edm_info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x73, 0xdc, 0x46,
	0x76, 0xae, 0xb1, 0x6e, 0xe4, 0xa1, 0x78, 0x03, 0x6f, 0xa0, 0x28, 0x4a, 0xd4, 0x48, 0xb2, 0xa8,
	0x8b, 0x65, 0x69, 0x48, 0x5b, 0xb2, 0x2d, 0xcb, 0xa2, 0x48, 0xc9, 0x92, 0x97, 0x92, 0x99, 0x11,
	0x57, 0xb2, 0x77, 0x37, 0x0b, 0x37, 0x81, 0xe6, 0x0c, 0xd6, 0x18, 0x00, 0xdb, 0xe8, 0x21, 0x87,
	0xbb, 0xd9, 0xec, 0x35, 0xd9, 0x78, 0x9d, 0x4d, 0x2a, 0xa9, 0xa4, 0x92, 0xa7, 0x3c, 0x24, 0xb5,
	0x55, 0x79, 0xcb, 0xbf, 0xc8, 0xe3, 0xfe, 0x81, 0xfc, 0x8d, 0x3c, 0x24, 0x79, 0x4a, 0xf5, 0x69,
	0x00, 0x83, 0x06, 0x7a, 0x86, 0xda, 0x4a, 0x71, 0xc6, 0xa9, 0x9a, 0x37, 0x4e, 0xf7, 0x39, 0xdf,
	0xf9, 0x70, 0xfa, 0xe0, 0xf4, 0xe9, 0x46, 0x03, 0x84, 0x99, 0x20, 0xe4, 0xae, 0x1d, 0x59, 0xd4,
	0x69, 0x58, 0xae, 0xbf, 0x1b, 0xdc, 0x0c, 0x59, 0xc0, 0x03, 0x63, 0xdb, 0x76, 0x23, 0x3b, 0xb0,
	0xdc, 0x20, 0xb2, 0x5a, 0xcc, 0xb2, 0x03, 0x9f, 0xb3, 0xc0, 0xf3, 0x28, 0xb3, 0x62, 0xf1, 0x20,
	0xa4, 0xec, 0xa6, 0xe6, 0xef, 0x30, 0x60, 0x3c, 0xca, 0xfe, 0x48, 0xfe, 0x16, 0xd8, 0xe5, 0x6b,
	0x30, 0x9d, 0x33, 0x67, 0x7d, 0xeb, 0xd1, 0xe7, 0x2f, 0x0c, 0x03, 0x8e, 0xfb, 0xa4, 0x41, 0xcd,
	0xd2, 0x52, 0x69, 0x79, 0xb8, 0x8a, 0x7f, 0x97, 0xff, 0xe3, 0x0a, 0x8c, 0xe7, 0x84, 0x8d, 0x0a,
	0xcc, 0x70, 0x46, 0xfc, 0x48, 0x00, 0x5b, 0xc4, 0x69, 0xb8, 0xbe, 0x15, 0x71, 0xc2, 0xa9, 0x59,
	0x41, 0xc5, 0xa9, 0xb4, 0x73, 0x4d, 0xf4, 0xbd, 0x10, 0x5d, 0xc6, 0x65, 0x18, 0x4b, 0xe8, 0x30,
	0x1a, 0x51, 0x9f, 0x9b, 0x2b, 0x4b, 0xa5, 0xe5, 0xa1, 0xea, 0xa8, 0x6c, 0xdd, 0x92, 0x8d, 0xc6,
	0x79, 0x18, 0x89, 0xc5, 0xf8, 0x41, 0x48, 0xcd, 0x55, 0x04, 0x04, 0xd9, 0xb4, 0x7d, 0x10, 0x52,
	0xe3, 0x22, 0xc4, 0x1a, 0x56, 0x23, 0x70, 0x9a, 0x1e, 0x35, 0xdf, 0x41, 0x91, 0xd3, 0xb2, 0xf1,
	0x19, 0xb6, 0x19, 0xd7, 0x60, 0xd2, 0xd9, 0x77, 0x1a, 0x96, 0x4d, 0x18, 0x73, 0x29, 0xb3, 0x76,
	0x88, 0xef, 0x98, 0xef, 0xa2, 0xe0, 0xb8, 0xe8, 0x58, 0x97, 0xed, 0x0f, 0x89, 0xef, 0x18, 0xb7,
	0x60, 0x5a, 0x91, 0xb5, 0xeb, 0xc4, 0xf7, 0xa9, 0x67, 0xde, 0x41, 0x71, 0x23, 0x23, 0xbe, 0x2e,
	0x7b, 0x8c, 0x55, 0x98, 0x55, 0x34, 0x76, 0x19, 0xfd, 0x61, 0x93, 0xfa, 0xf6, 0x81, 0x79, 0x17,
	0x75, 0xa6, 0x33, 0x3a, 0x8f, 0x93, 0x3e, 0xe3, 0x5d, 0x98, 0x53, 0xb4, 0xf6, 0xc9, 0x1e, 0xf5,
	0xa8, 0x5f, 0xe3, 0x75, 0xf3, 0x3d, 0x54, 0x9b, 0xc9, 0xa8, 0xbd, 0x4a, 0x3b, 0x8d, 0x2b, 0x30,
	0x5e, 0x63, 0xf4, 0x20, 0x2b, 0xff, 0xfe, 0x52, 0x69, 0x79, 0xb4, 0x3a, 0x26, 0x9a, 0x33, 0x82,
	0xcb, 0x30, 0xc1, 0x5a, 0x96, 0x17, 0xec, 0x5b, 0xbc, 0xce, 0x68, 0x54, 0x0f, 0x3c, 0xc7, 0xfc,
	0x60, 0xa9, 0xb4, 0x3c, 0x59, 0x1d, 0x63, 0xad, 0xcd, 0x60, 0x7f, 0x3b, 0x69, 0x15, 0xee, 0x61,
	0x2d, 0xab, 0xee, 0xd6, 0xea, 0x19, 0xd1, 0x7b, 0x28, 0x3a, 0xce, 0x5a, 0x4f, 0xdc, 0x5a, 0xbd,
	0x2d, 0x7b, 0x03, 0x0c, 0x6f, 0xc7, 0xce, 0x0b, 0x7f, 0x88, 0xc2, 0x13, 0xde, 0x8e, 0xad, 0x4a,
	0x2f, 0xc3, 0x04, 0xcf, 0x73, 0xb8, 0x2f, 0x39, 0xf0, 0x02, 0x07, 0x5e, 0xe0, 0xf0, 0x91, 0xe4,
	0xc0, 0x73, 0x1c, 0xde, 0x82, 0x29, 0xc1, 0x81, 0xd7, 0xa5, 0xbc, 0x43, 0x77, 0x49, 0xd3, 0xe3,
	0xe6, 0x83, 0x94, 0xc4, 0x76, 0x5d, 0x28, 0x6c, 0xc8, 0x76, 0xe3, 0xba, 0xa4, 0xcc, 0xeb, 0x48,
	0x24, 0x91, 0x5e, 0x93, 0xd8, 0x28, 0xbd, 0x19, 0xec, 0x27, 0xc2, 0x37, 0xc0, 0xe0, 0xb4, 0x11,
	0xe6, 0x38, 0x3f, 0x94, 0xd0, 0xa2, 0x47, 0x61, 0x7d, 0x13, 0xa6, 0x50, 0x3a, 0xc7, 0x7b, 0x1d,
	0xc5, 0x27, 0x45, 0x57, 0xc1, 0x7b, 0x7b, 0x81, 0xc7, 0x73, 0xe8, 0x1b, 0x12, 0x5d, 0xf4, 0xe4,
	0xd1, 0x51, 0x3a, 0x87, 0xfe, 0x48, 0xa2, 0x8b, 0x2e, 0x15, 0x7d, 0x0c, 0xde, 0xb0, 0x1d, 0xf3,
	0x31, 0x76, 0xbf, 0x61, 0x3b, 0xc6, 0x0c, 0x9c, 0xb4, 0x1d, 0xab, 0xe1, 0xfa, 0xe6, 0xc7, 0xd8,
	0x76, 0xc2, 0x76, 0x9e, 0xb9, 0x7e, 0xd2, 0x4c, 0x5a, 0xe6, 0x93, 0xb4, 0x99, 0xb4, 0xc4, 0x58,
	0xd9, 0x4e, 0x8e, 0xd9, 0x53, 0x39, 0x56, 0xb6, 0x93, 0x1f, 0x2b, 0xdb, 0xc9, 0xb3, 0xfa, 0x44,
	0xfa, 0xd3, 0x76, 0x0a, 0x57, 0x1c, 0x44, 0x3e, 0xcb, 0xe1, 0x7e, 0x0b, 0x23, 0x7c, 0x42, 0xf4,
	0x28, 0xc8, 0x37, 0xc0, 0x70, 0x6a, 0x05, 0xe8, 0x4d, 0x29, 0xed, 0xd4, 0x72, 0xd8, 0x0f, 0xe0,
	0x6c, 0x18, 0x78, 0x84, 0xb9, 0x3f, 0x22, 0xdc, 0x0d, 0x7c, 0x91, 0x01, 0xa8, 0xe5, 0xb8, 0x51,
	0x48, 0x59, 0xe4, 0x06, 0xbe, 0xf9, 0x0c, 0xf5, 0xce, 0x64, 0x65, 0x9e, 0x05, 0x0e, 0xdd, 0x48,
	0x25, 0x8c, 0xcf, 0xe0, 0x6a, 0x44, 0xed, 0xc0, 0x77, 0xac, 0x80, 0x39, 0x94, 0x59, 0x5d, 0xe1,
	0x9e, 0x23, 0xdc, 0x65, 0xa9, 0xf0, 0xa9, 0x90, 0xdf, 0xea, 0x8c, 0xfc, 0x00, 0x16, 0x31, 0x05,
	0x11, 0xcf, 0x8a, 0xdc, 0x9a, 0x4f, 0x3c, 0x8b, 0x07, 0x96, 0x1f, 0xb8, 0x11, 0xb5, 0x98, 0x90,
	0x37, 0x3f, 0x45, 0xb4, 0xf9, 0x58, 0xe8, 0x05, 0xca, 0x6c, 0x07, 0xcf, 0x85, 0x44, 0x55, 0x08,
	0x18, 0xf7, 0x61, 0x41, 0xa1, 0xe3, 0xd0, 0x90, 0xfa, 0x0e, 0xf5, 0x45, 0xf4, 0x44, 0x91, 0xb9,
	0x25, 0xf5, 0xb3, 0x22, 0x1b, 0x89, 0xc4, 0x66, 0x10, 0x45, 0xc6, 0x5d, 0x30, 0x15, 0x7d, 0x91,
	0xc8, 0x6a, 0x68, 0x9d, 0x9a, 0x7f, 0x84, 0xca, 0xb3, 0xd9, 0xfe, 0x75, 0xec, 0xae, 0x8a, 0xdc,
	0x7c, 0x17, 0x4c, 0xc7, 0xdd, 0xdd, 0xa5, 0x8c, 0xfa, 0xdc, 0x25, 0x9e, 0x55, 0x63, 0x41, 0x33,
	0xb4, 0x1c, 0xea, 0x91, 0x03, 0xb3, 0x2a, 0x35, 0xb3, 0xfd, 0x1f, 0x8b, 0xee, 0x0d, 0xd1, 0x2b,
	0xd2, 0x75, 0x58, 0x27, 0x11, 0x95, 0x57, 0x6a, 0xbe, 0x90, 0xe9, 0x1a, 0x9b, 0xf0, 0xca, 0x8c,
	0x05, 0x18, 0x0e, 0x1b, 0x16, 0xf5, 0xc9, 0x8e, 0x47, 0xcd, 0x6d, 0xcc, 0x5b, 0x43, 0x61, 0xe3,
	0x11, 0xfe, 0x16, 0xda, 0x1e, 0x89, 0x28, 0x8b, 0x67, 0x8f, 0x6f, 0x4b, 0x6d, 0x6c, 0x92, 0x93,
	0xc6, 0x02, 0x0c, 0x7b, 0xd4, 0x89, 0xbb, 0x5f, 0x62, 0xf7, 0x90, 0x47, 0x1d, 0xd9, 0xf9, 0x4f,
	0x25, 0x98, 0xf4, 0x29, 0xdf, 0x0f, 0xd8, 0x97, 0x56, 0xc4, 0xbc, 0x1a, 0xce, 0x4d, 0xe6, 0xab,
	0xa5, 0xd2, 0xf2, 0x48, 0x85, 0xdd, 0x3c, 0x8a, 0x89, 0xf3, 0x66, 0x66, 0x22, 0x2c, 0x58, 0xae,
	0x8e, 0xc7, 0x4d, 0x2f, 0x98, 0x57, 0x7b, 0x2a, 0xa6, 0xc9, 0x5f, 0x97, 0x60, 0xd8, 0x23, 0x3e,
	0xb5, 0x1c, 0xc2, 0x89, 0xf9, 0xd9, 0xd2, 0xb1, 0xe5, 0x91, 0xca, 0x0f, 0x8e, 0x9c, 0x58, 0x6a,
	0xb1, 0x3a, 0x24, 0xfe, 0xdc, 0x20, 0x9c, 0x18, 0x57, 0x61, 0x22, 0x63, 0x49, 0xba, 0xf3, 0x73,
	0x39, 0x1d, 0xb6, 0xdb, 0xa5, 0x57, 0xcf, 0xc3, 0xc8, 0x6e, 0xc0, 0x1a, 0xd6, 0x2e, 0xb1, 0x79,
	0xc0, 0xcc, 0xef, 0xc8, 0x31, 0x11, 0x4d, 0x8f, 0xb1, 0xc5, 0x98, 0x87, 0xa1, 0xb0, 0x7e, 0x20,
	0xa7, 0xe7, 0xef, 0x62, 0xef, 0xa9, 0xb0, 0x7e, 0x80, 0x73, 0xf3, 0x3f, 0x94, 0x60, 0x32, 0x66,
	0x42, 0x3c, 0xc2, 0x64, 0xb5, 0x60, 0x7e, 0x0f, 0x47, 0xe4, 0xcb, 0x23, 0xbf, 0xf0, 0xb6, 0xc9,
	0x6a, 0x5c, 0xb1, 0xac, 0x89, 0x16, 0x1c, 0x8a, 0xbf, 0x2a, 0xc1, 0x58, 0xc0, 0x15, 0x5a, 0x7f,
	0x8c, 0xb4, 0xea, 0x47, 0x44, 0x8b, 0x17, 0x38, 0x9d, 0x0e, 0x78, 0x86, 0xd0, 0x3c, 0x0c, 0xb1,
	0x96, 0x15, 0x06, 0xfb, 0x94, 0x99, 0xdf, 0xc7, 0x4c, 0x7a, 0x8a, 0xb5, 0xb6, 0xc4, 0x4f, 0xd1,
	0xc5, 0x93, 0x2e, 0x4b, 0x76, 0xf1, 0xb8, 0x6b, 0x09, 0x4e, 0xdb, 0xbb, 0x35, 0x2b, 0xed, 0xfe,
	0x02, 0xbb, 0xc1, 0xde, 0xad, 0x6d, 0xc7, 0x12, 0xef, 0xc1, 0x7c, 0x56, 0x42, 0x5c, 0xd0, 0xae,
	0x5b, 0x6b, 0x32, 0xbc, 0xff, 0x08, 0x56, 0x5c, 0xb3, 0x6d, 0xf1, 0xf5, 0x4c, 0xaf, 0xb1, 0x04,
	0x23, 0x62, 0x02, 0xa3, 0x8c, 0xf0, 0x26, 0xa3, 0xe6, 0x0e, 0x62, 0x67, 0x9b, 0x0c, 0x13, 0x4e,
	0x89, 0x49, 0x88, 0xd4, 0xa8, 0x69, 0x4b, 0x62, 0xf1, 0x4f, 0x2c, 0xb8, 0xdc, 0x28, 0xf4, 0xc8,
	0x81, 0x85, 0x33, 0x98, 0xd0, 0x32, 0x1d, 0x34, 0x37, 0x1e, 0x77, 0xbc, 0x0c, 0x3c, 0xbe, 0x4d,
	0x1b, 0xa1, 0x28, 0x68, 0x6c, 0x47, 0x25, 0x46, 0x51, 0x72, 0xcc, 0x76, 0x14, 0x42, 0x8b, 0x10,
	0x17, 0x7e, 0xd6, 0x2e, 0xb5, 0xcd, 0x5d, 0x8c, 0xb5, 0x61, 0xd9, 0xf2, 0x98, 0xda, 0x98, 0x5a,
	0x44, 0x01, 0x8a, 0x91, 0x58, 0x93, 0xc9, 0x41, 0x34, 0x60, 0x28, 0x8a, 0xc4, 0x24, 0x3a, 0x45,
	0xac, 0x37, 0x23, 0xb3, 0x1e, 0x27, 0xa6, 0x80, 0xf1, 0x17, 0xd8, 0x22, 0x66, 0x1e, 0xd6, 0xb2,
	0xf6, 0x02, 0x62, 0x11, 0xce, 0xa9, 0xdf, 0xc4, 0x9c, 0x68, 0xba, 0x72, 0x66, 0x66, 0xad, 0x97,
	0x01, 0x59, 0x6b, 0xb7, 0x63, 0x95, 0x50, 0x94, 0xfe, 0x41, 0x5c, 0x25, 0xe4, 0xa5, 0x17, 0x01,
	0x48, 0x23, 0xf4, 0x5c, 0xab, 0x46, 0x5c, 0xdf, 0xfc, 0x12, 0xa5, 0x86, 0xb1, 0xe5, 0x63, 0xe2,
	0x66, 0xba, 0xb9, 0xeb, 0x71, 0xd3, 0xcb, 0x74, 0x6f, 0xbb, 0x1e, 0x37, 0xee, 0x80, 0x99, 0x84,
	0x86, 0xa8, 0x61, 0x14, 0x47, 0x35, 0xd0, 0x51, 0x33, 0x71, 0xa8, 0x6c, 0xd7, 0x15, 0x7f, 0xdd,
	0x01, 0x93, 0x77, 0x52, 0xf4, 0xa5, 0x22, 0xd7, 0x2a, 0x3e, 0x80, 0xc5, 0xa2, 0x2f, 0x62, 0x7d,
	0x6b, 0x8f, 0x78, 0x66, 0x80, 0x1c, 0xe7, 0xf3, 0x6e, 0x91, 0x20, 0x2f, 0x89, 0x27, 0x10, 0x78,
	0x57, 0x84, 0x50, 0x22, 0xf0, 0x6e, 0x08, 0xd2, 0x29, 0xf1, 0x2d, 0x28, 0x67, 0xe3, 0x0c, 0xc2,
	0x0f, 0xe5, 0xfc, 0x87, 0x42, 0xeb, 0x52, 0x46, 0x4c, 0xc1, 0x6d, 0x84, 0x7b, 0xb0, 0xd0, 0xf6,
	0xba, 0xc5, 0x70, 0xf2, 0xcb, 0xe8, 0x33, 0xd4, 0x9f, 0x4b, 0x87, 0xa1, 0x2a, 0x04, 0xda, 0xda,
	0xb7, 0x61, 0x26, 0xa3, 0x9d, 0xd1, 0x8b, 0x90, 0xb9, 0x91, 0xea, 0x69, 0x54, 0xc4, 0x38, 0x66,
	0x55, 0x78, 0x46, 0x45, 0x0c, 0x69, 0x5b, 0xe5, 0x21, 0x9c, 0x8b, 0xaf, 0x52, 0xae, 0x25, 0x94,
	0xbb, 0x14, 0x75, 0x9b, 0xa8, 0x7b, 0x46, 0x5e, 0xa6, 0x14, 0xca, 0xdc, 0xaa, 0x02, 0xe3, 0x29,
	0x94, 0x55, 0xed, 0x06, 0x69, 0x89, 0xc9, 0x9a, 0x93, 0x2c, 0xce, 0x1e, 0xe2, 0x2c, 0xda, 0x19,
	0x88, 0x67, 0xa4, 0xb5, 0x21, 0xc4, 0xda, 0x50, 0x8f, 0xe1, 0x42, 0xe6, 0xa2, 0x79, 0x9d, 0x59,
	0x0e, 0xad, 0x61, 0xe9, 0x96, 0x41, 0xda, 0x47, 0xa4, 0x85, 0xd4, 0x01, 0xdb, 0x75, 0xb6, 0x41,
	0x6b, 0x9b, 0xc1, 0x7e, 0x1b, 0xe7, 0x09, 0x94, 0x35, 0x38, 0x58, 0xd5, 0x65, 0x80, 0x5a, 0x08,
	0x74, 0x36, 0x07, 0x24, 0x4a, 0xbc, 0x36, 0xd2, 0x9b, 0x30, 0x1e, 0x44, 0xcc, 0xcd, 0xaa, 0x1d,
	0xc4, 0xeb, 0xc4, 0x88, 0xb9, 0x8a, 0x23, 0x23, 0xb2, 0x4b, 0xf9, 0x41, 0xc7, 0x78, 0xf9, 0x91,
	0x2c, 0x06, 0xa5, 0x94, 0x36, 0x60, 0x2e, 0xc1, 0x18, 0x0f, 0x38, 0xf1, 0xac, 0x34, 0x13, 0xff,
	0x18, 0x19, 0x9e, 0xc6, 0xd6, 0x6a, 0x9c, 0x51, 0x53, 0xa9, 0x34, 0xeb, 0xfe, 0x49, 0x46, 0x2a,
	0xc9, 0xbb, 0xff, 0x58, 0x82, 0x09, 0x5c, 0xf6, 0xda, 0xd4, 0xdd, 0xa3, 0x4c, 0x4e, 0x31, 0x3f,
	0xc1, 0x29, 0xa6, 0x71, 0xa4, 0x33, 0x5f, 0xd6, 0x28, 0xce, 0xfa, 0xe3, 0x99, 0x16, 0x9c, 0x6a,
	0x96, 0x61, 0xc2, 0x8d, 0xac, 0x9d, 0x20, 0x4d, 0x08, 0xd4, 0x31, 0xff, 0x54, 0x26, 0x5c, 0x37,
	0x7a, 0x18, 0xac, 0xa7, 0xad, 0x62, 0xe1, 0xe4, 0x46, 0x16, 0x6d, 0x71, 0x2b, 0x24, 0x8c, 0x34,
	0x84, 0x1b, 0x5d, 0xc7, 0xfc, 0xa9, 0x4c, 0xe3, 0x6e, 0xf4, 0xa8, 0xc5, 0xb7, 0x44, 0xfb, 0x4b,
	0xd1, 0x6c, 0x7c, 0x5d, 0x82, 0x51, 0x45, 0xd4, 0xfc, 0x59, 0x09, 0xaf, 0x77, 0xf7, 0x68, 0x67,
	0xfa, 0xc4, 0x64, 0x75, 0x84, 0xb6, 0xf9, 0x18, 0xff, 0x5a, 0x82, 0xb9, 0x36, 0x9b, 0x74, 0x29,
	0x81, 0xbc, 0x7e, 0x2e, 0x79, 0x85, 0x47, 0xce, 0xab, 0x6d, 0x56, 0x32, 0x9c, 0x4e, 0x18, 0xa6,
	0x4b, 0x18, 0x19, 0xe2, 0x63, 0xb2, 0x2c, 0x70, 0x28, 0xa7, 0x36, 0xa7, 0x8e, 0xf9, 0x8b, 0x92,
	0x0c, 0x71, 0x6c, 0xde, 0x88, 0x5b, 0x45, 0x55, 0x1e, 0xaf, 0xe7, 0xf7, 0x09, 0xf3, 0x5d, 0xbf,
	0x96, 0x59, 0x21, 0xfd, 0xb2, 0x84, 0x31, 0x38, 0x83, 0x0b, 0xfb, 0x57, 0xb2, 0xbb, 0xbd, 0x4e,
	0x7a, 0x1f, 0xe6, 0x93, 0xf5, 0x7d, 0x51, 0xf5, 0x57, 0x52, 0x75, 0x56, 0x2e, 0xf4, 0x0b, 0xba,
	0x77, 0x71, 0x12, 0xd1, 0x5b, 0xfd, 0xb3, 0xd8, 0x2a, 0xef, 0x64, 0x95, 0x77, 0xb4, 0xfa, 0xe7,
	0xb1, 0x55, 0xae, 0xb7, 0xfa, 0x21, 0x2c, 0x64, 0x57, 0xf8, 0x89, 0x7e, 0xb2, 0x76, 0xff, 0xb5,
	0xd4, 0x9e, 0x4b, 0x97, 0xfa, 0x31, 0x40, 0xb2, 0x88, 0xff, 0x00, 0xce, 0x64, 0x56, 0xfc, 0x79,
	0xed, 0xbf, 0x88, 0x6d, 0x27, 0x4b, 0xff, 0x9c, 0xf2, 0x3d, 0x38, 0x93, 0xee, 0x00, 0x14, 0x89,
	0x7f, 0x15, 0x9b, 0x8e, 0xb7, 0x02, 0x0a, 0xcc, 0xef, 0xc3, 0x42, 0x7b, 0x47, 0xa0, 0xa8, 0xfe,
	0x1b, 0xa9, 0x6e, 0x26, 0x5b, 0x03, 0x05, 0xfd, 0x7b, 0x70, 0x26, 0xdd, 0x21, 0x28, 0xaa, 0x7f,
	0x1d, 0x5b, 0x8f, 0xb7, 0x0a, 0x74, 0xd6, 0xdb, 0x3b, 0x06, 0x45, 0xf5, 0xbf, 0x8c, 0xad, 0x27,
	0x5b, 0x07, 0x79, 0xfd, 0xf2, 0x73, 0x98, 0xc4, 0xf5, 0x42, 0x1a, 0x90, 0xc4, 0xf5, 0x44, 0xed,
	0xe4, 0x46, 0xed, 0xe8, 0x94, 0xc1, 0x09, 0x6e, 0x94, 0x46, 0xa6, 0x09, 0xa7, 0xec, 0xa0, 0xe9,
	0x73, 0xca, 0xcc, 0x37, 0x70, 0x49, 0x97, 0xfc, 0x2c, 0xff, 0xfe, 0x04, 0x4c, 0x21, 0xa0, 0x5a,
	0xfc, 0x62, 0xb2, 0x40, 0x8e, 0x69, 0xaa, 0x95, 0xf7, 0x64, 0xed, 0x68, 0xee, 0xc9, 0xc2, 0x35,
	0x55, 0x47, 0x84, 0xf5, 0x24, 0xa5, 0x7f, 0x55, 0x82, 0xd3, 0xc2, 0xdf, 0x29, 0x99, 0x37, 0x7a,
	0x4b, 0x06, 0xbc, 0x60, 0x3f, 0xe1, 0x92, 0x7a, 0x26, 0x9d, 0x5e, 0x8e, 0xf5, 0xc1, 0x33, 0xdb,
	0x39, 0xcf, 0xa4, 0x64, 0x8e, 0xf7, 0xde, 0x33, 0x09, 0x97, 0x5f, 0x94, 0x60, 0x08, 0x3d, 0xe3,
	0xed, 0xd8, 0xe6, 0x89, 0xde, 0xf2, 0x38, 0x25, 0x0c, 0x6f, 0xee, 0xd8, 0xe5, 0xdf, 0x1d, 0x57,
	0xf6, 0xca, 0xd3, 0xc5, 0xb5, 0x28, 0xe2, 0xf1, 0x87, 0xeb, 0x3b, 0xb4, 0x85, 0xd1, 0x3c, 0x5a,
	0xc5, 0xd5, 0xfe, 0x53, 0xd1, 0x80, 0x19, 0x09, 0xb7, 0x36, 0x76, 0x5c, 0x12, 0x59, 0x76, 0x93,
	0x31, 0xea, 0x73, 0x2b, 0xa4, 0xcc, 0xa6, 0x3e, 0x8f, 0xef, 0x9a, 0x39, 0x94, 0x78, 0xe8, 0x92,
	0x68, 0x5d, 0xf6, 0x6f, 0xc9, 0x6e, 0x51, 0x0b, 0x6b, 0x94, 0x1b, 0xae, 0xe7, 0xb9, 0x16, 0x69,
	0x84, 0x11, 0x86, 0xc8, 0x68, 0x75, 0x3e, 0xaf, 0xff, 0x4c, 0x48, 0xac, 0x35, 0xc2, 0xc8, 0xb8,
	0x0c, 0x63, 0x58, 0x06, 0x34, 0x5c, 0x9e, 0x19, 0xc8, 0xc9, 0xea, 0x68, 0xd2, 0x2a, 0x5d, 0x7c,
	0x11, 0x46, 0x19, 0xc5, 0x52, 0x21, 0x96, 0x3a, 0x21, 0x4b, 0x9b, 0xb8, 0x51, 0x0a, 0xdd, 0x82,
	0xe9, 0x44, 0x28, 0xde, 0xd9, 0x92, 0xb2, 0x27, 0x65, 0x95, 0x1b, 0xf7, 0xc9, 0x0d, 0x2d, 0xa9,
	0x91, 0x3c, 0x1f, 0x10, 0xd6, 0x15, 0x95, 0x53, 0xa8, 0x32, 0x95, 0x74, 0x66, 0x75, 0xae, 0xc2,
	0x44, 0xd0, 0xe4, 0x61, 0x93, 0x67, 0xb6, 0xd3, 0x87, 0xe4, 0x16, 0xa3, 0x6c, 0x6f, 0xef, 0xa4,
	0xff, 0x4d, 0x09, 0xc6, 0x33, 0x43, 0x86, 0xa5, 0xd6, 0x30, 0xc6, 0x87, 0x7b, 0x84, 0xf1, 0x91,
	0x5b, 0xce, 0x8f, 0x8a, 0xc6, 0x74, 0x3d, 0x5f, 0xfe, 0xfd, 0x31, 0x98, 0xeb, 0x50, 0x91, 0x89,
	0x7c, 0xba, 0x47, 0x7d, 0x27, 0x88, 0xab, 0x42, 0xf9, 0x74, 0x05, 0x64, 0x13, 0x56, 0x68, 0x06,
	0x1c, 0x77, 0x08, 0xa7, 0x18, 0x16, 0xc3, 0x55, 0xfc, 0x5b, 0xac, 0xa8, 0x63, 0xbc, 0x58, 0x97,
	0xd1, 0x3d, 0x1c, 0xf7, 0xe1, 0x64, 0x77, 0xe3, 0x25, 0xb6, 0x57, 0xe9, 0x9e, 0xa8, 0xf0, 0x62,
	0xd9, 0x88, 0x32, 0x97, 0x78, 0x96, 0x1f, 0xe0, 0x78, 0x0f, 0x57, 0xe3, 0x67, 0x2e, 0x2f, 0xb0,
	0xf9, 0x79, 0x80, 0xbb, 0xb3, 0x0a, 0x6a, 0x48, 0x18, 0xc7, 0x51, 0x1f, 0xae, 0x4e, 0x64, 0x61,
	0xb7, 0x08, 0xe3, 0x22, 0x8a, 0xec, 0xc0, 0xf7, 0xa9, 0xcd, 0x03, 0x26, 0x97, 0xd9, 0x27, 0x51,
	0x72, 0x34, 0x6d, 0xc5, 0xb5, 0xf6, 0x2d, 0x98, 0x0e, 0xb8, 0x6f, 0x91, 0x30, 0xf4, 0x5c, 0x3b,
	0x59, 0xf9, 0x39, 0x14, 0x47, 0x7b, 0xb8, 0x6a, 0x04, 0xdc, 0x5f, 0x6b, 0x77, 0xad, 0x07, 0x0e,
	0x35, 0x56, 0x61, 0x36, 0x0a, 0x7c, 0xca, 0x8b, 0x3a, 0x43, 0xf2, 0x09, 0x0a, 0xf6, 0xe6, 0xb5,
	0xee, 0x82, 0x49, 0x79, 0x9d, 0x32, 0xa1, 0x68, 0x07, 0x62, 0x15, 0x41, 0x7c, 0x9b, 0x4a, 0xbd,
	0x61, 0xb9, 0x4d, 0x99, 0xf4, 0xaf, 0xa7, 0xdd, 0xa8, 0x79, 0x1b, 0xa6, 0x5d, 0x31, 0x3f, 0xe1,
	0xb6, 0x6c, 0x66, 0x8f, 0x03, 0x64, 0x3c, 0x26, 0x7d, 0xdb, 0xed, 0xae, 0x32, 0x85, 0x0b, 0x9d,
	0x76, 0xfb, 0x22, 0xce, 0x9a, 0x36, 0x6e, 0x88, 0x2c, 0x02, 0x44, 0x94, 0x5b, 0x7e, 0xb3, 0xb1,
	0x13, 0x4f, 0x69, 0xa3, 0xd5, 0xe1, 0x88, 0xf2, 0xe7, 0xd8, 0x60, 0x5c, 0x80, 0xd3, 0x59, 0x45,
	0xf3, 0x8d, 0xa5, 0x63, 0xcb, 0xa3, 0xd5, 0x91, 0xcc, 0x3e, 0x61, 0xf9, 0xdf, 0x4b, 0x70, 0xb6,
	0xdb, 0xae, 0xa2, 0xf1, 0xbb, 0x12, 0x18, 0x4a, 0x2b, 0x61, 0x8c, 0x1c, 0x98, 0x25, 0xdc, 0x4d,
	0xdc, 0xef, 0xed, 0x36, 0x67, 0x7a, 0xe1, 0xd5, 0x89, 0xcc, 0x35, 0xac, 0x09, 0x42, 0xe5, 0x2d,
	0x98, 0x52, 0xb6, 0xfe, 0xfe, 0xef, 0xb5, 0xc4, 0xbf, 0xbc, 0xad, 0x3c, 0x15, 0xcd, 0x54, 0x13,
	0xbf, 0xed, 0x50, 0x4d, 0xb8, 0x47, 0xea, 0x8e, 0xce, 0xf5, 0xc4, 0xd7, 0xfa, 0x7a, 0xa2, 0x87,
	0x74, 0xb2, 0x15, 0xc5, 0x6f, 0x3b, 0x54, 0x14, 0xbd, 0xf6, 0xce, 0x76, 0xce, 0x3b, 0xb9, 0x9a,
	0xa2, 0xc7, 0xde, 0x49, 0xd8, 0xfc, 0xaa, 0x58, 0x55, 0xf4, 0x90, 0x49, 0x52, 0x57, 0x18, 0x7f,
	0x5d, 0x82, 0xb1, 0x38, 0x84, 0x6f, 0x67, 0xe6, 0xd3, 0x9e, 0x92, 0x39, 0x2d, 0x63, 0xf8, 0xb6,
	0x74, 0x4c, 0x86, 0x51, 0x25, 0x33, 0x5d, 0xf7, 0x83, 0x51, 0xa5, 0xc0, 0x68, 0x25, 0x66, 0x34,
	0xd4, 0x27, 0x46, 0x2b, 0x05, 0x46, 0xab, 0x31, 0xa3, 0xe1, 0x3e, 0x31, 0x5a, 0x6d, 0xdf, 0xec,
	0x32, 0xf5, 0x24, 0x61, 0x04, 0x3d, 0xbf, 0xd9, 0x31, 0xf7, 0xdc, 0xce, 0xf3, 0x49, 0x82, 0x68,
	0xa4, 0x3f, 0x7c, 0x2a, 0x79, 0x3e, 0x49, 0x08, 0x9d, 0xee, 0x0f, 0x9f, 0x95, 0x3c, 0x9f, 0x24,
	0x80, 0x46, 0xfb, 0xc3, 0x67, 0x35, 0x17, 0xd1, 0x3c, 0x0d, 0xa0, 0xb1, 0xbe, 0x44, 0xf4, 0x76,
	0x21, 0x0f, 0xf1, 0x34, 0x84, 0xc6, 0xfb, 0xc4, 0xa8, 0x52, 0x60, 0x94, 0x04, 0xd1, 0x44, 0x9f,
	0x18, 0xad, 0x14, 0x18, 0x25, 0x61, 0x34, 0xd9, 0x27, 0x46, 0xb9, 0x3c, 0xd4, 0x0e, 0x23, 0xa3,
	0x1f, 0x71, 0xbd, 0x9d, 0xcf, 0x43, 0xed, 0x20, 0x9a, 0xea, 0x0f, 0x9f, 0x4a, 0x9e, 0x4f, 0x12,
	0x42, 0xd3, 0xfd, 0xe1, 0xb3, 0x92, 0xe7, 0x93, 0x04, 0xd0, 0x4c, 0x7f, 0xf8, 0xac, 0xb6, 0x8b,
	0xc4, 0x34, 0x0f, 0x89, 0xd2, 0x6c, 0xb6, 0xe7, 0x45, 0x62, 0x9c, 0x85, 0x44, 0x75, 0x96, 0x61,
	0x53, 0x41, 0x36, 0x73, 0x7d, 0x62, 0x53, 0xc9, 0xb1, 0x59, 0x41, 0x36, 0x66, 0x9f, 0xd8, 0xac,
	0xe4, 0xd8, 0xac, 0x22, 0x9b, 0xf9, 0x3e, 0xb1, 0x59, 0x15, 0x6c, 0xbe, 0x2a, 0xc1, 0x48, 0x92,
	0x77, 0x04, 0x99, 0x33, 0xbd, 0x26, 0x33, 0x2c, 0xb3, 0x8e, 0xca, 0x45, 0x06, 0xcd, 0x42, 0x7f,
	0xb8, 0x54, 0x54, 0x2e, 0x32, 0x64, 0xce, 0xf6, 0x87, 0xcb, 0x8a, 0xca, 0x45, 0x06, 0xcc, 0x62,
	0x7f, 0xb8, 0x60, 0xbc, 0xfc, 0xac, 0x04, 0x27, 0xf1, 0xa9, 0x5a, 0x64, 0x9e, 0xeb, 0x35, 0x8d,
	0x13, 0xac, 0xb5, 0x19, 0x44, 0x48, 0x81, 0x4b, 0x0a, 0xe7, 0x7b, 0x4e, 0x81, 0xa7, 0x14, 0xd0,
	0x0b, 0x9e, 0xb9, 0xd4, 0x17, 0x2f, 0x78, 0x6d, 0x2f, 0x78, 0xe6, 0x85, 0xbe, 0x78, 0xc1, 0xc3,
	0xad, 0x00, 0xde, 0xb2, 0xe4, 0x43, 0xc2, 0x72, 0xcf, 0xb7, 0x02, 0x78, 0xeb, 0x31, 0x3e, 0x7f,
	0xfc, 0x29, 0x9c, 0xa8, 0xbb, 0x4e, 0xcd, 0x31, 0x2f, 0xf6, 0xdc, 0x0f, 0x68, 0x57, 0x10, 0x08,
	0x02, 0x66, 0x3b, 0xe6, 0xa5, 0x9e, 0x13, 0x40, 0xbb, 0xc6, 0x4f, 0xe0, 0x78, 0x10, 0xf9, 0xcc,
	0xbc, 0xdc, 0x6b, 0xfb, 0x68, 0xd6, 0xf8, 0x79, 0x09, 0x4e, 0xee, 0xef, 0x79, 0x41, 0xe0, 0x99,
	0x6f, 0xf6, 0x9a, 0x41, 0x6c, 0xd8, 0xf8, 0x31, 0x1c, 0x6b, 0x50, 0x62, 0x5e, 0xe9, 0xb5, 0x7d,
	0x61, 0xd5, 0xf8, 0x4d, 0x09, 0x46, 0xdc, 0x46, 0x68, 0x31, 0xda, 0x08, 0xf6, 0x88, 0x67, 0x2e,
	0xf7, 0x7c, 0x46, 0x77, 0x1b, 0x61, 0x55, 0x1a, 0x6f, 0xe7, 0x26, 0xdb, 0xbc, 0xda, 0x97, 0xdc,
	0x64, 0x1b, 0x7f, 0x5b, 0x82, 0x09, 0xd2, 0x08, 0xe5, 0x69, 0xa6, 0xf8, 0x44, 0x94, 0x79, 0xad,
	0xd7, 0x64, 0x46, 0x49, 0x23, 0xfc, 0x98, 0xb8, 0xbe, 0x3c, 0x6c, 0x65, 0xfc, 0x5d, 0x09, 0x26,
	0x15, 0x52, 0xa2, 0x0a, 0x32, 0xaf, 0xf7, 0x9a, 0xd5, 0x58, 0x9b, 0xd5, 0x13, 0xb7, 0x56, 0x2f,
	0xff, 0xcf, 0x69, 0x30, 0x8a, 0xa7, 0x5d, 0x8b, 0x9b, 0xbe, 0xa5, 0x7e, 0x6e, 0xfa, 0x7e, 0xb3,
	0x36, 0xe8, 0x7f, 0x59, 0xc2, 0xc3, 0xbf, 0x5e, 0x10, 0x59, 0x61, 0xef, 0xf7, 0xe6, 0x4f, 0x62,
	0x15, 0xb2, 0x95, 0xbd, 0xcf, 0x8e, 0x7f, 0x93, 0xee, 0xb3, 0x13, 0xdf, 0xc8, 0xfb, 0xec, 0x64,
	0x9f, 0xef, 0x33, 0x7c, 0xe8, 0x4d, 0x9a, 0x3c, 0xb0, 0xe2, 0x37, 0x26, 0xea, 0x4d, 0xde, 0xfb,
	0xfd, 0xf9, 0x51, 0xc1, 0x60, 0x13, 0xdf, 0xcf, 0xa8, 0x37, 0x39, 0x6e, 0x43, 0x21, 0x27, 0x79,
	0x0e, 0x95, 0x51, 0xa7, 0x0f, 0x1b, 0xf4, 0x82, 0x00, 0xde, 0x57, 0x55, 0xea, 0x18, 0xff, 0x5c,
	0x02, 0x13, 0x19, 0xc5, 0xa7, 0x6c, 0x39, 0xf3, 0x2c, 0xc7, 0x8d, 0xc8, 0x8e, 0x47, 0x9d, 0xde,
	0x6f, 0xd5, 0xcf, 0x08, 0x2a, 0x6b, 0x78, 0x92, 0x97, 0x33, 0x6f, 0x23, 0xe6, 0x61, 0xfc, 0x5b,
	0x09, 0xce, 0xe7, 0x49, 0xc6, 0x07, 0x57, 0x1b, 0x6e, 0xd4, 0x20, 0xdc, 0xae, 0xf7, 0x7e, 0x17,
	0x7f, 0x41, 0xe1, 0x2a, 0x0f, 0x85, 0x3e, 0x8b, 0xd9, 0x18, 0x7f, 0x5f, 0x82, 0xc9, 0x68, 0xdf,
	0xe5, 0x76, 0xdd, 0x12, 0xa3, 0xcd, 0x02, 0x4e, 0x6d, 0xde, 0xfb, 0x9d, 0xfd, 0x71, 0xc9, 0x61,
	0x3b, 0xd8, 0x92, 0x0c, 0xca, 0xff, 0x3d, 0x94, 0x9e, 0x7c, 0x48, 0x0f, 0x7f, 0x1a, 0x0b, 0x30,
	0x8c, 0x2f, 0xa0, 0x11, 0x9f, 0xde, 0x36, 0xe5, 0x01, 0xb8, 0xa1, 0xc8, 0x67, 0x9b, 0xe2, 0x77,
	0xb6, 0xb3, 0x82, 0xb3, 0x40, 0xbb, 0xb3, 0x62, 0xdc, 0x82, 0x69, 0x37, 0x72, 0x2d, 0x3b, 0x60,
	0x8c, 0xda, 0x78, 0x26, 0x41, 0x82, 0x1c, 0x93, 0x27, 0x5d, 0xdc, 0xc8, 0x5d, 0x4f, 0xbb, 0x24,
	0x9c, 0x5e, 0xa3, 0x12, 0x9f, 0xb6, 0x29, 0x6a, 0x54, 0x8c, 0x4b, 0x30, 0x16, 0x92, 0x06, 0xbe,
	0x95, 0x15, 0xa3, 0xc7, 0x67, 0x6e, 0x42, 0xd2, 0xa8, 0x12, 0x4e, 0x25, 0x6e, 0x5e, 0xaa, 0x12,
	0x9f, 0xb6, 0xc9, 0x4a, 0x55, 0x8c, 0x73, 0x30, 0x12, 0x32, 0x6a, 0xed, 0x52, 0xdb, 0xda, 0x89,
	0x1f, 0xd7, 0x19, 0xd5, 0xe1, 0x90, 0xd1, 0xc7, 0xd4, 0x7e, 0x48, 0x99, 0x71, 0x05, 0xc6, 0x9b,
	0x7e, 0xcc, 0x8d, 0x3a, 0x28, 0x33, 0x84, 0x32, 0x63, 0x99, 0x66, 0x21, 0x78, 0x0d, 0x26, 0x39,
	0xb5, 0xd3, 0x93, 0x46, 0x92, 0xd7, 0x70, 0xfc, 0x32, 0x26, 0xb5, 0xe3, 0xe3, 0x45, 0x92, 0x9a,
	0x46, 0xb6, 0x12, 0x1f, 0xa4, 0xc8, 0xc9, 0x56, 0xda, 0xa7, 0xa0, 0x1c, 0x77, 0x77, 0xb7, 0x7d,
	0xb0, 0x27, 0x36, 0x30, 0x12, 0x1f, 0xea, 0x14, 0x12, 0x1b, 0xee, 0xee, 0x6e, 0x7a, 0xc2, 0x47,
	0x1a, 0xea, 0xa6, 0x5c, 0xc1, 0xc7, 0x38, 0x1d, 0x95, 0x2b, 0xc6, 0x47, 0x70, 0x36, 0xa3, 0x9c,
	0x39, 0xf3, 0x11, 0xdb, 0x1e, 0x95, 0xef, 0x23, 0xa4, 0xea, 0x99, 0xa3, 0x1f, 0xd2, 0x7a, 0x77,
	0x80, 0x0a, 0x3e, 0x25, 0xe9, 0x02, 0x50, 0x31, 0x56, 0x61, 0x2e, 0x33, 0x38, 0x96, 0x27, 0x6e,
	0x24, 0x2a, 0xdf, 0xce, 0x1c, 0xc7, 0x41, 0x98, 0x4a, 0x07, 0x6a, 0x53, 0xf6, 0x3d, 0x73, 0xfd,
	0x8e, 0x5a, 0xa4, 0x85, 0xcf, 0x1c, 0x74, 0x5a, 0xa4, 0x65, 0xbc, 0xa3, 0x6a, 0x11, 0xdb, 0x6e,
	0x36, 0x9a, 0x1e, 0xe1, 0xd4, 0xc1, 0xe7, 0x02, 0x46, 0x75, 0x3a, 0xd5, 0x5a, 0x6b, 0xf7, 0x19,
	0xef, 0xc1, 0x7c, 0x56, 0xcd, 0xf5, 0x23, 0x4e, 0x7c, 0x4e, 0x7c, 0x1a, 0x34, 0x23, 0xdc, 0xbf,
	0x37, 0xaa, 0xb3, 0xa9, 0xe2, 0xd3, 0x6c, 0xaf, 0xf1, 0x21, 0x2c, 0xe4, 0x42, 0x4b, 0xb9, 0xc2,
	0x29, 0x54, 0x36, 0xd5, 0x30, 0xcb, 0x5c, 0x66, 0x37, 0x75, 0xd2, 0xc2, 0xbd, 0xf1, 0x8e, 0xea,
	0xa4, 0x65, 0xdc, 0x2f, 0xaa, 0x67, 0xaf, 0x79, 0x06, 0xd5, 0xe7, 0x55, 0xf5, 0xec, 0x85, 0x3f,
	0x84, 0xc5, 0xbc, 0xbe, 0x7a, 0xf1, 0xb3, 0x88, 0xb0, 0xa0, 0x22, 0x28, 0x1e, 0x28, 0xff, 0xe7,
	0x35, 0x38, 0xd3, 0xf9, 0xec, 0xb7, 0x71, 0x07, 0x4c, 0x91, 0x68, 0x64, 0xfe, 0xca, 0xbd, 0xdf,
	0x1a, 0x1f, 0xa3, 0x8e, 0x7c, 0x86, 0x07, 0xc8, 0xd4, 0x97, 0x5c, 0xdf, 0x81, 0xb9, 0xb6, 0xa2,
	0xfa, 0x16, 0xad, 0xcc, 0x57, 0xd3, 0x89, 0x9e, 0xf2, 0x26, 0x6d, 0xac, 0xb6, 0x4f, 0x98, 0x9f,
	0x37, 0x77, 0x2c, 0x55, 0x7b, 0x45, 0x98, 0xaf, 0x5a, 0x5b, 0x81, 0xd9, 0x54, 0x4d, 0x35, 0x26,
	0x53, 0xd8, 0x54, 0xac, 0xa5, 0xd8, 0xda, 0x84, 0x8b, 0xb9, 0xac, 0xa7, 0xbd, 0x4c, 0x99, 0xd8,
	0xce, 0x2b, 0x49, 0x50, 0x73, 0xc1, 0x9f, 0x40, 0x59, 0x8b, 0xa6, 0xd2, 0x91, 0xf9, 0xef, 0x5c,
	0x11, 0x4c, 0x61, 0x56, 0xc4, 0xd2, 0x39, 0xe4, 0x94, 0x06, 0xab, 0xe8, 0x9a, 0x27, 0x70, 0x41,
	0x87, 0xa5, 0xd2, 0x92, 0x47, 0x14, 0x17, 0x0b, 0x50, 0x0a, 0xab, 0x07, 0xb0, 0x98, 0x66, 0x73,
	0xad, 0xa7, 0x64, 0xaa, 0x9d, 0x8f, 0x93, 0xbb, 0xc6, 0x47, 0xf7, 0xe1, 0x6c, 0x0e, 0x41, 0xa5,
	0x21, 0xf3, 0xaf, 0x99, 0x05, 0x50, 0x18, 0x64, 0xf5, 0x75, 0x1e, 0x19, 0x51, 0xf4, 0x8b, 0xbe,
	0xb8, 0x07, 0x0b, 0xaa, 0xbe, 0x6a, 0x3e, 0x4e, 0xc6, 0x19, 0x75, 0xc5, 0xfa, 0x23, 0x58, 0x52,
	0xd2, 0x93, 0xce, 0x05, 0xa3, 0xf2, 0x8e, 0x6b, 0xe7, 0xa9, 0xa2, 0x13, 0xd6, 0xe1, 0x7c, 0x11,
	0x46, 0x25, 0x32, 0x86, 0x28, 0x67, 0x54, 0x14, 0x85, 0x4b, 0x0e, 0x44, 0xe7, 0x8c, 0xf1, 0x1c,
	0x48, 0xd1, 0x1d, 0x6b, 0x70, 0xae, 0x00, 0xa2, 0x12, 0x91, 0xc9, 0x7a, 0x5e, 0xc1, 0x50, 0x78,
	0x3c, 0x87, 0x4b, 0x85, 0x14, 0xa6, 0xf3, 0x8b, 0xcc, 0xdf, 0x4b, 0xb9, 0x5c, 0x56, 0x74, 0xce,
	0x26, 0x5c, 0xd4, 0xe3, 0xa9, 0xbc, 0x64, 0x56, 0x3f, 0xaf, 0x81, 0xcb, 0xdf, 0xe1, 0x79, 0x34,
	0x9d, 0xa7, 0xa6, 0x74, 0x68, 0x45, 0x77, 0x7d, 0x02, 0x65, 0x2d, 0x9a, 0x4a, 0x4d, 0x26, 0xfd,
	0x73, 0x45, 0x30, 0x85, 0xd9, 0x63, 0x58, 0xca, 0x96, 0x1f, 0x5a, 0x9f, 0xcd, 0xc8, 0x17, 0xcd,
	0xda, 0xd5, 0x88, 0xc6, 0x5f, 0x1b, 0x70, 0xbe, 0x88, 0xa3, 0x12, 0x9a, 0x95, 0x2f, 0xbe, 0xe5,
	0x60, 0x14, 0x36, 0x39, 0x14, 0x9d, 0x8f, 0xe6, 0xf2, 0x28, 0x45, 0xff, 0x3c, 0x84, 0x73, 0x05,
	0x14, 0x95, 0x8a, 0x29, 0xdf, 0x0a, 0x54, 0x41, 0x14, 0x26, 0xaf, 0xe0, 0xaa, 0xb6, 0x5a, 0xd2,
	0x3a, 0x68, 0x1e, 0xe1, 0x2e, 0x15, 0x8b, 0x27, 0x8d, 0xa3, 0xbe, 0x0d, 0xcb, 0x5d, 0x80, 0x55,
	0x9a, 0x67, 0x10, 0xf7, 0x62, 0x07, 0x5c, 0x85, 0x6f, 0x27, 0x58, 0x9d, 0x0b, 0x17, 0x3a, 0xc1,
	0x16, 0x5d, 0xf9, 0x02, 0xae, 0x74, 0x86, 0x55, 0xc9, 0x9e, 0x45, 0xd4, 0xb2, 0x1e, 0x55, 0xe1,
	0xfa, 0x5d, 0xb8, 0xde, 0xa1, 0x16, 0xd4, 0x7a, 0x77, 0x11, 0x81, 0xdf, 0xd4, 0x95, 0x86, 0x1a,
	0xff, 0x7e, 0x0e, 0xd7, 0xba, 0x82, 0xab, 0xa4, 0xcf, 0x21, 0xf6, 0xe5, 0x8e, 0xd8, 0x0a, 0xef,
	0xce, 0xd0, 0x3a, 0x2f, 0x9f, 0xef, 0x0c, 0x5d, 0xf4, 0xb3, 0x1a, 0x6e, 0x05, 0x68, 0x95, 0xf4,
	0x52, 0x2e, 0xdc, 0x72, 0xc8, 0x39, 0x5f, 0xdf, 0xe8, 0x50, 0x36, 0xeb, 0x9d, 0x7d, 0x01, 0xb3,
	0xc6, 0x65, 0x4d, 0x2d, 0xad, 0xf5, 0xf5, 0xf5, 0xee, 0xe0, 0x2a, 0xef, 0x32, 0x62, 0x5f, 0xea,
	0x84, 0x9d, 0xf3, 0x75, 0x47, 0x68, 0x9d, 0xb3, 0x2f, 0x76, 0x84, 0xd6, 0xf9, 0xfa, 0x5a, 0x57,
	0x68, 0x95, 0xf4, 0x25, 0x44, 0xbe, 0xd8, 0x01, 0xf9, 0xb5, 0x7c, 0x4d, 0x5a, 0x7a, 0x5f, 0x5f,
	0xee, 0xe0, 0x6b, 0xd2, 0xfa, 0x03, 0x7c, 0x9d, 0x82, 0xab, 0xb4, 0xdf, 0xec, 0xe0, 0x90, 0x18,
	0xfb, 0xb5, 0x7c, 0x4d, 0x5a, 0x5a, 0x5f, 0x5f, 0xe9, 0x08, 0xfd, 0xfa, 0xbe, 0x4e, 0xa0, 0x55,
	0xd2, 0xcb, 0x1d, 0x7c, 0x2d, 0x91, 0x15, 0xce, 0xdf, 0x53, 0x7d, 0x9d, 0x59, 0xae, 0xe8, 0x7d,
	0x7d, 0x15, 0xa1, 0xdf, 0xd4, 0xad, 0xdb, 0x34, 0xce, 0xfe, 0x8e, 0xea, 0x91, 0x22, 0xba, 0xca,
	0xfb, 0x5a, 0x6e, 0x20, 0xf3, 0xe0, 0x0a, 0xf3, 0x2e, 0xd8, 0x3a, 0x6f, 0x5f, 0xef, 0x8c, 0x5d,
	0x74, 0xf7, 0x67, 0xaa, 0xbb, 0x0b, 0xd8, 0x2a, 0xed, 0x1b, 0xb9, 0x81, 0xcc, 0x41, 0x2b, 0xac,
	0xbf, 0x80, 0x9b, 0x1d, 0xd7, 0xb6, 0x7a, 0x8f, 0xbf, 0x85, 0xe8, 0xcb, 0xfa, 0x05, 0xaf, 0xc6,
	0xe7, 0xdf, 0x87, 0xb7, 0x0e, 0xb3, 0xa0, 0xd2, 0xbf, 0x89, 0x06, 0xae, 0x74, 0x31, 0xa0, 0x5c,
	0x41, 0x57, 0x7c, 0x9d, 0xe7, 0xdf, 0xee, 0x86, 0x5f, 0xf4, 0x7d, 0x2e, 0x22, 0x35, 0xf8, 0x2a,
	0xfd, 0x5b, 0xb9, 0x88, 0x2c, 0xc0, 0x2b, 0xec, 0x1d, 0xb8, 0xd5, 0x65, 0x83, 0x40, 0x3f, 0x02,
	0xb7, 0xd1, 0xc2, 0xb5, 0x4e, 0xbb, 0x06, 0x9a, 0x31, 0xd8, 0x81, 0xb7, 0x0f, 0xb7, 0xa2, 0x5e,
	0x46, 0x05, 0x8d, 0x5c, 0xed, 0x6a, 0x44, 0xb9, 0x92, 0x43, 0x6c, 0xe8, 0x46, 0x62, 0xa5, 0xbb,
	0x8d, 0xe2, 0x58, 0x7c, 0x01, 0x37, 0x0f, 0xb5, 0xa1, 0x5e, 0xc6, 0xaa, 0x8c, 0xd6, 0x6e, 0x26,
	0x5e, 0x7b, 0x3c, 0x3a, 0xe5, 0xfb, 0x77, 0xba, 0x8d, 0x87, 0x36, 0xe9, 0x77, 0xf3, 0x55, 0x87,
	0xc4, 0xff, 0x6e, 0x37, 0x5f, 0xe9, 0xb2, 0xff, 0x21, 0x36, 0x74, 0xe3, 0x71, 0xa7, 0xbb, 0x8d,
	0x3f, 0x6c, 0x3c, 0xf4, 0x53, 0xc1, 0xdd, 0x6e, 0xe3, 0xa1, 0x99, 0x0f, 0x68, 0x71, 0x3c, 0x0e,
	0x9d, 0x13, 0xde, 0x43, 0x1b, 0xd7, 0x3b, 0xee, 0x6b, 0x69, 0x06, 0xc4, 0x2e, 0x3a, 0xeb, 0xb0,
	0xc9, 0xe1, 0x7d, 0xdd, 0xa8, 0x77, 0x9d, 0x21, 0x0e, 0x31, 0xa2, 0x1b, 0x91, 0x0f, 0x0e, 0x31,
	0x52, 0x1c, 0x12, 0x52, 0x1c, 0x92, 0x43, 0xa6, 0x8b, 0x7b, 0xba, 0x51, 0xef, 0x36, 0x67, 0xb8,
	0x50, 0xe9, 0xba, 0x2d, 0xa8, 0x1f, 0x95, 0x0f, 0xd1, 0xcc, 0x5b, 0x5d, 0xf6, 0x0a, 0x35, 0xe3,
	0x52, 0x83, 0xdb, 0xaf, 0x63, 0xaa, 0xf8, 0x25, 0x45, 0xa3, 0x7a, 0xe3, 0x30, 0x4b, 0xca, 0x35,
	0x1d, 0x6a, 0x48, 0x37, 0x3a, 0x1f, 0x1d, 0x6a, 0xa8, 0x38, 0x3e, 0x9a, 0x80, 0x3e, 0x74, 0x4a,
	0x79, 0xa0, 0x0b, 0xe8, 0xae, 0xf3, 0x4a, 0xf9, 0xbf, 0xae, 0x80, 0x99, 0xff, 0x78, 0xe9, 0xfa,
	0xa7, 0xcf, 0x1e, 0x3e, 0x7d, 0xfe, 0x68, 0x43, 0xf7, 0x01, 0xd3, 0xc1, 0xc7, 0x4a, 0x07, 0x1f,
	0x2b, 0x1d, 0x7c, 0xac, 0x74, 0xf0, 0xb1, 0xd2, 0xc1, 0xc7, 0x4a, 0x07, 0x1f, 0x2b, 0x1d, 0x7c,
	0xac, 0x74, 0xf0, 0xb1, 0xd2, 0xc1, 0xc7, 0x4a, 0x07, 0x1f, 0x2b, 0x1d, 0x7c, 0xac, 0x74, 0xf0,
	0xb1, 0xd2, 0xc1, 0xc7, 0x4a, 0x07, 0x1f, 0x2b, 0x1d, 0x7c, 0xac, 0x74, 0xf0, 0xb1, 0xd2, 0xc1,
	0xc7, 0x4a, 0x07, 0x1f, 0x2b, 0x1d, 0x7c, 0xac, 0xf4, 0xff, 0xc3, 0xc7, 0x4a, 0x77, 0x4e, 0xe2,
	0xff, 0x44, 0x5a, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xed, 0xf1, 0x7c, 0x2c, 0x69,
	0x00, 0x00,
}
