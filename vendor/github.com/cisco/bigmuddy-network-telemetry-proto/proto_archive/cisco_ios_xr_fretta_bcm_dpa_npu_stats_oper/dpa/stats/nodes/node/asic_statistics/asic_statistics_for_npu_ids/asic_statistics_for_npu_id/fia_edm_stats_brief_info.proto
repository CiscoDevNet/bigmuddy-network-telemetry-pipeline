// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

//Path: Cisco-IOS-XR-fretta-bcm-dpa-npu-stats-oper:dpa/stats/nodes/node/asic-statistics/asic-statistics-for-npu-ids/asic-statistics-for-npu-id

package cisco_ios_xr_fretta_bcm_dpa_npu_stats_oper.dpa.stats.nodes.node.asic_statistics.asic_statistics_for_npu_ids.asic_statistics_for_npu_id;

// ASIC statistics information
message fia_edm_stats_brief_info_KEYS {
    string node_name = 1;
    uint32 npu_id = 2;
}

message fia_edm_stats_brief_info {
    // Flag to indicate if data is valid
    bool valid = 50;
    // Rack number
    uint32 rack_number = 51;
    // Slot number
    uint32 slot_number = 52;
    // ASIC instance
    uint32 asic_instance = 53;
    // Chip version
    uint32 chip_version = 54;
    // Statistics
    fia_edm_device_stats_asic_brief_info statistics = 55;
}

// ASIC statistics
message fia_edm_device_stats_asic_brief_info {
    // Total bytes sent from NIF to IRE
    uint64 nbi_rx_total_byte_cnt = 1;
    // Total packets sent from NIF to IRE
    uint64 nbi_rx_total_pkt_cnt = 2;
    // CPU ingress received packet counter
    uint64 ire_cpu_pkt_cnt = 3;
    // NIF received packet counter
    uint64 ire_nif_pkt_cnt = 4;
    // OAMP ingress received packet counter
    uint64 ire_oamp_pkt_cnt = 5;
    // OLP ingress received packet counter
    uint64 ire_olp_pkt_cnt = 6;
    // Recycling ingress received packet counter
    uint64 ire_rcy_pkt_cnt = 7;
    // Performance counter of the FDT interface
    uint64 ire_fdt_if_cnt = 8;
    // Performance counter of the MMU interface
    uint64 idr_mmu_if_cnt = 9;
    // Performance counter of the OCB interface
    uint64 idr_ocb_if_cnt = 10;
    // Counts enqueued packets
    uint64 iqm_enqueue_pkt_cnt = 11;
    // Counts dequeued packets
    uint64 iqm_dequeue_pkt_cnt = 12;
    // Counts matched packets discarded in the DEQ process
    uint64 iqm_deleted_pkt_cnt = 13;
    // Counts all packets discarded at the ENQ pipe
    uint64 iqm_enq_discarded_pkt_cnt = 14;
    // EGQ packet counter
    uint64 ipt_egq_pkt_cnt = 15;
    // ENQ packet counter
    uint64 ipt_enq_pkt_cnt = 16;
    // FDT packet counter
    uint64 ipt_fdt_pkt_cnt = 17;
    // Configurable event counter
    uint64 ipt_cfg_event_cnt = 18;
    // Configurable bytes counter
    uint64 ipt_cfg_byte_cnt = 19;
    // Descriptor cell counter
    uint64 fdt_ipt_desc_cell_cnt = 20;
    // IRE internal descriptor cell counter
    uint64 fdt_ire_desc_cell_cnt = 21;
    // Counts all transmitted data cells
    uint64 fdt_transmitted_data_cells_cnt = 22;
    // FDR total incoming cell counter at pipe 1
    uint64 fdr_p1_cell_in_cnt = 23;
    // FDR total incoming cell counter at pipe 2
    uint64 fdr_p2_cell_in_cnt = 24;
    // FDR total incoming cell counter at pipe 3
    uint64 fdr_p3_cell_in_cnt = 25;
    // FDR total incoming cell counter
    uint64 fdr_cell_in_cnt_total = 26;
    // FDA input cell counter P1
    uint64 fda_cells_in_cnt_p1 = 27;
    // FDA input cell counter P2
    uint64 fda_cells_in_cnt_p2 = 28;
    // FDA input cell counter P3
    uint64 fda_cells_in_cnt_p3 = 29;
    // FDA input cell counter TDM
    uint64 fda_cells_in_tdm_cnt = 30;
    // FDA input cell counter MESHMC
    uint64 fda_cells_in_meshmc_cnt = 31;
    // FDA input cell counter IPT
    uint64 fda_cells_in_ipt_cnt = 32;
    // FDA output cell counter P1
    uint64 fda_cells_out_cnt_p1 = 33;
    // FDA output cell counter P2
    uint64 fda_cells_out_cnt_p2 = 34;
    // FDA output cell counter P3
    uint64 fda_cells_out_cnt_p3 = 35;
    // FDA output cell counter TDM
    uint64 fda_cells_out_tdm_cnt = 36;
    // FDA output cell counter MESHMC
    uint64 fda_cells_out_meshmc_cnt = 37;
    // FDA output cell counter IPT
    uint64 fda_cells_out_ipt_cnt = 38;
    // FDA EGQ drop counter
    uint64 fda_egq_drop_cnt = 39;
    // FDA EGQ MESHMC drop counter
    uint64 fda_egq_meshmc_drop_cnt = 40;
    // FQP2EPE packet counter
    uint64 egq_fqp_pkt_cnt = 41;
    // PQP2FQP unicast packet counter
    uint64 egq_pqp_uc_pkt_cnt = 42;
    // PQP discarded unicast packet counter
    uint64 egq_pqp_discard_uc_pkt_cnt = 43;
    // PQP2FQP unicast bytes counter
    uint64 egq_pqp_uc_bytes_cnt = 44;
    // PQP2FQP multicast packet counter
    uint64 egq_pqp_mc_pkt_cnt = 45;
    // PQP discarded multicast packet counter
    uint64 egq_pqp_discard_mc_pkt_cnt = 46;
    // PQP2FQP multicast bytes counter
    uint64 egq_pqp_mc_bytes_cnt = 47;
    // EHP2PQP unicast packet counter
    uint64 egq_ehp_uc_pkt_cnt = 48;
    // EHP2PQP multicast high packet counter
    uint64 egq_ehp_mc_high_pkt_cnt = 49;
    // EHP2PQP multicast low packet counter
    uint64 egq_ehp_mc_low_pkt_cnt = 50;
    // EHP2PQP discarded packet counter
    uint64 egq_deleted_pkt_cnt = 51;
    // Number of multicast high packets discarded because multicast FIFO is full
    uint64 egq_ehp_mc_high_discard_cnt = 52;
    // Number of multicast low packets discarded because multicast FIFO is full
    uint64 egq_ehp_mc_low_discard_cnt = 53;
    // Number of packet descriptors discarded due to LAG multicast pruning
    uint64 egq_erpp_lag_pruning_discard_cnt = 54;
    // Number of packet descriptors discarded due to ERPP PMF
    uint64 egq_erpp_pmf_discard_cnt = 55;
    // Number of packet descriptors discarded because of egress VLAN membership
    uint64 egq_erpp_vlan_mbr_discard_cnt = 56;
    // EPE2PNI bytes counter
    uint64 epni_epe_byte_cnt = 57;
    // EPE2PNI packet counter
    uint64 epni_epe_pkt_cnt = 58;
    // EPE discarded packet counter
    uint64 epni_epe_discard_cnt = 59;
    // Total bytes sent from EGQ to NIF
    uint64 nbi_tx_total_byte_cnt = 60;
    // Total packets sent from EGQ to NIF
    uint64 nbi_tx_total_pkt_cnt = 61;
}
