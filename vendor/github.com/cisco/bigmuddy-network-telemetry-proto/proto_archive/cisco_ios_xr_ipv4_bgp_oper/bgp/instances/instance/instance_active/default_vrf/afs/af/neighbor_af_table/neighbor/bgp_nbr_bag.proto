//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

//Path: Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/afs/af/neighbor-af-table/neighbor

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor;

// BGP Neighbor Information
message bgp_nbr_bag_KEYS {
    string instance_name = 1;
    string af_name = 2;
    string neighbor_address = 3;
}

message bgp_nbr_bag {
    // Speaker this neighbor is allocated to
    uint32 speaker_id = 50;
    // Description
    string description = 51;
    // Local AS number
    uint32 local_as = 52;
    // Remote AS number
    uint32 remote_as = 53;
    // Internal link to neighbor
    bool has_internal_link = 54;
    // External neighbor not directly connected
    bool is_external_neighbor_not_directly_connected = 55;
    // Number of messages received
    uint32 messages_received = 56;
    // Number of messages sent
    uint32 messages_sent = 57;
    // No. of update msgs received
    uint32 update_messages_in = 58;
    // No. of update messages sent
    uint32 update_messages_out = 59;
    // No. of msgs on receive queue
    uint32 messages_queued_in = 60;
    // No. of messages on send queue
    uint32 messages_queued_out = 61;
    // Time (in secs) that the connection has been established
    uint32 connection_established_time = 62;
    // State of connection
    string connection_state = 63;
    // Previous state of connection
    uint32 previous_connection_state = 64;
    // Administrative status of connection
    uint32 connection_admin_status = 65;
    // Open check error code
    string open_check_error_code = 66;
    // Local address for the connection
    bgp_addrtype connection_local_address = 67;
    // Local address configured for the neighbor connection
    bool is_local_address_configured = 68;
    // Local port for the connection
    uint32 connection_local_port = 69;
    // Remote address for the connection
    bgp_addrtype connection_remote_address = 70;
    // Remote port for the connection
    uint32 connection_remote_port = 71;
    // Interface Handle of Neighbor
    uint32 neighbor_interface_handle = 72;
    // Notification was sent during last reset
    bool reset_notification_sent = 73;
    // Neighbor is administratively shut down
    bool is_administratively_shut_down = 74;
    // Neighbor shut down because it exceeded max prfx count
    bool is_neighbor_max_prefix_shutdown = 75;
    // Neighbor shut down during a SEVERE low memory condition
    bool is_out_of_memory_shutdown = 76;
    // Neighbor forced up during a low memory condition
    bool is_out_of_memory_forced_up = 77;
    // EBGP peer belongs to AS League
    bool is_ebgp_peer_as_league = 78;
    // EBGP peer with common administation
    bool is_ebgp_peer_common_admin = 79;
    // TTL Security enabled
    bool ttl_security_enabled = 80;
    // Suppress 4byteas capability
    bool suppress4_byte_as = 81;
    // BFD state for this peer
    string bfd_session_state = 82;
    // BFD state for this peer
    string bfd_session_created_state = 83;
    // BFD enable mode for this peer
    string bfd_session_enable_mode = 84;
    // BFD Mininterval for this peer
    uint32 bfd_minintervalval = 85;
    // BFD Multiplier for this peer
    uint32 bfd_multiplierval = 86;
    // Timestamp since when nbr is in this bfd state
    uint64 bfd_state_ts = 87;
    // Router ID for the neighbor
    string router_id = 88;
    // Negotiated protocol version
    uint32 negotiated_protocol_version = 89;
    // Maximum number of hops for external BGP neighbor
    uint32 ebgp_time_to_live = 90;
    // If true, MPLS and NULL rewrite is disabled; if false, it is enabled
    bool is_ebgp_multihop_bgpmpls_forwarding_disabled = 91;
    // Neighbor TCP Maximum Segment size
    uint32 tcpmss = 92;
    // Message in log count
    uint32 msg_log_in = 93;
    // Message out log count
    uint32 msg_log_out = 94;
    // Local AS configured on the neighbor
    uint32 neighbor_local_as = 95;
    // Option to not prepend the Local AS to announcements
    bool local_as_no_prepend = 96;
    // Capability negotiation suppressed
    bool is_capability_negotiation_suppressed = 97;
    // Capability negotiation performed
    bool is_capability_negotiation_performed = 98;
    // Route refresh capability received
    bool is_route_refresh_capability_received = 99;
    // Route refresh old capability received
    bool is_route_refresh_old_capability_received = 100;
    // GR awareness received
    bool is_gr_aware = 101;
    // 4-byte AScapability received
    bool is4_byte_as_capability_received = 102;
    // 4-byte AScapability Snt
    bool is4_byte_as_capability_sent = 103;
    // Multi-protocol capability has been received
    bool multi_protocol_capability_received = 104;
    // Hold time (in secs) negotiated for this connection
    uint32 hold_time = 105;
    // Keepalive time (in secs) negotiated for this connection
    uint32 keep_alive_time = 106;
    // Hold time (in secs) configured for this connection
    uint32 configured_hold_time = 107;
    // Keepalive time (in secs) configured for this connection
    uint32 configured_keepalive = 108;
    // Minimum acceptable hold time from neighbor (in secs) configured for this connection
    uint32 configured_min_acc_hold_time = 109;
    // Minimum advertisement interval, secs part
    uint32 min_advertise_interval = 110;
    // Minimum advertisement interval, msecs part
    uint32 min_advertise_interval_msecs = 111;
    // Minimum origination interval (in secs)
    uint32 min_origination_interval = 112;
    // Time (in secs) for connect retry timer
    uint32 connect_retry_interval = 113;
    // Time (in secs) since last update message was received
    uint32 time_since_last_update = 114;
    // Time (in secs) since last read
    uint32 time_since_last_read = 115;
    // Time (in secs) since last read before last reset
    uint32 time_since_last_read_reset = 116;
    // CB
    uint64 time_last_cb = 117;
    // Last CB before reset
    uint32 time_last_cb_reset = 118;
    // FB
    uint64 time_last_fb = 119;
    // Count
    uint32 count_last_write = 120;
    // Time (in secs) since last write
    uint32 time_since_last_write = 121;
    // Attempted size of last write
    uint32 attempted_last_write_bytes = 122;
    // Actual size of last write
    uint32 actual_last_write_bytes = 123;
    // Time (in secs) since second  last write
    uint32 time_since_second_last_write = 124;
    // Attempted size of second last write
    uint32 attempted_second_last_write_bytes = 125;
    // Actual size of second last write
    uint32 actual_second_last_write_bytes = 126;
    // Time (in secs) since last write before last reset
    uint32 time_since_last_write_reset = 127;
    // Attempted size of last write before reset
    uint32 attempted_last_write_reset_bytes = 128;
    // Actual size of last write before reset
    uint32 actual_last_write_reset_bytes = 129;
    // Time (in secs) since last write before last reset
    uint32 time_since_second_last_write_reset = 130;
    // Attempted size of second last write before reset
    uint32 attempted_second_last_write_reset_bytes = 131;
    // Actual size of second last write before reset
    uint32 actual_second_last_write_reset_bytes = 132;
    // Time (in secs) since last write thread event
    uint32 last_write_event = 133;
    // Time (in secs) since second last write thread event
    uint32 second_last_write_event = 134;
    // Time (in secs) since last KA timer expiry before reset
    uint32 last_k_aexpiry_reset = 135;
    // Time (in secs) since second last KA timer expiry before reset
    uint32 second_last_k_aexpiry_reset = 136;
    // Duration (in secs) since last time that KA was not sent before reset
    uint32 last_k_anotsent_reset = 137;
    // Duration (in secs) since last time that an error was encountered after KA expiry
    uint32 last_k_aerror_reset = 138;
    // Time (in secs) since the last KA timer start before reset
    uint32 last_k_astart_reset = 139;
    // Time (in secs) since the second last KA timer start before reset
    uint32 second_last_k_astart_reset = 140;
    // Number of times the connection was established
    uint32 connection_up_count = 141;
    // Number of times connection was dropped
    uint32 connection_down_count = 142;
    // Time since the connection last went down (seconds)
    uint32 time_since_connection_last_dropped = 143;
    // Reason for last connection reset
    string reset_reason = 144;
    // Reason for last peer close event
    string peer_reset_reason = 145;
    // If peer closed, error received from transport
    uint32 peer_error_code = 146;
    // Code for the last error notification seen on the connection
    uint32 last_notify_error_code = 147;
    // Error subcode of the last error notification seen on the connection
    uint32 last_notify_error_subcode = 148;
    // Information on the last notification sent
    bgp_notfntype_ send_notification_info = 149;
    // Information on the last notification received
    bgp_notfntype_ received_notification_info = 150;
    // Number of error notifications received on the connection
    uint32 error_notifies_received = 151;
    // Number of error notifications sent on the connection
    uint32 error_notifies_sent = 152;
    // Remote AS number
    uint32 remote_as_number = 153;
    // Bandwidth of link to single-hop eBGP peer
    uint32 dmz_link_bandwidth = 154;
    // Receive Bandwidth of link to single-hop eBGP peer
    bool ebgp_recv_dmz = 155;
    // Ebgp send dmz link bw mode
    string ebgp_send_dmz_mode = 156;
    // Precedence or DSCP type
    uint32 tos_type = 157;
    // Precedence or DSCP value
    uint32 tos_value = 158;
    // Performance statistics
    bgp_perf_nbr_ performance_statistics = 159;
    // Address family specific neighbor data
    repeated nbr_af_p af_data = 160;
    // The TCP mode to be used to set up BGP session with the neighbor
    string tcp_session_open_mode = 161;
    // Name of the VRF
    string vrf_name = 162;
    // Standby RP socket inited for Active Open
    bool standby_rp = 163;
    // Neighbor supports NSR
    bool nsr_enabled = 164;
    // Neighbor supports graceful-restart
    bool graceful_restart_enabled_nbr = 165;
    // Neighbor restart time (in seconds)
    uint32 gr_restart_time = 166;
    // Neighbor stale-path time (in seconds)
    uint32 gr_stale_path_time = 167;
    // First standby SeqNo offset
    uint32 fssn_offset = 168;
    // First standby PDU boundary SeqNo offset
    uint32 fpbsn_offset = 169;
    // SeqNo of the last Ackd byte
    uint32 last_ackd_seq_no = 170;
    // Total bytes written by write thread
    uint32 bytes_written = 171;
    // Total bytes read
    uint32 bytes_read = 172;
    // Total read bytes value insocket-lib
    uint32 socket_read_bytes = 173;
    // If true, socket read isdisabled
    bool is_read_disabled = 174;
    // Total update bytes read
    uint32 update_bytes_read = 175;
    // NSR state
    string nsr_state = 176;
    // If true, active socket canbe closed if passive openis received for a GRcapable neighbor
    bool is_passive_close = 177;
    // Neighbor enforce first AS
    bool nbr_enforce_first_as = 178;
    // BMP Servers to which the neighbor sends logs
    uint32 active_bmp_servers = 179;
    // Cluster id
    uint32 nbr_cluster_id = 180;
    // Type of cluster_id:undefined/number/Ip address
    uint32 nbr_in_cluster = 181;
    // If true, the VPN client isan IBGP CE peer
    bool ignore_connected = 182;
    // If true, don't do NHconnected check for nbr
    bool internal_vpn_client = 183;
    // If true, socket has beenauto-armed for io control
    bool io_armed = 184;
    // If true, socket has beenauto-armed for read
    bool read_armed = 185;
    // If true, socket has beenauto-armed for write
    bool write_armed = 186;
    // Message statistics
    bgp_nbr_msg_stats message_statistics = 187;
    // Remaining discard data (bytes) on Standby
    uint32 discard_data_bytes = 188;
    // Local AS Replace-AS option
    bool local_as_replace_as = 189;
    // Local AS Dual-AS option
    bool local_as_dual_as = 190;
    // Applies only if Local AS Dual-AS option is enabled. Indicates if Dual-AS mode is native.
    bool local_as_dual_as_mode_native = 191;
    // Indicates if Egress Peer Engineering is enabled
    bool egress_peer_engineering_enabled = 192;
    // Time When neighbor entered TCP Init Sync
    bgp_timespec tcp_init_sync_time_spec = 193;
    // Time when neighbor entered TCP Init Sync Phase Two
    bgp_timespec tcp_init_sync_phase_two_time_spec = 194;
    // Time when neighbor entered TCP Init Sync Done
    bgp_timespec tcp_init_sync_done_time_spec = 195;
    // Discard AS4_PATH in case there is a discrepancy in merging AS_PATH and AS4_PATH,retain ASPATH
    uint32 discard_as4_path = 196;
    // Prefix validation disabled
    bool rpki_disable = 197;
    // Prefix v. use validity
    bool rpki_use_validity = 198;
    // Prefix v. allow invalid
    bool rpki_allow_invalid = 199;
    // Prefix v. signal ibgp
    bool rpki_signal_ibgp = 200;
    // Graceful Maintenance
    bgp_nbr_gshut_ graceful_maintenance = 201;
    // Dynamic neighbor
    bool dynamic_neighbor = 202;
}

message bgp_timespec {
    // Seconds part of time value
    uint32 seconds = 1;
    // Nanoseconds part of time value
    uint32 nanoseconds = 2;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

message bgp_ipv4_srpolicy_addr_t {
    bytes ipv4_srpolicy_address = 1;
}

message bgp_ipv6_srpolicy_addr_t {
    bytes ipv6_srpolicy_address = 1;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
    // IPV4 Policy Addr
    bgp_ipv4_srpolicy_addr_t ipv4_sr_policy_address = 25;
    // IPV6 Policy Addr
    bgp_ipv6_srpolicy_addr_t ipv6_sr_policy_address = 26;
}

message bgp_perf_nbr_af_ {
    uint32 sub_group_pending_message_count = 1;
    uint32 processed_messages = 2;
    uint32 sent_messages = 3;
    uint32 split_horizon_update_transmit = 4;
    uint32 split_horizon_update_blocked = 5;
    uint32 split_horizon_withdraw_transmit = 6;
    uint32 split_horizon_withdraw_blocked = 7;
}

message bgp_perf_nbr_ {
    // Number of partial read throttles
    uint32 read_throttles = 1;
    // Num socket reads after nbrs crossed low threshold
    uint32 low_throttled_read = 2;
    // Num of socket reads after nbr crossed high threshold
    uint32 high_throttled_read = 3;
    // Time (in secs) since last read after being throttled
    uint32 time_since_last_throttled_read = 4;
    // No. of calls to function to read inbound data
    uint32 read_calls_count = 5;
    // Number of BGP messages read
    uint32 read_messages_count = 6;
    // No. of bytes of data read
    uint32 data_bytes_read = 7;
    // Time spent reading inbound data (milliseconds)
    uint32 io_read_time = 8;
    // No. of calls to function to write outbound data
    uint32 write_calls_count = 9;
    // No. of data bytes written
    uint32 data_bytes_written = 10;
    // Time spent writing outbound data (milliseconds)
    uint32 io_write_time = 11;
    // Seq No of the last sent byte
    uint32 last_sent_seq_no = 12;
    // No. of calls to function to process sub-group message list
    uint32 write_subgroup_calls_count = 13;
    // Number of sub-group msgs processed
    uint32 write_subgroup_messages_count = 14;
    // Time spent processing sub-group message list  (milliseconds)
    uint32 subgroup_list_time = 15;
    // No. of calls to function to process write queue
    uint32 write_queue_calls_count = 16;
    // Number of write queue messages processed
    uint32 write_queue_messages_count = 17;
    // Time spent processing write queue (milliseconds)
    uint32 write_queue_time = 18;
    // Number of inbound update messages processed
    uint32 inbound_update_messages = 19;
    // Time spent processing inbound update messages (milliseconds)
    uint32 inbound_update_messages_time = 20;
    // Size of largest socket (milliseconds)
    uint32 maximum_read_size = 21;
    // Number of retried Active opens for this neighbor
    uint32 actives = 22;
    // Number of Active Opens that failed in the Post Active State for this neighbor
    uint32 failed_post_actives = 23;
    // Number of retried Passive opens for this neighbor
    uint32 passives = 24;
    // Number of rejected Passive opens for this neighbor
    uint32 rejected_passives = 25;
    // Number of Closed Active connections for this neighbor due to collision 
    uint32 active_collision = 26;
    // Number of Closed Remote opens for this neighborneighbor due to collision 
    uint32 passive_collision = 27;
    // Number of times io-control thread trigger read thread
    uint32 control_to_read_thread_trigger = 28;
    // Number of times io-control thread trigger write thread
    uint32 control_to_write_thread_trigger = 29;
    // Socket status, TRUE if socket closed
    uint32 network_status = 30;
    // Reset flags, per thread
    uint32 reset_flags = 31;
    // Nbr flags, per thread
    uint32 nbr_flags = 32;
    // Primary FD, per nbr
    sint32 nbr_fd = 33;
    // Reset Retries, per nbr
    uint32 reset_retries = 34;
    // Sync flags, per nbr
    uint32 sync_flags = 35;
    // Number of times NSR scoped sync has been done
    uint32 nsr_oper_down_count = 36;
    // Last time NSR scoped syncwas done for the neighbor
    uint32 last_nsr_scoped_sync = 37;
}

message bgp_nbr_gshut_ {
    // Graceful Maintenance enabled
    bool gshut_exists = 1;
    // Graceful Maintenance locally activated
    bool gshut_local_active = 2;
    // Graceful Maintenance activated
    bool gshut_active = 3;
    // Graceful Maintenance Local Preference set
    bool gshut_locpref_set = 4;
    // Graceful Maintenance Local Preference
    uint32 gshut_locpref = 5;
    // Graceful Maintenance number of AS prepends
    uint32 gshut_prepends = 6;
}

message bgp_nbr_af_ {
    string af_name = 1;
    bool is_neighbor_route_reflector_client = 2;
    bool is_legacy_pe_rt = 3;
    bool is_neighbor_af_capable = 4;
    bool is_soft_reconfiguration_inbound_allowed = 5;
    bool is_use_soft_reconfiguration_always_on = 6;
    bool remove_private_as_from_updates = 7;
    bool remove_private_as_entire_aspath_from_updates = 8;
    bool remove_private_as_from_inbound_updates = 9;
    bool remove_private_as_entire_aspath_from_inbound_updates = 10;
    bool flowspec_validation_d_isable = 11;
    bool flowspec_redirect_validation_d_isable = 12;
    string orr_group_name = 13;
    uint32 orr_group_index = 14;
    bool is_orr_root_address_configured = 15;
    bool advertise_afi = 16;
    bool advertise_afi_reorg = 17;
    bool advertise_afi_disable = 18;
    uint32 encapsulation_type = 19;
    uint32 advertise_rt_type = 20;
    bool advertise_afi_def_vrf_imp_disable = 21;
    bool advertise_evp_nv4_afi_def_vrf_imp_disable = 22;
    bool advertise_evp_nv6_afi_def_vrf_imp_disable = 23;
    bool advertise_afi_vrf_re_imp_disable = 24;
    bool advertise_evp_nv4_afi_vrf_re_imp_disable = 25;
    bool advertise_evp_nv6_afi_vrf_re_imp_disable = 26;
    bool advertise_afi_eo_r_ready = 27;
    bool always_use_next_hop_local = 28;
    bool sent_community_to_neighbor = 29;
    bool sent_gshut_community_to_neighbor = 30;
    bool sent_extended_community_to_neighbor = 31;
    bool neighbor_default_originate = 32;
    bool is_orf_sent = 33;
    bool is_update_deferred = 34;
    bool is_orf_send_scheduled = 35;
    uint32 update_group_number = 36;
    uint32 filter_group_index = 37;
    bool is_update_throttled = 38;
    bool is_update_leaving = 39;
    bool vpn_update_gen_enabled = 40;
    bool vpn_update_gen_trigger_enabled = 41;
    bool is_addpath_send_operational = 42;
    bool is_addpath_receive_operational = 43;
    uint32 neighbor_version = 44;
    uint32 weight = 45;
    uint32 max_prefix_limit = 46;
    bool use_max_prefix_warning_only = 47;
    bool max_prefix_discard_extra_paths = 48;
    bool max_prefix_exceed_discard_paths = 49;
    uint32 max_prefix_threshold_percent = 50;
    uint32 max_prefix_restart_time = 51;
    uint32 prefixes_accepted = 52;
    uint32 prefixes_synced = 53;
    uint32 prefixes_withdrawn_not_found = 54;
    uint32 prefixes_denied = 55;
    uint32 prefixes_denied_no_policy = 56;
    uint32 prefixes_denied_rt_permit = 57;
    uint32 prefixes_denied_orf_policy = 58;
    uint32 prefixes_denied_policy = 59;
    uint32 number_of_bestpaths = 60;
    uint32 number_of_best_externalpaths = 61;
    uint32 prefixes_advertised = 62;
    uint32 prefixes_be_advertised = 63;
    uint32 prefixes_suppressed = 64;
    uint32 prefixes_withdrawn = 65;
    bool is_peer_orf_capable = 66;
    bool is_advertised_orf_send = 67;
    bool is_received_orf_send_capable = 68;
    bool is_advertised_orf_receive = 69;
    bool is_received_orf_receive_capable = 70;
    bool is_advertised_graceful_restart = 71;
    bool is_graceful_restart_state_flag = 72;
    bool is_received_graceful_restart_capable = 73;
    bool is_add_path_send_capability_advertised = 74;
    bool is_add_path_send_capability_received = 75;
    bool is_add_path_receive_capability_advertised = 76;
    bool is_add_path_receive_capability_received = 77;
    bool is_ext_nh_encoding_capability_received = 78;
    bool is_ext_nh_encoding_capability_sent = 79;
    uint32 restart_time = 80;
    uint32 local_restart_time = 81;
    uint32 stale_path_timeout = 82;
    uint32 rib_purge_timeout_value = 83;
    bool neighbor_preserved_forwarding_state = 84;
    bool long_lived_graceful_restart_stale_time_configured = 85;
    uint32 long_lived_graceful_restart_stale_time_sent = 86;
    uint32 long_lived_graceful_restart_stale_time_accept = 87;
    bool long_lived_graceful_restart_capability_received = 88;
    uint32 long_lived_graceful_restart_stale_time_received = 89;
    bool neighbor_preserved_long_lived_forwarding_state = 90;
    bool neighbor_long_lived_graceful_restart_capable = 91;
    uint32 neighbor_long_lived_graceful_restart_time_remaining = 92;
    uint32 route_refreshes_received = 93;
    uint32 route_refreshes_sent = 94;
    uint32 refresh_target_version = 95;
    uint32 refresh_version = 96;
    uint32 refresh_acked_version = 97;
    bool is_prefix_orf_present = 98;
    uint32 orf_entries_received = 99;
    bool is_default_originate_sent = 100;
    string route_policy_prefix_orf = 101;
    string route_policy_in = 102;
    string route_policy_out = 103;
    string route_policy_default_originate = 104;
    bool is_neighbor_ebgp_without_inbound_policy = 105;
    bool is_neighbor_ebgp_without_outbound_policy = 106;
    bool is_as_override_set = 107;
    bool is_allow_as_in_set = 108;
    uint32 allow_as_in_count = 109;
    uint32 address_family_long_lived_time = 110;
    bool eo_r_received_in_read_only = 111;
    uint32 acked_version = 112;
    uint32 synced_acked_version = 113;
    uint32 outstanding_version = 114;
    uint32 outstanding_version_max = 115;
    bgp_perf_nbr_af_ neighbor_af_performance_statistics = 116;
    bool is_aigp_set = 117;
    bool is_rt_present = 118;
    repeated uint32 extended_community = 119;
    bool is_rt_present_standby = 120;
    repeated uint32 extended_community_standby = 121;
    bool accept_own_enabled = 122;
    bool selective_multipath_eligible = 123;
    bool afrpki_disable = 124;
    bool afrpki_use_validity = 125;
    bool afrpki_allow_invalid = 126;
    bool afrpki_signal_ibgp = 127;
    bool is_advertise_permanent_network = 128;
    bool is_send_mcast_attr = 129;
    bool import_stitching = 130;
    bool import_reoriginate = 131;
    bool import_reoriginate_stitching = 132;
    uint32 advertise_v4_flags = 133;
    uint32 advertise_v6_flags = 134;
    bool advertise_local_labeled_route_unicast = 135;
    uint32 prefixes_denied_non_cumulative = 136;
}

message nbr_af_p {
    bgp_nbr_af_ value = 1;
}

message bgp_notfntype_ {
    // Time since the last notification was sent or received (seconds)
    uint32 time_since_last_notification = 1;
    // Error code in last notification
    uint32 notification_error_code = 2;
    // Error subcode in last notification
    uint32 notification_error_subcode = 3;
    // Message data in last notification
    repeated uint32 last_notification_data = 4;
}

message bgp_nbr_msg_stats_unit {
    // Count
    uint32 count = 1;
    // Last timespec
    bgp_timespec last_time_spec = 2;
}

message bgp_nbr_msg_stats_op {
    // Transmit
    bgp_nbr_msg_stats_unit tx = 1;
    // Receive
    bgp_nbr_msg_stats_unit rx = 2;
}

message bgp_nbr_msg_stats {
    // Open
    bgp_nbr_msg_stats_op open = 1;
    // Notification
    bgp_nbr_msg_stats_op notification = 2;
    // Update
    bgp_nbr_msg_stats_op update = 3;
    // Keepalive
    bgp_nbr_msg_stats_op keepalive = 4;
    // Route refresh
    bgp_nbr_msg_stats_op route_refresh = 5;
    // Total
    bgp_nbr_msg_stats_op total = 6;
}
