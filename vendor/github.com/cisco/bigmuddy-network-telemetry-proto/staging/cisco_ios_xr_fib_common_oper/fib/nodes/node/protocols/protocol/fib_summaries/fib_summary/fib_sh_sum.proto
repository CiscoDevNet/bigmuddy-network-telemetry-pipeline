// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

//Path: Cisco-IOS-XR-fib-common-oper:fib/nodes/node/protocols/protocol/fib-summaries/fib-summary

package cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.fib_summaries.fib_summary;

// FIB summary statistics
message fib_sh_sum_KEYS {
    string node_name = 1;
    string protocol_name = 2;
    string vrf_name = 3;
    uint32 table_id = 4;
}

message fib_sh_sum {
    // The router-id
    bytes prefix = 50;
    // Table Id
    uint32 ss_tbl_id = 51;
    // Table Id Ptr
    uint32 ss_tbl_id_ptr = 52;
    // Virtual routing forwarding instance Id
    uint32 ss_vrf_id = 53;
    // Virtual router instance Id
    uint32 ss_vr_id = 54;
    // LBA configuration state
    string load_balancing = 55;
    // Number of forwarding elements linked to the table
    uint32 forwarding_elements = 56;
    // Number of routes
    uint32 routes = 57;
    // Number of inplace modifications
    uint32 prefix_in_place_modifications = 58;
    // Number of deleted stale leafs
    uint32 stale_prefix_deletes = 59;
    // Count of load sharing elements
    uint32 load_sharing_elements = 60;
    // Count of load sharing references
    uint64 load_sharing_references = 61;
    // Total memory used by load sharing elements
    uint32 total_load_share_element_bytes = 62;
    // Exclusive load sharing element
    fib_pl_ldi_count exclusive_load_sharing_element = 63;
    // Shared load sharing element
    fib_pl_ldi_count shared_load_sharing_element = 64;
    // Cross-table shared load sharing element
    fib_pl_ldi_count cross_shared_load_sharing_element = 65;
    // Label-shared load sharing element
    fib_pl_ldi_count label_shared_load_sharing_element = 66;
    // Total memory used by leaves
    uint32 leaves_used_bytes = 67;
    // Number of reresolved entries
    uint32 reresolve_entries = 68;
    // Number of old unresolved entries
    uint32 old_unresolve_entries = 69;
    // Number of new unresolved entries
    uint32 new_unresolve_entries = 70;
    // Number of total unresolved entries
    uint32 unresolve_entries = 71;
    // Number of routes dropped by CEF
    uint32 cef_route_drops = 72;
    // the number of routes dropped due to version mismatch
    uint64 cef_version_mismatch_route_drops = 73;
    // Number of entries in the route delete cache
    uint32 delete_cache_num_entries = 74;
    // Number of entries present on addition
    uint32 existing_leaves_revisions = 75;
    // Default prefix
    uint32 fib_default_prefix = 76;
    // Default prefix mask length
    uint32 fib_default_prefix_mask_length = 77;
    // Number of NHINFOS
    uint32 next_hops = 78;
    // Number of incomplete NHINFOS
    uint32 incomplete_next_hops = 79;
    // IP CEF resolution timer in seconds
    uint32 resolution_timer = 80;
    // IP CEF slow processing time in seconds
    uint32 slow_process_timer = 81;
    // IP CEF max resolution time in seconds
    uint32 max_resolution_timer = 82;
    // Number of prefixes with imposition LDI
    uint32 imposition_prefixes = 83;
    // Number of prefixes with extended path-list
    uint32 extended_prefixes = 84;
    // Number of routes updates with recycled label handled
    uint32 cefl_bl_recycled_routes = 85;
    // pd backwalks on LDI modify with backup path
    uint32 ldi_backwalks = 86;
    // Number of routes with FRR protection
    uint32 ss_prot_route_count = 87;
    // Number of lisp eid prefixes associated with table
    uint32 lisp_eid_prefixes = 88;
    // Number of lisp eid prefixes eligible for forwarding
    uint32 lisp_eid_valid_prefixes = 89;
    // Number of lisp rloc objects associated with table
    uint32 lisp_rloc_objects = 90;
    // VXLAN local Interface handle
    string ss_vxlan_ltep_ifh = 91;
    // Number of dropped pathlists
    uint32 ss_drop_pl_count = 92;
    // Distribution of prefix mask lengths
    fib_sh_pfx_masklen_distrib prefix_masklen_distribution = 93;
}

// FIB Pathlist and Loadinfo summary
message fib_pl_ldi_count {
    // Total memory used by load sharing elements in bytes
    uint32 total_load_sharing_element_bytes = 1;
    // Total count of references to load sharing elements
    uint64 total_load_sharing_element_references = 2;
    // Total count of Pathlist elements
    uint32 total_path_list_elements = 3;
    // Count of recursive Pathlist elements
    uint32 recursive_path_list_elements = 4;
    // Count of platform shared Pathlist elements
    uint32 platform_shared_path_list_elements = 5;
    // Count of Pathlist elements in retry
    uint32 retry_path_list_elements = 6;
    // Total count of Loadinfo elements
    uint32 total_load_info_elements = 7;
    // Count of recursive Loadinfo elements
    uint32 recursive_load_info_elements = 8;
    // Count of platform shared Loadinfo elements
    uint32 platform_shared_load_info_elements = 9;
}

// FIB Prefix Masklength counts
message fib_sh_pfx_masklen_cnt {
    // Mask length
    uint32 mask_length = 1;
    // Number of prefixes with given mask length
    uint32 number_of_prefixes = 2;
}

// FIB Prefix Masklengths distribution
message fib_sh_pfx_masklen_distrib {
    // Masklength counts for unicast prefixes
    repeated fib_sh_pfx_masklen_cnt unicast_prefixes = 1;
    // Masklength counts for broadcast prefixes
    repeated fib_sh_pfx_masklen_cnt broadcast_prefixes = 2;
    // Masklength counts for multicast prefixes
    repeated fib_sh_pfx_masklen_cnt multicast_prefix = 3;
}
