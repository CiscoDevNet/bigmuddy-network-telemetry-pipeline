// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.global_process_info;

// BGP process information common to all BGP processes
message bgp_global_process_info_bag_KEYS {
    string instance_name = 1;
}

message bgp_global_process_info_bag {
    // Name of the VRF
    string vrf_name = 50;
    // VRF ID
    uint32 vrfid = 51;
    // Global information
    bgp_global_process_info_gbl_ global = 52;
    // VRF information
    bgp_global_process_info_vrf_ vrf = 53;
}

message cluster_id_bag_ {
    // Cluster ID 
    uint32 cluster_id_val = 1;
    // Cluster ID type: number or IPv4 address
    uint32 cluster_id_type = 2;
}

message bgp_global_process_info_gbl_ {
    // Standalone or Distributed mode
    bool in_standalone_mode = 1;
    // Local autonomous system number
    uint32 local_as = 2;
    // Name of BGP instance
    string instance_name = 3;
    // No of times BGP has started
    uint32 restart_count = 4;
    // Update delay timeout time (in seconds)
    uint32 update_delay = 5;
    // Period (in seconds) of generic scanner runs
    uint32 generic_scan_period = 6;
    // Confederation ID
    uint32 confederation_id = 7;
    // Cluster ID
    uint32 cluster_id = 8;
    // Configured cluster ID
    uint32 configured_cluster_id = 9;
    // Cluster ID specified as an IP address
    bool is_cluster_id_specified_as_ip = 10;
    // All configured Cluster IDs
    repeated cluster_id_bag_ cluster_id_list = 11;
    // BGP AS Number Format
    uint32 asn_format = 12;
    // Configured segment-routing Global Block start value
    uint32 srgb_start_configured = 13;
    // Configured segment-routing Global Block end value
    uint32 srgb_end_configured = 14;
    // In use segment-routing Global Block start value
    uint32 srgb_start = 15;
    // In use Segment-routing Global Block end value
    uint32 srgb_end = 16;
    // Graceful Maintenance
    bool graceful_maintenance = 17;
    // Graceful Maintenance also for neighbors without GM configuration
    bool graceful_maint_all_nbrs = 18;
    // Retaining routes in RIB when BGP process stops while in Graceful Maintenance
    bool graceful_maint_retain_routes = 19;
}

message bgp_global_process_info_vrf_ {
    // VRF state
    bool vrf_is_active = 1;
    // Route Distinguisher
    bytes route_distinguisher = 2;
    // Router ID for the VRF
    string router_id = 3;
    // Configured router ID
    string configured_router_id = 4;
    // Redistribute iBGP into IGPs enabled
    bool is_redistribute_ibgp_to_ig_ps_enabled = 5;
    // Fast external fallover enabled
    bool is_fast_external_fallover_enabled = 6;
    // Bestpath: Treat missing MED as worst
    bool is_bestpath_missing_med_is_worst_enabled = 7;
    // Bestpath: Always compare MED
    bool is_bestpath_always_compare_med_enabled = 8;
    // Bestpath: Ignore AS path
    bool is_bestpath_ignore_as_path_enabled = 9;
    // Bestpath: Relax AS path for mpath
    bool is_bestpath_as_path_mpath_relax_enabled = 10;
    // Bestpath: Compare MED from confed peer
    bool is_bestpath_compare_med_from_confed_peer_enabled = 11;
    // Bestpath: Compare routerID for eBGP peers
    bool is_bestpath_compare_router_id_for_ebgp_peers_enabled = 12;
    // Bestpath: Ignore AIGP unless both paths have AIGP attribute
    bool is_bestpath_aigp_ignore_enabled = 13;
    // Multipath: Ignore everything AS path onwards for mpath
    bool is_multipath_as_path_ignore_onwards_enabled = 14;
    // Enforce first AS
    bool is_enforce_first_as_enabled = 15;
    // Default local preference
    uint32 default_local_preference = 16;
    // Default keepalive timer (seconds)
    uint32 keep_alive_time = 17;
    // Default hold timer (seconds)
    uint32 hold_time = 18;
    // Default min acceptable hold time from neighbor(seconds)
    uint32 min_acceptable_hold_time = 19;
    // Neighbor logging enabled
    bool is_neighbor_logging = 20;
    // Default metric configured
    bool is_default_metric_configured = 21;
    // Default metric
    uint32 default_metric = 22;
    // Default route originate configured
    bool is_default_originate_configured = 23;
    // Graceful restart enabled
    bool is_graceful_restart = 24;
    // Non-stop routing enabled
    bool is_nsr = 25;
    // Restart time (in seconds)
    uint32 restart_time = 26;
    // Stale path timeout time (in seconds)
    uint32 stale_path_time = 27;
    // RIB purge timeout time (in seconds)
    uint32 rib_purge_timeout = 28;
}

