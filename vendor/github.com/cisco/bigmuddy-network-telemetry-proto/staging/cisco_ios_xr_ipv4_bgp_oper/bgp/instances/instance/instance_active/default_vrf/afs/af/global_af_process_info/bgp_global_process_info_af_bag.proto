// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.global_af_process_info;

// BGP address family specific information common to all BGP processes
message bgp_global_process_info_af_bag_KEYS {
    string instance_name = 1;
    string af_name = 2;
}

message bgp_global_process_info_af_bag {
    // Name of the VRF
    string vrf_name = 50;
    // Address family id
    string af_name = 51;
    // Non-stop routing enabled
    bool is_nsr_enabled = 52;
    // Global information
    bgp_global_process_info_af_gbl_ global = 53;
    // VRF information
    bgp_global_process_info_af_vrf_ vrf = 54;
}

message bgp_timespec {
    // Seconds part of time value
    uint32 seconds = 1;
    // Nanoseconds part of time value
    uint32 nanoseconds = 2;
}

message bgp_rib_install_time_info {
    // RIB update time
    bgp_timespec update_time = 1;
    // RIB install time
    bgp_timespec install_time = 2;
    // Installed routes
    uint32 installed_count = 3;
    // Modified routes
    uint32 modified_count = 4;
    // Withdrawn routes
    uint32 withdrawn_count = 5;
    // Start version
    uint32 start_version = 6;
    // Target version
    uint32 target_version = 7;
}

message bgp_global_process_info_af_gbl_ {
    // Period (in seconds) of address-family scanner runs
    uint32 scanner_period = 1;
    // NH Tunnel Version
    uint32 nh_tunnel_version = 2;
    // Sync-group Version
    repeated uint32 syncgrp_version = 3;
    // Total prefixes of address-family scanned
    uint32 scan_prefixes = 4;
    // Number of prefixes scanned in a segment of address-family
    uint32 scan_segment_prefixes = 5;
    // Number of segments to scan all prefixes of address-family
    uint32 scan_segments = 6;
    // Is inter-AS install to pim on ASBR enabled
    bool inter_as_install_enabled = 7;
    // Is global table mcast enabled
    bool global_mcast_enabled = 8;
    // Is segmented mcast enabled
    bool segmented_mcast_enabled = 9;
    // Prefix validation disabled
    bool gblafrpki_disable = 10;
    // Prefix v. use validity
    bool gblafrpki_use_validity = 11;
    // Prefix v. allow invalid
    bool gblafrpki_allow_invalid = 12;
    // Prefix v. signal ibgp
    bool gblafrpki_signal_ibgp = 13;
    // Update wait-install enabled
    bool update_wait_install_enabled = 14;
    // Counter for RIB ack requests
    uint32 rib_ack_requests = 15;
    // Counter for RIB ack received
    uint32 rib_acks_received = 16;
    // Counter for slow RIB acks
    uint32 rib_slow_acks = 17;
    // RIB install info
    bgp_rib_install_time_info rib_install = 18;
    // Permanent Network Enabled
    bool is_perm_net_cfg = 19;
    // Count of removed perm paths
    uint32 perm_net_del_count = 20;
    // Count of stale perm paths
    uint32 perm_net_stale_del_count = 21;
    // Count of stale marked perm paths
    uint32 perm_net_stale_mark_count = 22;
    // Count of inserted perm paths
    uint32 perm_net_insert_count = 23;
    // Count of existing perm paths
    uint32 perm_net_existing_count = 24;
    // Count of perm nets given by RPL
    uint32 perm_net_rpl_query_count = 25;
    // Count of perm nets processed in RPL
    uint32 perm_net_rpl_process_count = 26;
    // Count of neighbors configured with perm net
    uint32 perm_nbr_count = 27;
    uint32 rib_perm_pelem_not_found_count = 28;
    uint32 rib_perm_path_not_found_count = 29;
    uint32 rib_perm_pelem_found_count = 30;
    uint32 rib_reg_path_found_count = 31;
    uint32 rib_perm_path_found_count = 32;
    // Count of freed perm pelems
    uint32 perm_pelem_free_count = 33;
    // Count of perm paths refreshed
    uint32 perm_path_refresh_count = 34;
    // Count of bumped perm pelems
    uint32 perm_pelem_bump_count = 35;
    // Count of bumped perm pelems
    uint32 perm_pelem_all_bump_count = 36;
}

message bgp_global_process_info_af_vrf_ {
    // Table state is active
    bool table_is_active = 1;
    // Table ID
    uint32 table_id = 2;
    // Table version
    uint32 table_version = 3;
    // RD version
    uint32 rd_version = 4;
    // Table version synced to RIB
    uint32 rib_version = 5;
    // NSR conv version
    uint32 nsr_conv_version = 6;
    // NSR is converged
    bool nsr_is_conv = 7;
    // Client reflection enabled
    bool client_reflection_enabled = 8;
    // Dampening enabled
    bool dampening_enabled = 9;
    // Distance for eBGP routes (external)
    uint32 ebgp_distance = 10;
    // Distance for iBGP routes (internal)
    uint32 ibgp_distance = 11;
    // Dist for aggregate routes (local)
    uint32 aggregates_distance = 12;
    // Update generation enabled for MED change
    bool dynamic_med_enabled = 13;
    // Delay in update generation after a MED change (in minutes)
    uint32 dynamic_med_interval = 14;
    // Dynamic MED timer running
    bool dynamic_med_timer_running = 15;
    // Dynamic MED timer value (in seconds) left on the timer
    uint32 dynamic_med_timer_value = 16;
    // Dynamic MED periodic timer running
    bool dynamic_med_periodic_timer_running = 17;
    // Dynamic MED periodic timer value (in seconds) left on the timer
    uint32 dynamic_med_periodic_timer_value = 18;
    // Received convergence notification from RIB
    bool rib_has_converged = 19;
    // Last convergence version received from RIB
    uint32 rib_convergence_version = 20;
    // Indicates if RIB table is in prefix-limit state
    bool is_rib_table_full = 21;
    // Version when RIB table became full (from non-full)
    uint32 rib_table_full_version = 22;
    // Is nexthop resoultion minimum prefix-length configured ?
    bool nexthop_resolution_minimum_prefix_length_configured = 23;
    // Nexthop resoultion minimum prefix-length
    uint32 nexthop_resolution_minimum_prefix_length = 24;
    // Selective eBGP multipath isenabled
    bool selective_ebgp_multipath_enabled = 25;
    // Selective iBGP multipath isenabled
    bool selective_ibgp_multipath_enabled = 26;
    // Selective eiBGP multipath isenabled
    bool selective_eibgp_multipath_enabled = 27;
    // Table version acked by RIB
    uint32 rib_acked_table_version = 28;
}

