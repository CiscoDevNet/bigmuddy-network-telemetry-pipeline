// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.advertised_paths.advertised_path;

// BGP path set
message bgp_path_multi_KEYS {
    string instance_name = 1;
    string af_name = 2;
    string rd = 3;
    string network = 4;
    string neighbor_address = 5;
}

message bgp_path_multi {
    repeated bgp_path_bag paths = 50;
    // Net Advertized Paths
    repeated bgp_path_adv_bag adv_path_info = 51;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

// MAC Address type
message MACAddressType {
    string value = 1;
}

message bgp_attr_rnh_addr_t {
    string len = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv6 Addr
    IPV6AddressType ipv6_address = 3;
    // MAC Addr
    MACAddressType mac_address = 4;
}

message bgp_evpn_gw_addr_t {
    string len = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv6 Addr
    IPV6AddressType ipv6_address = 3;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

message bgp_l2vpn_evpn_esi_t {
    bytes esi = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
}

message bgp_prefixtype {
    // Prefix
    bgp_addrtype prefix = 1;
    // Prefix length
    uint32 prefix_length = 2;
}

message bgp_te_tunnel {
    bytes tunnel_name = 1;
    // NH TE Tunnel info is present
    bool has_te_tunnel = 2;
    // Tunnel Up flag
    bool is_tunnel_up = 3;
    // Tunnel is stale
    bool is_tunnel_info_stale = 4;
    // Tunnel registered flag
    bool is_tunnel_registered = 5;
    // Tunnel need IPv6
    bool tunnel_v6_required = 6;
    // IPv6 enabled
    bool tunnel_v6_enabled = 7;
    // Binding label for the tunnel
    uint32 binding_label = 8;
    // Interface handle for the tunnel
    uint32 tunnel_if_handle = 9;
    // Time since the last rib update happened
    uint32 last_tunnel_update = 10;
}

message bgp_pedistlbl_entry_ {
    //  PE address
    string pe_address = 1;
    // Label
    uint32 label = 2;
}

message bgp_common_attr_entry_ {
    // Metric attribute present
    bool is_metric_present = 1;
    // Local Preference attribute present
    bool is_local_pref_present = 2;
    // Atomic aggregate attribute present
    bool is_atomic_aggregate_present = 3;
    // Aggregator attribute present
    bool is_aggregator_present = 4;
    // Origin attribute present
    bool is_origin_present = 5;
    // AS path attribute present
    bool is_as_path_present = 6;
    // Community attribute present
    bool is_community_present = 7;
    // Extended community attribute present
    bool is_extended_community_present = 8;
    // SSA attribute present
    bool is_ssa_present = 9;
    // Connector present
    bool is_connector_present = 10;
    // PMSI Attribute  present
    bool is_pmsi_present = 11;
    // PPMP Attribute  present
    bool is_pppmp_present = 12;
    // AIGP Present
    bool is_aigp_present = 13;
    // PE distinguisher label  attribute present
    bool is_pe_distinguisher_label_present = 14;
    // BGP LS attribute present
    bool is_ls_attribute_present = 15;
    // Label Index attribute present
    bool is_label_index_present = 16;
    // Neighbor AS number
    uint32 neighbor_as = 17;
    // AS where aggregation was last performed
    uint32 aggregator_as = 18;
    // Address where aggregation was performed
    string aggregator_address = 19;
    // Metric
    uint32 metric = 20;
    // Local preference
    uint32 local_preference = 21;
    // Origin
    uint32 origin = 22;
    // AS path attribute
    repeated uint32 as_path = 23;
    // Community attribute
    repeated uint32 community = 24;
    // Extended community Flags
    uint32 extended_community_flags = 25;
    // Extended community attribute
    repeated uint32 extended_community = 26;
    // Unknown attributes
    repeated uint32 unknown_attributes = 27;
    // Cluster list attribute
    repeated uint32 cluster_list = 28;
    // Originator attribute
    string originator = 29;
    // L2TPv3 session id
    uint32 l2_t_pv3_session_id = 30;
    // L2TPv3 Cookie
    repeated uint32 l2_t_pv3_cookie = 31;
    // Connector Type
    uint32 connector_type = 32;
    // Connector Value
    repeated uint32 connector_value = 33;
    // AIGP metric value
    uint64 aigp_metric_value = 34;
    // PMSI Type
    uint32 pmsi_type = 35;
    // PMSI Value
    uint32 pmsi_flags = 36;
    // PMSI label
    uint32 pmsi_label = 37;
    // PMSI Value
    repeated uint32 pmsi_value = 38;
    // PPMP Value
    uint32 ppm_pvalue = 39;
    // PE distinguisher label attribute
    repeated bgp_pedistlbl_entry_ pe_distinguisher_label = 40;
    // BGP LS attribute
    repeated uint32 ls_attr = 41;
    // Label Index attribute
    repeated uint32 label_index_attr = 42;
}

message bgp_attr_ {
    // AS path encoded as 2-byte
    bool is_as_path2_byte = 1;
    // Application gateway present
    bool is_application_gateway_present = 2;
    // BGP ATTR_SET attribute present
    bool is_attr_set_present = 3;
    // AIGP set by policy inbound IGP 
    bool set_aigp_inbound_igp = 4;
    // AIGP set by policy inbound metric
    bool set_aigp_inbound_metric = 5;
    // RNH Attribute  present
    bool is_rnh_present = 6;
    // RIB RNH Attribute  present
    bool is_ribrnh_present = 7;
    // Attribute key number
    uint32 attribute_key_number = 8;
    // Attribute reuse ID Configured
    bool attribute_reuse_id_config = 9;
    // Attribute reuse ID maximum ID
    uint32 attribute_reuse_id_max_id = 10;
    // Attribute reuse ID nodes
    uint32 attribute_reuse_id_node = 11;
    // Attribute reuse ID current ID
    uint32 attribute_reuse_id_current = 12;
    // Attribute reuse ID allocated keys
    uint32 attribute_reuse_id_keys = 13;
    // Attribute reuse ID timer in seconds
    uint32 attribute_reuse_id_recover_sec = 14;
    // VPN Distinguisher
    uint32 vpn_distinguisher = 15;
    // Common attributes
    bgp_common_attr_entry_ common_attributes = 16;
    // ATTR_SET attribute
    bgp_common_attr_entry_ attr_set = 17;
    // RNH Type
    uint32 rnh_type = 18;
    // RNH Length
    uint32 rnh_len = 19;
    // RNH Address Length
    uint32 rnh_addr_len = 20;
    // RNH Address
    bgp_attr_rnh_addr_t rnh_addr = 21;
    // RIB RNH Table
    uint32 ribrnh_table = 22;
    // RIB RNH MAC Address
    string ribrnh_mac = 23;
    // RIB RNH IP Address
    bgp_addrtype ribrnh_ip = 24;
    // RIB RNH IP Table
    uint32 ribrnhip_table = 25;
    // RIB RNH Vni
    uint32 ribrnh_vni = 26;
    // RIB RNH Encapsulation Type
    uint32 ribrnh_encap = 27;
}

message bgp_advinfo_type_ {
    // Entry is a neighbor (not an update group)
    bool is_neighbor = 1;
    // Neighbor Address
    bgp_addrtype neighbor_address = 2;
    // Update group index
    uint32 update_group_number = 3;
}

message bgp_path_ {
    // BGP prefix
    bgp_prefixtype bgp_prefix = 1;
    // Neighbor address
    bgp_addrtype neighbor_address = 2;
    // Route Type of path
    string route_type = 3;
    // Path attributes are usable
    bool is_path_valid = 4;
    // Path suppressed due to dampening
    bool is_path_damped = 5;
    // Path entry held to remember history
    bool is_path_history_held = 6;
    // Received over an internal link
    bool is_internal_path = 7;
    // Best available path
    bool is_best_path = 8;
    // Best available path within AS
    bool is_as_best = 9;
    // Best available path within AS in speaker
    bool is_spkr_as_best = 10;
    // Partial best path within distributed speaker
    bool is_partial_best = 11;
    // Path suppressed due to aggregation
    bool is_aggregation_suppressed = 12;
    // net import dampened
    bool is_import_dampened = 13;
    // net import suspect
    bool is_import_suspect = 14;
    // Not advertised to any peer
    bool is_path_not_advertised = 15;
    // Not advertised to EBGPs
    bool is_path_not_advertised_to_ebg_ps = 16;
    // Not advertised outside local AS
    bool is_path_advertised_local_as_only = 17;
    // Path received from route reflector
    bool is_path_from_route_reflector = 18;
    // Path is received only
    bool is_path_received_only = 19;
    // Received path used without modification
    bool is_received_path_not_modified = 20;
    // Path sourced locally
    bool is_path_locally_sourced = 21;
    // Path is a locally created aggregate
    bool is_path_local_aggregate = 22;
    // Path sourced by network command
    bool is_path_from_network_command = 23;
    // Path sourced by redistribute command
    bool is_path_from_redistribute_command = 24;
    // Path is imported
    bool is_path_imported = 25;
    // Path is reoriginated
    bool is_path_reoriginated = 26;
    // Path is reoriginated with stitching RTs
    bool is_path_reoriginated_stitching = 27;
    // Path is not in the vrf
    bool is_path_vpn_only = 28;
    // Path received from confederation peer
    bool is_path_from_confederation_peer = 29;
    // Path synchronized with IGP
    bool is_path_synced_with_igp = 30;
    // Path is one of multipath best routes
    bool is_path_multipath = 31;
    // Path is a candidate for multipath import
    bool is_path_imp_candidate = 32;
    // Stale routes learnt before neighbor restarts
    bool is_path_stale = 33;
    // Long lived stale routes learnt before neighbor restarts
    bool is_path_long_lived_stale = 34;
    // Path is a backup path 
    bool is_path_backup = 35;
    // Path is a backup path to protect multipaths
    bool is_path_backup_protect_multipath = 36;
    // Path is a best external path
    bool is_path_best_external = 37;
    // Path is an additional-path
    bool is_path_additional_path = 38;
    // Path is redirected to Null0
    bool is_path_nexthop_discarded = 39;
    // Next hop
    bgp_addrtype next_hop = 40;
    // NH TE tunnel information
    bgp_te_tunnel nhte_tunnel = 41;
    // Path has received label
    bool has_rcvd_label = 42;
    // Path received label
    uint32 rcvd_label = 43;
    // Path has local label
    bool has_local_net_label = 44;
    // Path local label
    uint32 local_label = 45;
    // IGP metric to the gateway
    uint32 igp_metric = 46;
    // Weight for the path
    uint32 path_weight = 47;
    // Router ID of the neighbor for the path
    string neighbor_router_id = 48;
    // Path has MDT Group Address
    bool has_mdt_group_addr = 49;
    // IPv4 MDT Group Address for the path
    bgp_addrtype mdt_group_addr = 50;
    // Path block size
    uint32 l2_vpn_size = 51;
    // Path has EVPN ESI
    bool has_esi = 52;
    // L2VPN EVPN ESI
    bgp_l2vpn_evpn_esi_t l2_vpn_evpn_esi = 53;
    // Path has GW Address
    bool has_gw_addr = 54;
    // Path GW Address
    bgp_evpn_gw_addr_t gw_addr = 55;
    // Path has second received label
    bool has_second_label = 56;
    // Path second received label
    uint32 second_label = 57;
    // L2VPN Circuit Status Value
    repeated uint32 l2vpn_circuit_status_value = 58;
    // Number of times this route has flapped
    uint32 path_flap_count = 59;
    // Seconds since route first flapped
    uint32 seconds_since_first_flap = 60;
    // Seconds until route is unsuppressed
    uint32 time_to_unsuppress = 61;
    // Dampening penalty
    uint32 dampen_penalty = 62;
    // Half-life time for the penalty
    uint32 halflife_time = 63;
    // Value to start suppressing a route
    uint32 suppress_penalty = 64;
    // Value to start reusing a route
    uint32 reuse_value = 65;
    // Maximum duration to suppress a stable route
    uint32 maximum_suppress_time = 66;
    // Stage where the path lost to the best path or group best
    string best_path_comp_stage = 67;
    // Neighbor address of the path which won best path comparison
    bgp_addrtype best_path_comp_winner = 68;
    // Path ID of the path which won best path comparison
    uint32 best_path_id_comp_winner = 69;
    // Flags associated with path
    uint64 path_flags = 70;
    // Path import flags
    uint32 path_import_flags = 71;
    // Best path ID; DEPRECATED BYLocalPathId
    uint32 best_path_id = 72;
    // Local path ID
    uint32 local_path_id = 73;
    // Received path ID
    uint32 rcvd_path_id = 74;
    // Table version # for pelem
    uint32 path_table_version = 75;
    // Local peers that this prefix has been advertised to
    repeated bgp_advinfo_type_ local_peers_advertised_to = 76;
    // PE peers that this prefix has been advertised to
    repeated bgp_advinfo_type_ pe_peers_advertised_to = 77;
    // ORR Best path Bitfields
    repeated bgp_advinfo_type_ best_path_orr_bitfields = 78;
    // ORR Add path Bitfields
    repeated bgp_advinfo_type_ add_path_orr_bitfields = 79;
    // Net could be advertised to PE peers
    bool advertisedto_pe = 80;
    // Is net failed installed in RIB
    bool rib_failed = 81;
    // RPKI origin validation state
    uint32 sn_rpki_origin_as_validity = 82;
    // Display validity state ?
    bool show_rpki_origin_as_validity = 83;
    // IBGP signalled validation
    bool ibgp_signaled_validity = 84;
    // RPKI originAS V. Disabled
    bool rpki_origin_as_validation_disabled = 85;
    // Accept-Own
    bool accept_own_path = 86;
    // Accept-Own self-originated
    bool accept_own_self_originated_p_ath = 87;
    // Total AIGP metric
    uint64 aigp_metric = 88;
    // Is MVPN single forwarder PE path
    bool mvpn_sfs_path = 89;
    // Is Fspec invalid path
    bool fspec_invalid_path = 90;
    // Path has Mvpn nbr Address
    bool has_mvpn_nbr_addr = 91;
    // Mvpn nbr Address for the path
    bgp_addrtype mvpn_nbr_addr = 92;
    // Path has MVPN nexthop Address
    bool has_mvpn_nexthop_addr = 93;
    // Mvpn nexthop Address for the path
    bgp_addrtype mvpn_nexthop_addr = 94;
    // Path has MVPN PMSI feedback
    bool has_mvpn_pmsi = 95;
    // Mvpn PMSI Type
    uint32 mvpn_pmsi_type = 96;
    // Mvpn PMSI Value
    uint32 mvpn_pmsi_flags = 97;
    // Mvpn PMSI label
    uint32 mvpn_pmsi_label = 98;
    // Mvpn PMSI Value
    repeated uint32 mvpn_pmsi_value = 99;
    // Path has MVPN EXTCOMM feedback
    bool has_mvpn_extcomm = 100;
    // Mvpn Extended community attribute
    repeated uint32 extended_community = 101;
    // Mvpn path flags
    uint32 mvpn_path_flags = 102;
    // Path has local nexthop
    bool local_nh = 103;
    // Path subject to RT-set net limit
    bool rt_set_limit_enabled = 104;
    // RT-set id of the path
    uint32 path_rt_set_id = 105;
    // Count in RT-set
    uint32 path_rt_set_route_count = 106;
    // Path can be installed in AF RIB
    bool is_path_af_install_eligible = 107;
    // Path is of type Permanent path
    bool is_permanent_path = 108;
    // Marked for graceful shutdown
    bool graceful_shutdown = 109;
    // Path was learnt by labeled-unicast SAFI
    bool labeled_unicast_safi_path = 110;
}

// BGP path
message bgp_path_bag {
    // No path exists. All 'sp_path' fields except 'sp_path->bag_prefix' are invalid
    bool no_path = 1;
    // Address family identifier
    string af_name = 2;
    // Neighbor Address
    bgp_addrtype neighbor_address = 3;
    // Process instance ID
    uint32 process_instance_id = 4;
    // LSD label space is exhausted
    bool label_oor = 5;
    // Label Version when OOR happens
    uint32 label_o_or_version = 6;
    // LSD label allocation failed 
    bool label_fail = 7;
    // Path information
    bgp_path_ path_information = 8;
    // Attributes after inbound policy applied
    bgp_attr_ attributes_after_policy_in = 9;
    // Route Distinguisher
    string route_distinguisher = 10;
    // Source Route Distinguisher
    string source_route_distinguisher = 11;
    // Version of BGP Prefix Table
    uint32 prefix_version = 12;
    // Name of the VRF
    string vrf_name = 13;
    // Name of the source VRF
    string source_vrf_name = 14;
    // Address family identifier
    string srcaf_name = 15;
}

// BGP path with advertised attributes information
message bgp_path_adv_bag {
    // No path exists All 'sp_path_in' fields except 'sp_path_in->bag_prefix' are invalid.  All 'sp_path_out' fields are invalid.
    bool no_path = 1;
    // Address family identifier
    string af_name = 2;
    // Neighbor Address
    bgp_addrtype neighbor_address = 3;
    // Path information after inbound policy
    bgp_path_ path_info_after_policy_in = 4;
    // Path information after outbound policy
    bgp_path_ path_info_after_policy_out = 5;
    // Attributes after inbound policy
    bgp_attr_ attributes_after_policy_in = 6;
    // Attributes after outbound policy
    bgp_attr_ attributes_after_policy_out = 7;
    // Route Distinguisher
    string route_distinguisher = 8;
    // Source Route Distinguisher
    string source_route_distinguisher = 9;
    // Name of the VRF
    string vrf_name = 10;
}

